{"./":{"url":"./","title":"问题笔记","keywords":"","body":"Introduction MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter1/":{"url":"chapter1/","title":"编程工具","keywords":"","body":"编程工具 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter1/section1.html":{"url":"chapter1/section1.html","title":"文档编辑","keywords":"","body":"文档编辑 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter1/section2.html":{"url":"chapter1/section2.html","title":"集成开发","keywords":"","body":"集成开发 1. 同时安装Python2和Python3 系统版本：CenterOS 7 64位 1810 安装版本：Python 3.6.9 安装方式：源代码安装 参考文档：Centos7安装python3并与python2共存 转载地址：https://cloud.tencent.com/developer/news/228090 原文地址：https://kuaibao.qq.com/s/20180531G0D1B000?refer=cp_1026 ​ CenterOS 7 默认安装了Python 2.7，因为再CenterOS中有些地方会用得到，但是目前主流版本为Python3.X，所以需要同时安装两个版本的Python。 1.1 查看Python版本 # python -V Python 2.7.5 1.2 查看Python可执行文件位置 # which python /usr/bin/python 1.3 查看Python软链 # ll python lrwxrwxrwx 1 root root 7 Jul 11 10:58 python -> python2 1.4 安装依赖库 # yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make 1.5 备份软链 # mv python python.bak 1.6 下载编译安装包 # wget https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tar.xz 1.7 解压安装包 # tar -xvJf Python-3.6.9.tar.xz 注意：-xvJf中第三个字母J为大写 1.8 编译 # cd Python-3.6.9 # ./configure prefix=/usr/local/python3 注意：./之后不需要空格 1.9 安装 # make ...... # make install ​ 安装完成后，/usr/local/目录下会多出一个python3的目录。 1.10 添加软链 # ln -s /usr/local/python3/bin/python3 /usr/bin/python 1.11 测试 # python -V Python 3.6.9 # python2 -V Python 2.7.5 1.12 修改其他配置 # vi /usr/bin/yum ​ 将#!/usr/bin/python修改为#!/usr/bin/python2 # vi /usr/libexec/urlgrabber-ext-down ​ 将#!/usr/bin/python修改为#!/usr/bin/python2 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter1/section3.html":{"url":"chapter1/section3.html","title":"辅助工具","keywords":"","body":"辅助工具 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter2/":{"url":"chapter2/","title":"集成开发","keywords":"","body":"集成开发 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter2/section1.html":{"url":"chapter2/section1.html","title":"Spring","keywords":"","body":"Spring MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter2/section2.html":{"url":"chapter2/section2.html","title":"SpringBoot","keywords":"","body":"SpringBoot MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter2/section3.html":{"url":"chapter2/section3.html","title":"Java","keywords":"","body":"Java MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter2/section4.html":{"url":"chapter2/section4.html","title":"Python3","keywords":"","body":"Python3 1. pip安装失败 报错关键信息如下： There was a problem confirming the ssl certificate: Can't connect to HTTPS URL because the SSL module is not available windows10下解决方案： 总是提示SSL有问题，然而只是SSL就在bin里边，所以没有生效。 Linux下一般需要安装openssl Windows把安装目录下anaconda3\\Library\\bin 加入到系统环境变量后重启IDE或命令行即可。 主要参考：https://github.com/conda/conda/issues/6064 原文链接：win10下 pip install 后Can't connect to HTTPS URL because the SSL module is not available - cainiaochirou的博客 - CSDN博客 https://blog.csdn.net/cainiaochirou/article/details/90739310 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter3/":{"url":"chapter3/","title":"运行维护","keywords":"","body":"运行维护 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter3/section1.html":{"url":"chapter3/section1.html","title":"Linux","keywords":"","body":"Linux MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter3/section2.html":{"url":"chapter3/section2.html","title":"Windows","keywords":"","body":"Windows MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter3/section3.html":{"url":"chapter3/section3.html","title":"其他","keywords":"","body":"其他 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter4/":{"url":"chapter4/","title":"数据库","keywords":"","body":"数据库 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter4/section1.html":{"url":"chapter4/section1.html","title":"MySQL安装","keywords":"","body":"MySQL安装 1.阿里云ECS安装mysql 1.1 XShell远程连接 Xshell 6 (Build 0149) Copyright (c) 2002 NetSarang Computer, Inc. All rights reserved. Type `help' to learn how to use Xshell prompt. [D:\\~]$ Connecting to 47.105.58.53:22022... Connection established. To escape to local shell, press 'Ctrl+Alt+]'. WARNING! The remote SSH server rejected X11 forwarding request. Last failed login: Sun Sep 22 11:16:25 CST 2019 from 219.218.22.247 on ssh:notty There was 1 failed login attempt since the last successful login. Last login: Fri Sep 20 09:07:07 2019 from 219.155.5.218 Welcome to Alibaba Cloud Elastic Compute Service ! ​ 以上为正常登入的情况 1.2 检查是否已安装 [root@iZm5e8c13rno7bir9cx8sqZ ~]# rpm -qa | grep mysql ​ 以上即未安装mysql 1. 3下载Yum Repository [root@iZm5e8c13rno7bir9cx8sqZ ~]# wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm --2019-09-24 09:19:11-- http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm Resolving dev.mysql.com (dev.mysql.com)... 137.254.60.11 Connecting to dev.mysql.com (dev.mysql.com)|137.254.60.11|:80... connected. HTTP request sent, awaiting response... 301 Moved Permanently Location: https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm [following] --2019-09-24 09:19:11-- https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm Connecting to dev.mysql.com (dev.mysql.com)|137.254.60.11|:443... connected. HTTP request sent, awaiting response... 302 Found Location: https://repo.mysql.com//mysql57-community-release-el7-10.noarch.rpm [following] --2019-09-24 09:19:12-- https://repo.mysql.com//mysql57-community-release-el7-10.noarch.rpm Resolving repo.mysql.com (repo.mysql.com)... 104.127.195.16 Connecting to repo.mysql.com (repo.mysql.com)|104.127.195.16|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 25548 (25K) [application/x-redhat-package-manager] Saving to: ‘mysql57-community-release-el7-10.noarch.rpm’ 100%[==========================================================================================>] 25,548 --.-K/s in 0.06s 2019-09-24 09:19:13 (451 KB/s) - ‘mysql57-community-release-el7-10.noarch.rpm’ saved [25548/25548] -c: No such file or directory No URLs found in -c. FINISHED --2019-09-24 09:19:13-- Total wall clock time: 2.1s Downloaded: 1 files, 25K in 0.06s (451 KB/s) ​ 以上操作通过wget从MysSQL官网下载了文件mysql57-community-release-el7-10.noarch.rpm 1.4 安装Yum Repository [root@iZm5e8c13rno7bir9cx8sqZ ~]# yum -y install mysql57-community-release-el7-10.noarch.rpm Loaded plugins: fastestmirror Examining mysql57-community-release-el7-10.noarch.rpm: mysql57-community-release-el7-10.noarch Marking mysql57-community-release-el7-10.noarch.rpm to be installed Resolving Dependencies --> Running transaction check ---> Package mysql57-community-release.noarch 0:el7-10 will be installed --> Finished Dependency Resolution Dependencies Resolved ==================================================================================================================================== Package Arch Version Repository Size ==================================================================================================================================== Installing: mysql57-community-release noarch el7-10 /mysql57-community-release-el7-10.noarch 30 k Transaction Summary ==================================================================================================================================== Install 1 Package Total size: 30 k Installed size: 30 k Downloading packages: Running transaction check Running transaction test Transaction test succeeded Running transaction Installing : mysql57-community-release-el7-10.noarch 1/1 Verifying : mysql57-community-release-el7-10.noarch 1/1 Installed: mysql57-community-release.noarch 0:el7-10 Complete! ​ 以上操作即将该yum源安装到系统中 1.5 安装MySQL [root@iZm5e8c13rno7bir9cx8sqZ ~]# yum -y install mysql-community-server Loaded plugins: fastestmirror Determining fastest mirrors base | 3.6 kB 00:00:00 epel | 5.4 kB 00:00:00 extras | 2.9 kB 00:00:00 mysql-connectors-community | 2.5 kB 00:00:00 mysql-tools-community | 2.5 kB 00:00:00 mysql57-community | 2.5 kB 00:00:00 updates | 2.9 kB 00:00:00 (1/9): extras/7/x86_64/primary_db | 152 kB 00:00:00 (2/9): base/7/x86_64/group_gz | 165 kB 00:00:00 (3/9): epel/x86_64/updateinfo | 1.0 MB 00:00:00 (4/9): base/7/x86_64/primary_db | 6.0 MB 00:00:00 (5/9): epel/x86_64/primary_db | 6.8 MB 00:00:00 (6/9): updates/7/x86_64/primary_db | 1.1 MB 00:00:00 (7/9): mysql-connectors-community/x86_64/primary_db | 44 kB 00:00:00 (8/9): mysql-tools-community/x86_64/primary_db | 61 kB 00:00:00 (9/9): mysql57-community/x86_64/primary_db | 184 kB 00:00:00 Resolving Dependencies --> Running transaction check ---> Package mysql-community-server.x86_64 0:5.7.27-1.el7 will be installed --> Processing Dependency: mysql-community-common(x86-64) = 5.7.27-1.el7 for package: mysql-community-server-5.7.27-1.el7.x86_64 --> Processing Dependency: mysql-community-client(x86-64) >= 5.7.9 for package: mysql-community-server-5.7.27-1.el7.x86_64 --> Processing Dependency: libaio.so.1(LIBAIO_0.4)(64bit) for package: mysql-community-server-5.7.27-1.el7.x86_64 --> Processing Dependency: libaio.so.1(LIBAIO_0.1)(64bit) for package: mysql-community-server-5.7.27-1.el7.x86_64 --> Processing Dependency: libaio.so.1()(64bit) for package: mysql-community-server-5.7.27-1.el7.x86_64 --> Running transaction check ---> Package libaio.x86_64 0:0.3.109-13.el7 will be installed ---> Package mysql-community-client.x86_64 0:5.7.27-1.el7 will be installed --> Processing Dependency: mysql-community-libs(x86-64) >= 5.7.9 for package: mysql-community-client-5.7.27-1.el7.x86_64 ---> Package mysql-community-common.x86_64 0:5.7.27-1.el7 will be installed --> Running transaction check ---> Package mariadb-libs.x86_64 1:5.5.60-1.el7_5 will be obsoleted --> Processing Dependency: libmysqlclient.so.18()(64bit) for package: 2:postfix-2.10.1-7.el7.x86_64 --> Processing Dependency: libmysqlclient.so.18(libmysqlclient_18)(64bit) for package: 2:postfix-2.10.1-7.el7.x86_64 ---> Package mysql-community-libs.x86_64 0:5.7.27-1.el7 will be obsoleting --> Running transaction check ---> Package mysql-community-libs-compat.x86_64 0:5.7.27-1.el7 will be obsoleting --> Finished Dependency Resolution Dependencies Resolved ==================================================================================================================================== Package Arch Version Repository Size ==================================================================================================================================== Installing: mysql-community-libs x86_64 5.7.27-1.el7 mysql57-community 2.2 M replacing mariadb-libs.x86_64 1:5.5.60-1.el7_5 mysql-community-libs-compat x86_64 5.7.27-1.el7 mysql57-community 2.0 M replacing mariadb-libs.x86_64 1:5.5.60-1.el7_5 mysql-community-server x86_64 5.7.27-1.el7 mysql57-community 165 M Installing for dependencies: libaio x86_64 0.3.109-13.el7 base 24 k mysql-community-client x86_64 5.7.27-1.el7 mysql57-community 24 M mysql-community-common x86_64 5.7.27-1.el7 mysql57-community 275 k Transaction Summary ==================================================================================================================================== Install 3 Packages (+3 Dependent packages) Total download size: 194 M Downloading packages: (1/6): libaio-0.3.109-13.el7.x86_64.rpm | 24 kB 00:00:00 warning: /var/cache/yum/x86_64/7/mysql57-community/packages/mysql-community-common-5.7.27-1.el7.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEY Public key for mysql-community-common-5.7.27-1.el7.x86_64.rpm is not installed (2/6): mysql-community-common-5.7.27-1.el7.x86_64.rpm | 275 kB 00:00:00 (3/6): mysql-community-libs-5.7.27-1.el7.x86_64.rpm | 2.2 MB 00:00:00 (4/6): mysql-community-libs-compat-5.7.27-1.el7.x86_64.rpm | 2.0 MB 00:00:00 (5/6): mysql-community-client-5.7.27-1.el7.x86_64.rpm | 24 MB 00:00:02 (6/6): mysql-community-server-5.7.27-1.el7.x86_64.rpm | 165 MB 00:00:14 ------------------------------------------------------------------------------------------------------------------------------------ Total 12 MB/s | 194 MB 00:00:16 Retrieving key from file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql Importing GPG key 0x5072E1F5: Userid : \"MySQL Release Engineering \" Fingerprint: a4a9 4068 76fc bd3c 4567 70c8 8c71 8d3b 5072 e1f5 Package : mysql57-community-release-el7-10.noarch (installed) From : /etc/pki/rpm-gpg/RPM-GPG-KEY-mysql Running transaction check Running transaction test Transaction test succeeded Running transaction Installing : mysql-community-common-5.7.27-1.el7.x86_64 1/7 Installing : mysql-community-libs-5.7.27-1.el7.x86_64 2/7 Installing : mysql-community-client-5.7.27-1.el7.x86_64 3/7 Installing : libaio-0.3.109-13.el7.x86_64 4/7 Installing : mysql-community-server-5.7.27-1.el7.x86_64 5/7 Installing : mysql-community-libs-compat-5.7.27-1.el7.x86_64 6/7 Erasing : 1:mariadb-libs-5.5.60-1.el7_5.x86_64 7/7 Verifying : mysql-community-libs-compat-5.7.27-1.el7.x86_64 1/7 Verifying : mysql-community-common-5.7.27-1.el7.x86_64 2/7 Verifying : mysql-community-libs-5.7.27-1.el7.x86_64 3/7 Verifying : mysql-community-server-5.7.27-1.el7.x86_64 4/7 Verifying : mysql-community-client-5.7.27-1.el7.x86_64 5/7 Verifying : libaio-0.3.109-13.el7.x86_64 6/7 Verifying : 1:mariadb-libs-5.5.60-1.el7_5.x86_64 7/7 Installed: mysql-community-libs.x86_64 0:5.7.27-1.el7 mysql-community-libs-compat.x86_64 0:5.7.27-1.el7 mysql-community-server.x86_64 0:5.7.27-1.el7 Dependency Installed: libaio.x86_64 0:0.3.109-13.el7 mysql-community-client.x86_64 0:5.7.27-1.el7 mysql-community-common.x86_64 0:5.7.27-1.el7 Replaced: mariadb-libs.x86_64 1:5.5.60-1.el7_5 Complete! ​ 以上即通过yum方式安装MySQL 1.6 启动MySQL [root@iZm5e8c13rno7bir9cx8sqZ ~]# systemctl start mysqld.service ​ 通过以上命令启动MySQL服务 1.7 查看MySQL运行状态 [root@iZm5e8c13rno7bir9cx8sqZ ~]# systemctl status mysqld.service ● mysqld.service - MySQL Server Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled) Active: active (running) since Tue 2019-09-24 09:23:12 CST; 17s ago Docs: man:mysqld(8) http://dev.mysql.com/doc/refman/en/using-systemd.html Process: 5344 ExecStart=/usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid $MYSQLD_OPTS (code=exited, status=0/SUCCESS) Process: 5271 ExecStartPre=/usr/bin/mysqld_pre_systemd (code=exited, status=0/SUCCESS) Main PID: 5347 (mysqld) CGroup: /system.slice/mysqld.service └─5347 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid Sep 24 09:23:06 iZm5e8c13rno7bir9cx8sqZ systemd[1]: Starting MySQL Server... Sep 24 09:23:12 iZm5e8c13rno7bir9cx8sqZ systemd[1]: Started MySQL Server. ​ 如上所示，MySQL服务正在运行 1.8 查看密码 [root@iZm5e8c13rno7bir9cx8sqZ ~]# grep \"password\" /var/log/mysqld.log 2019-09-24T01:23:08.030808Z 1 [Note] A temporary password is generated for root@localhost: LpsmHd:Pw8N7 ​ 通过以上命令可查看MySQL的初始密码 1.9 登录MySQL [root@iZm5e8c13rno7bir9cx8sqZ ~]# mysql -u root -p Enter password: Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 2 Server version: 5.7.27 Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. mysql> ​ 通过用户名密码可以通过mysql -u root -p命令登录MySQL 1.10 查看所有数据库； mysql> show databases; ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement. ​ 如上所示，登陆之后，MySQL拒绝了我查看所有数据库的命令 ​ 网查解决方式如下，： ​ MySQL版本5.7.6版本以前用户可以使用如下命令： mysql> SET PASSWORD = PASSWORD('Xiaoming250'); ​ MySQL版本5.7.6版本开始的用户可以使用如下命令： mysql> ALTER USER USER() IDENTIFIED BY 'Xiaoming250'; 版权声明：本文为CSDN博主「不忘初_心」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。 原文链接：https://blog.csdn.net/muziljx/article/details/81541896 1.11 修改密码 mysql> ALTER USER USER() IDENIFIED BY '123456'; ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'IDENIFIED BY '123456'' at line 1 mysql> set PASSWORD = PASSWORD('123456'); ERROR 1819 (HY000): Your password does not satisfy the current policy requirements mysql> set PASSWORD = PASSWORD('1Qw121saa$12@1213'); Query OK, 0 rows affected, 1 warning (0.00 sec) ​ 如上所示 1.12 再次查询所有数据库 mysql> show databases; +--------------------+ | Database | +--------------------+ | information_schema | | mysql | | performance_schema | | sys | +--------------------+ 4 rows in set (0.00 sec) 1.13 退出MySQL mysql> exit; Bye [root@iZm5e8c13rno7bir9cx8sqZ ~]# 1.14 说明 参考文档：Linux之yum安装MySQL - 简书 在线地址：https://www.jianshu.com/p/136003ffce41 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter4/section2.html":{"url":"chapter4/section2.html","title":"SqLite","keywords":"","body":"SqLite MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter4/section3.html":{"url":"chapter4/section3.html","title":"Redis","keywords":"","body":"Redis MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter4/section4.html":{"url":"chapter4/section4.html","title":"Navicat","keywords":"","body":"Navicat MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter5/":{"url":"chapter5/","title":"Bugs修复","keywords":"","body":"Bugs修复 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter5/section1.html":{"url":"chapter5/section1.html","title":"Section1","keywords":"","body":"Section1 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter5/section2.html":{"url":"chapter5/section2.html","title":"Section2","keywords":"","body":"Section2 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter5/section3.html":{"url":"chapter5/section3.html","title":"Section3","keywords":"","body":"Section3 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter6/":{"url":"chapter6/","title":"运行维护","keywords":"","body":"运行维护 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter6/section1.html":{"url":"chapter6/section1.html","title":"Nginx","keywords":"","body":"Nginx 1. 源代码安装 ​ 服务器环境为Center OS 7 64位，使用yum命令安装软件。 1.1 安装依赖 ​ 本例中只是安装一些编译Nginx时经常使用的编译环境和软件等，如有需要，可以自定义所需内容。 1.1.1 yum逐条安装版 ​ 安装gcc和g++两个编译器，可以分开安装，不过要先安装gcc才能安装g++ yum -y install gcc gcc-c++ ​ 安装make，用于编译 yum -y install gcc automake autoconf libtool make ​ 安装pcre，用于重写rewrite yum -y install pcre ​ 安装pcre-devel yum -y install pcre-devel ​ 安装zlip，用于开启gzip压缩 yum -y install zlip ​ 安装zlib-devel yum -y install zlib-devel ​ 安装openssl yum -y install openssl ​ 安装openssl-devel yum -y install Tips：参数-y用于自动选择版本，如需特定版本，可不添加该参数，直接使用yum install命令安装，yum会在找到安装包之后再由用户手动选择版本。 Notes:devel 包主要是供开发用，至少包括头文件和链接库，有的还含有开发文档或演示代码。编译的时候如果需要用到这个库，那么需要安装这个库的devel，因为需要头文件 1.1.2 yum打包安装版 ​ 可按照如下所示，将要安装的软件依次以空格间隔拼在后边即可。 [root@localhost ~]# yum -y install gcc gcc-c++ automake pcre pcre-devel zlip zlib-devel openssl openssl-devel 1.1.3 源码安装PCRE库 ​ 可从ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/下载最新的 PCRE 源码包，使用下面命令下载编译和安装 PCRE 包： ​ 切换特定目录 cd /usr/local/src ​ 下载源码包 wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.37.tar.gz ​ 解压源码包 tar -zxvf pcre-8.37.tar.gz ​ 切换得到解压目录 cd pcre-8.34 ​ 进行安装前配置和检测 ./configure ​ 编译 make ​ 安装 make install 1.1.4 源码安装zlib库 可通过`http://zlib.net/zlib-1.2.8.tar.gz` 下载最新的 zlib 源码包，使用下面命令下载编译和安装 zlib包： cd /usr/local/src wget http://zlib.net/zlib-1.2.8.tar.gz tar -zxvf zlib-1.2.8.tar.gz cd zlib-1.2.8 ./configure make make install 1.15 安装ssl cd /usr/local/src wget https://www.openssl.org/source/openssl-1.0.1t.tar.gz tar -zxvf openssl-1.0.1t.tar.gz 1.2 下载 ​ 可访问以下地址查看所有Nginx版本：http://nginx.org/download/ ​ Nginx 一般有两个版本，分别是稳定版和开发版，您可以根据您的目的来选择这两个版本的其中一个，使用wget命令下载相应版本的nginx源码压缩包 wget http://nginx.org/download/nginx-1.8.1.tar.gz ​ 使用tar命令解压该源码包 tar -xzf nginx-1.8.1.tar.gz 说明：nginx在编译时可指定安装路径参数，因此压缩包下载位置和软件安装位置没有必然联系，既可以在需安装目录直接下载，也可在特定下载目录下载后在指定安装路径参数。 1.3 内置模块 1.3.1 默认启用的模块 以下参数允许您禁用默认情况下启用的模块： –without-http_charset_module –without-http_gzip_module –without-http_ssi_module –without-http_userid_module –without-http_access_module –without-http_access_module –without-http_autoindex_module –without-http_geo_module –without-http_map_module –without-http_referer_module –without-http_rewrite_module –without-http_proxy_module –without-http_fastcgi_module –without-http_uwsgi_module –without-http_scgi_module –without-http_memcached_module –without-http_limit_conn_module –without-http_limit_req_module –without-http_empty_gif_module –without-http_browser_module –without-http_upstream_ip_hash_module –without-http_upstream_least_conn_module –without-http_split_clients_module 1.3.2 默认禁用的模块 以下参数允许您启用默认禁用的模块： –with-http_ssl_module –with-http_realip_module –with-http_addition_module –with-http_xslt_module –with-http_image_filter_module –with-http_geoip_module –with-http_sub_module –with-http_dav_module –with-http_flv_module –with-http_mp4_module –with-http_gzip_static_module –with-http_random_index_module –with-http_secure_link_module –with-http_stub_status_module –with-google_perftools_module –with-http_degradation_module –with-http_perl_module –with-http_spdy_module –with-http_gunzip_module –with-http_auth_request_module 1.4 自定义配置 ​ 编译软件之前可以先指定一些配置，以下先看一个官方例子，多个配置项如果换行可使用\\（空格和反斜杠）分割，也可不加反斜杠，仅用空格分割： ./configure --sbin-path=/usr/local/nginx/nginx \\ --conf-path=/usr/local/nginx/nginx.conf \\ --pid-path=/usr/local/nginx/nginx.pid \\ --with-http_ssl_module \\ --with-pcre=/opt/app/openet/oetal1/chenhe/pcre-8.37 \\ --with-zlib=/opt/app/openet/oetal1/chenhe/zlib-1.2.8 \\ --with-openssl=/opt/app/openet/oetal1/chenhe/openssl-1.0.1t 其中： ​ --with-pcre=/usr/src/pcre-8.34 指的是pcre-8.34 的源码路径。 ​ --with-zlib=/usr/src/zlib-1.2.7 指的是zlib-1.2.7 的源码路径。 1.3.1 指定安装目录 # 其中path即为指定的安装路径 --prefix=path 1.3.2 指定可执行文件名 # 一般为文件名为prefix/sbin/nginx --sbin-path=path 1.3.3 指定配置文件名 # 如果需要，nginx总是可以通过在命令行参数-c文件中指定一个不同的配置文件来启动。 # 默认情况下，文件名为prefix/conf/nginx.conf --conf-path=path 1.3.4 指定pid文件 # pid文件，它将存储主进程的进程ID。 # 安装之后，总是可以使用pid指令在nginx.conf配置文件中更改文件名。 # 默认情况下，文件名为prefix/logs/nginx.pid。 --pid-path=path 1.3.5 指定用户 # 安装之后，可以使用user指令在nginx.conf配置文件中更改名称。 # 默认的用户名是nobody。 --user=name 1.3.6 指定组 # 安装之后，可以使用user指令在nginx.conf配置文件中更改名称。 # 默认情况下，组名设置为无特权用户的名称。 --group=name 1.3.7 开启线程池 --with-threads 1.3.8 启用https # 默认情况不支持https # 启用该项需要安装ssl --with-http_ssl_module 1.3.9 启用gzip # 默认不开启此功能 # 开启需要安装zlib -with-http_gzip_static_module 1.3.10 自定义模块目录 # 定义将安装nginx动态模块的目录。 # 默认情况下使用prefix/modules目录。 --modules-path=path 1.3.11 启用或禁用模块 # 启用或禁用构建允许服务器使用的模块。 # 如果平台不支持更合适的方法，如kqueue、epoll或/dev/poll，则自动构建此模块。 # 其中select_module即为模块名 --with-select_module --without-select_module 1.3.12 添加其他模块 # 可以添加第三方功能模块 --add-module=path 1.3.13 指定C编译器 # sets the name of the C compiler. --with-cc=path 1.3.14 设置CFLAGS参数。 # 设置将添加到CFLAGS变量的其他参数。 --with-cc-opt=parameters 1.3.15 指定CPU # 支持为每个指定CPU构建: # pentium、pentiumpro、pentium3、pentium4、athlon、opteron、sparc32、sparc64、ppc64。 --with-cpu-opt=cpu 1.3.16 指定日志路径 # 设置主请求的HTTP服务器的日志文件的名称。 # 安装完成后，可以随时在nginx.conf配置文件中更改access_log。 # 默认情况下，文件名 为prefix/logs/access.log. --http-log-path=path 1.3.17 指定错误日志路径 # 设置主错误，警告，和诊断文件的名称。 # 安装完成后，可以随时改变nginx.conf配置文件中error_log。 # 默认情况下，文件名 为prefix/logs/error.log. --error-log-path=path 1.3.18 一个例子 ./configure --prefix=/server/nginx --sbin-path=/server/nginx/sbin/nginx --with-http_stub_status_module --with-pcre --with-http_gzip_static_module --with-http_ssl_module 1.5 编译 ​ 执行make命令即可编译，如果模块多可有的等。一般命令行界面会持续闪屏一段时间。 1.6 安装 ​ 执行make install即可安装,安装路径如文件列表下： [root@localhost nginx]# ls conf html logs nginx-1.8.1 nginx-1.8.1.tar.gz sbin 1.7 常用操作 ​ 使用安装路径prefix/sbin/nginx启动 /server/nginx/sbin/nginx ​ 指定配置文件启动 /server/nginx/sbin/nginx -c conf/nginx.conf ​ 重新启动 /server/nginx/sbin/nginx -s reload ​ 关闭 /server/nginx/sbin/nginx -s stop pkill -9 nginx ​ 查看版本 /server/nginx/sbin/nginx -V 1.8 验证 ​ nginx默认配置文件占用80端口，运行前需要确认80端口是否被占用，或更改端口号，运行成功后。在命令行下可使用curl来测试nginx是否运行成功，成功会返回一个HTML文档。 [root@localhost nginx]# curl localhost:80 Welcome to nginx! body { width: 35em; margin: 0 auto; font-family: Tahoma, Verdana, Arial, sans-serif; } Welcome to nginx! If you see this page, the nginx web server is successfully installed and working. Further configuration is required. For online documentation and support please refer to nginx.org. Commercial support is available at nginx.com. Thank you for using nginx. ​ 查看nginx版本信息如下 [root@localhost nginx]# /server/nginx/sbin/nginx -V nginx version: nginx/1.8.1 built by gcc 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) built with OpenSSL 1.0.2k-fips 26 Jan 2017 TLS SNI support enabled configure arguments: --prefix=/server/nginx --sbin-path=/server/nginx/sbin/nginx --with-http_stub_status_module --with-pcre --with-http_gzip_static_module --with-http_ssl_module 2.配置文件详解 ​ nginx配置文件由多个块组成，最外面的块是main，main包含Events和HTTP，HTTP包含upstream和多个Server，Server又包含多个location： ​ main（全局设置）、server（主机设置）、upstream（负载均衡服务器设置）和 location（URL匹配特定位置的设置）。 main块设置的指令将影响其他所有设置； server块的指令主要用于指定主机和端口； upstream指令主要用于负载均衡，设置一系列的后端服务器； location块用于匹配网页位置。 ​ 这四者之间的关系式：server继承main，location继承server，upstream既不会继承其他设置也不会被继承。 ​ 在这四个部分当中，每个部分都包含若干指令，这些指令主要包含Nginx的主模块指令、事件模块指令、HTTP核心模块指令，同时每个部分还可以使用其他HTTP模块指令，例如Http SSL模块、HttpGzip Static模块和Http Addition模块等。 2.1 全局配置 示例代码如下： user nobody nobody; worker_processes 2; error_log logs/error.log notice; pid logs/nginx.pid; worker_rlimit_nofile 65535; events{ use epoll; worker_connections 65536; } ​ 每个配置选项的含义解释如下： user是个主模块指令，指定Nginx Worker进程运行用户以及用户组，默认由nobody账号运行。 worker_processes是个主模块指令，指定了Nginx要开启的进程数。每个Nginx进程平均耗费10M~12M内存。建议指定和CPU的数量一致即可。 error_log是个主模块指令，用来定义全局错误日志文件。日志输出级别有debug、info、notice、warn、error、crit可供选择，其中，debug输出日志最为最详细，而crit输出日志最少。 pid是个主模块指令，用来指定进程pid的存储文件位置。 worker_rlimit_nofile用于绑定worker进程和CPU， Linux内核2.4以上可用。 a). events事件指令是设定Nginx的工作模式及连接数上限： b). use是个事件模块指令，用来指定Nginx的工作模式。Nginx支持的工作模式有select、poll、kqueue、epoll、rtsig和/dev/poll。其中select和poll都是标准的工作模式，kqueue和epoll是高效的工作模式，不同的是epoll用在Linux平台上，而kqueue用在BSD系统中。对于Linux系统，epoll工作模式是首选。 c). worker_connections也是个事件模块指令，用于定义Nginx每个进程的最大连接数，默认是1024。最大客户端连接数由worker_processes和worker_connections决定，即Max_client=worker_processesworker_connections。 在作为反向代理时，max_clients变为：max_clients = worker_processes worker_connections/4。 进程的最大连接数受Linux系统进程的最大打开文件数限制，在执行操作系统命令“ulimit -n 65536”后worker_connections的设置才能生效 2.2 HTTP服务器配置 http{ http{ include conf/mime.types; default_type application/octet-stream; log_format main '$remote_addr - $remote_user [$time_local] ' '\"$request\" $status $bytes_sent ' '\"$http_referer\" \"$http_user_agent\" ' '\"$gzip_ratio\"'; log_format download '$remote_addr - $remote_user [$time_local] ' '\"$request\" $status $bytes_sent ' '\"$http_referer\" \"$http_user_agent\" ' '\"$http_range\" \"$sent_http_content_range\"'; client_max_body_size 20m; client_header_buffer_size 32K; large_client_header_buffers 4 32k; Sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 60; client_header_timeout 10; client_body_timeout 10; send_timeout 10; ​ 下面详细介绍下这段代码中每个配置选项的含义。 include是个主模块指令，实现对配置文件所包含的文件的设定，可以减少主配置文件的复杂度。类似于Apache中的include方法。 default_type属于HTTP核心模块指令，这里设定默认类型为二进制流，也就是当文件类型未定义时使用这种方式，例如在没有配置PHP环境时，Nginx是不予解析的，此时，用浏览器访问PHP文件就会出现下载窗口。 下面的代码实现对日志格式的设定： log_format main '$remote_addr - $remote_user [$time_local] ' '\"$request\" $status $bytes_sent ' '\"$http_referer\" \"$http_user_agent\" ' '\"$gzip_ratio\"'; log_format download '$remote_addr - $remote_user [$time_local] ' '\"$request\" $status $bytes_sent ' '\"$http_referer\" \"$http_user_agent\" ' '\"$http_range\" \"$sent_http_content_range\"'; ​ log_format是Nginx的HttpLog模块指令，用于指定Nginx日志的输出格式。main为此日志输出格式的名称，可以在下面的access_log指令中引用。 client_max_body_size用来设置允许客户端请求的最大的单个文件字节数； client_header_buffer_size用于指定来自客户端请求头的headerbuffer大小。对于大多数请求，1K的缓冲区大小已经足够，如果自定义了消息头或有更大的Cookie，可以增加缓冲区大小。这里设置为32K； large_client_header_buffers用来指定客户端请求中较大的消息头的缓存最大数量和大小， “4”为个数，“128K”为大小，最大缓存量为4个128K； sendfile参数用于开启高效文件传输模式。将tcp_nopush和tcp_nodelay两个指令设置为on用于防止网络阻塞； keepalive_timeout设置客户端连接保持活动的超时时间。在超过这个时间之后，服务器会关闭该连接； client_header_timeout设置客户端请求头读取超时时间。如果超过这个时间，客户端还没有发送任何数据，Nginx将返回“Request time out（408）”错误； client_body_timeout设置客户端请求主体读取超时时间。如果超过这个时间，客户端还没有发送任何数据，Nginx将返回“Request time out（408）”错误，默认值是60； send_timeout指定响应客户端的超时时间。这个超时仅限于两个连接活动之间的时间，如果超过这个时间，客户端没有任何活动，Nginx将会关闭连接。 2.3 HttpGzip模块配置 ​ 下面配置Nginx的HttpGzip模块。这个模块支持在线实时压缩输出数据流。 ​ 看是否安装了HttpGzip模块： [root@vps ~]# /opt/nginx/sbin/nginx -V nginx version: nginx/1.0.14 built by gcc 4.4.6 20110731 (Red Hat 4.4.6-3) (GCC) configure arguments: --with-http_stub_status_module --with-http_gzip_static_module --prefix=/opt/nginx ​ 通过/opt/nginx/sbin/nginx -V命令可以查看安装Nginx时的编译选项，由输出可知，我们已经安装了HttpGzip模块。 ​ 下面是HttpGzip模块在Nginx配置中的相关属性设置： gzip on; gzip_min_length 1k; gzip_buffers 4 16k; gzip_http_version 1.1; gzip_comp_level 2; gzip_types text/plain application/x-javascript text/css application/xml; gzip_vary on; gzip用于设置开启或者关闭gzip模块，“gzip on”表示开启GZIP压缩，实时压缩输出数据流； gzip_min_length设置允许压缩的页面最小字节数，页面字节数从header头的Content-Length中获取。默认值是0，不管页面多大都进行压缩。建议设置成大于1K的字节数，小于1K可能会越压越大； gzip_buffers表示申请4个单位为16K的内存作为压缩结果流缓存，默认值是申请与原始数据大小相同的内存空间来存储gzip压缩结果； gzip_http_version用于设置识别HTTP协议版本，默认是1.1，目前大部分浏览器已经支持GZIP解压，使用默认即可； gzip_comp_level用来指定GZIP压缩比，1 压缩比最小，处理速度最快；9 压缩比最大，传输速度快，但处理最慢，也比较消耗cpu资源； gzip_types用来指定压缩的类型，无论是否指定，“text/html”类型总是会被压缩的； gzip_vary选项可以让前端的缓存服务器缓存经过GZIP压缩的页面，例如用Squid缓存经过Nginx压缩的数据。 2.4 负载均衡配置 ​ 下面设定负载均衡的服务器列表： upstream cszhi.com{ ip_hash; server 192.168.8.11:80; server 192.168.8.12:80 down; server 192.168.8.13:8009 max_fails=3 fail_timeout=20s; server 192.168.8.146:8080; } ​ upstream是Nginx的HTTP Upstream模块，这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡。 ​ 在上面的设定中，通过upstream指令指定了一个负载均衡器的名称cszhi.com。这个名称可以任意指定，在后面需要的地方直接调用即可。 ​ Nginx的负载均衡模块目前支持4种调度算法，下面进行分别介绍，其中后两项属于第三方的调度方法。 轮询（默认）：每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某台服务器宕机，故障系统被自动剔除，使用户访问不受影响； Weight：指定轮询权值，Weight值越大，分配到的访问机率越高，主要用于后端每个服务器性能不均的情况下； ip_hash：每个请求按访问IP的hash结果分配，这样来自同一个IP的访客固定访问一个后端服务器，有效解决了动态网页存在的session共享问题； fair：比上面两个更加智能的负载均衡算法。此种算法可以依据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。Nginx本身是不支持fair的，如果需要使用这种调度算法，必须下载Nginx的upstream_fair模块； url_hash：按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率。Nginx本身是不支持url_hash的，如果需要使用这种调度算法，必须安装Nginx 的hash软件包。 ​ 在HTTP Upstream模块中，可以通过server指令指定后端服务器的IP地址和端口，同时还可以设定每个后端服务器在负载均衡调度中的状态。常用的状态有： down：表示当前的server暂时不参与负载均衡； backup：预留的备份机器。当其他所有的非backup机器出现故障或者忙的时候，才会请求backup机器，因此这台机器的压力最轻； max_fails：允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误； fail_timeout：在经历了max_fails次失败后，暂停服务的时间。max_fails可以和fail_timeout一起使用。 ​ 注意，当负载调度算法为ip_hash时，后端服务器在负载均衡调度中的状态不能是weight和backup。 2.5 server虚拟主机配置 ​ 下面介绍对虚拟主机的配置。 ​ 建议将对虚拟主机进行配置的内容写进另外一个文件，然后通过include指令包含进来，这样更便于维护和管理。 server{ listen 80; server_name 192.168.8.18 cszhi.com; index index.html index.htm index.php; root /wwwroot/www.cszhi.com charset gb2312; access_log logs/www.ixdba.net.access.log main; } ​ server标志定义虚拟主机开始，listen用于指定虚拟主机的服务端口，server_name用来指定IP地址或者域名，多个域名之间用空格分 开。index用于设定访问的默认首页地址，root指令用于指定虚拟主机的网页根目录，这个目录可以是相对路径，也可以是绝对路径。Charset用于 设置网页的默认编码格式。access_log用来指定此虚拟主机的访问日志存放路径，最后的main用于指定访问日志的输出格式。 2.6 location URL匹配配置 ​ URL地址匹配是进行Nginx配置中最灵活的部分。 location支持正则表达式匹配，也支持条件判断匹配，用户可以通过location指令实现Nginx对动、静态网页进行过滤处理。使用location URL匹配配置还可以实现反向代理，用于实现PHP动态解析或者负载负载均衡。 ​ 以下这段设置是通过location指令来对网页URL进行分析处理，所有扩展名​ 以.gif、.jpg、.jpeg、.png、.bmp、.swf结尾的静态文件都交给nginx处理，而expires用来指定静态文件的过期时间，这里是30天。 location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$ { root /wwwroot/www.cszhi.com; expires 30d; } ​ 以下这段设置是将upload和html下的所有文件都交给nginx来处理，当然，upload和html目录包含在/web/wwwroot/www.cszhi.com目录中。 location ~ ^/(upload|html)/ { root /web/wwwroot/www.cszhi.com; expires 30d; } ​ 在最后这段设置中，location是对此虚拟主机下动态网页的过滤处理，也就是将所有以.jsp为后缀的文件都交给本机的8080端口处理。 location ~ .*.php$ { index index.php; proxy_pass http://localhost:8080; } 2.7 StubStatus模块配置 ​ StubStatus模块能够获取Nginx自上次启动以来的工作状态，此模块非核心模块，需要在Nginx编译安装时手工指定才能使用此功能。 ​ 以下指令实指定启用获取Nginx工作状态的功能。 location /NginxStatus { stub_status on; access_log logs/NginxStatus.log; auth_basic \"NginxStatus\"; auth_basic_user_file ../htpasswd; } ​ stub_status设置为“on”表示启用StubStatus的工作状态统计功能。access_log 用来指定StubStatus模块的访问日志文件。auth_basic是Nginx的一种认证机制。auth_basic_user_file用来指定认证的密码文件，由于Nginx的auth_basic认证采用的是与Apache兼容的密码文件，因此需要用Apache的htpasswd命令来生成密码文件，例如要添加一个test用户，可以使用下面方式生成密码文件： /usr/local/apache/bin/htpasswd -c /opt/nginx/conf/htpasswd test ​ 然后输入两次密码后确认之后添加用户成功。 ​ 要查看Nginx的运行状态，可以输入http://ip/NginxStatus，输入创建的用户名和密码就可以看到Nginx的运行状态： Active connections: 1 server accepts handled requests 34561 35731 354399 Reading: 0 Writing: 3 Waiting: 0 ​ Active connections表示当前活跃的连接数，第三行的三个数字表示 Nginx当前总共处理了34561个连接， 成功创建次握手， 总共处理了354399个请求。最后一行的Reading表示Nginx读取到客户端Header信息数， Writing表示Nginx返回给客户端的Header信息数 ，“Waiting”表示Nginx已经处理完，正在等候下一次请求指令时的驻留连接数。 ​ 在最后这段设置中，设置了虚拟主机的错误信息返回页面，通过error_page指令可以定制各种错误信息的返回页面。在默认情况下，Nginx会在主目录的html目录中查找指定的返回页面，特别需要注意的是，这些错误信息的返回页面大小一定要超过512K，否者会被ie浏览器替换为ie默认的错误页面。 error_page 404 /404.html; error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } } 2.8 网络实例 原文链接：https://www.cnblogs.com/xiaogangqq123/archive/2011/03/02/1969006.html 2.8.1 基本配置 #运行用户 user www-data; #启动进程,通常设置成和cpu的数量相等 worker_processes 1; #全局错误日志及PID文件 error_log /var/log/nginx/error.log; pid /var/run/nginx.pid; #工作模式及连接数上限 events { use epoll; #epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能 worker_connections 1024;#单个后台worker process进程的最大并发链接数 # multi_accept on; } #设定http服务器，利用它的反向代理功能提供负载均衡支持 http { #设定mime类型,类型由mime.type文件定义 include /etc/nginx/mime.types; default_type application/octet-stream; #设定日志格式 access_log /var/log/nginx/access.log; #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用， #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime. sendfile on; #tcp_nopush on; #连接超时时间 #keepalive_timeout 0; keepalive_timeout 65; tcp_nodelay on; #开启gzip压缩 gzip on; gzip_disable \"MSIE [1-6]\\.(?!.*SV1)\"; #设定请求缓冲 client_header_buffer_size 1k; large_client_header_buffers 4 4k; include /etc/nginx/conf.d/*.conf; include /etc/nginx/sites-enabled/*; #设定负载均衡的服务器列表 upstream mysvr { #weigth参数表示权值，权值越高被分配到的几率越大 #本机上的Squid开启3128端口 server 192.168.8.1:3128 weight=5; server 192.168.8.2:80 weight=1; server 192.168.8.3:80 weight=6; } server { #侦听80端口 listen 80; #定义使用www.xx.com访问 server_name www.xx.com; #设定本虚拟主机的访问日志 access_log logs/www.xx.com.access.log main; #默认请求 location / { root /root; #定义服务器的默认网站根目录位置 index index.php index.html index.htm; #定义首页索引文件的名称 fastcgi_pass www.xx.com; fastcgi_param SCRIPT_FILENAME $document_root/$fastcgi_script_name; include /etc/nginx/fastcgi_params; } # 定义错误提示页面 error_page 500 502 503 504 /50x.html; location = /50x.html { root /root; } #静态文件，nginx自己处理 location ~ ^/(images|javascript|js|css|flash|media|static)/ { root /var/www/virtual/htdocs; #过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。 expires 30d; } #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置. location ~ \\.php$ { root /root; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME /home/www/www$fastcgi_script_name; include fastcgi_params; } #设定查看Nginx状态的地址 location /NginxStatus { stub_status on; access_log on; auth_basic \"NginxStatus\"; auth_basic_user_file conf/htpasswd; } #禁止访问 .htxxx 文件 location ~ /\\.ht { deny all; } } } 2.8.2 负载均衡 #设定http服务器，利用它的反向代理功能提供负载均衡支持 http { #设定mime类型,类型由mime.type文件定义 include /etc/nginx/mime.types; default_type application/octet-stream; #设定日志格式 access_log /var/log/nginx/access.log; #省略上文有的一些配置节点 #。。。。。。。。。。 #设定负载均衡的服务器列表 upstream mysvr { #weigth参数表示权值，权值越高被分配到的几率越大 server 192.168.8.1x:3128 weight=5;#本机上的Squid开启3128端口 server 192.168.8.2x:80 weight=1; server 192.168.8.3x:80 weight=6; } upstream mysvr2 { #weigth参数表示权值，权值越高被分配到的几率越大 server 192.168.8.x:80 weight=1; server 192.168.8.x:80 weight=6; } #第一个虚拟服务器 server { #侦听192.168.8.x的80端口 listen 80; server_name 192.168.8.x; #对aspx后缀的进行负载均衡请求 location ~ .*\\.aspx$ { root /root; #定义服务器的默认网站根目录位置 index index.php index.html index.htm; #定义首页索引文件的名称 proxy_pass http://mysvr ;#请求转向mysvr 定义的服务器列表 #以下是一些反向代理的配置可删除. proxy_redirect off; #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; client_max_body_size 10m; #允许客户端请求的最大单文件字节数 client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数， proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时) proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时) proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时) proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小 proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置 proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2） proxy_temp_file_write_size 64k; #设定缓存文件夹大小，大于这个值，将从upstream服务器传 } } } MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter6/section2.html":{"url":"chapter6/section2.html","title":"Tomcat","keywords":"","body":"Tomcat 1.下载 ​ 通过tomcat官网的版本归档中查找合适的tomcat版本下载：https://archive.apache.org/dist/tomcat/ ​ 如下载8.0.9版本tomcat地址为：https://archive.apache.org/dist/tomcat/tomcat-8/v8.0.9/bin/ ​ 下载完成后直接解压到指定目录即可。 ​ 想下载该版本Tomat源码则访问：https://archive.apache.org/dist/tomcat/tomcat-8/v8.0.9/src/ 2.目录结构 2.1 bin ​ 解压版中bin目录主要是用来存放tomcat的命令，主要有两大类，一类是以.sh结尾的（linux命令），另一类是以.bat结尾的（windows命令），windows安装版中bin目录中可能存在两个exe文件（一般类似于tomcat7.exe和tomcat7w.exe）,用于在控制台或GUI窗口中启动tomcat。 ​ 很多环境变量的设置都在此处，例如可以设置JDK路径、tomcat路径，其中： ​ startup 用来启动tomcat ​ shutdown 用来关闭tomcat ​ catalina可以设置tomcat的内存 2.2 conf ​ conf目录主要是用来存放tomcat的一些配置文件 ​ server.xml配置整个服务器信息，可以设置端口号、设置域名或IP、默认加载的项目、请求编码，添加虚拟主机等等。 ​ web.xml为部署描述文件，其中注册了很多MIME类型，即文件类型，通过设置MIME可以设置tomcat支持的文件类型 。 ​ context.xml对于所有应用的统一配置，可以用来配置数据源之类的。 ​ tomcat-users.xml存储tomcat用户的文件，用来配置管理tomcat的用户与权限，即相应的用户名密码以及角色等等，可以按照该文件的注释信息添加tomcat用户。 ​ 在Catalina目录下可以设置默认加载的项目 2.3 lib ​ lib目录主要用来存放tomcat运行需要加载的jar包，相当于tomcat的类库。 ​ 例如，像连接数据库的jdbc的包我们可以加入到lib目录中来 2.4 logs ​ logs目录用来存放tomcat在运行过程中产生的日志文件，非常重要的是在控制台输出的日志。（清空不会对tomcat运行带来影响） ​ 在windows环境中，控制台的输出日志在catalina.xxxx-xx-xx.log文件中 ​ 在linux环境中，控制台的输出日志在catalina.out文件中 2.5 temp ​ temp目录用户存放tomcat在运行过程中产生的临时文件。（清空不会对tomcat运行带来影响，但最好先停止tomcat再清空该目录） 2.6 webapps ​ webapps目录用来存放应用程序，当tomcat启动时会去加载webapps目录下的应用程序。可以以文件夹、war包、jar包的形式发布应用。 ​ 其中ROOT是一个特殊的项目，在地址栏中没有给出项目目录时，对应的就是ROOT项目 ​ 当然，你也可以把应用程序放置在磁盘的任意位置，在配置文件中映射好就行。 2.7 work ​ work目录用来存放tomcat在运行时的编译后文件，例如JSP编译后的文件。 ​ 清空work目录，然后重启tomcat，可以达到清除缓存的作用。 2.8 声明 参考链接1：https://blog.csdn.net/u012661010/article/details/73381599 参考链接2：https://www.cnblogs.com/zzyytt/p/7697943.html MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter6/section11.html":{"url":"chapter6/section11.html","title":"nginx+tomcat部署项目JS报错","keywords":"","body":"nginx+tomcat部署项目JS报错 1. 问题描述 项目部署两个月未出问题，无更改，突然报错且功能异常。 页面涉及iFrame的无法显示，且在该区域显示: #谷歌内核的浏览器 XXXX拒绝了我们的连接请求 #IE内核的浏览器 此内容不能在框架中显示 此处应该有内容，但发布者不允许在框架中显示该内容。这是为了保护可能要输入到此站点中的信息的安全性。 尝试此操作 页面控制台JS报错 1.Refused to execute script from 'XXXX' because its MIME type ('text/html') is not executable, and strict MIME type checking is enabled. 2.Refused to display 'XXXX' in a frame because it set 'X-Frame-Options' to 'deny'. 3.VM3510:168 Uncaught DOMException: Blocked a frame with origin \"XXXX\" from accessing a cross-origin frame. at eval (eval at globalEval (XXXX), :168:53) 2. 问题排查 根据JS报错，搜索找到导致该问题的最大怀疑项目，nginx配置新增了如下内容： add_header 'X-XSS-Protection' '1; mode=block'; #此配置未发现影响 add_header 'X-Frame-Options' 'DENY'; #导致内嵌iFrame不显示 add_header 'X-Content-Type-Options' 'nosniff'; #导致其他js报错 ​ 经过确认，此配置项为安全漏洞修复手段，但是此配置项可能会导致某些项目功能异常。以下会根据这三项做详细介绍（注：以下内容来自网站HTTP | MDN Web Docs）： 2.1 X-XSS-Protection ​ HTTP X-XSS-Protection 响应头是Internet Explorer，Chrome和Safari的一个功能，当检测到跨站脚本攻击 (XSS)时，浏览器将停止加载页面。虽然这些保护在现代浏览器中基本上是不必要的，当网站实施一个强大的Content-Security-Policy来禁用内联的JavaScript ('unsafe-inline')时, 他们仍然可以为尚不支持 CSP 的旧版浏览器的用户提供保护。 ​ 语法格式如下： # 禁止XSS过滤。 X-XSS-Protection: 0 # 启用XSS过滤（通常浏览器是默认的）。 如果检测到跨站脚本攻击，浏览器将清除页面（删除不安全的部分）。 X-XSS-Protection: 1 # 启用XSS过滤。 如果检测到攻击，浏览器将不会清除页面，而是阻止页面加载。 X-XSS-Protection: 1; mode=block # 启用XSS过滤。 # 如果检测到跨站脚本攻击，浏览器将清除页面并使用CSP report-uri指令的功能发送违规报告。 X-XSS-Protection: 1; report= ​ 例子如下： 当检测到XSS攻击时阻止页面加载： X-XSS-Protection: 1;mode=block PHP header(\"X-XSS-Protection: 1; mode=block\"); Apache (.htaccess) Header set X-XSS-Protection \"1; mode=block\" 2.2 X-Frame-Options ​ The X-Frame-Options [HTTP] 响应头是用来给浏览器 指示允许一个页面 可否在 ``, ``, `` 或者 `` 中展现的标记。站点可以通过确保网站没有被嵌入到别人的站点里面，从而避免 clickjacking 攻击。 ​ The added security is only provided if the user accessing the document is using a browser supporting X-Frame-Options. Content-Security-Policy HTTP 头中的 frame-ancestors 指令会替代这个非标准的 header。CSP 的 frame-ancestors 会在 Gecko 4.0 中支持，但是并不会被所有浏览器支持。然而 X-Frame-Options 是个已广泛支持的非官方标准，可以和 CSP 结合使用。 ​ 语法格式如下： # 表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许。 X-Frame-Options: deny # 表示该页面可以在相同域名页面的 frame 中展示。 X-Frame-Options: sameorigin # 表示该页面可以在指定来源的 frame 中展示。 X-Frame-Options: allow-from https://example.com/ Note: 设置 meta 标签是无效的！例如 没有任何效果。不要这样用！只有当像下面示例那样设置 HTTP 头 X-Frame-Options 才会生效。 ​ 在 Firefox 尝试加载 frame 的内容时，如果 X-Frame-Options 响应头设置为禁止访问了，那么 Firefox 会用 about:blank 展现到 frame 中。也许从某种方面来讲的话，展示为错误消息会更好一点。 ​ 例子如下： 配置 Apache 配置 Apache 在所有页面上发送 X-Frame-Options 响应头，需要把下面这行添加到 'site' 的配置中: Header always set X-Frame-Options \"sameorigin\" 要将 Apache 的配置 X-Frame-Options 设置成 deny , 按如下配置去设置你的站点： Header set X-Frame-Options \"deny\" 要将 Apache 的配置 X-Frame-Options 设置成 allow-from，在配置里添加： Header set X-Frame-Options \"allow-from https://example.com/\" 配置 nginx 配置 nginx 发送 X-Frame-Options 响应头，把下面这行添加到 'http', 'server' 或者 'location' 的配置中: add_header X-Frame-Options sameorigin always; 配置 IIS 配置 IIS 发送 X-Frame-Options 响应头，添加下面的配置到 Web.config 文件中： ... ... 配置 HAProxy 配置 HAProxy 发送 X-Frame-Options 头，添加这些到你的前端、监听 listen，或者后端的配置里面： rspadd X-Frame-Options:\\ sameorigin 或者，在更加新的版本中： http-response set-header X-Frame-Options sameorigin 配置 Express 要配置 Express 可以发送 X-Frame-Options header，你可以用借助了 frameguard 来设置头部的 helmet。在你的服务器配置里面添加： const helmet = require('helmet'); const app = express(); app.use(helmet.frameguard({ action: \"sameorigin\" })); 或者，你也可以直接用 frameguard： const frameguard = require('frameguard') app.use(frameguard({ action: 'sameorigin' })) 2.3 X-Content-Type-Options ​ X-Content-Type-Options响应首部相当于一个提示标志，被服务器用来提示客户端一定要遵循在 [Content-Type`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type) 首部中对 MIME 类型 的设定，而不能对其进行修改。这就禁用了客户端的 MIME 类型嗅探行为，换句话说，也就是意味着网站管理员确定自己的设置没有问题。 ​ 这个消息首部最初是由微软在 IE 8 浏览器中引入的，提供给网站管理员用作禁用内容嗅探的手段，内容嗅探技术可能会把不可执行的 MIME 类型转变为可执行的 MIME 类型。在此之后，其他浏览器也相继引入了这个首部，尽管它们的 MIME 嗅探算法没有那么有侵略性。 ​ 站点安全测试人员通常欢迎对这个首部进行设置。 ​ 注意: nosniff 只应用于 \"script\" 和 \"style\" 两种类型。事实证明，将其应用于图片类型的文件会导致与现有的站点冲突。 ​ 语法如下： X-Content-Type-Options: nosniff 下面两种情况的请求将被阻止： 请求类型是\"style\" 但是 MIME 类型不是 \"text/css\"， 请求类型是\"script\" 但是 MIME 类型不是 JavaScript MIME 类型。 3. 问题解决 修改Nginx配置项 add_header 'X-XSS-Protection' '1; mode=block'; #此配置未发现影响 add_header 'X-Frame-Options' 'sameorigin'; #修改或注释此项 add_header 'X-Content-Type-Options' 'nosniff'; #目前先注释 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter7/":{"url":"chapter7/","title":"其他","keywords":"","body":"其他 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter7/section1.html":{"url":"chapter7/section1.html","title":"Section1","keywords":"","body":"Section1 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter7/section2.html":{"url":"chapter7/section2.html","title":"Section2","keywords":"","body":"Section2 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "},"chapter7/section3.html":{"url":"chapter7/section3.html","title":"Section3","keywords":"","body":"Section3 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjmcreated by MU_zjm 2019-09-07 12:00:00 "}}