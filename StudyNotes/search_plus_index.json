{"./":{"url":"./","title":"简介","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. GitBook 1.1 百度百科 1.2 下载安装 1.3 基本操作 1.4 插件列表 2. Node.js 3. Typora 4. GitHub 5. 免责说明 简介 1. GitBook Document Everything! For you, your users and your team 1.1 百度百科 ​ GitBook是一个基于 Node.js的命令行工具，可使用Github/Git和 Markdown来制作精美的电子书，GitBook 并非关于 Git 的教程。 GitBook支持输出多种文档格式： 静态站点：GitBook默认输出该种格式，生成的静态站点可直接托管搭载Github Pages服务上； PDF：需要安装gitbook-pdf依赖； eBook：需要安装ebook-convert； 单HTML网页：支持将内容输出为单页的HTML，不过一般用在将电子书格式转换为PDF或eBook的中间过程； JSON：一般用于电子书的调试或元数据提取。 使用GitBook制作电子书，必备两个文件：README.md和SUMMARY.md。 1.2 下载安装 ​ 安装GitBook需要先安装Node.js环境，安装Node.js一般会默认安装npm(node包管理工具)，命令行使用npm命令安装GitBook: npm install -g gitbook-cli ​ 命令行执行以下命令可查看GitBook版本信息 gitbook -V 1.3 基本操作 ​ 以下均为基本命令（一般不涉及参数），有兴趣可以具体学习。 命令行执行以下命令可查看GitBook帮助 gitbook --help 命令行执行以下命令可查看本地所有安装版本 gitbook ls 命令行执行以下命令可查看本地当前使用版本 gitbook current 命令行执行以下命令可更新版本 gitbook update 命令行执行以下命令可初始化/重新构建一本书籍 gitbook init 命令行执行以下命令可构建书籍 gitbook build 命令行执行以下命令可安装插件 gitbook install 命令行执行以下命令可启动本地服务器 gitbook serve 之后可访问地址：http://localhost:4000 预览书籍 1.4 插件列表 Gitbook默认自带有5个插件： highlight： 代码高亮 search： 导航栏查询功能（不支持中文） sharing：右上角分享功能 font-settings：字体设置（最上方的\"A\"符号） livereload：为GitBook实时重新加载 以下为新增插件： 插件名 引入方式 说明 page-copyright \"page-copyright\" 页面页脚版权说明 hide-element \"hide-element\" 隐藏特定标签 back-to-top-button \"back-to-top-button\" 页面添加返回顶部的按钮 chapter-fold \"chapter-fold\" 导航目录折叠 code \"code\" 代码添加行号&复制按钮 splitter \"splitter\" 侧边栏宽度可调节 search-pro \"-lunr\", \"-search\", \"search-pro\", 高级搜索（支持中文）在使用此插件之前，需要将默认的search和lunr 插件去掉。 custom-favicon \"custom-favicon\" 更换标题栏图标 expandable-chapters \"expandable-chapters\" 可扩展导航章节 klipse \"klipse\" 嵌入类似IDE的功能 github \"github\" 在右上角添加github图标 page-treeview \"page-treeview\" 生成页内目录 2. Node.js Node.js® is a JavaScript runtime built on Chrome's V8 JavaScript engine. 官网地址：https://nodejs.org/en/ ​ 一般对应平台都分为LTS和Current两个版本，建议选取LTS版 ​ 下载安装后，打开命令行执行，显示版本号即安装成功 node -v 3. Typora ​ Typora是一款轻便简洁的Markdown编辑器，支持即时渲染技术，这也是与其他Markdown编辑器最显著的区别。即时渲染使得你写Markdown就想是写Word文档一样流畅自如，不像其他编辑器的有编辑栏和显示栏。 ​ 官网地址：https://www.typora.io/ ​ 该软件目前支持OS X，Window， Linux，可在官网直接下载安装。 4. GitHub ​ GitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名GitHub。 ​ 作为开源代码库以及版本控制系统，Github拥有超过900万开发者用户。随着越来越多的应用程序转移到了云上，Github已经成为了管理软件开发以及发现已有代码的首选方法。 5. 免责说明 ​ 本文档基本基于对网络内容和书籍的摘抄总结和拷贝，仅用于个人查阅，离线阅读和学习，如有侵权，请及时联系。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Java/":{"url":"Java/","title":"Java基础","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 概述 2. JDK 3. Eclipse 4. IDEA 5. 参考内容 Java基础 1. 概述 ​ Java是一门面向对象编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。 ​ Java具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点 。Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等 。 2. JDK ​ JDK是 Java 语言的软件开发工具包，主要用于移动设备、嵌入式设备上的java应用程序。JDK是整个java开发的核心，它包含了JAVA的运行环境（JVM+Java系统类库）和JAVA工具。 ​ 目前推荐使用JDK8.0以上的版本，以下为下载链接，可选取对应版本下载 https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html ​ Windows下安装JDK一般需要配置环境变量，网上教程很多，配置项大致如下： JAVA_HOME //新建 //对应JDK安装目录 Path //新增或编辑 ;%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin; CLASSPATH //新建 .;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\tools.jar ​ 配置完成后打开命令行输入如下命令可查看版本 >java -version java version \"1.8.0_191\" Java(TM) SE Runtime Environment (build 1.8.0_191-b12) Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode) 3. Eclipse ​ Eclipse 是一个开放源代码的、基于Java的可扩展开发平台。就其本身而言，它只是一个框架和一组服务，用于通过插件组件构建开发环境。 ​ Eclipse是著名的跨平台的自由集成开发环境（IDE）。最初主要用来Java语言开发，通过安装不同的插件Eclipse可以支持不同的计算机语言，比如C++和Python等开发工具。Eclipse的本身只是一个框架平台，但是众多插件的支持使得Eclipse拥有其他功能相对固定的IDE软件很难具有的灵活性。许多软件开发商以Eclipse为框架开发自己的IDE。 ​ Eclipse 最初由OTI和IBM两家公司的IDE产品开发组创建，起始于1999年4月。IBM提供了最初的Eclipse代码基础，包括Platform、JDT 和PDE。Eclipse项目IBM发起，围绕着Eclipse项目已经发展成为了一个庞大的Eclipse联盟，有150多家软件公司参与到Eclipse项目中。 ​ Eclipse是一个开放源码项目，它其实是Visual Age for Java的替代品，其界面跟先前的Visual Age for Java差不多，但由于其开放源码，任何人都可以免费得到，并可以在此基础上开发各自的插件，因此越来越受人们关注。随后还有包括Oracle在内的许多大公司也纷纷加入了该项目，Eclipse的目标是成为可进行任何语言开发的IDE集成者，使用者只需下载各种语言的插件即可。 4. IDEA ​ IDEA 全称 IntelliJ IDEA，是java编程语言开发的集成环境。IntelliJ在业界被公认为最好的java开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE支持、各类版本工具(git、svn等)、JUnit、CVS整合、代码分析、 创新的GUI设计等方面的功能可以说是超常的。 ​ IDEA是JetBrains公司的产品，这家公司总部位于捷克共和国的首都布拉格，开发人员以严谨著称的东欧程序员为主。它的旗舰版本还支持HTML，CSS，PHP，MySQL，Python等。免费版只支持Python等少数语言。 5. 参考内容 《菜鸟教程/Java 教程》 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Java/Chapter1.html":{"url":"Java/Chapter1.html","title":"第一章：基础知识","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. Java 简介 2. 主要特性 3. 发展历史 4. 第一个Java程序 第一章：基础知识 1. Java 简介 ​ Java是由Sun Microsystems公司于1995年5月推出的Java面向对象程序设计语言和Java平台的总称。由James Gosling和同事们共同研发，并在1995年正式推出。 Java分为三个体系： JavaSE（J2SE）（Java2 Platform Standard Edition，java平台标准版） JavaEE(J2EE)(Java 2 Platform,Enterprise Edition，java平台企业版) JavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版)。 2005年6月，JavaOne大会召开，SUN公司公开Java SE 6。此时，Java的各种版本已经更名以取消其中的数字\"2\"：J2EE更名为Java EE, J2SE更名为Java SE，J2ME更名为Java ME。 2. 主要特性 Java语言是简单的： Java语言的语法与C语言和C++语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java丢弃了C++中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java语言不使用指针，而是引用。并提供了自动的废料收集，使得程序员不必为内存管理而担忧。 Java语言是面向对象的： Java语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为implements）。Java语言全面支持动态绑定，而C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。 Java语言是分布式的： Java语言支持Internet应用的开发，在基本的Java应用编程接口中有一个网络应用编程接口（java net），它提供了用于网络应用编程的类库，包括URL、URLConnection、Socket、ServerSocket等。Java的RMI（远程方法激活）机制也是开发分布式应用的重要手段。 Java语言是健壮的： Java的强类型机制、异常处理、垃圾的自动收集等是Java程序健壮性的重要保证。对指针的丢弃是Java的明智选择。Java的安全检查机制使得Java更具健壮性。 Java语言是安全的： Java通常被用在网络环境中，为此，Java提供了一个安全机制以防恶意代码的攻击。除了Java语言具有的许多安全特性以外，Java对通过网络下载的类具有一个安全防范机制（类ClassLoader），如分配不同的名字空间以防替代本地的同名类、字节代码检查，并提供安全管理机制（类SecurityManager）让Java应用设置安全哨兵。 Java语言是体系结构中立的： Java程序（后缀为java的文件）在Java平台上被编译为体系结构中立的字节码格式（后缀为class的文件），然后可以在实现这个Java平台的任何系统中运行。这种途径适合于异构的网络环境和软件的分发。 Java语言是可移植的： 这种可移植性来源于体系结构中立性，另外，Java还严格规定了各个基本数据类型的长度。Java系统本身也具有很强的可移植性，Java编译器是用Java实现的，Java的运行环境是用ANSI C实现的。 Java语言是解释型的： 如前所述，Java程序在Java平台上被编译为字节码格式，然后可以在实现这个Java平台的任何系统中运行。在运行时，Java平台中的Java解释器对这些字节码进行解释执行，执行过程中需要的类在联接阶段被载入到运行环境中。 Java是高性能的： 与那些解释型的高级脚本语言相比，Java的确是高性能的。事实上，Java的运行速度随着JIT(Just-In-Time）编译器技术的发展越来越接近于C++。 Java语言是多线程的： 在Java语言中，线程是一种特殊的对象，它必须由Thread类或其子（孙）类来创建。通常有两种方法来创建线程：其一，使用型构为Thread(Runnable)的构造子类将一个实现了Runnable接口的对象包装成一个线程，其二，从Thread类派生出子类并重写run方法，使用该子类创建的对象即为线程。值得注意的是Thread类已经实现了Runnable接口，因此，任何一个线程均有它的run方法，而run方法中包含了线程所要运行的代码。线程的活动由一组方法来控制。Java语言支持多个线程的同时执行，并提供多线程之间的同步机制（关键字为synchronized）。 Java语言是动态的： Java语言的设计目标之一是适应于动态变化的环境。Java程序需要的类能够动态地被载入到运行环境，也可以通过网络来载入所需要的类。这也有利于软件的升级。另外，Java中的类有一个运行时刻的表示，能进行运行时刻的类型检查。 3. 发展历史 1995年5月23日，Java语言诞生 1996年1月，第一个JDK-JDK1.0诞生 1996年4月，10个最主要的操作系统供应商申明将在其产品中嵌入JAVA技术 1996年9月，约8.3万个网页应用了JAVA技术来制作 1997年2月18日，JDK1.1发布 1997年4月2日，JavaOne会议召开，参与者逾一万人，创当时全球同类会议规模之纪录 1997年9月，JavaDeveloperConnection社区成员超过十万 1998年2月，JDK1.1被下载超过2,000,000次 1998年12月8日，JAVA2企业平台J2EE发布 1999年6月，SUN公司发布Java的三个版本：标准版（JavaSE,以前是J2SE）、企业版（JavaEE以前是J2EE）和微型版（JavaME，以前是J2ME） 2000年5月8日，JDK1.3发布 2000年5月29日，JDK1.4发布 2001年6月5日，NOKIA宣布，到2003年将出售1亿部支持Java的手机 2001年9月24日，J2EE1.3发布 2002年2月26日，J2SE1.4发布，自此Java的计算能力有了大幅提升 2004年9月30日18:00PM，J2SE1.5发布，成为Java语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE1.5更名为Java SE 5.0 2005年6月，JavaOne大会召开，SUN公司公开Java SE 6。此时，Java的各种版本已经更名，以取消其中的数字\"2\"：J2EE更名为Java EE，J2SE更名为Java SE，J2ME更名为Java ME 2006年12月，SUN公司发布JRE6.0 2009年04月20日，甲骨文74亿美元收购Sun。取得java的版权。 2010年11月，由于甲骨文对于Java社区的不友善，因此Apache扬言将退出JCP[4]。 2011年7月28日，甲骨文发布 Java7.0 的正式版。 2014年3月18日，Oracle公司发表 Java SE 8。 2017年9月21日，Oracle公司发表 Java SE 9 2018年3月21日，Oracle公司发表 Java SE 10 2018年9月25日，Java SE 11 发布 2019年3月20日，Java SE 12 发布 4. 第一个Java程序 ​ 我们就可以输出Java的第一个程序\"Hello World！\" public class HelloWorld { //注：String args[] 与 String[] args 都可以执行，但推荐使用 String[] args，这样可以避免歧义和误读。 public static void main(String[] args) { System.out.println(\"Hello World\"); } } ​ 运行以上实例，输出结果如下： $ javac HelloWorld.java $ java HelloWorld Hello World ​ 以上我们使用了两个命令 javac 和 java。 ​ javac 后面跟着的是java文件的文件名，例如 HelloWorld.java。 该命令用于将 java 源文件编译为 class 字节码文件，如： javac HelloWorld.java。 ​ 运行javac命令后，如果成功编译没有错误的话，会出现一个 HelloWorld.class 的文件。 ​ java 后面跟着的是java文件中的类名,例如 HelloWorld 就是类名，如: java HelloWorld。 ​ 注意：java命令后面不要加.class。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Java/Chapter2.html":{"url":"Java/Chapter2.html","title":"第二章：基础语法","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 基本语法 2. 标识符 3. 修饰符 4. 变量 5. 数组 6. 枚举 7. 关键字 8. 注释 9. 空行 10. 继承 11. 接口 12. Java 源程序与编译型运行区别 第二章：基础语法 ​ 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。 对象：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。 类：类是一个模板，它描述一类对象的行为和状态。 方法：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。 实例变量：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。 1. 基本语法 编写 Java 程序时，应注意以下几点： 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。 主方法入口：所有的 Java 程序由 public static void main(String []args) 方法开始执行。 2. 标识符 ​ Java 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。 ​ 关于 Java 标识符，有以下几点需要注意： ​ 所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）开始 ​ 首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合 ​ 关键字不能用作标识符 ​ 标识符是大小写敏感的 ​ 合法标识符举例：age、$salary、_value、__1_value ​ 非法标识符举例：123abc、-salary 3. 修饰符 ​ 像其他语言一样，Java可以使用修饰符来修饰类中方法和属性。主要有两类修饰符： 访问控制修饰符 : default, public , protected, private 非访问控制修饰符 : final, abstract, static, synchronized ​ 在后面的章节中我们会深入讨论 Java 修饰符。 4. 变量 Java 中主要有如下几种类型的变量 局部变量 类变量（静态变量） 成员变量（非静态变量） 5. 数组 ​ 数组是储存在堆上的对象，可以保存多个同类型变量。在后面的章节中，我们将会学到如何声明、构造以及初始化一个数组。 6. 枚举 ​ Java 5.0引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的 bug。 ​ 例如，我们为果汁店设计一个程序，它将限制果汁为小杯、中杯、大杯。这就意味着它不允许顾客点除了这三种尺寸外的果汁。 class FreshJuice { enum FreshJuiceSize{ SMALL, MEDIUM , LARGE } FreshJuiceSize size; } public class FreshJuiceTest { public static void main(String []args){ FreshJuice juice = new FreshJuice(); juice.size = FreshJuice.FreshJuiceSize.MEDIUM ; } } 注意：枚举可以单独声明或者声明在类里面。方法、变量、构造函数也可以在枚举中定义。 7. 关键字 ​ 下面列出了 Java 关键字。这些保留字不能用于常量、变量、和任何标识符的名称。 类别 关键字 说明 访问控制 private 私有的 protected 受保护的 public 公共的 类、方法和变量修饰符 abstract 声明抽象 class 类 extends 扩充,继承 final 最终值,不可改变的 implements 实现（接口） interface 接口 native 本地，原生方法（非 Java 实现） new 新,创建 static 静态 strictfp 严格,精准 synchronized 线程,同步 transient 短暂 volatile 易失 程序控制语句 break 跳出循环 case 定义一个值以供 switch 选择 continue 继续 default 默认 do 运行 else 否则 for 循环 if 如果 instanceof 实例 return 返回 switch 根据值选择执行 while 循环 错误处理 assert 断言表达式是否为真 catch 捕捉异常 finally 有没有异常都执行 throw 抛出一个异常对象 throws 声明一个异常可能被抛出 try 捕获异常 包相关 import 引入 package 包 基本类型 boolean 布尔型 byte 字节型 char 字符型 double 双精度浮点 float 单精度浮点 int 整型 long 长整型 short 短整型 变量引用 super 父类,超类 this 本类 void 无返回值 保留关键字 goto 是关键字，但不能使用 const 是关键字，但不能使用 null 空 8. 注释 ​ 类似于 C/C++、Java 也支持单行以及多行注释。注释中的字符将被 Java 编译器忽略。 public class HelloWorld { /* 这是第一个Java程序 *它将打印Hello World * 这是一个多行注释的示例 */ public static void main(String []args){ // 这是单行注释的示例 /* 这个也是单行注释的示例 */ System.out.println(\"Hello World\"); } } 9. 空行 空白行或者有注释的行，Java 编译器都会忽略掉。 10. 继承 ​ 在 Java 中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法，那么你可以将新创建的类继承该类。 ​ 利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。被继承的类称为超类（super class），派生类称为子类（subclass）。 11. 接口 ​ 在 Java 中，接口可理解为对象间相互通信的协议。接口在继承中扮演着很重要的角色。 ​ 接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类。 12. Java 源程序与编译型运行区别 如下图所示： MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Java/Chapter3.html":{"url":"Java/Chapter3.html","title":"第三章：对象和类","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. Java中的对象 2. Java中的类 3. 构造方法 4. 创建对象 5. 访问实例变量和方法 6. 源文件声明规则 6.1 Java包 6.2 Import语句 6.3 一个简单的例子 第三章：对象和类 ​ Java作为一种面向对象语言。支持以下基本概念： ​ 多态 ​ 继承 ​ 封装 ​ 抽象 ​ 类 ​ 对象 ​ 实例 ​ 方法 ​ 重载 ​ 这里我们重点研究对象和类的概念。 对象：对象是类的一个实例（对象不是找个女朋友），有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。 类：类是一个模板，它描述一类对象的行为和状态。 ​ 下图中男孩（boy）、女孩（girl）为类（class），而具体的每个人为该类的对象（object）： 1. Java中的对象 ​ 现在让我们深入了解什么是对象。看看周围真实的世界，会发现身边有很多对象，车，狗，人等等。所有这些对象都有自己的状态和行为。 ​ 拿一条狗来举例，它的状态有：名字、品种、颜色，行为有：叫、摇尾巴和跑。 ​ 对比现实对象和软件对象，它们之间十分相似。 ​ 软件对象也有状态和行为。软件对象的状态就是属性，行为通过方法体现。 ​ 在软件开发中，方法操作对象内部状态的改变，对象的相互调用也是通过方法来完成。 2. Java中的类 ​ 类可以看成是创建Java对象的模板。 ​ 通过下面一个简单的类来理解下Java中类的定义： public class Dog{ String breed; int age; String color; void barking(){ } void hungry(){ } void sleeping(){ } } ​ 一个类可以包含以下类型变量： 局部变量：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。 成员变量：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。 类变量：类变量也声明在类中，方法体之外，但必须声明为static类型。 ​ 一个类可以拥有多个方法，在上面的例子中：barking()、hungry()和sleeping()都是Dog类的方法。 3. 构造方法 ​ 每个类都有构造方法。如果没有显式地为类定义构造方法，Java编译器将会为该类提供一个默认构造方法。 ​ 在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。 ​ 下面是一个构造方法示例： public class Puppy{ public Puppy(){ } public Puppy(String name){ // 这个构造器仅有一个参数：name } } 4. 创建对象 ​ 对象是根据类创建的。在Java中，使用关键字new来创建一个新的对象。创建对象需要以下三步： 声明：声明一个对象，包括对象名称和对象类型。 实例化：使用关键字new来创建一个对象。 初始化：使用new创建对象时，会调用构造方法初始化对象。 下面是一个创建对象的例子： public class Puppy{ public Puppy(String name){ //这个构造器仅有一个参数：name System.out.println(\"小狗的名字是 : \" + name ); } public static void main(String[] args){ // 下面的语句将创建一个Puppy对象 Puppy myPuppy = new Puppy( \"tommy\" ); } } ​ 编译并运行上面的程序，会打印出下面的结果： 小狗的名字是 : tommy 5. 访问实例变量和方法 ​ 通过已创建的对象来访问成员变量和成员方法，如下所示： /* 实例化对象 */ Object referenceVariable = new Constructor(); /* 访问类中的变量 */ referenceVariable.variableName; /* 访问类中的方法 */ referenceVariable.methodName(); ​ 下面的例子展示如何访问实例变量和调用成员方法： public class Puppy{ int puppyAge; public Puppy(String name){ // 这个构造器仅有一个参数：name System.out.println(\"小狗的名字是 : \" + name ); } public void setAge( int age ){ puppyAge = age; } public int getAge( ){ System.out.println(\"小狗的年龄为 : \" + puppyAge ); return puppyAge; } public static void main(String[] args){ /* 创建对象 */ Puppy myPuppy = new Puppy( \"tommy\" ); /* 通过方法来设定age */ myPuppy.setAge( 2 ); /* 调用另一个方法获取age */ myPuppy.getAge( ); /*你也可以像下面这样访问成员变量 */ System.out.println(\"变量值 : \" + myPuppy.puppyAge ); } } ​ 编译并运行上面的程序，产生如下结果： 小狗的名字是 : tommy 小狗的年龄为 : 2 变量值 : 2 6. 源文件声明规则 ​ 最后部分，我们将学习源文件的声明规则。当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则。 ​ 一个源文件中只能有一个public类 ​ 一个源文件可以有多个非public类 ​ 源文件的名称应该和public类的类名保持一致。例如：源文件中public类的类名是Employee，那么源文件应该命名为Employee.java。 ​ 如果一个类定义在某个包中，那么package语句应该在源文件的首行。 ​ 如果源文件包含import语句，那么应该放在package语句和类定义之间。如果没有package语句，那么import语句应该在源文件中最前面。 ​ import语句和package语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。 ​ 类有若干种访问级别，并且类也分不同的类型：抽象类和final类等。这些将在访问控制章节介绍。 ​ 除了上面提到的几种类型，Java还有一些特殊的类，如：内部类、匿名类。 6.1 Java包 ​ 包主要用来对类和接口进行分类。当开发Java程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。 6.2 Import语句 ​ 在Java中，如果给出一个完整的限定名，包括包名、类名，那么Java编译器就可以很容易地定位到源代码或者类。Import语句就是用来提供一个合理的路径，使得编译器可以找到某个类。 ​ 例如，下面的命令行将会命令编译器载入java_installation/java/io路径下的所有类 import java.io.*; 6.3 一个简单的例子 ​ 在该例子中，我们创建两个类：Employee 和 EmployeeTest。 ​ 首先打开文本编辑器，把下面的代码粘贴进去。注意将文件保存为 Employee.java。 ​ Employee类有四个成员变量：name、age、designation和salary。该类显式声明了一个构造方法，该方法只有一个参数。Employee类文件代码如下： import java.io.*; public class Employee{ String name; int age; String designation; double salary; // Employee 类的构造器 public Employee(String name){ this.name = name; } // 设置age的值 public void empAge(int empAge){ age = empAge; } /* 设置designation的值*/ public void empDesignation(String empDesig){ designation = empDesig; } /* 设置salary的值*/ public void empSalary(double empSalary){ salary = empSalary; } /* 打印信息 */ public void printEmployee(){ System.out.println(\"名字:\"+ name ); System.out.println(\"年龄:\" + age ); System.out.println(\"职位:\" + designation ); System.out.println(\"薪水:\" + salary); } } ​ 程序都是从main方法开始执行。为了能运行这个程序，必须包含main方法并且创建一个实例对象。 ​ 下面给出EmployeeTest类，该类实例化2个 Employee 类的实例，并调用方法设置变量的值。 ​ 将下面的代码保存在 EmployeeTest.java文件中。EmployeeTest文件代码： import java.io.*; public class EmployeeTest{ public static void main(String[] args){ /* 使用构造器创建两个对象 */ Employee empOne = new Employee(\"RUNOOB1\"); Employee empTwo = new Employee(\"RUNOOB2\"); // 调用这两个对象的成员方法 empOne.empAge(26); empOne.empDesignation(\"高级程序员\"); empOne.empSalary(1000); empOne.printEmployee(); empTwo.empAge(21); empTwo.empDesignation(\"菜鸟程序员\"); empTwo.empSalary(500); empTwo.printEmployee(); } } ​ 编译这两个文件并且运行 EmployeeTest 类，可以看到如下结果： $ javac EmployeeTest.java $ java EmployeeTest 名字:RUNOOB1 年龄:26 职位:高级程序员 薪水:1000.0 名字:RUNOOB2 年龄:21 职位:菜鸟程序员 薪水:500.0 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Java/Chapter4.html":{"url":"Java/Chapter4.html","title":"第四章：基本数据类型","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 内置数据类型 1.1 byte 1.2 short 1.3 int 1.4 long 1.5 float 1.6 double 1.7 boolean 1.8 char 1.9 实例 1.10 类型默认值 2. 引用类型 3. Java 常量 4. 自动类型转换 4.1 强制类型转换 4.2 隐含强制类型转换 第四章：基本数据类型 ​ 变量就是申请内存来存储值。也就是说，当创建变量的时候，需要在内存中申请空间。 ​ 内存管理系统根据变量的类型为变量分配存储空间，分配的空间只能用来储存该类型数据。 ​ 因此，通过定义不同类型的变量，可以在内存中储存整数、小数或者字符。 ​ Java 的两大数据类型: 内置数据类型 引用数据类型 1. 内置数据类型 ​ Java语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。 1.1 byte ​ byte 数据类型是8位、有符号的，以二进制补码表示的整数； ​ 最小值是 -128（-2^7）； ​ 最大值是 127（2^7-1）； ​ 默认值是 0； ​ byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一； ​ 例子：byte a = 100，byte b = -50。 1.2 short ​ short 数据类型是 16 位、有符号的以二进制补码表示的整数 ​ 最小值是 -32768（-2^15）； ​ 最大值是 32767（2^15 - 1）； ​ Short 数据类型也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一； ​ 默认值是 0； ​ 例子：short s = 1000，short r = -20000。 1.3 int ​ int 数据类型是32位、有符号的以二进制补码表示的整数； ​ 最小值是 -2,147,483,648（-2^31）； ​ 最大值是 2,147,483,647（2^31 - 1）； ​ 一般地整型变量默认为 int 类型； ​ 默认值是 0 ； ​ 例子：int a = 100000, int b = -200000。 1.4 long ​ long 数据类型是 64 位、有符号的以二进制补码表示的整数； ​ 最小值是 -9,223,372,036,854,775,808（-2^63）； ​ 最大值是 9,223,372,036,854,775,807（2^63 -1）； ​ 这种类型主要使用在需要比较大整数的系统上； ​ 默认值是 0L； ​ 例子： long a = 100000L，Long b = -200000L。 \"L\"理论上不分大小写，但是若写成\"l\"容易与数字\"1\"混淆，不容易分辩。所以最好大写。 1.5 float ​ float 数据类型是单精度、32位、符合IEEE 754标准的浮点数； ​ float 在储存大型浮点数组的时候可节省内存空间； ​ 默认值是 0.0f； ​ 浮点数不能用来表示精确的值，如货币； ​ 例子：float f1 = 234.5f。 1.6 double ​ double 数据类型是双精度、64 位、符合IEEE 754标准的浮点数； ​ 浮点数的默认类型为double类型； ​ double类型同样不能表示精确的值，如货币； ​ 默认值是 0.0d； ​ 例子：double d1 = 123.4。 1.7 boolean ​ boolean数据类型表示一位的信息； ​ 只有两个取值：true 和 false； ​ 这种类型只作为一种标志来记录 true/false 情况； ​ 默认值是 false； ​ 例子：boolean one = true。 1.8 char ​ char类型是一个单一的 16 位 Unicode 字符； ​ 最小值是 \\u0000（即为0）； ​ 最大值是 \\uffff（即为65,535）； ​ char 数据类型可以储存任何字符； ​ 例子：char letter = 'A';。 1.9 实例 ​ 对于数值类型的基本类型的取值范围，我们无需强制去记忆，因为它们的值都已经以常量的形式定义在对应的包装类中了。请看下面的例子： public class PrimitiveTypeTest { public static void main(String[] args) { // byte System.out.println(\"基本类型：byte 二进制位数：\" + Byte.SIZE); System.out.println(\"包装类：java.lang.Byte\"); System.out.println(\"最小值：Byte.MIN_VALUE=\" + Byte.MIN_VALUE); System.out.println(\"最大值：Byte.MAX_VALUE=\" + Byte.MAX_VALUE); System.out.println(); // short System.out.println(\"基本类型：short 二进制位数：\" + Short.SIZE); System.out.println(\"包装类：java.lang.Short\"); System.out.println(\"最小值：Short.MIN_VALUE=\" + Short.MIN_VALUE); System.out.println(\"最大值：Short.MAX_VALUE=\" + Short.MAX_VALUE); System.out.println(); // int System.out.println(\"基本类型：int 二进制位数：\" + Integer.SIZE); System.out.println(\"包装类：java.lang.Integer\"); System.out.println(\"最小值：Integer.MIN_VALUE=\" + Integer.MIN_VALUE); System.out.println(\"最大值：Integer.MAX_VALUE=\" + Integer.MAX_VALUE); System.out.println(); // long System.out.println(\"基本类型：long 二进制位数：\" + Long.SIZE); System.out.println(\"包装类：java.lang.Long\"); System.out.println(\"最小值：Long.MIN_VALUE=\" + Long.MIN_VALUE); System.out.println(\"最大值：Long.MAX_VALUE=\" + Long.MAX_VALUE); System.out.println(); // float System.out.println(\"基本类型：float 二进制位数：\" + Float.SIZE); System.out.println(\"包装类：java.lang.Float\"); System.out.println(\"最小值：Float.MIN_VALUE=\" + Float.MIN_VALUE); System.out.println(\"最大值：Float.MAX_VALUE=\" + Float.MAX_VALUE); System.out.println(); // double System.out.println(\"基本类型：double 二进制位数：\" + Double.SIZE); System.out.println(\"包装类：java.lang.Double\"); System.out.println(\"最小值：Double.MIN_VALUE=\" + Double.MIN_VALUE); System.out.println(\"最大值：Double.MAX_VALUE=\" + Double.MAX_VALUE); System.out.println(); // char System.out.println(\"基本类型：char 二进制位数：\" + Character.SIZE); System.out.println(\"包装类：java.lang.Character\"); // 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台 System.out.println(\"最小值：Character.MIN_VALUE=\" + (int) Character.MIN_VALUE); // 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台 System.out.println(\"最大值：Character.MAX_VALUE=\" + (int) Character.MAX_VALUE); } } 编译以上代码输出结果如下所示： 基本类型：byte 二进制位数：8 包装类：java.lang.Byte 最小值：Byte.MIN_VALUE=-128 最大值：Byte.MAX_VALUE=127 基本类型：short 二进制位数：16 包装类：java.lang.Short 最小值：Short.MIN_VALUE=-32768 最大值：Short.MAX_VALUE=32767 基本类型：int 二进制位数：32 包装类：java.lang.Integer 最小值：Integer.MIN_VALUE=-2147483648 最大值：Integer.MAX_VALUE=2147483647 基本类型：long 二进制位数：64 包装类：java.lang.Long 最小值：Long.MIN_VALUE=-9223372036854775808 最大值：Long.MAX_VALUE=9223372036854775807 基本类型：float 二进制位数：32 包装类：java.lang.Float 最小值：Float.MIN_VALUE=1.4E-45 最大值：Float.MAX_VALUE=3.4028235E38 基本类型：double 二进制位数：64 包装类：java.lang.Double 最小值：Double.MIN_VALUE=4.9E-324 最大值：Double.MAX_VALUE=1.7976931348623157E308 基本类型：char 二进制位数：16 包装类：java.lang.Character 最小值：Character.MIN_VALUE=0 最大值：Character.MAX_VALUE=65535 ​ Float和Double的最小值和最大值都是以科学记数法的形式输出的，结尾的\"E+数字\"表示E之前的数字要乘以10的多少次方。比如3.14E3就是3.14 × 103 =3140，3.14E-3 就是 3.14 x 10-3 =0.00314。 ​ 实际上，JAVA中还存在另外一种基本类型 void，它也有对应的包装类 java.lang.Void，不过我们无法直接对它们进行操作。 1.10 类型默认值 ​ 下表列出了 Java 各个类型的默认值： 数据类型 默认值 byte 0 short 0 int 0 long 0L float 0.0f double 0.0d char 'u0000' String (or any object) null boolean false public class Test { static boolean bool; static byte by; static char ch; static double d; static float f; static int i; static long l; static short sh; static String str; public static void main(String[] args) { System.out.println(\"Bool :\" + bool); System.out.println(\"Byte :\" + by); System.out.println(\"Character:\" + ch); System.out.println(\"Double :\" + d); System.out.println(\"Float :\" + f); System.out.println(\"Integer :\" + i); System.out.println(\"Long :\" + l); System.out.println(\"Short :\" + sh); System.out.println(\"String :\" + str); } } 实例输出结果为： Bool :false Byte :0 Character: Double :0.0 Float :0.0 Integer :0 Long :0 Short :0 String :null 2. 引用类型 ​ 在Java中，引用类型的变量非常类似于C/C++的指针。引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型，比如 Employee、Puppy 等。变量一旦声明后，类型就不能被改变了。 ​ 对象、数组都是引用数据类型。 ​ 所有引用类型的默认值都是null。 ​ 一个引用变量可以用来引用任何与之兼容的类型。 ​ 例子：Site site = new Site(\"Runoob\")。 3. Java 常量 ​ 常量在程序运行时是不能被修改的。 ​ 在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似： final double PI = 3.1415927; ​ 虽然常量名也可以用小写，但为了便于识别，通常使用大写字母表示常量。 ​ 字面量可以赋给任何内置类型的变量。例如： byte a = 68; char a = 'A' ​ byte、int、long、和short都可以用十进制、16进制以及8进制的方式来表示。 ​ 当使用常量的时候，前缀 0 表示 8 进制，而前缀 0x 代表 16 进制, 例如： int decimal = 100; int octal = 0144; int hexa = 0x64; ​ 和其他语言一样，Java的字符串常量也是包含在两个引号之间的字符序列。下面是字符串型字面量的例子： \"Hello World\" \"two\\nlines\" \"\\\"This is in quotes\\\"\" ​ 字符串常量和字符常量都可以包含任何Unicode字符。例如： char a = '\\u0001'; String a = \"\\u0001\"; ​ Java语言支持一些特殊的转义字符序列。 符号 字符含义 \\n 换行 (0x0a) \\r 回车 (0x0d) \\f 换页符(0x0c) \\b 退格 (0x08) \\0 空字符 (0x20) \\s 字符串 \\t 制表符 \\\" 双引号 \\' 单引号 \\ 反斜杠 \\ddd 八进制字符 (ddd) \\uxxxx 16进制Unicode字符 (xxxx) 4. 自动类型转换 ​ 整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算。转换从低级到高级。 低 ------------------------------------> 高 byte,short,char—> int —> long—> float —> double ​ 数据类型转换必须满足如下规则： 不能对boolean类型进行类型转换。 不能把对象类型转换成不相关类的对象。 在把容量大的类型转换为容量小的类型时必须使用强制类型转换。 转换过程中可能导致溢出或损失精度，例如： int i =128; byte b = (byte)i; ​ 因为 byte 类型是 8 位，最大值为127，所以当 int 强制转换为 byte 类型时，值 128 时候就会导致溢出。 浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入，例如： (int)23.7 == 23; (int)-45.89f == -45 ​ 必须满足转换前的数据类型的位数要低于转换后的数据类型，例如: short数据类型的位数为16位，就可以自动转换位数为32的int类型，同样float数据类型的位数为32，可以自动转换为64位的double类型。 public class ZiDongLeiZhuan{ public static void main(String[] args){ char c1='a';//定义一个char类型 int i1 = c1;//char自动类型转换为int System.out.println(\"char自动类型转换为int后的值等于\"+i1); char c2 = 'A';//定义一个char类型 int i2 = c2+1;//char 类型和 int 类型计算 System.out.println(\"char类型和int计算后的值等于\"+i2); } } 运行结果为: char自动类型转换为int后的值等于97 char类型和int计算后的值等于66 解析：c1 的值为字符 a ,查 ASCII 码表可知对应的 int 类型值为 97， A 对应值为 65，所以 i2=65+1=66。 4.1 强制类型转换 条件是转换的数据类型必须是兼容的。 格式：(type)value type是要强制类型转换后的数据类型 实例： public class QiangZhiZhuanHuan{ public static void main(String[] args){ int i1 = 123; byte b = (byte)i1;//强制类型转换为byte System.out.println(\"int强制类型转换为byte后的值等于\"+b); } } 运行结果： int强制类型转换为byte后的值等于123 4.2 隐含强制类型转换 整数的默认类型是 int。 浮点型不存在这种情况，因为在定义 float 类型时必须在数字后面跟上 F 或者 f。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Java/Chapter5.html":{"url":"Java/Chapter5.html","title":"第五章：变量类型","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 局部变量 2. 实例变量 3. 类变量（静态变量） 第五章：变量类型 ​ 在Java语言中，所有的变量在使用前必须声明。声明变量的基本格式如下： type identifier [ = value][, identifier [= value] ...] ; ​ 格式说明：type为Java数据类型。identifier是变量名。可以使用逗号隔开来声明多个同类型变量。 ​ 以下列出了一些变量的声明实例。注意有些包含了初始化过程。 int a, b, c; // 声明三个int型整数：a、 b、c int d = 3, e = 4, f = 5; // 声明三个整数并赋予初值 byte z = 22; // 声明并初始化 z String s = \"runoob\"; // 声明并初始化字符串 s double pi = 3.14159; // 声明了双精度浮点型变量 pi char x = 'x'; // 声明变量 x 的值是字符 'x'。 ​ Java语言支持的变量类型有： ​ 类变量：独立于方法之外的变量，用 static 修饰。 ​ 实例变量：独立于方法之外的变量，不过没有 static 修饰。 ​ 局部变量：类的方法中的变量。 public class Variable{ static int allClicks=0; // 类变量 String str=\"hello world\"; // 实例变量 public void method(){ int i =0; // 局部变量 } } 1. 局部变量 ​ 局部变量声明在方法、构造方法或者语句块中； ​ 局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁； ​ 访问修饰符不能用于局部变量； ​ 局部变量只在声明它的方法、构造方法或者语句块中可见； ​ 局部变量是在栈上分配的。 ​ 局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。 ​ 在以下实例中age是一个局部变量。定义在pupAge()方法中，它的作用域就限制在这个方法中。 package com.runoob.test; public class Test{ public void pupAge(){ int age = 0; age = age + 7; System.out.println(\"小狗的年龄是: \" + age); } public static void main(String[] args){ Test test = new Test(); test.pupAge(); } } ​ 以上实例编译运行结果如下: 小狗的年龄是: 7 ​ 在下面的例子中 age 变量没有初始化，所以在编译时会出错： package com.runoob.test; public class Test{ public void pupAge(){ int age; age = age + 7; System.out.println(\"小狗的年龄是 : \" + age); } public static void main(String[] args){ Test test = new Test(); test.pupAge(); } } ​ 以上实例编译运行结果如下: Test.java:4:variable number might not have been initialized age = age + 7; ^ 1 error 2. 实例变量 ​ 实例变量声明在一个类中，但在方法、构造方法和语句块之外； ​ 当一个对象被实例化之后，每个实例变量的值就跟着确定； ​ 实例变量在对象创建的时候创建，在对象被销毁的时候销毁； ​ 实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息； ​ 实例变量可以声明在使用前或者使用后； ​ 访问修饰符可以修饰实例变量； ​ 实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见； ​ 实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定； ​ 实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。 Employee.java 文件代码： import java.io.*; public class Employee{ // 这个实例变量对子类可见 public String name; // 私有变量，仅在该类可见 private double salary; //在构造器中对name赋值 public Employee (String empName){ name = empName; } //设定salary的值 public void setSalary(double empSal){ salary = empSal; } // 打印信息 public void printEmp(){ System.out.println(\"名字 : \" + name ); System.out.println(\"薪水 : \" + salary); } public static void main(String[] args){ Employee empOne = new Employee(\"RUNOOB\"); empOne.setSalary(1000); empOne.printEmp(); } } 以上实例编译运行结果如下: $ javac Employee.java $ java Employee 名字 : RUNOOB 薪水 : 1000.0 3. 类变量（静态变量） ​ 类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。 ​ 无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。 ​ 静态变量除了被声明为常量外很少使用。常量是指声明为public/private，final和static类型的变量。常量初始化后不可改变。 ​ 静态变量储存在静态存储区。经常被声明为常量，很少单独使用static声明变量。 ​ 静态变量在第一次被访问时创建，在程序结束时销毁。 ​ 与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为public类型。 ​ 默认值和实例变量相似。数值型变量默认值是0，布尔型默认值是false，引用类型默认值是null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。 ​ 静态变量可以通过：ClassName.VariableName的方式访问。 ​ 类变量被声明为public static final类型时，类变量名称一般建议使用大写字母。如果静态变量不是public和final类型，其命名方式与实例变量以及局部变量的命名方式一致。 Employee.java 文件代码： import java.io.*; public class Employee { //salary是静态的私有变量 private static double salary; // DEPARTMENT是一个常量 public static final String DEPARTMENT = \"开发人员\"; public static void main(String[] args){ salary = 10000; System.out.println(DEPARTMENT+\"平均工资:\"+salary); } } 以上实例编译运行结果如下: 开发人员平均工资:10000.0 注意：如果其他类想要访问该变量，可以这样访问：Employee.DEPARTMENT。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Java/Chapter6.html":{"url":"Java/Chapter6.html","title":"第六章：修饰符","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 访问控制修饰符 1.1 默认访问修饰符 1.2 私有访问修饰符-private 1.3 公有访问修饰符-public 1.4 受保护的访问修饰符-protected 1.5 访问控制和继承 2. 非访问修饰符 2.1 static 修饰符 2.2 final 修饰符 2.2.1 final 变量 2.2.2 final 方法 2.2.3 final 类 2.3 abstract 修饰符 2.3.1 抽象类 2.3.2 抽象方法 2.4 synchronized 修饰符 2.5 transient 修饰符 2.6 volatile 修饰符 第六章：修饰符 ​ Java语言提供了很多修饰符，主要分为以下两类： 访问修饰符 非访问修饰符 ​ 修饰符用来定义类、方法或者变量，通常放在语句的最前端。我们通过下面的例子来说明： public class ClassName { // ... } private boolean myFlag; static final double weeks = 9.5; protected static final int BOXWIDTH = 42; public static void main(String[] arguments) { // 方法体 } 1. 访问控制修饰符 ​ Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。 default (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。 private : 在同一类内可见。使用对象：变量、方法。 注意：不能修饰类（外部类） public : 对所有类可见。使用对象：类、接口、变量、方法 protected : 对同一包内的类和所有子类可见。使用对象：变量、方法。 注意：不能修饰类（外部类）。 ​ 我们可以通过以下表来说明访问权限： 修饰符 当前类 同一包内 子孙类(同一包) 子孙类(不同包) 其他包 public Y Y Y Y Y protected Y Y Y Y/N N default Y Y Y N N private Y N N N N 1.1 默认访问修饰符 ​ 使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。接口里的变量都隐式声明为 public static final,而接口里的方法默认情况下访问权限为 public。 ​ 如下例所示，变量和方法的声明可以不使用任何修饰符。 String version = \"1.5.1\"; boolean processOrder() { return true; } 1.2 私有访问修饰符-private ​ 私有访问修饰符是最严格的访问级别，所以被声明为 private 的方法、变量和构造方法只能被所属类访问，并且类和接口不能声明为 private。 ​ 声明为私有访问类型的变量只能通过类中公共的 getter 方法被外部类访问。 ​ Private 访问修饰符的使用主要用来隐藏类的实现细节和保护类的数据。 ​ 下面的类使用了私有访问修饰符： public class Logger { private String format; public String getFormat() { return this.format; } public void setFormat(String format) { this.format = format; } } ​ 实例中，Logger 类中的 format 变量为私有变量，所以其他类不能直接得到和设置该变量的值。为了使其他类能够操作该变量，定义了两个 public 方法：getFormat() （返回 format的值）和 setFormat(String)（设置 format 的值） 1.3 公有访问修饰符-public ​ 被声明为 public 的类、方法、构造方法和接口能够被任何其他类访问。 ​ 如果几个相互访问的 public 类分布在不同的包中，则需要导入相应 public 类所在的包。由于类的继承性，类所有的公有方法和变量都能被其子类继承。 ​ 以下函数使用了公有访问控制： public static void main(String[] arguments) { // ... } ​ Java 程序的 main() 方法必须设置成公有的，否则，Java 解释器将不能运行该类。 1.4 受保护的访问修饰符-protected ​ protected 需要从以下两个点来分析说明： 子类与基类在同一包中：被声明为 protected 的变量、方法和构造器能被同一个包中的任何其他类访问； 子类与基类不在同一包中：那么在子类中，子类实例可以访问其从基类继承而来的 protected 方法，而不能访问基类实例的protected方法。 ​ protected 可以修饰数据成员，构造方法，方法成员，不能修饰类（内部类除外）。 ​ 接口及接口的成员变量和成员方法不能声明为 protected。 可以看看下图演示： ​ 子类能访问 protected 修饰符声明的方法和变量，这样就能保护不相关的类使用这些方法和变量。 ​ 下面的父类使用了 protected 访问修饰符，子类重写了父类的 openSpeaker() 方法。 class AudioPlayer { protected boolean openSpeaker(Speaker sp) { // 实现细节 } } class StreamingAudioPlayer extends AudioPlayer { protected boolean openSpeaker(Speaker sp) { // 实现细节 } } ​ 如果把 openSpeaker() 方法声明为 private，那么除了 AudioPlayer 之外的类将不能访问该方法。 ​ 如果把 openSpeaker() 声明为 public，那么所有的类都能够访问该方法。 ​ 如果我们只想让该方法对其所在类的子类可见，则将该方法声明为 protected。 protected 是最难理解的一种 Java 类成员访问权限修饰词，更多详细内容请查看 [Java protected 关键字详解]。 1.5 访问控制和继承 ​ 请注意以下方法继承的规则： 父类中声明为 public 的方法在子类中也必须为 public。 父类中声明为 protected 的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private。 父类中声明为 private 的方法，不能够被继承。 2. 非访问修饰符 ​ 为了实现一些其他的功能，Java 也提供了许多非访问修饰符。 static 修饰符，用来修饰类方法和类变量。 final 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。 abstract 修饰符，用来创建抽象类和抽象方法。 synchronized 和 volatile 修饰符，主要用于线程的编程。 2.1 static 修饰符 静态变量： static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。 静态方法： static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。 对类变量和方法的访问可以直接使用 classname.variablename 和 classname.methodname 的方式访问。 如下例所示，static修饰符用来创建类方法和类变量。 public class InstanceCounter { private static int numInstances = 0; protected static int getCount() { return numInstances; } private static void addInstance() { numInstances++; } InstanceCounter() { InstanceCounter.addInstance(); } public static void main(String[] arguments) { System.out.println(\"Starting with \" + InstanceCounter.getCount() + \" instances\"); for (int i = 0; i 以上实例运行编辑结果如下: Starting with 0 instances Created 500 instances 2.2 final 修饰符 2.2.1 final 变量 ​ final 表示\"最后的、最终的\"含义，变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。 ​ final 修饰符通常和 static 修饰符一起使用来创建类常量。 public class Test{ final int value = 10; // 下面是声明常量的实例 public static final int BOXWIDTH = 6; static final String TITLE = \"Manager\"; public void changeValue(){ value = 12; //将输出一个错误 } } 2.2.2 final 方法 父类中的 final 方法可以被子类继承，但是不能被之类重写。 声明 final 方法的主要目的是防止该方法的内容被修改。 如下所示，使用 final 修饰符声明方法。 public class Test{ public final void changeName(){ // 方法体 } } 2.2.3 final 类 ​ final 类不能被继承，没有类能够继承 final 类的任何特性。 public final class Test { // 类体 } 2.3 abstract 修饰符 2.3.1 抽象类 ​ 抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。 ​ 一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。 ​ 抽象类可以包含抽象方法和非抽象方法。 abstract class Caravan{ private double price; private String model; private String year; public abstract void goFast(); //抽象方法 public abstract void changeColor(); } 2.3.2 抽象方法 ​ 抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。 ​ 抽象方法不能被声明成 final 和 static。 ​ 任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。 ​ 如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。 ​ 抽象方法的声明以分号结尾，例如：public abstract sample();。 public abstract class SuperClass{ abstract void m(); //抽象方法 } class SubClass extends SuperClass{ //实现抽象方法 void m(){ ......... } } 2.4 synchronized 修饰符 ​ synchronized 关键字声明的方法同一时间只能被一个线程访问。synchronized 修饰符可以应用于四个访问修饰符。 public synchronized void showDetails(){ ....... } 2.5 transient 修饰符 ​ 序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。 ​ 该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。 public transient int limit = 55; // 不会持久化 public int b; // 持久化 2.6 volatile 修饰符 ​ volatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。 ​ 一个 volatile 对象引用可能是 null。 public class MyRunnable implements Runnable { private volatile boolean active; public void run() { active = true; while (active) // 第一行 { // 代码 } } public void stop() { active = false; // 第二行 } } ​ 通常情况下，在一个线程调用 run() 方法（在 Runnable 开启的线程），在另一个线程调用 stop() 方法。 如果 第一行 中缓冲区的 active 值被使用，那么在 第二行 的 active 值为 false 时循环不会停止。 ​ 但是以上代码中我们使用了 volatile 修饰 active，所以该循环会停止。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Java/Chapter7.html":{"url":"Java/Chapter7.html","title":"第七章：运算符","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 算术运算符 1.1. 自增自减运算符 1.1.1 自增（++）自减（--）运算符 1.1.2 前缀自增自减法(++a,--a) 1.1.3 后缀自增自减法(a++,a--) 2. 关系运算符 3. 位运算符 4. 逻辑运算符 4.1 短路逻辑运算符 5. 赋值运算符 6. 条件运算符（?:） 7. instanceof 运算符 8. 运算符优先级 第七章：运算符 ​ 计算机的最基本用途之一就是执行数学运算，作为一门计算机语言，Java也提供了一套丰富的运算符来操纵变量。我们可以把运算符分成以下几组： ​ 算术运算符 ​ 关系运算符 ​ 位运算符 ​ 逻辑运算符 ​ 赋值运算符 ​ 其他运算符 1. 算术运算符 ​ 算术运算符用在数学表达式中，它们的作用和在数学中的作用一样。下表列出了所有的算术运算符。 ​ 表格中的实例假设整数变量A的值为10，变量B的值为20： 操作符 描述 例子 + 加法 - 相加运算符两侧的值 A + B 等于 30 - 减法 - 左操作数减去右操作数 A – B 等于 -10 * 乘法 - 相乘操作符两侧的值 A * B等于200 / 除法 - 左操作数除以右操作数 B / A等于2 ％ 取余 - 左操作数除以右操作数的余数 B%A等于0 ++ 自增: 操作数的值增加1 B++ 或 ++B 等于 21（区别详见下文） -- 自减: 操作数的值减少1 B-- 或 --B 等于 19（区别详见下文） 下面的简单示例程序演示了算术运算符。复制并粘贴下面的 Java 程序并保存为 Test.java 文件，然后编译并运行这个程序： public class Test { public static void main(String[] args) { int a = 10; int b = 20; int c = 25; int d = 25; System.out.println(\"a + b = \" + (a + b) ); System.out.println(\"a - b = \" + (a - b) ); System.out.println(\"a * b = \" + (a * b) ); System.out.println(\"b / a = \" + (b / a) ); System.out.println(\"b % a = \" + (b % a) ); System.out.println(\"c % a = \" + (c % a) ); System.out.println(\"a++ = \" + (a++) ); System.out.println(\"a-- = \" + (a--) ); // 查看 d++ 与 ++d 的不同 System.out.println(\"d++ = \" + (d++) ); System.out.println(\"++d = \" + (++d) ); } } 以上实例编译运行结果如下： a + b = 30 a - b = -10 a * b = 200 b / a = 2 b % a = 0 c % a = 5 a++ = 10 a-- = 11 d++ = 25 ++d = 27 1.1. 自增自减运算符 1.1.1 自增（++）自减（--）运算符 ​ 是一种特殊的算术运算符，在算术运算符中需要两个操作数来进行运算，而自增自减运算符是一个操作数。 public class selfAddMinus{ public static void main(String[] args){ int a = 3;//定义一个变量； int b = ++a;//自增运算 int c = 3; int d = --c;//自减运算 System.out.println(\"进行自增运算后的值等于\"+b); System.out.println(\"进行自减运算后的值等于\"+d); } } 运行结果为： 进行自增运算后的值等于4 进行自减运算后的值等于2 解析： int b = ++a; 拆分运算过程为: a=a+1=4; b=a=4, 最后结果为b=4,a=4 int d = --c; 拆分运算过程为: c=c-1=2; d=c=2, 最后结果为d=2,c=2 1.1.2 前缀自增自减法(++a,--a) 先进行自增或者自减运算，再进行表达式运算。 1.1.3 后缀自增自减法(a++,a--) 先进行表达式运算，再进行自增或者自减运算 实例： public class selfAddMinus{ public static void main(String[] args){ int a = 5;//定义一个变量； int b = 5; int x = 2*++a; int y = 2*b++; System.out.println(\"自增运算符前缀运算后a=\"+a+\",x=\"+x); System.out.println(\"自增运算符后缀运算后b=\"+b+\",y=\"+y); } } 运行结果为： 自增运算符前缀运算后a=6，x=12 自增运算符后缀运算后b=6，y=10 2. 关系运算符 ​ 下表为Java支持的关系运算符 ​ 表格中的实例整数变量A的值为10，变量B的值为20： 运算符 描述 例子 == 检查如果两个操作数的值是否相等，如果相等则条件为真。 （A == B）为假。 != 检查如果两个操作数的值是否相等，如果值不相等则条件为真。 (A != B) 为真。 > 检查左操作数的值是否大于右操作数的值，如果是那么条件为真。 （A> B）为假 检查左操作数的值是否小于右操作数的值，如果是那么条件为真。 （A >= 检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。 （A> = B）为假。 检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。 （A ​ 下面的简单示例程序演示了关系运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序： public class Test { public static void main(String[] args) { int a = 10; int b = 20; System.out.println(\"a == b = \" + (a == b) ); System.out.println(\"a != b = \" + (a != b) ); System.out.println(\"a > b = \" + (a > b) ); System.out.println(\"a = a = \" + (b >= a) ); System.out.println(\"b 以上实例编译运行结果如下： a == b = false a != b = true a > b = false a = a = true b 3. 位运算符 ​ Java定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。 ​ 位运算符作用在所有的位上，并且按位运算。假设a = 60，b = 13;它们的二进制格式表示将如下： A = 0011 1100 B = 0000 1101 ----------------- A&B = 0000 1100 A | B = 0011 1101 A ^ B = 0011 0001 ~A= 1100 0011 ​ 下表列出了位运算符的基本运算，假设整数变量 A 的值为 60 和变量 B 的值为 13： 操作符 描述 例子 ＆ 如果相对应位都是1，则结果为1，否则为0 （A＆B），得到12，即0000 1100 \\ 如果相对应位都是 0，则结果为 0，否则为 1 （A \\ B）得到61，即 0011 1101 ^ 如果相对应位值相同，则结果为0，否则为1 （A ^ B）得到49，即 0011 0001 〜 按位取反运算符翻转操作数的每一位，即0变成1，1变成0。 （〜A）得到-61，即1100 0011 按位左移运算符。左操作数按位左移右操作数指定的位数。 A >> 按位右移运算符。左操作数按位右移右操作数指定的位数。 A >> 2得到15即 1111 >>> 按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。 A>>>2得到15即0000 1111 ​ 下面的简单示例程序演示了位运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序： public class Test { public static void main(String[] args) { int a = 60; /* 60 = 0011 1100 */ int b = 13; /* 13 = 0000 1101 */ int c = 0; c = a & b; /* 12 = 0000 1100 */ System.out.println(\"a & b = \" + c ); c = a | b; /* 61 = 0011 1101 */ System.out.println(\"a | b = \" + c ); c = a ^ b; /* 49 = 0011 0001 */ System.out.println(\"a ^ b = \" + c ); c = ~a; /*-61 = 1100 0011 */ System.out.println(\"~a = \" + c ); c = a > 2; /* 15 = 1111 */ System.out.println(\"a >> 2 = \" + c ); c = a >>> 2; /* 15 = 0000 1111 */ System.out.println(\"a >>> 2 = \" + c ); } } ​ 以上实例编译运行结果如下： a & b = 12 a | b = 61 a ^ b = 49 ~a = -61 a > 2 = 15 a >>> 2 = 15 4. 逻辑运算符 ​ 下表列出了逻辑运算符的基本运算，假设布尔变量A为真，变量B为假 操作符 描述 例子 && 称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。 （A && B）为假。 \\ \\ 称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。 （A \\ \\ B）为真。 ！ 称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。 ！（A && B）为真。 ​ 下面的简单示例程序演示了逻辑运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序： public class Test { public static void main(String[] args) { boolean a = true; boolean b = false; System.out.println(\"a && b = \" + (a&&b)); System.out.println(\"a || b = \" + (a||b) ); System.out.println(\"!(a && b) = \" + !(a && b)); } } 以上实例编译运行结果如下： a && b = false a || b = true !(a && b) = true 4.1 短路逻辑运算符 ​ 当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false时，其结果就必定是false，这时候就不会再判断第二个操作了。 public class LuoJi{ public static void main(String[] args){ int a = 5;//定义一个变量； boolean b = (a 运行结果为： 使用短路逻辑运算符的结果为false a的结果为5 解析： 该程序使用到了短路逻辑运算符(&&)，首先判断 a 5. 赋值运算符 ​ 下面是Java语言支持的赋值运算符： 操作符 描述 例子 = 简单的赋值运算符，将右操作数的值赋给左侧操作数 C = A + B将把A + B得到的值赋给C + = 加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数 C + = A等价于C = C + A - = 减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数 C - = A等价于C = C - A * = 乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数 C = A等价于C = C A / = 除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数 C / = A等价于C = C / A （％）= 取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数 C％= A等价于C = C％A 左移位赋值运算符 C >> = 右移位赋值运算符 C >> = 2等价于C = C >> 2 ＆= 按位与赋值运算符 C＆= 2等价于C = C＆2 ^ = 按位异或赋值操作符 C ^ = 2等价于C = C ^ 2 \\ = 按位或赋值操作符 C \\ = 2等价于C = C \\ 2 ​ 下面的简单示例程序演示了赋值运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序： public class Test { public static void main(String[] args) { int a = 10; int b = 20; int c = 0; c = a + b; System.out.println(\"c = a + b = \" + c ); c += a ; System.out.println(\"c += a = \" + c ); c -= a ; System.out.println(\"c -= a = \" + c ); c *= a ; System.out.println(\"c *= a = \" + c ); a = 10; c = 15; c /= a ; System.out.println(\"c /= a = \" + c ); a = 10; c = 15; c %= a ; System.out.println(\"c %= a = \" + c ); c >= 2 ; System.out.println(\"c >>= 2 = \" + c ); c >>= 2 ; System.out.println(\"c >>= 2 = \" + c ); c &= a ; System.out.println(\"c &= a = \" + c ); c ^= a ; System.out.println(\"c ^= a = \" + c ); c |= a ; System.out.println(\"c |= a = \" + c ); } } ​ 以上实例编译运行结果如下： c = a + b = 30 c += a = 40 c -= a = 30 c *= a = 300 c /= a = 1 c %= a = 5 c >= 2 = 5 c >>= 2 = 1 c &= a = 0 c ^= a = 10 c |= a = 10 6. 条件运算符（?:） ​ 条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。 variable x = (expression) ? value if true : value if false public class Test { public static void main(String[] args){ int a , b; a = 10; // 如果 a 等于 1 成立，则设置 b 为 20，否则为 30 b = (a == 1) ? 20 : 30; System.out.println( \"Value of b is : \" + b ); // 如果 a 等于 10 成立，则设置 b 为 20，否则为 30 b = (a == 10) ? 20 : 30; System.out.println( \"Value of b is : \" + b ); } } ​ 以上实例编译运行结果如下： Value of b is : 30 Value of b is : 20 7. instanceof 运算符 ​ 该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。 ​ instanceof运算符使用格式如下： ( Object reference variable ) instanceof (class/interface type) ​ 如果运算符左侧变量所指的对象，是操作符右侧类或接口(class/interface)的一个对象，那么结果为真。 ​ 下面是一个例子： String name = \"James\"; boolean result = name instanceof String; // 由于 name 是 String 类型，所以返回真 ​ 如果被比较的对象兼容于右侧类型,该运算符仍然返回true。 ​ 看下面的例子： class Vehicle {} public class Car extends Vehicle { public static void main(String[] args){ Vehicle a = new Car(); boolean result = a instanceof Car; System.out.println( result); } } ​ 以上实例编译运行结果如下： true 8. 运算符优先级 ​ 当多个运算符出现在一个表达式中，谁先谁后呢？这就涉及到运算符的优先级别的问题。在一个多运算符的表达式中，运算符优先级不同会导致最后得出的结果差别甚大。 ​ 例如，（1+3）＋（3+2）*2，这个表达式如果按加号最优先计算，答案就是 18，如果按照乘号最优先，答案则是 14。 ​ 再如，x = 7 + 3 2;这里x得到13，而不是20，因为乘法运算符比加法运算符有较高的优先级，所以先计算3 2得到6，然后再加7。 ​ 下表中具有最高优先级的运算符在的表的最上面，最低优先级的在表的底部。 类别 操作符 关联性 后缀 () [] . (点操作符) 左到右 一元 + + - ！〜 从右到左 乘性 * /％ 左到右 加性 + - 左到右 移位 >> >>> 左到右 关系 >> = 左到右 相等 == != 左到右 按位与 ＆ 左到右 按位异或 ^ 左到右 按位或 \\ 左到右 逻辑与 && 左到右 逻辑或 \\ \\ 左到右 条件 ？： 从右到左 赋值 = + = - = * = / =％= >> = = 从右到左 逗号 ， 左到右 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Java/Chapter8.html":{"url":"Java/Chapter8.html","title":"第八章：循环结构","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. while 循环 2. do…while 循环 3. for循环 4. Java 增强 for 循环 5. break 关键字 6. continue 关键字 第八章：循环结构 ​ 顺序结构的程序语句只能被执行一次。如果您想要同样的操作执行多次,，就需要使用循环结构。 ​ Java中有三种主要的循环结构： while 循环 do…while 循环 for 循环 ​ 在Java5中引入了一种主要用于数组的增强型for循环。 1. while 循环 while是最基本的循环，它的结构为： while( 布尔表达式 ) { //循环内容 } 只要布尔表达式为 true，循环就会一直执行下去。 public class Test { public static void main(String args[]) { int x = 10; while( x 以上实例编译运行结果如下： value of x : 10 value of x : 11 value of x : 12 value of x : 13 value of x : 14 value of x : 15 value of x : 16 value of x : 17 value of x : 18 value of x : 19 2. do…while 循环 ​ 对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。 ​ do…while 循环和 while 循环相似，不同的是，do…while 循环至少会执行一次。 do { //代码语句 }while(布尔表达式); 注意：布尔表达式在循环体的后面，所以语句块在检测布尔表达式之前已经执行了。 如果布尔表达式的值为 true，则语句块一直执行，直到布尔表达式的值为 false。 public class Test { public static void main(String args[]){ int x = 10; do{ System.out.print(\"value of x : \" + x ); x++; System.out.print(\"\\n\"); }while( x 以上实例编译运行结果如下： value of x : 10 value of x : 11 value of x : 12 value of x : 13 value of x : 14 value of x : 15 value of x : 16 value of x : 17 value of x : 18 value of x : 19 3. for循环 ​ 虽然所有循环结构都可以用 while 或者 do...while表示，但 Java 提供了另一种语句 —— for 循环，使一些循环结构变得更加简单。 ​ for循环执行的次数是在执行前就确定的。语法格式如下： for(初始化; 布尔表达式; 更新) { //代码语句 } ​ 关于 for 循环有以下几点说明： 最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。 然后，检测布尔表达式的值。如果为 true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。 执行一次循环后，更新循环控制变量。 再次检测布尔表达式。循环执行上面的过程。 public class Test { public static void main(String args[]) { for(int x = 10; x 以上实例编译运行结果如下： value of x : 10 value of x : 11 value of x : 12 value of x : 13 value of x : 14 value of x : 15 value of x : 16 value of x : 17 value of x : 18 value of x : 19 4. Java 增强 for 循环 ​ Java5 引入了一种主要用于数组的增强型 for 循环。 ​ Java 增强 for 循环语法格式如下: for(声明语句 : 表达式) { //代码句子 } 声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。 表达式：表达式是要访问的数组名，或者是返回值为数组的方法。 public class Test { public static void main(String args[]){ int [] numbers = {10, 20, 30, 40, 50}; for(int x : numbers ){ System.out.print( x ); System.out.print(\",\"); } System.out.print(\"\\n\"); String [] names ={\"James\", \"Larry\", \"Tom\", \"Lacy\"}; for( String name : names ) { System.out.print( name ); System.out.print(\",\"); } } } 以上实例编译运行结果如下： 10,20,30,40,50, James,Larry,Tom,Lacy, 5. break 关键字 ​ break 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。 ​ break 跳出最里层的循环，并且继续执行该循环下面的语句。 ​ break 的用法很简单，就是循环结构中的一条语句： break; public class Test { public static void main(String args[]) { int [] numbers = {10, 20, 30, 40, 50}; for(int x : numbers ) { // x 等于 30 时跳出循环 if( x == 30 ) { break; } System.out.print( x ); System.out.print(\"\\n\"); } } } 以上实例编译运行结果如下： 10 20 6. continue 关键字 ​ continue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。 ​ 在 for 循环中，continue 语句使程序立即跳转到更新语句。 ​ 在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。 ​ continue 就是循环体中一条简单的语句： continue; public class Test { public static void main(String args[]) { int [] numbers = {10, 20, 30, 40, 50}; for(int x : numbers ) { if( x == 30 ) { continue; } System.out.print( x ); System.out.print(\"\\n\"); } } } 以上实例编译运行结果如下： 10 20 40 50 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Java/Chapter9.html":{"url":"Java/Chapter9.html","title":"第九章：条件语句","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. if语句 2. if...else语句 3. if...else if...else 语句 4. 嵌套的 if…else 语句 5. switch case 语句 第九章：条件语句 1. if语句 ​ 一个 if 语句包含一个布尔表达式和一条或多条语句。 ​ if 语句的语法如下： if(布尔表达式) { //如果布尔表达式为true将执行的语句 } ​ 如果布尔表达式的值为 true，则执行 if 语句中的代码块，否则执行 if 语句块后面的代码。 public class Test { public static void main(String args[]){ int x = 10; if( x 以上代码编译运行结果如下： 这是 if 语句 2. if...else语句 ​ if 语句后面可以跟 else 语句，当 if 语句的布尔表达式值为 false 时，else 语句块会被执行。 ​ 的用法如下： if(布尔表达式){ //如果布尔表达式的值为true }else{ //如果布尔表达式的值为false } public class Test { public static void main(String args[]){ int x = 30; if( x 以上代码编译运行结果如下： 这是 else 语句 3. if...else if...else 语句 ​ if 语句后面可以跟 else if…else 语句，这种语句可以检测到多种可能的情况。 ​ 使用 if，else if，else 语句的时候，需要注意下面几点： ​ if 语句至多有 1 个 else 语句，else 语句在所有的 else if 语句之后。 ​ if 语句可以有若干个 else if 语句，它们必须在 else 语句之前。 ​ 一旦其中一个 else if 语句检测为 true，其他的 else if 以及 else 语句都将跳过执行。 ​ 语法格式如下: if(布尔表达式 1){ //如果布尔表达式 1的值为true执行代码 }else if(布尔表达式 2){ //如果布尔表达式 2的值为true执行代码 }else if(布尔表达式 3){ //如果布尔表达式 3的值为true执行代码 }else { //如果以上布尔表达式都不为true执行代码 } public class Test { public static void main(String args[]){ int x = 30; if( x == 10 ){ System.out.print(\"Value of X is 10\"); }else if( x == 20 ){ System.out.print(\"Value of X is 20\"); }else if( x == 30 ){ System.out.print(\"Value of X is 30\"); }else{ System.out.print(\"这是 else 语句\"); } } } 以上代码编译运行结果如下： Value of X is 30 4. 嵌套的 if…else 语句 ​ 使用嵌套的 if…else 语句是合法的。也就是说你可以在另一个 if 或者 else if 语句中使用 if 或者 else if 语句。 ​ 嵌套语句的语法格式如下： if(布尔表达式 1){ ////如果布尔表达式 1的值为true执行代码 if(布尔表达式 2){ ////如果布尔表达式 2的值为true执行代码 } } ​ 你可以像 if 语句一样嵌套 else if...else。 public class Test { public static void main(String args[]){ int x = 30; int y = 10; if( x == 30 ){ if( y == 10 ){ System.out.print(\"X = 30 and Y = 10\"); } } } } ​ 以上代码编译运行结果如下： X = 30 and Y = 10 5. switch case 语句 ​ switch case 语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。 ​ 语句语法格式如下： switch(expression){ case value : //语句 break; //可选 case value : //语句 break; //可选 //你可以有任意数量的case语句 default : //可选 //语句 } switch case 语句有如下规则： switch 语句中的变量类型可以是： byte、short、int 或者 char。从 Java SE 7 开始，switch 支持字符串 String 类型了，同时 case 标签必须为字符串常量或字面量。 switch 语句可以拥有多个 case 语句。每个 case 后面跟一个要比较的值和冒号。 case 语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量。 当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到 break 语句出现才会跳出 switch 语句。 当遇到 break 语句时，switch 语句终止。程序跳转到 switch 语句后面的语句执行。case 语句不必须要包含 break 语句。如果没有 break 语句出现，程序会继续执行下一条 case 语句，直到出现 break 语句。 switch 语句可以包含一个 default 分支，该分支一般是 switch 语句的最后一个分支（可以在任何位置，但建议在最后一个）。default 在没有 case 语句的值和变量值相等的时候执行。default 分支不需要 break 语句。 switch case 执行时，一定会先进行匹配，匹配成功返回当前 case 的值，再根据是否有 break，判断是否继续输出，或是跳出判断。 public class Test { public static void main(String args[]){ //char grade = args[0].charAt(0); char grade = 'C'; switch(grade) { case 'A' : System.out.println(\"优秀\"); break; case 'B' : case 'C' : System.out.println(\"良好\"); break; case 'D' : System.out.println(\"及格\"); break; case 'F' : System.out.println(\"你需要再努力努力\"); break; default : System.out.println(\"未知等级\"); } System.out.println(\"你的等级是 \" + grade); } } 以上代码编译运行结果如下： 良好 你的等级是 C ​ 如果 case 语句块中没有 break 语句时，JVM 并不会顺序输出每一个 case 对应的返回值，而是继续匹配，匹配不成功则返回默认 case。 public class Test { public static void main(String args[]){ int i = 5; switch(i){ case 0: System.out.println(\"0\"); case 1: System.out.println(\"1\"); case 2: System.out.println(\"2\"); default: System.out.println(\"default\"); } } } 以上代码编译运行结果如下： default 如果 case 语句块中没有 break 语句时，匹配成功后，从当前 case 开始，后续所有 case 的值都会输出。 public class Test { public static void main(String args[]){ int i = 1; switch(i){ case 0: System.out.println(\"0\"); case 1: System.out.println(\"1\"); case 2: System.out.println(\"2\"); default: System.out.println(\"default\"); } } } 以上代码编译运行结果如下： 1 2 default ​ 如果当前匹配成功的 case 语句块没有 break 语句，则从当前 case 开始，后续所有 case 的值都会输出，如果后续的 case 语句块有 break 语句则会跳出判断。 public class Test { public static void main(String args[]){ int i = 1; switch(i){ case 0: System.out.println(\"0\"); case 1: System.out.println(\"1\"); case 2: System.out.println(\"2\"); case 3: System.out.println(\"3\"); break; default: System.out.println(\"default\"); } } } 以上代码编译运行结果如下： 1 2 3 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Java/Chapter10.html":{"url":"Java/Chapter10.html","title":"第十章：Number & Math 类","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. Java Math 类 2. Number & Math 类方法 3. Math 的 floor,round 和 ceil 方法实例比较 第十章：Number & Math 类 ​ 一般地，当需要使用数字的时候，我们通常使用内置数据类型，如：byte、int、long、double 等。 int a = 5000; float b = 13.65f; byte c = 0x4a; ​ 然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情形。为了解决这个问题，Java 语言为每一个内置数据类型提供了对应的包装类。 ​ 所有的包装类（Integer、Long、Byte、Double、Float、Short）都是抽象类 Number 的子类。 ​ 这种由编译器特别支持的包装称为装箱，所以当内置数据类型被当作对象使用的时候，编译器会把内置类型装箱为包装类。相似的，编译器也可以把一个对象拆箱为内置类型。Number 类属于 java.lang 包。 ​ 下面是一个使用 Integer 对象的实例： public class Test{ public static void main(String args[]){ Integer x = 5; x = x + 10; System.out.println(x); } } ​ 以上实例编译运行结果如下： 15 ​ 当 x 被赋为整型值时，由于x是一个对象，所以编译器要对x进行装箱。然后，为了使x能进行加运算，所以要对x进行拆箱。 1. Java Math 类 ​ Java 的 Math 包含了用于执行基本数学运算的属性和方法，如初等指数、对数、平方根和三角函数。 ​ Math 的方法都被定义为 static 形式，通过 Math 类可以在主函数中直接调用。 ​ 以上实例编译运行结果如下： 90 度的正弦值：1.0 0度的余弦值：1.0 60度的正切值：1.7320508075688767 1的反正切值： 0.7853981633974483 π/2的角度值：90.0 3.141592653589793 2. Number & Math 类方法 ​ 下面的表中列出的是 Number & Math 类常用的一些方法： 序号 方法 描述 1 xxxValue() 将 Number 对象转换为xxx数据类型的值并返回。 2 compareTo() 将number对象与参数比较。 3 equals() 判断number对象是否与参数相等。 4 valueOf() 返回一个 Number 对象指定的内置数据类型 5 toString() 以字符串形式返回值。 6 parseInt() 将字符串解析为int类型。 7 abs() 返回参数的绝对值。 8 ceil() 返回大于等于( >= )给定参数的的最小整数，类型为双精度浮点型。 9 floor() 返回小于等于（ 10 rint() 返回与参数最接近的整数。返回类型为double。 11 round() 它表示四舍五入，算法为 Math.floor(x+0.5)，即将原来的数字加上 0.5 后再向下取整，所以，Math.round(11.5) 的结果为12，Math.round(-11.5) 的结果为-11。 12 min() 返回两个参数中的最小值。 13 max() 返回两个参数中的最大值。 14 exp() 返回自然数底数e的参数次方。 15 log() 返回参数的自然数底数的对数值。 16 pow() 返回第一个参数的第二个参数次方。 17 sqrt() 求参数的算术平方根。 18 sin() 求指定double类型参数的正弦值。 19 cos() 求指定double类型参数的余弦值。 20 tan() 求指定double类型参数的正切值。 21 asin() 求指定double类型参数的反正弦值。 22 acos() 求指定double类型参数的反余弦值。 23 atan() 求指定double类型参数的反正切值。 24 atan2() 将笛卡尔坐标转换为极坐标，并返回极坐标的角度值。 25 toDegrees() 将参数转化为角度。 26 toRadians() 将角度转换为弧度。 27 random() 返回一个随机数。 3. Math 的 floor,round 和 ceil 方法实例比较 参数 Math.floor Math.round Math.ceil 1.4 1 1 2 1.5 1 2 2 1.6 1 2 2 -1.4 -2 -1 -1 -1.5 -2 -1 -1 -1.6 -2 -2 -1 floor,round 和 ceil 实例： public class Main { public static void main(String[] args) { double[] nums = { 1.4, 1.5, 1.6, -1.4, -1.5, -1.6 }; for (double num : nums) { test(num); } } private static void test(double num) { System.out.println(\"Math.floor(\" + num + \")=\" + Math.floor(num)); System.out.println(\"Math.round(\" + num + \")=\" + Math.round(num)); System.out.println(\"Math.ceil(\" + num + \")=\" + Math.ceil(num)); } } 以上实例执行输出结果为： Math.floor(1.4)=1.0 Math.round(1.4)=1 Math.ceil(1.4)=2.0 Math.floor(1.5)=1.0 Math.round(1.5)=2 Math.ceil(1.5)=2.0 Math.floor(1.6)=1.0 Math.round(1.6)=2 Math.ceil(1.6)=2.0 Math.floor(-1.4)=-2.0 Math.round(-1.4)=-1 Math.ceil(-1.4)=-1.0 Math.floor(-1.5)=-2.0 Math.round(-1.5)=-1 Math.ceil(-1.5)=-1.0 Math.floor(-1.6)=-2.0 Math.round(-1.6)=-2 Math.ceil(-1.6)=-1.0 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Java/Chapter11.html":{"url":"Java/Chapter11.html","title":"第十一章：Character 类","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 转义序列 2. Character 方法 第十一章：Character 类 ​ Character 类用于对单个字符进行操作。 ​ Character 类在对象中包装一个基本类型 char 的值 char ch = 'a'; // Unicode 字符表示形式 char uniChar = '\\u039A'; // 字符数组 char[] charArray ={ 'a', 'b', 'c', 'd', 'e' }; ​ 然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情况。为了解决这个问题，Java语言为内置数据类型char提供了包装类Character类。 ​ Character类提供了一系列方法来操纵字符。你可以使用Character的构造方法创建一个Character类对象，例如： Character ch = new Character('a'); ​ 在某些情况下，Java编译器会自动创建一个Character对象。 ​ 例如，将一个char类型的参数传递给需要一个Character类型参数的方法时，那么编译器会自动地将char类型参数转换为Character对象。 这种特征称为装箱，反过来称为拆箱。 // 原始字符 'a' 装箱到 Character 对象 ch 中 Character ch = 'a'; // 原始字符 'x' 用 test 方法装箱 // 返回拆箱的值到 'c' char c = test('x'); 1. 转义序列 ​ 前面有反斜杠（\\）的字符代表转义字符，它对编译器来说是有特殊含义的。 ​ 下面列表展示了Java的转义序列： 转义序列 描述 \\t 在文中该处插入一个tab键 \\b 在文中该处插入一个后退键 \\n 在文中该处换行 \\r 在文中该处插入回车 \\f 在文中该处插入换页符 \\' 在文中该处插入单引号 \\\" 在文中该处插入双引号 \\ 在文中该处插入反斜杠 当打印语句遇到一个转义序列时，编译器可以正确地对其进行解释。 以下实例转义双引号并输出： public class Test { public static void main(String args[]) { System.out.println(\"访问\\\"菜鸟教程!\\\"\"); } } 以上实例编译运行结果如下： 访问\"菜鸟教程!\" 2. Character 方法 ​ 下面是Character类的方法： 序号 方法 描述 1 isLetter() 是否是一个字母 2 isDigit() 是否是一个数字字符 3 isWhitespace() 是否是一个空白字符 4 isUpperCase() 是否是大写字母 5 isLowerCase() 是否是小写字母 6 toUpperCase() 指定字母的大写形式 7 toLowerCase 指定字母的小写形式 8 toString 返回字符的字符串形式，字符串的长度仅为1 对于方法的完整列表，请参考的 [java.lang.Character API]规范。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Java/Chapter12.html":{"url":"Java/Chapter12.html","title":"第十二章：String 类","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 创建字符串 2. 字符串长度 3. 连接字符串 4. 创建格式化字符串 5. String 方法 第十二章：String 类 ​ 字符串广泛应用 在 Java 编程中，在 Java 中字符串属于对象，Java 提供了 String 类来创建和操作字符串。 1. 创建字符串 ​ 创建字符串最简单的方式如下: String greeting = \"菜鸟教程\"; ​ 在代码中遇到字符串常量时，这里的值是 \"菜鸟教程\"\"，编译器会使用该值创建一个 String 对象。 ​ 和其它对象一样，可以使用关键字和构造方法来创建 String 对象。 ​ String 类有 11 种构造方法，这些方法提供不同的参数来初始化字符串，比如提供一个字符数组参数: public class StringDemo{ public static void main(String args[]){ char[] helloArray = { 'r', 'u', 'n', 'o', 'o', 'b'}; String helloString = new String(helloArray); System.out.println( helloString ); } } ​ 以上实例编译运行结果如下： runoob 注意:String 类是不可改变的，所以你一旦创建了 String 对象，那它的值就无法改变了（详看笔记部分解析）。 ​ 如果需要对字符串做很多修改，那么应该选择使用 [StringBuffer & StringBuilder ]。 2. 字符串长度 ​ 用于获取有关对象的信息的方法称为访问器方法。 ​ String 类的一个访问器方法是 length() 方法，它返回字符串对象包含的字符数。 ​ 下面的代码执行后，len 变量等于 14: public class StringDemo { public static void main(String args[]) { String site = \"www.runoob.com\"; int len = site.length(); System.out.println( \"菜鸟教程网址长度 : \" + len ); } } ​ 以上实例编译运行结果如下： 菜鸟教程网址长度 : 14 3. 连接字符串 ​ String 类提供了连接两个字符串的方法： string1.concat(string2); ​ 返回 string2 连接 string1 的新字符串。也可以对字符串常量使用 concat() 方法，如： \"我的名字是 \".concat(\"Runoob\"); ​ 更常用的是使用'+'操作符来连接字符串，如： \"Hello,\" + \" runoob\" + \"!\" ​ 结果如下: \"Hello, runoob!\" ​ 下面是一个例子: public class StringDemo { public static void main(String args[]) { String string1 = \"菜鸟教程网址：\"; System.out.println(\"1、\" + string1 + \"www.runoob.com\"); } } ​ 以上实例编译运行结果如下： 1、菜鸟教程网址：www.runoob.com 4. 创建格式化字符串 ​ 我们知道输出格式化数字可以使用 printf() 和 format() 方法。 ​ String 类使用静态方法 format() 返回一个String 对象而不是 PrintStream 对象。 ​ String 类的静态方法 format() 能用来创建可复用的格式化字符串，而不仅仅是用于一次打印输出。 ​ 如下所示： System.out.printf(\"浮点型变量的值为 \" + \"%f, 整型变量的值为 \" + \" %d, 字符串变量的值为 \" + \"is %s\", floatVar, intVar, stringVar); ​ 你也可以这样写 String fs; fs = String.format(\"浮点型变量的值为 \" + \"%f, 整型变量的值为 \" + \" %d, 字符串变量的值为 \" + \" %s\", floatVar, intVar, stringVar); 5. String 方法 下面是 String 类支持的方法，更多详细，参看 [Java String API] 文档: SN(序号) 方法 描述 1 char charAt(int index) 返回指定索引处的 char 值。 2 int compareTo(Object o) 把这个字符串和另一个对象比较。 3 int compareTo(String anotherString) 按字典顺序比较两个字符串。 4 int compareToIgnoreCase(String str) 按字典顺序比较两个字符串，不考虑大小写。 5 String concat(String str) 将指定字符串连接到此字符串的结尾。 6 boolean contentEquals(StringBuffer sb) 当且仅当字符串与指定的StringBuffer有相同顺序的字符时候返回真。 7 static String copyValueOf(char[] data) 返回指定数组中表示该字符序列的 String。 8 static String copyValueOf(char[] data, int offset, int count) 返回指定数组中表示该字符序列的 String。 9 boolean endsWith(String suffix) 测试此字符串是否以指定的后缀结束。 10 boolean equals(Object anObject) 将此字符串与指定的对象比较。 11 boolean equalsIgnoreCase(String anotherString) 将此 String 与另一个 String 比较，不考虑大小写。 12 byte[] getBytes() 使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。 13 byte[] getBytes(String charsetName) 使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。 14 void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin) 将字符从此字符串复制到目标字符数组。 15 int hashCode() 返回此字符串的哈希码。 16 int indexOf(int ch) 返回指定字符在此字符串中第一次出现处的索引。 17 int indexOf(int ch, int fromIndex) 返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索。 18 int indexOf(String str) 返回指定子字符串在此字符串中第一次出现处的索引。 19 int indexOf(String str, int fromIndex) 返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。 20 String intern() 返回字符串对象的规范化表示形式。 21 int lastIndexOf(int ch) 返回指定字符在此字符串中最后一次出现处的索引。 22 int lastIndexOf(int ch, int fromIndex) 返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索。 23 int lastIndexOf(String str) 返回指定子字符串在此字符串中最右边出现处的索引。 24 int lastIndexOf(String str, int fromIndex) 返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索。 25 int length() 返回此字符串的长度。 26 boolean matches(String regex) 告知此字符串是否匹配给定的正则表达式。 27 boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len) 测试两个字符串区域是否相等。 28 boolean regionMatches(int toffset, String other, int ooffset, int len) 测试两个字符串区域是否相等。 29 String replace(char oldChar, char newChar) 返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。 30 String replaceAll(String regex, String replacement) 使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。 31 String replaceFirst(String regex, String replacement) 使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。 32 String[] split(String regex) 根据给定正则表达式的匹配拆分此字符串。 33 String[] split(String regex, int limit) 根据匹配给定的正则表达式来拆分此字符串。 34 boolean startsWith(String prefix) 测试此字符串是否以指定的前缀开始。 35 boolean startsWith(String prefix, int toffset) 测试此字符串从指定索引开始的子字符串是否以指定前缀开始。 36 CharSequence subSequence(int beginIndex, int endIndex) 返回一个新的字符序列，它是此序列的一个子序列。 37 String substring(int beginIndex) 返回一个新的字符串，它是此字符串的一个子字符串。 38 String substring(int beginIndex, int endIndex) 返回一个新字符串，它是此字符串的一个子字符串。 39 char[] toCharArray() 将此字符串转换为一个新的字符数组。 40 String toLowerCase() 使用默认语言环境的规则将此 String 中的所有字符都转换为小写。 41 String toLowerCase(Locale locale) 使用给定 Locale 的规则将此 String 中的所有字符都转换为小写。 42 String toString() 返回此对象本身（它已经是一个字符串！）。 43 String toUpperCase() 使用默认语言环境的规则将此 String 中的所有字符都转换为大写。 44 String toUpperCase(Locale locale) 使用给定 Locale 的规则将此 String 中的所有字符都转换为大写。 45 String trim() 返回字符串的副本，忽略前导空白和尾部空白。 46 static String valueOf(primitive data type x) 返回给定data type类型x参数的字符串表示形式。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Java/Chapter13.html":{"url":"Java/Chapter13.html","title":"第十三章：StringBuffer & StringBuilder","keywords":"","body":"第十三章：StringBuffer & StringBuilder ​ 当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。 ​ 和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。 ​ StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。 ​ 由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。 public class Test{ public static void main(String args[]){ StringBuffer sb = new StringBuffer(\"菜鸟教程官网：\"); sb.append(\"www\"); sb.append(\".runoob\"); sb.append(\".com\"); System.out.println(sb); } } 以上实例编译运行结果如下： 菜鸟教程官网：www.runoob.com 1. StringBuffer 方法 以下是 StringBuffer 类支持的主要方法： 序号 方法 描述 1 public StringBuffer append(String s) 将指定的字符串追加到此字符序列。 2 public StringBuffer reverse() 将此字符序列用其反转形式取代。 3 public delete(int start, int end) 移除此序列的子字符串中的字符。 4 public insert(int offset, int i) 将 int 参数的字符串表示形式插入此序列中。 5 replace(int start, int end, String str) 使用给定 String 中的字符替换此序列的子字符串中的字符。 下面的列表里的方法和 String 类的方法类似： 序号 方法 描述 1 int capacity() 返回当前容量。 2 char charAt(int index) 返回此序列中指定索引处的 char 值。 3 void ensureCapacity(int minimumCapacity) 确保容量至少等于指定的最小值。 4 void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin) 将字符从此序列复制到目标字符数组 dst。 5 int indexOf(String str) 返回第一次出现的指定子字符串在该字符串中的索引。 6 int indexOf(String str, int fromIndex) 从指定的索引处开始，返回第一次出现的指定子字符串在该字符串中的索引。 7 int lastIndexOf(String str) 返回最右边出现的指定子字符串在此字符串中的索引。 8 int lastIndexOf(String str, int fromIndex) 返回 String 对象中子字符串最后出现的位置。 9 int length() 返回长度（字符数）。 10 void setCharAt(int index, char ch) 将给定索引处的字符设置为 ch。 11 void setLength(int newLength) 设置字符序列的长度。 12 CharSequence subSequence(int start, int end) 返回一个新的字符序列，该字符序列是此序列的子序列。 13 String substring(int start) 返回一个新的 String，它包含此字符序列当前所包含的字符子序列。 14 String substring(int start, int end) 返回一个新的 String，它包含此序列当前所包含的字符子序列。 15 String toString() 返回此序列中数据的字符串表示形式。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Java/Chapter14.html":{"url":"Java/Chapter14.html","title":"第十四章：数组","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 声明数组变量 2. 创建数组 3. 处理数组 4. For-Each 循环 5. 数组作为函数的参数 6. 数组作为函数的返回值 7. 多维数组 7.1 多维数组的动态初始化（以二维数组为例） 7.2 多维数组的引用（以二维数组为例） 8. Arrays 类 第十四章：数组 ​ 数组对于每一门编程语言来说都是重要的数据结构之一，当然不同语言对数组的实现及处理也不尽相同。 ​ Java 语言中提供的数组是用来存储固定大小的同类型元素。 ​ 你可以声明一个数组变量，如 numbers[100] 来代替直接声明 100 个独立变量 number0，number1，....，number99。 ​ 接下来将为大家介绍 Java 数组的声明、创建和初始化，并给出其对应的代码。 1. 声明数组变量 ​ 首先必须声明数组变量，才能在程序中使用数组。下面是声明数组变量的语法： dataType[] arrayRefVar; // 首选的方法 //或 dataType arrayRefVar[]; // 效果相同，但不是首选方法 注意: 建议使用 dataType[] arrayRefVar 的声明风格声明数组变量。 dataType arrayRefVar[] 风格是来自 C/C++ 语言 ，在Java中采用是为了让 C/C++ 程序员能够快速理解java语言。 ​ 下面是这两种语法的代码示例： double[] myList; // 首选的方法 //或 double myList[]; // 效果相同，但不是首选方法 2. 创建数组 ​ Java语言使用new操作符来创建数组，语法如下： arrayRefVar = new dataType[arraySize]; ​ 上面的语法语句做了两件事： 一、使用 dataType[arraySize] 创建了一个数组。 二、把新创建的数组的引用赋值给变量 arrayRefVar。 ​ 数组变量的声明，和创建数组可以用一条语句完成，如下所示： dataType[] arrayRefVar = new dataType[arraySize]; ​ 另外，你还可以使用如下的方式创建数组。 dataType[] arrayRefVar = {value0, value1, ..., valuek}; ​ 数组的元素是通过索引访问的。数组索引从 0 开始，所以索引值从 0 到 arrayRefVar.length-1。 ​ 下面的语句首先声明了一个数组变量 myList，接着创建了一个包含 10 个 double 类型元素的数组，并且把它的引用赋值给 myList 变量。 public class TestArray { public static void main(String[] args) { // 数组大小 int size = 10; // 定义数组 double[] myList = new double[size]; myList[0] = 5.6; myList[1] = 4.5; myList[2] = 3.3; myList[3] = 13.2; myList[4] = 4.0; myList[5] = 34.33; myList[6] = 34.0; myList[7] = 45.45; myList[8] = 99.993; myList[9] = 11123; // 计算所有元素的总和 double total = 0; for (int i = 0; i 以上实例输出结果为： 总和为： 11367.373 下面的图片描绘了数组 myList。这里 myList 数组里有 10 个 double 元素，它的下标从 0 到 9。 3. 处理数组 ​ 数组的元素类型和数组的大小都是确定的，所以当处理数组元素时候，我们通常使用基本循环或者 For-Each 循环。 ​ 该实例完整地展示了如何创建、初始化和操纵数组： public class TestArray { public static void main(String[] args) { double[] myList = {1.9, 2.9, 3.4, 3.5}; // 打印所有数组元素 for (int i = 0; i max) max = myList[i]; } System.out.println(\"Max is \" + max); } } ​ 以上实例编译运行结果如下： 1.9 2.9 3.4 3.5 Total is 11.7 Max is 3.5 4. For-Each 循环 ​ JDK 1.5 引进了一种新的循环类型，被称为 For-Each 循环或者加强型循环，它能在不使用下标的情况下遍历数组。 ​ 语法格式如下： for(type element: array) { System.out.println(element); } ​ 该实例用来显示数组 myList 中的所有元素： public class TestArray { public static void main(String[] args) { double[] myList = {1.9, 2.9, 3.4, 3.5}; // 打印所有数组元素 for (double element: myList) { System.out.println(element); } } } 以上实例编译运行结果如下： 1.9 2.9 3.4 3.5 5. 数组作为函数的参数 ​ 数组可以作为参数传递给方法。 ​ 例如，下面的例子就是一个打印 int 数组中元素的方法: public static void printArray(int[] array) { for (int i = 0; i 下面例子调用 printArray 方法打印出 3，1，2，6，4 和 2： printArray(new int[]{3, 1, 2, 6, 4, 2}); 6. 数组作为函数的返回值 public static int[] reverse(int[] list) { int[] result = new int[list.length]; for (int i = 0, j = result.length - 1; i 以上实例中 result 数组作为函数的返回值。 7. 多维数组 ​ 多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组，例如： String str[][] = new String[3][4]; 7.1 多维数组的动态初始化（以二维数组为例） 直接为每一维分配空间，格式如下： type[][] typeName = new type[typeLength1][typeLength2]; ​ type 可以为基本数据类型和复合数据类型，arraylength1 和 arraylength2 必须为正整数，arraylength1 为行数，arraylength2 为列数。例如： int a[][] = new int[2][3]; ​ 解析： ​ 二维数组 a 可以看成一个两行三列的数组。 从最高维开始，分别为每一维分配空间，例如： String s[][] = new String[2][]; s[0] = new String[2]; s[1] = new String[3]; s[0][0] = new String(\"Good\"); s[0][1] = new String(\"Luck\"); s[1][0] = new String(\"to\"); s[1][1] = new String(\"you\"); s[1][2] = new String(\"!\"); ​ 解析： s[0]=new String[2] 和 s[1]=new String[3] 是为最高维分配引用空间，也就是为最高维限制其能保存数据的最长的长度，然后再为其每个数组元素单独分配空间 s0=new String(\"Good\") 等操作。 7.2 多维数组的引用（以二维数组为例） //对二维数组中的每个元素，引用方式为 arrayName[index1][index2]，例如： num[1][0]; 8. Arrays 类 ​ java.util.Arrays 类能方便地操作数组，它提供的所有方法都是静态的。 ​ 具有以下功能： 给数组赋值：通过 fill 方法。 对数组排序：通过 sort 方法,按升序。 比较数组：通过 equals 方法比较数组中元素值是否相等。 查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。 ​ 具体说明请查看下表： 序号 方法 说明 1 public static int binarySearch(Object[] a, Object key) 用二分查找算法在给定数组中搜索给定值的对象(Byte,Int,double等)。数组在调用前必须排序好的。如果查找值包含在数组中，则返回搜索键的索引；否则返回 (-(插入点) - 1)。 2 public static boolean equals(long[] a, long[] a2) 如果两个指定的 long 型数组彼此相等，则返回 true。如果两个数组包含相同数量的元素，并且两个数组中的所有相应元素对都是相等的，则认为这两个数组是相等的。换句话说，如果两个数组以相同顺序包含相同的元素，则两个数组是相等的。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。 3 public static void fill(int[] a, int val) 将指定的 int 值分配给指定 int 型数组指定范围中的每个元素。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。 4 public static void sort(Object[] a) 对指定对象数组根据其元素的自然顺序进行升序排列。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Java/Chapter15.html":{"url":"Java/Chapter15.html","title":"第十五章：日期时间","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 获取当前日期时间 2. 日期比较 3. SimpleDateFormat 格式化日期 4. 日期和时间的格式化编码 5. 使用printf格式化日期 6. 解析字符串为时间 7. Java 休眠(sleep) 8. 测量时间 9. Calendar类 9.1 创建一个代表系统当前日期的Calendar对象 9.2 创建一个指定日期的Calendar对象 9.3 Calendar类对象字段类型 9.4 Calendar类对象信息的设置 9.4.1 Set设置 9.4.2 Add设置 9.5 Calendar类对象信息的获得 10. GregorianCalendar类 第十五章：日期时间 ​ java.util 包提供了 Date 类来封装当前的日期和时间。 Date 类提供两个构造函数来实例化 Date 对象。 ​ 第一个构造函数使用当前日期和时间来初始化对象。 Date( ) ​ 第二个构造函数接收一个参数，该参数是从1970年1月1日起的毫秒数。 Date(long millisec) ​ Date对象创建以后，可以调用下面的方法。 序号 方法 描述 1 boolean after(Date date) 若当调用此方法的Date对象在指定日期之后返回true,否则返回false。 2 boolean before(Date date) 若当调用此方法的Date对象在指定日期之前返回true,否则返回false。 3 Object clone( ) 返回此对象的副本。 4 int compareTo(Date date) 比较当调用此方法的Date对象和指定日期。两者相等时候返回0。调用对象在指定日期之前则返回负数。调用对象在指定日期之后则返回正数。 5 int compareTo(Object obj) 若obj是Date类型则操作等同于compareTo(Date) 。否则它抛出ClassCastException。 6 boolean equals(Object date) 当调用此方法的Date对象和指定日期相等时候返回true,否则返回false。 7 long getTime( ) 返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。 8 int hashCode( ) 返回此对象的哈希码值。 9 void setTime(long time) 用自1970年1月1日00:00:00 GMT以后time毫秒数设置时间和日期。 10 String toString( ) 把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)。 1. 获取当前日期时间 ​ Java中获取当前日期和时间很简单，使用 Date 对象的 toString() 方法来打印当前日期和时间，如下所示： import java.util.Date; public class DateDemo { public static void main(String args[]) { // 初始化 Date 对象 Date date = new Date(); // 使用 toString() 函数显示日期时间 System.out.println(date.toString()); } } 以上实例编译运行结果如下: Mon May 04 09:51:52 CDT 2013 2. 日期比较 ​ Java使用以下三种方法来比较两个日期： ​ 使用 getTime() 方法获取两个日期（自1970年1月1日经历的毫秒数值），然后比较这两个值。 ​ 使用方法 before()，after() 和 equals()。例如，一个月的12号比18号早，则 new Date(99, 2, 12).before(new Date (99, 2, 18)) 返回true。 ​ 使用 compareTo() 方法，它是由 Comparable 接口定义的，Date 类实现了这个接口。 3. SimpleDateFormat 格式化日期 ​ SimpleDateFormat 是一个以语言环境敏感的方式来格式化和分析日期的类。SimpleDateFormat 允许你选择任何用户自定义日期时间格式来运行。例如： import java.util.*; import java.text.*; public class DateDemo { public static void main(String args[]) { Date dNow = new Date( ); SimpleDateFormat ft = new SimpleDateFormat (\"yyyy-MM-dd hh:mm:ss\"); System.out.println(\"当前时间为: \" + ft.format(dNow)); } } SimpleDateFormat ft = new SimpleDateFormat (\"yyyy-MM-dd hh:mm:ss\"); ​ 这一行代码确立了转换的格式，其中 yyyy 是完整的公元年，MM 是月份，dd 是日期，HH:mm:ss 是时、分、秒。 注意:有的格式大写，有的格式小写，例如 MM 是月份，mm 是分；HH 是 24 小时制，而 hh 是 12 小时制。 ​ 以上实例编译运行结果如下: 当前时间为: 2018-09-06 10:16:34 4. 日期和时间的格式化编码 ​ 时间模式字符串用来指定时间格式。在此模式中，所有的 ASCII 字母被保留为模式字母，定义如下： 字母 描述 示例 G 纪元标记 AD y 四位年份 2001 M 月份 July or 07 d 一个月的日期 10 h A.M./P.M. (1~12)格式小时 12 H 一天中的小时 (0~23) 22 m 分钟数 30 s 秒数 55 S 毫秒数 234 E 星期几 Tuesday D 一年中的日子 360 F 一个月中第几周的周几 2 (second Wed. in July) w 一年中第几周 40 W 一个月中第几周 1 a A.M./P.M. 标记 PM k 一天中的小时(1~24) 24 K A.M./P.M. (0~11)格式小时 10 z 时区 Eastern Standard Time ' 文字定界符 Delimiter \" 单引号 ` 5. 使用printf格式化日期 ​ printf 方法可以很轻松地格式化时间和日期。使用两个字母格式，它以 %t 开头并且以下面表格中的一个字母结尾。 转 换 符 说 明 示 例 c 包括全部日期和时间信息 星期六 十月 27 14:21:20 CST 2007 F \"年-月-日\"格式 2007-10-27 D \"月/日/年\"格式 10/27/07 r \"HH:MM:SS PM\"格式（12时制） 02:25:51 下午 T \"HH:MM:SS\"格式（24时制） 14:28:16 R \"HH:MM\"格式（24时制） 14:28 import java.util.Date; public class DateDemo { public static void main(String args[]) { // 初始化 Date 对象 Date date = new Date(); //c的使用 System.out.printf(\"全部日期和时间信息：%tc%n\",date); //f的使用 System.out.printf(\"年-月-日格式：%tF%n\",date); //d的使用 System.out.printf(\"月/日/年格式：%tD%n\",date); //r的使用 System.out.printf(\"HH:MM:SS PM格式（12时制）：%tr%n\",date); //t的使用 System.out.printf(\"HH:MM:SS格式（24时制）：%tT%n\",date); //R的使用 System.out.printf(\"HH:MM格式（24时制）：%tR\",date); } } 以上实例编译运行结果如下: 全部日期和时间信息：星期一 九月 10 10:43:36 CST 2012 年-月-日格式：2012-09-10 月/日/年格式：09/10/12 HH:MM:SS PM格式（12时制）：10:43:36 上午 HH:MM:SS格式（24时制）：10:43:36 HH:MM格式（24时制）：10:43 ​ 如果你需要重复提供日期，那么利用这种方式来格式化它的每一部分就有点复杂了。因此，可以利用一个格式化字符串指出要被格式化的参数的索引。 ​ 索引必须紧跟在%后面，而且必须以$结束。例如： import java.util.Date; public class DateDemo { public static void main(String args[]) { // 初始化 Date 对象 Date date = new Date(); // 使用toString()显示日期和时间 System.out.printf(\"%1$s %2$tB %2$td, %2$tY\", \"Due date:\", date); } } 以上实例编译运行结果如下: Due date: February 09, 2014 或者，你可以使用 import java.util.Date; public class DateDemo { public static void main(String args[]) { // 初始化 Date 对象 Date date = new Date(); // 显示格式化时间 System.out.printf(\"%s %tB % ​ 以上实例编译运行结果如下: Due date: February 09, 2014 ​ 定义日期格式的转换符可以使日期通过指定的转换符生成新字符串。这些日期转换符如下所示： import java.util.*; public class DateDemo { public static void main(String args[]) { Date date=new Date(); //b的使用，月份简称 String str=String.format(Locale.US,\"英文月份简称：%tb\",date); System.out.println(str); System.out.printf(\"本地月份简称：%tb%n\",date); //B的使用，月份全称 str=String.format(Locale.US,\"英文月份全称：%tB\",date); System.out.println(str); System.out.printf(\"本地月份全称：%tB%n\",date); //a的使用，星期简称 str=String.format(Locale.US,\"英文星期的简称：%ta\",date); System.out.println(str); //A的使用，星期全称 System.out.printf(\"本地星期的简称：%tA%n\",date); //C的使用，年前两位 System.out.printf(\"年的前两位数字（不足两位前面补0）：%tC%n\",date); //y的使用，年后两位 System.out.printf(\"年的后两位数字（不足两位前面补0）：%ty%n\",date); //j的使用，一年的天数 System.out.printf(\"一年中的天数（即年的第几天）：%tj%n\",date); //m的使用，月份 System.out.printf(\"两位数字的月份（不足两位前面补0）：%tm%n\",date); //d的使用，日（二位，不够补零） System.out.printf(\"两位数字的日（不足两位前面补0）：%td%n\",date); //e的使用，日（一位不补零） System.out.printf(\"月份的日（前面不补0）：%te\",date); } } ​ 输出结果为： 英文月份简称：May 本地月份简称：五月 英文月份全称：May 本地月份全称：五月 英文星期的简称：Thu 本地星期的简称：星期四 年的前两位数字（不足两位前面补0）：20 年的后两位数字（不足两位前面补0）：17 一年中的天数（即年的第几天）：124 两位数字的月份（不足两位前面补0）：05 两位数字的日（不足两位前面补0）：04 月份的日（前面不补0）：4 6. 解析字符串为时间 ​ SimpleDateFormat 类有一些附加的方法，特别是parse()，它试图按照给定的SimpleDateFormat 对象的格式化存储来解析字符串。例如： import java.util.*; import java.text.*; public class DateDemo { public static void main(String args[]) { SimpleDateFormat ft = new SimpleDateFormat (\"yyyy-MM-dd\"); String input = args.length == 0 ? \"1818-11-11\" : args[0]; System.out.print(input + \" Parses as \"); Date t; try { t = ft.parse(input); System.out.println(t); } catch (ParseException e) { System.out.println(\"Unparseable using \" + ft); } } } ​ 以上实例编译运行结果如下: $ java DateDemo 1818-11-11 Parses as Wed Nov 11 00:00:00 GMT 1818 $ java DateDemo 2007-12-01 2007-12-01 Parses as Sat Dec 01 00:00:00 GMT 2007 7. Java 休眠(sleep) ​ sleep()使当前线程进入停滞状态（阻塞当前线程），让出CPU的使用、目的是不让当前线程独自霸占该进程所获的CPU资源，以留一定时间给其他线程执行的机会。 ​ 你可以让程序休眠一毫秒的时间或者到您的计算机的寿命长的任意段时间。例如，下面的程序会休眠3秒： import java.util.*; public class SleepDemo { public static void main(String args[]) { try { System.out.println(new Date( ) + \"\\n\"); Thread.sleep(1000*3); // 休眠3秒 System.out.println(new Date( ) + \"\\n\"); } catch (Exception e) { System.out.println(\"Got an exception!\"); } } } ​ 以上实例编译运行结果如下: Thu Sep 17 10:20:30 CST 2015 Thu Sep 17 10:20:33 CST 2015 8. 测量时间 ​ 下面的一个例子表明如何测量时间间隔（以毫秒为单位）： import java.util.*; public class DiffDemo { public static void main(String args[]) { try { long start = System.currentTimeMillis( ); System.out.println(new Date( ) + \"\\n\"); Thread.sleep(5*60*10); System.out.println(new Date( ) + \"\\n\"); long end = System.currentTimeMillis( ); long diff = end - start; System.out.println(\"Difference is : \" + diff); } catch (Exception e) { System.out.println(\"Got an exception!\"); } } } ​ 以上实例编译运行结果如下: Fri Jan 08 09:48:47 CST 2016 Fri Jan 08 09:48:50 CST 2016 Difference is : 3019 9. Calendar类 ​ 我们现在已经能够格式化并创建一个日期对象了，但是我们如何才能设置和获取日期数据的特定部分呢，比如说小时，日，或者分钟? 我们又如何在日期的这些部分加上或者减去值呢? 答案是使用Calendar 类。 ​ Calendar类的功能要比Date类强大很多，而且在实现方式上也比Date类要复杂一些。 ​ Calendar类是一个抽象类，在实际使用时实现特定的子类的对象，创建对象的过程对程序员来说是透明的，只需要使用getInstance方法创建即可。 9.1 创建一个代表系统当前日期的Calendar对象 Calendar c = Calendar.getInstance();//默认是当前日期 9.2 创建一个指定日期的Calendar对象 ​ 使用Calendar类代表特定的时间，需要首先创建一个Calendar的对象，然后再设定该对象中的年月日参数来完成。 //创建一个代表2009年6月12日的Calendar对象 Calendar c1 = Calendar.getInstance(); c1.set(2009, 6 - 1, 12); 9.3 Calendar类对象字段类型 ​ Calendar类中用以下这些常量表示不同的意义，jdk内的很多类其实都是采用的这种思想 常量 描述 Calendar.YEAR 年份 Calendar.MONTH 月份 Calendar.DATE 日期 Calendar.DAY_OF_MONTH 日期，和上面的字段意义完全相同 Calendar.HOUR 12小时制的小时 Calendar.HOUR_OF_DAY 24小时制的小时 Calendar.MINUTE 分钟 Calendar.SECOND 秒 Calendar.DAY_OF_WEEK 星期几 9.4 Calendar类对象信息的设置 9.4.1 Set设置 如： Calendar c1 = Calendar.getInstance(); 调用： public final void set(int year,int month,int date) c1.set(2009, 6 - 1, 12);//把Calendar对象c1的年月日分别设这为：2009、6、12 ​ 利用字段类型设置 ​ 如果只设定某个字段，例如日期的值，则可以使用如下set方法： public void set(int field,int value) ​ 把 c1对象代表的日期设置为10号，其它所有的数值会被重新计算 c1.set(Calendar.DATE,10); ​ 把c1对象代表的年份设置为2008年，其他的所有数值会被重新计算 c1.set(Calendar.YEAR,2008); ​ 其他字段属性set的意义以此类推 9.4.2 Add设置 Calendar c1 = Calendar.getInstance(); ​ 把c1对象的日期加上10，也就是c1也就表示为10天后的日期，其它所有的数值会被重新计算 c1.add(Calendar.DATE, 10); ​ 把c1对象的日期减去10，也就是c1也就表示为10天前的日期，其它所有的数值会被重新计算 c1.add(Calendar.DATE, -10); ​ 其他字段属性的add的意义以此类推 9.5 Calendar类对象信息的获得 alendar c1 = Calendar.getInstance(); // 获得年份 int year = c1.get(Calendar.YEAR); // 获得月份 int month = c1.get(Calendar.MONTH) + 1; // 获得日期 int date = c1.get(Calendar.DATE); // 获得小时 int hour = c1.get(Calendar.HOUR_OF_DAY); // 获得分钟 int minute = c1.get(Calendar.MINUTE); // 获得秒 int second = c1.get(Calendar.SECOND); // 获得星期几（注意（这个与Date类是不同的）：1代表星期日、2代表星期1、3代表星期二，以此类推） int day = c1.get(Calendar.DAY_OF_WEEK); 10. GregorianCalendar类 ​ Calendar类实现了公历日历，GregorianCalendar是Calendar类的一个具体实现。 ​ Calendar 的getInstance（）方法返回一个默认用当前的语言环境和时区初始化的GregorianCalendar对象。GregorianCalendar定义了两个字段：AD和BC。这是代表公历定义的两个时代。 ​ 下面列出GregorianCalendar对象的几个构造方法： 序号 构造函数 说明 1 GregorianCalendar() 在具有默认语言环境的默认时区内使用当前时间构造一个默认的 GregorianCalendar。 2 GregorianCalendar(int year, int month, int date) 在具有默认语言环境的默认时区内构造一个带有给定日期设置的 GregorianCalendar 3 GregorianCalendar(int year, int month, int date, int hour, int minute) 为具有默认语言环境的默认时区构造一个具有给定日期和时间设置的 GregorianCalendar。 4 GregorianCalendar(int year, int month, int date, int hour, int minute, int second) 为具有默认语言环境的默认时区构造一个具有给定日期和时间设置的 GregorianCalendar。 5 GregorianCalendar(Locale aLocale) 在具有给定语言环境的默认时区内构造一个基于当前时间的 GregorianCalendar。 6 GregorianCalendar(TimeZone zone) 在具有默认语言环境的给定时区内构造一个基于当前时间的 GregorianCalendar。 7 GregorianCalendar(TimeZone zone, Locale aLocale) 在具有给定语言环境的给定时区内构造一个基于当前时间的 GregorianCalendar。 ​ 这里是GregorianCalendar 类提供的一些有用的方法列表： 序号 方法 说明 1 void add(int field, int amount) 根据日历规则，将指定的（有符号的）时间量添加到给定的日历字段中。 2 protected void computeFields() 转换UTC毫秒值为时间域值 3 protected void computeTime() 覆盖Calendar ，转换时间域值为UTC毫秒值 4 boolean equals(Object obj) 比较此 GregorianCalendar 与指定的 Object。 5 int get(int field) 获取指定字段的时间值 6 int getActualMaximum(int field) 返回当前日期，给定字段的最大值 7 int getActualMinimum(int field) 返回当前日期，给定字段的最小值 8 int getGreatestMinimum(int field) 返回此 GregorianCalendar 实例给定日历字段的最高的最小值。 9 Date getGregorianChange() 获得格里高利历的更改日期。 10 int getLeastMaximum(int field) 返回此 GregorianCalendar 实例给定日历字段的最低的最大值 11 int getMaximum(int field) 返回此 GregorianCalendar 实例的给定日历字段的最大值。 12 Date getTime() 获取日历当前时间。 13 long getTimeInMillis() 获取用长整型表示的日历的当前时间 14 TimeZone getTimeZone() 获取时区。 15 int getMinimum(int field) 返回给定字段的最小值。 16 int hashCode() 重写hashCode. 17 boolean isLeapYear(int year) 确定给定的年份是否为闰年。 18 void roll(int field, boolean up) 在给定的时间字段上添加或减去（上/下）单个时间单元，不更改更大的字段。 19 void set(int field, int value) 用给定的值设置时间字段。 20 void set(int year, int month, int date) 设置年、月、日的值。 21 void set(int year, int month, int date, int hour, int minute) 设置年、月、日、小时、分钟的值。 22 void set(int year, int month, int date, int hour, int minute, int second) 设置年、月、日、小时、分钟、秒的值。 23 void setGregorianChange(Date date) 设置 GregorianCalendar 的更改日期。 24 void setTime(Date date) 用给定的日期设置Calendar的当前时间。 25 void setTimeInMillis(long millis) 用给定的long型毫秒数设置Calendar的当前时间。 26 void setTimeZone(TimeZone value) 用给定时区值设置当前时区。 27 String toString() 返回代表日历的字符串。 import java.util.*; public class GregorianCalendarDemo { public static void main(String args[]) { String months[] = { \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"}; int year; // 初始化 Gregorian 日历 // 使用当前时间和日期 // 默认为本地时间和时区 GregorianCalendar gcalendar = new GregorianCalendar(); // 显示当前时间和日期的信息 System.out.print(\"Date: \"); System.out.print(months[gcalendar.get(Calendar.MONTH)]); System.out.print(\" \" + gcalendar.get(Calendar.DATE) + \" \"); System.out.println(year = gcalendar.get(Calendar.YEAR)); System.out.print(\"Time: \"); System.out.print(gcalendar.get(Calendar.HOUR) + \":\"); System.out.print(gcalendar.get(Calendar.MINUTE) + \":\"); System.out.println(gcalendar.get(Calendar.SECOND)); // 测试当前年份是否为闰年 if(gcalendar.isLeapYear(year)) { System.out.println(\"当前年份是闰年\"); } else { System.out.println(\"当前年份不是闰年\"); } } } 以上实例编译运行结果如下： Date: Apr 22 2009 Time: 11:25:27 当前年份不是闰年 关于 Calender 类的完整列表，你可以参考标准的 [Java文档]。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Java/Chapter16.html":{"url":"Java/Chapter16.html","title":"第十六章：正则表达式","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 正则表达式实例 2. 捕获组 3. 正则表达式语法 4. Matcher 类的方法 4.1 索引方法 4.2 研究方法 4.3 替换方法 4.4 start 和 end 方法 4.5 matches 和 lookingAt 方法 4.6 replaceFirst 和 replaceAll 方法 4.7 appendReplacement 和 appendTail 方法 4.8 PatternSyntaxException 类的方法 第十六章：正则表达式 ​ 正则表达式定义了字符串的模式。 ​ 正则表达式可以用来搜索、编辑或处理文本。 ​ 正则表达式并不仅限于某一种语言，但是在每种语言中有细微的差别。 1. 正则表达式实例 ​ 一个字符串其实就是一个简单的正则表达式，例如 Hello World 正则表达式匹配 \"Hello World\" 字符串。 ​ .（点号）也是一个正则表达式，它匹配任何一个字符如：\"a\" 或 \"1\"。 ​ 下表列出了一些正则表达式的实例及描述： 正则表达式 描述 this is text 匹配字符串 \"this is text\" this\\s+is\\s+text 注意字符串中的 \\s+。匹配单词 \"this\" 后面的 \\s+ 可以匹配多个空格，之后匹配 is 字符串，再之后 \\s+ 匹配多个空格然后再跟上 text 字符串。可以匹配这个实例：this is text ^\\d+(.\\d+)? ^ 定义了以什么开始\\d+ 匹配一个或多个数字? 设置括号内的选项是可选的. 匹配 \".\"可以匹配的实例：\"5\", \"1.5\" 和 \"2.21\"。 ​ Java 正则表达式和 Perl 的是最为相似的。 ​ java.util.regex 包主要包括以下三个类： Pattern 类： pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。 Matcher 类： Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。 PatternSyntaxException： PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。 ​ 以下实例中使用了正则表达式 .*runoob.* 用于查找字符串中是否包了 runoob 子串： import java.util.regex.*; class RegexExample1{ public static void main(String args[]){ String content = \"I am noob \" + \"from runoob.com.\"; String pattern = \".*runoob.*\"; boolean isMatch = Pattern.matches(pattern, content); System.out.println(\"字符串中是否包含了 'runoob' 子字符串? \" + isMatch); } } ​ 实例输出结果为： 字符串中是否包含了 'runoob' 子字符串? true 2. 捕获组 ​ 捕获组是把多个字符当一个单独单元进行处理的方法，它通过对括号内的字符分组来创建。 ​ 例如，正则表达式 (dog) 创建了单一分组，组里包含\"d\"，\"o\"，和\"g\"。 ​ 捕获组是通过从左至右计算其开括号来编号。例如，在表达式（（A）（B（C））），有四个这样的组： ((A)(B(C))) (A) (B(C)) (C) ​ 可以通过调用 matcher 对象的 groupCount 方法来查看表达式有多少个分组。groupCount 方法返回一个 int 值，表示matcher对象当前有多个捕获组。 ​ 还有一个特殊的组（group(0)），它总是代表整个表达式。该组不包括在 groupCount 的返回值中。 ​ 下面的例子说明如何从一个给定的字符串中找到数字串： import java.util.regex.Matcher; import java.util.regex.Pattern; public class RegexMatches { public static void main( String args[] ){ // 按指定模式在字符串查找 String line = \"This order was placed for QT3000! OK?\"; String pattern = \"(\\\\D*)(\\\\d+)(.*)\"; // 创建 Pattern 对象 Pattern r = Pattern.compile(pattern); // 现在创建 matcher 对象 Matcher m = r.matcher(line); if (m.find( )) { System.out.println(\"Found value: \" + m.group(0) ); System.out.println(\"Found value: \" + m.group(1) ); System.out.println(\"Found value: \" + m.group(2) ); System.out.println(\"Found value: \" + m.group(3) ); } else { System.out.println(\"NO MATCH\"); } } } 以上实例编译运行结果如下： Found value: This order was placed for QT3000! OK? Found value: This order was placed for QT Found value: 3000 Found value: ! OK? 3. 正则表达式语法 ​ 在其他语言中，\\\\ 表示：我想要在正则表达式中插入一个普通的（字面上的）反斜杠，请不要给它任何特殊的意义。 ​ 在 Java 中，\\\\ 表示：我要插入一个正则表达式的反斜线，所以其后的字符具有特殊的意义。 ​ 所以，在其他的语言中（如Perl），一个反斜杠\\ 就足以具有转义的作用，而在 Java 中正则表达式中则需要有两个反斜杠才能被解析为其他语言中的转义作用。也可以简单的理解在 Java 的正则表达式中，两个\\\\ 代表其他语言中的一个 \\，这也就是为什么表示一位数字的正则表达式是 \\\\d，而表示一个普通的反斜杠是 \\\\\\\\。 字符 说明 \\ 将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如，\"n\"匹配字符\"n\"。\"\\n\"匹配换行符。序列\"\\\\\"匹配\"\\\"，\"\\(\"匹配\"(\"。 ^ 匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与\"\\n\"或\"\\r\"之后的位置匹配。 $ 匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与\"\\n\"或\"\\r\"之前的位置匹配。 * 零次或多次匹配前面的字符或子表达式。例如，zo 匹配\"z\"和\"zoo\"。 等效于 {0,}。 + 一次或多次匹配前面的字符或子表达式。例如，\"zo+\"与\"zo\"和\"zoo\"匹配，但与\"z\"不匹配。+ 等效于 {1,}。 ? 零次或一次匹配前面的字符或子表达式。例如，\"do(es)?\"匹配\"do\"或\"does\"中的\"do\"。? 等效于 {0,1}。 {n} n 是非负整数。正好匹配 n 次。例如，\"o{2}\"与\"Bob\"中的\"o\"不匹配，但与\"food\"中的两个\"o\"匹配。 {n,} n 是非负整数。至少匹配 n 次。例如，\"o{2,}\"不匹配\"Bob\"中的\"o\"，而匹配\"foooood\"中的所有 o。\"o{1,}\"等效于\"o+\"。\"o{0,}\"等效于\"o*\"。 {n,m} m 和 n 是非负整数，其中 n m。匹配至少 n 次，至多 m 次。例如，\"o{1,3}\"匹配\"fooooood\"中的头三个 o。'o{0,1}' 等效于 'o?'。注意：您不能将空格插入逗号和数字之间。 ? 当此字符紧随任何其他限定符（、+、?、{n}、{n,}、{n,m*}）之后时，匹配模式是\"非贪心的\"。\"非贪心的\"模式匹配搜索到的、尽可能短的字符串，而默认的\"贪心的\"模式匹配搜索到的、尽可能长的字符串。例如，在字符串\"oooo\"中，\"o+?\"只匹配单个\"o\"，而\"o+\"匹配所有\"o\"。 . 匹配除\"\\r\\n\"之外的任何单个字符。若要匹配包括\"\\r\\n\"在内的任意字符，请使用诸如\"[\\s\\S]\"之类的模式。 (pattern) 匹配 pattern 并捕获该匹配的子表达式。可以使用 $0…$9 属性从结果\"匹配\"集合中检索捕获的匹配。若要匹配括号字符 ( )，请使用\"(\"或者\")\"。 (?:pattern) 匹配 pattern 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用\"or\"字符 (\\ ) 组合模式部件的情况很有用。例如，'industr(?:y\\ ies) 是比 'industry\\ industries' 更经济的表达式。 (?=pattern) 执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 pattern 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?=95\\ 98\\ NT\\ 2000)' 匹配\"Windows 2000\"中的\"Windows\"，但不匹配\"Windows 3.1\"中的\"Windows\"。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。 (?!pattern) 执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 pattern 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?!95\\ 98\\ NT\\ 2000)' 匹配\"Windows 3.1\"中的 \"Windows\"，但不匹配\"Windows 2000\"中的\"Windows\"。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。 x\\ y 匹配 x 或 y。例如，'z\\ food' 匹配\"z\"或\"food\"。'(z\\ f)ood' 匹配\"zood\"或\"food\"。 [xyz] 字符集。匹配包含的任一字符。例如，\"[abc]\"匹配\"plain\"中的\"a\"。 *xyz* 反向字符集。匹配未包含的任何字符。例如，\"abc\"匹配\"plain\"中\"p\"，\"l\"，\"i\"，\"n\"。 [a-z] 字符范围。匹配指定范围内的任何字符。例如，\"[a-z]\"匹配\"a\"到\"z\"范围内的任何小写字母。 *a-z* 反向范围字符。匹配不在指定的范围内的任何字符。例如，\"a-z\"匹配任何不在\"a\"到\"z\"范围内的任何字符。 \\b 匹配一个字边界，即字与空格间的位置。例如，\"er\\b\"匹配\"never\"中的\"er\"，但不匹配\"verb\"中的\"er\"。 \\B 非字边界匹配。\"er\\B\"匹配\"verb\"中的\"er\"，但不匹配\"never\"中的\"er\"。 \\cx 匹配 x 指示的控制字符。例如，\\cM 匹配 Control-M 或回车符。x 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是\"c\"字符本身。 \\d 数字字符匹配。等效于 [0-9]。 \\D 非数字字符匹配。等效于 0-9。 \\f 换页符匹配。等效于 \\x0c 和 \\cL。 \\n 换行符匹配。等效于 \\x0a 和 \\cJ。 \\r 匹配一个回车符。等效于 \\x0d 和 \\cM。 \\s 匹配任何空白字符，包括空格、制表符、换页符等。与 [ \\f\\n\\r\\t\\v] 等效。 \\S 匹配任何非空白字符。与 \\f\\n\\r\\t\\v 等效。 \\t 制表符匹配。与 \\x09 和 \\cI 等效。 \\v 垂直制表符匹配。与 \\x0b 和 \\cK 等效。 \\w 匹配任何字类字符，包括下划线。与\"[A-Za-z0-9_]\"等效。 \\W 与任何非单词字符匹配。与\"A-Za-z0-9_\"等效。 \\xn 匹配 n，此处的 n 是一个十六进制转义码。十六进制转义码必须正好是两位数长。例如，\"\\x41\"匹配\"A\"。\"\\x041\"与\"\\x04\"&\"1\"等效。允许在正则表达式中使用 ASCII 代码。 *num* 匹配 num，此处的 num 是一个正整数。到捕获匹配的反向引用。例如，\"(.)\\1\"匹配两个连续的相同字符。 *n* 标识一个八进制转义码或反向引用。如果 *n 前面至少有 n 个捕获子表达式，那么 n 是反向引用。否则，如果 n 是八进制数 (0-7)，那么 n* 是八进制转义码。 *nm* 标识一个八进制转义码或反向引用。如果 *nm 前面至少有 nm 个捕获子表达式，那么 nm 是反向引用。如果 \\nm 前面至少有 n 个捕获，则 n 是反向引用，后面跟有字符 m。如果两种前面的情况都不存在，则 \\nm 匹配八进制值 nm，其中 n 和 m* 是八进制数字 (0-7)。 \\nml 当 n 是八进制数 (0-3)，m 和 l 是八进制数 (0-7) 时，匹配八进制转义码 nml。 \\un 匹配 n，其中 n 是以四位十六进制数表示的 Unicode 字符。例如，\\u00A9 匹配版权符号 (©)。 根据 Java Language Specification 的要求，Java 源代码的字符串中的反斜线被解释为 Unicode 转义或其他字符转义。因此必须在字符串字面值中使用两个反斜线，表示正则表达式受到保护，不被 Java 字节码编译器解释。例如，当解释为正则表达式时，字符串字面值 \"\\b\" 与单个退格字符匹配，而 \"\\b\" 与单词边界匹配。字符串字面值 \"(hello)\" 是非法的，将导致编译时错误；要与字符串 (hello) 匹配，必须使用字符串字面值 \"\\(hello\\)\"。 4. Matcher 类的方法 4.1 索引方法 ​ 索引方法提供了有用的索引值，精确表明输入字符串中在哪能找到匹配： 序号 方法 说明 1 public int start() 返回以前匹配的初始索引。 2 public int start(int group) 返回在以前的匹配操作期间，由给定组所捕获的子序列的初始索引 3 public int end() 返回最后匹配字符之后的偏移量。 4 public int end(int group) 返回在以前的匹配操作期间，由给定组所捕获子序列的最后字符之后的偏移量。 4.2 研究方法 ​ 研究方法用来检查输入字符串并返回一个布尔值，表示是否找到该模式： 序号 方法 说明 1 public boolean lookingAt() 尝试将从区域开头开始的输入序列与该模式匹配。 2 public boolean find() 尝试查找与该模式匹配的输入序列的下一个子序列。 3 public boolean find(int start） 重置此匹配器，然后尝试查找匹配该模式、从指定索引开始的输入序列的下一个子序列。 4 public boolean matches() 尝试将整个区域与模式匹配。 4.3 替换方法 ​ 替换方法是替换输入字符串里文本的方法： 序号 方法 说明 1 public Matcher appendReplacement(StringBuffer sb, String replacement) 实现非终端添加和替换步骤。 2 public StringBuffer appendTail(StringBuffer sb) 实现终端添加和替换步骤。 3 public String replaceAll(String replacement) 替换模式与给定替换字符串相匹配的输入序列的每个子序列。 4 public String replaceFirst(String replacement) 替换模式与给定替换字符串匹配的输入序列的第一个子序列。 5 public static String quoteReplacement(String s) 返回指定字符串的字面替换字符串。这个方法返回一个字符串，就像传递给Matcher类的appendReplacement 方法一个字面字符串一样工作。 4.4 start 和 end 方法 ​ 下面是一个对单词 \"cat\" 出现在输入字符串中出现次数进行计数的例子： import java.util.regex.Matcher; import java.util.regex.Pattern; public class RegexMatches { private static final String REGEX = \"\\\\bcat\\\\b\"; private static final String INPUT = \"cat cat cat cattie cat\"; public static void main( String args[] ){ Pattern p = Pattern.compile(REGEX); Matcher m = p.matcher(INPUT); // 获取 matcher 对象 int count = 0; while(m.find()) { count++; System.out.println(\"Match number \"+count); System.out.println(\"start(): \"+m.start()); System.out.println(\"end(): \"+m.end()); } } } ​ 以上实例编译运行结果如下： Match number 1 start(): 0 end(): 3 Match number 2 start(): 4 end(): 7 Match number 3 start(): 8 end(): 11 Match number 4 start(): 19 end(): 22 ​ 可以看到这个例子是使用单词边界，以确保字母 \"c\" \"a\" \"t\" 并非仅是一个较长的词的子串。它也提供了一些关于输入字符串中匹配发生位置的有用信息。 ​ Start 方法返回在以前的匹配操作期间，由给定组所捕获的子序列的初始索引，end 方法最后一个匹配字符的索引加 1。 4.5 matches 和 lookingAt 方法 ​ matches 和 lookingAt 方法都用来尝试匹配一个输入序列模式。它们的不同是 matches 要求整个序列都匹配，而lookingAt 不要求。 ​ lookingAt 方法虽然不需要整句都匹配，但是需要从第一个字符开始匹配。 ​ 这两个方法经常在输入字符串的开始使用。 ​ 我们通过下面这个例子，来解释这个功能： import java.util.regex.Matcher; import java.util.regex.Pattern; public class RegexMatches { private static final String REGEX = \"foo\"; private static final String INPUT = \"fooooooooooooooooo\"; private static final String INPUT2 = \"ooooofoooooooooooo\"; private static Pattern pattern; private static Matcher matcher; private static Matcher matcher2; public static void main( String args[] ){ pattern = Pattern.compile(REGEX); matcher = pattern.matcher(INPUT); matcher2 = pattern.matcher(INPUT2); System.out.println(\"Current REGEX is: \"+REGEX); System.out.println(\"Current INPUT is: \"+INPUT); System.out.println(\"Current INPUT2 is: \"+INPUT2); System.out.println(\"lookingAt(): \"+matcher.lookingAt()); System.out.println(\"matches(): \"+matcher.matches()); System.out.println(\"lookingAt(): \"+matcher2.lookingAt()); } } ​ 以上实例编译运行结果如下： Current REGEX is: foo Current INPUT is: fooooooooooooooooo Current INPUT2 is: ooooofoooooooooooo lookingAt(): true matches(): false lookingAt(): false 4.6 replaceFirst 和 replaceAll 方法 ​ replaceFirst 和 replaceAll 方法用来替换匹配正则表达式的文本。不同的是，replaceFirst 替换首次匹配，replaceAll 替换所有匹配。 ​ 下面的例子来解释这个功能： import java.util.regex.Matcher; import java.util.regex.Pattern; public class RegexMatches { private static String REGEX = \"dog\"; private static String INPUT = \"The dog says meow. \" + \"All dogs say meow.\"; private static String REPLACE = \"cat\"; public static void main(String[] args) { Pattern p = Pattern.compile(REGEX); // get a matcher object Matcher m = p.matcher(INPUT); INPUT = m.replaceAll(REPLACE); System.out.println(INPUT); } } ​ 以上实例编译运行结果如下： The cat says meow. All cats say meow. 4.7 appendReplacement 和 appendTail 方法 ​ Matcher 类也提供了appendReplacement 和 appendTail 方法用于文本替换： ​ 看下面的例子来解释这个功能： import java.util.regex.Matcher; import java.util.regex.Pattern; public class RegexMatches { private static String REGEX = \"a*b\"; private static String INPUT = \"aabfooaabfooabfoobkkk\"; private static String REPLACE = \"-\"; public static void main(String[] args) { Pattern p = Pattern.compile(REGEX); // 获取 matcher 对象 Matcher m = p.matcher(INPUT); StringBuffer sb = new StringBuffer(); while(m.find()){ m.appendReplacement(sb,REPLACE); } m.appendTail(sb); System.out.println(sb.toString()); } ​ 以上实例编译运行结果如下： -foo-foo-foo-kkk 4.8 PatternSyntaxException 类的方法 ​ PatternSyntaxException 是一个非强制异常类，它指示一个正则表达式模式中的语法错误。 ​ PatternSyntaxException 类提供了下面的方法来帮助我们查看发生了什么错误。 序号 方法 说明 1 public String getDescription() 获取错误的描述。 2 public int getIndex() 获取错误的索引。 3 public String getPattern() 获取错误的正则表达式模式。 4 public String getMessage() 返回多行字符串，包含语法错误及其索引的描述、错误的正则表达式模式和模式中错误索引的可视化指示。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Java/Chapter17.html":{"url":"Java/Chapter17.html","title":"第十七章：文件和流","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 读取控制台输入 2. 从控制台读取多字符输入 3. 从控制台读取字符串 4. 控制台输出 5. 读写文件 6. FileInputStream 7. FileOutputStream 8. 文件和I/O 9. Java中的目录 9.1 创建目录 9.2 读取目录 9.3 删除目录或文件 第十七章：文件和流 ​ Java.io 包几乎包含了所有操作输入、输出需要的类。所有这些流类代表了输入源和输出目标。 ​ Java.io 包中的流支持很多种格式，比如：基本类型、对象、本地化字符集等等。 ​ 一个流可以理解为一个数据的序列。输入流表示从一个源读取数据，输出流表示向一个目标写数据。 ​ Java 为 I/O 提供了强大的而灵活的支持，使其更广泛地应用到文件传输和网络编程中。 ​ 这里讲述最基本的和流与 I/O 相关的功能。我们将通过一个个例子来学习这些功能。 1. 读取控制台输入 ​ Java 的控制台输入由 System.in 完成。 ​ 为了获得一个绑定到控制台的字符流，你可以把 System.in 包装在一个 BufferedReader 对象中来创建一个字符流。 ​ 下面是创建 BufferedReader 的基本语法： BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); ​ BufferedReader 对象创建后，我们便可以使用 read() 方法从控制台读取一个字符，或者用 readLine() 方法读取一个字符串。 2. 从控制台读取多字符输入 ​ 从 BufferedReader 对象读取一个字符要使用 read() 方法，它的语法如下： int read( ) throws IOException ​ 每次调用 read() 方法，它从输入流读取一个字符并把该字符作为整数值返回。 当流结束的时候返回 -1。该方法抛出 IOException。 ​ 下面的程序示范了用 read() 方法从控制台不断读取字符直到用户输入 \"q\"。 //使用 BufferedReader 在控制台读取字符 import java.io.*; public class BRRead { public static void main(String args[]) throws IOException { char c; // 使用 System.in 创建 BufferedReader BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); System.out.println(\"输入字符, 按下 'q' 键退出。\"); // 读取字符 do { c = (char) br.read(); System.out.println(c); } while (c != 'q'); } } 以上实例编译运行结果如下: 输入字符, 按下 'q' 键退出。 runoob r u n o o b q q 3. 从控制台读取字符串 ​ 从标准输入读取一个字符串需要使用 BufferedReader 的 readLine() 方法。 ​ 它的一般格式是： String readLine( ) throws IOException ​ 下面的程序读取和显示字符行直到你输入了单词\"end\"。 //使用 BufferedReader 在控制台读取字符 import java.io.*; public class BRReadLines { public static void main(String args[]) throws IOException { // 使用 System.in 创建 BufferedReader BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); String str; System.out.println(\"Enter lines of text.\"); System.out.println(\"Enter 'end' to quit.\"); do { str = br.readLine(); System.out.println(str); } while (!str.equals(\"end\")); } } ​ 以上实例编译运行结果如下: Enter lines of text. Enter 'end' to quit. This is line one This is line one This is line two This is line two end end JDK 5 后的版本我们也可以使用 [Java Scanner] 类来获取控制台的输入。 4. 控制台输出 ​ 在此前已经介绍过，控制台的输出由 print( ) 和 println() 完成。这些方法都由类 PrintStream 定义，System.out 是该类对象的一个引用。 ​ PrintStream 继承了 OutputStream类，并且实现了方法 write()。这样，write() 也可以用来往控制台写操作。 ​ PrintStream 定义 write() 的最简单格式如下所示： void write(int byteval) ​ 该方法将 byteval 的低八位字节写到流中。 ​ 下面的例子用 write() 把字符 \"A\" 和紧跟着的换行符输出到屏幕： import java.io.*; //演示 System.out.write(). public class WriteDemo { public static void main(String args[]) { int b; b = 'A'; System.out.write(b); System.out.write('\\n'); } } ​ 运行以上实例在输出窗口输出 \"A\" 字符 A 注意：write() 方法不经常使用，因为 print() 和 println() 方法用起来更为方便。 5. 读写文件 ​ 如前所述，一个流被定义为一个数据序列。输入流用于从源读取数据，输出流用于向目标写数据。 ​ 下图是一个描述输入流和输出流的类层次图。 ​ 下面将要讨论的两个重要的流是 FileInputStream 和 FileOutputStream： 6. FileInputStream ​ 该流用于从文件读取数据，它的对象可以用关键字 new 来创建。 ​ 有多种构造方法可用来创建对象。 ​ 可以使用字符串类型的文件名来创建一个输入流对象来读取文件： InputStream f = new FileInputStream(\"C:/java/hello\"); ​ 也可以使用一个文件对象来创建一个输入流对象来读取文件。我们首先得使用 File() 方法来创建一个文件对象： File f = new File(\"C:/java/hello\"); InputStream out = new FileInputStream(f); ​ 创建了InputStream对象，就可以使用下面的方法来读取流或者进行其他的流操作。 序号 方法 描述 1 public void close() throws IOException{} 关闭此文件输入流并释放与此流有关的所有系统资源。抛出IOException异常。 2 protected void finalize()throws IOException {} 这个方法清除与该文件的连接。确保在不再引用文件输入流时调用其 close 方法。抛出IOException异常。 3 public int read(int r)throws IOException{} 这个方法从 InputStream 对象读取指定字节的数据。返回为整数值。返回下一字节数据，如果已经到结尾则返回-1。 4 public int read(byte[] r) throws IOException{} 这个方法从输入流读取r.length长度的字节。返回读取的字节数。如果是文件结尾则返回-1。 5 public int available() throws IOException{} 返回下一次对此输入流调用的方法可以不受阻塞地从此输入流读取的字节数。返回一个整数值。 ​ 除了 InputStream 外，还有一些其他的输入流，这里不做介绍。 7. FileOutputStream ​ 该类用来创建一个文件并向文件中写数据。 ​ 如果该流在打开文件进行输出前，目标文件不存在，那么该流会创建该文件。 ​ 有两个构造方法可以用来创建 FileOutputStream 对象。 ​ 使用字符串类型的文件名来创建一个输出流对象： OutputStream f = new FileOutputStream(\"C:/java/hello\"); ​ 也可以使用一个文件对象来创建一个输出流来写文件。我们首先得使用File()方法来创建一个文件对象： File f = new File(\"C:/java/hello\"); OutputStream f = new FileOutputStream(f); ​ 创建OutputStream 对象完成后，就可以使用下面的方法来写入流或者进行其他的流操作。 序号 方法及描述 描述 1 public void close() throws IOException{} 关闭此文件输入流并释放与此流有关的所有系统资源。抛出IOException异常。 2 protected void finalize()throws IOException {} 这个方法清除与该文件的连接。确保在不再引用文件输入流时调用其 close 方法。抛出IOException异常。 3 public void write(int w)throws IOException{} 这个方法把指定的字节写到输出流中。 4 public void write(byte[] w) 把指定数组中w.length长度的字节写到OutputStream中。 ​ 除了OutputStream外，还有一些其他的输出流，这里不做介绍。 ​ 下面是一个演示 InputStream 和 OutputStream 用法的例子： import java.io.*; public class fileStreamTest { public static void main(String args[]) { try { byte bWrite[] = { 11, 21, 3, 40, 5 }; OutputStream os = new FileOutputStream(\"test.txt\"); for (int x = 0; x ​ 上面的程序首先创建文件test.txt，并把给定的数字以二进制形式写进该文件，同时输出到控制台上。 ​ 以上代码由于是二进制写入，可能存在乱码，你可以使用以下代码实例来解决乱码问题： //文件名 :fileStreamTest2.java import java.io.*; public class fileStreamTest2 { public static void main(String[] args) throws IOException { File f = new File(\"a.txt\"); FileOutputStream fop = new FileOutputStream(f); // 构建FileOutputStream对象,文件不存在会自动新建 OutputStreamWriter writer = new OutputStreamWriter(fop, \"UTF-8\"); // 构建OutputStreamWriter对象,参数可以指定编码,默认为操作系统默认编码,windows上是gbk writer.append(\"中文输入\"); // 写入到缓冲区 writer.append(\"\\r\\n\"); // 换行 writer.append(\"English\"); // 刷新缓存冲,写入到文件,如果下面已经没有写入的内容了,直接close也会写入 writer.close(); // 关闭写入流,同时会把缓冲区内容写入文件,所以上面的注释掉 fop.close(); // 关闭输出流,释放系统资源 FileInputStream fip = new FileInputStream(f); // 构建FileInputStream对象 InputStreamReader reader = new InputStreamReader(fip, \"UTF-8\"); // 构建InputStreamReader对象,编码与写入相同 StringBuffer sb = new StringBuffer(); while (reader.ready()) { sb.append((char) reader.read()); // 转成char加到StringBuffer对象中 } System.out.println(sb.toString()); reader.close(); // 关闭读取流 fip.close(); // 关闭输入流,释放系统资源 } } 8. 文件和I/O ​ 还有一些关于文件和I/O的类，我们也需要知道： [File Class(类)] [FileReader Class(类] [FileWriter Class(类)] 9. Java中的目录 9.1 创建目录 ​ File类中有两个方法可以用来创建文件夹： mkdir( )方法创建一个文件夹，成功则返回true，失败则返回false。失败表明File对象指定的路径已经存在，或者由于整个路径还不存在，该文件夹不能被创建。 mkdirs()方法创建一个文件夹和它的所有父文件夹。 ​ 下面的例子创建 \"/tmp/user/java/bin\"文件夹： import java.io.File; public class CreateDir { public static void main(String args[]) { String dirname = \"/tmp/user/java/bin\"; File d = new File(dirname); // 现在创建目录 d.mkdirs(); } } ​ 编译并执行上面代码来创建目录 \"/tmp/user/java/bin\"。 注意： Java 在 UNIX 和 Windows 自动按约定分辨文件路径分隔符。如果你在 Windows 版本的 Java 中使用分隔符 (/) ，路径依然能够被正确解析。 9.2 读取目录 ​ 一个目录其实就是一个 File 对象，它包含其他文件和文件夹。 ​ 如果创建一个 File 对象并且它是一个目录，那么调用 isDirectory() 方法会返回 true。 ​ 可以通过调用该对象上的 list() 方法，来提取它包含的文件和文件夹的列表。 ​ 下面展示的例子说明如何使用 list() 方法来检查一个文件夹中包含的内容： import java.io.File; public class DirList { public static void main(String args[]) { String dirname = \"/tmp\"; File f1 = new File(dirname); if (f1.isDirectory()) { System.out.println(\"目录 \" + dirname); String s[] = f1.list(); for (int i = 0; i 以上实例编译运行结果如下： 目录 /tmp bin 是一个目录 lib 是一个目录 demo 是一个目录 test.txt 是一个文件 README 是一个文件 index.html 是一个文件 include 是一个目录 9.3 删除目录或文件 ​ 删除文件可以使用 java.io.File.delete() 方法。 ​ 以下代码会删除目录 /tmp/java/，需要注意的是当删除某一目录时，必须保证该目录下没有其他文件才能正确删除，否则将删除失败。 ​ 测试目录结构： /tmp/java/ |-- 1.log |-- test ​ 代码如下： import java.io.File; public class DeleteFileDemo { public static void main(String args[]) { // 这里修改为自己的测试目录 File folder = new File(\"/tmp/java/\"); deleteFolder(folder); } // 删除文件及目录 public static void deleteFolder(File folder) { File[] files = folder.listFiles(); if (files != null) { for (File f : files) { if (f.isDirectory()) { deleteFolder(f); } else { f.delete(); } } } folder.delete(); } } MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Java/Chapter18.html":{"url":"Java/Chapter18.html","title":"第十八章：异常处理","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. Exception 类的层次 2. Java 内置异常类 3. 异常方法 4. 捕获异常 5. 多重捕获块 6. throws/throw 关键字 7. finally关键字 8. 声明自定义异常 9. 通用异常 第十八章：异常处理 ​ 异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。 ​ 比如说，你的代码少了一个分号，那么运行出来结果是提示是错误 java.lang.Error；如果你用System.out.println(11/0)，那么你是因为你用0做了除数，会抛出 java.lang.ArithmeticException 的异常。 ​ 异常发生的原因有很多，通常包含以下几大类： 用户输入了非法数据。 要打开的文件不存在。 网络通信时连接中断，或者JVM内存溢出。 ​ 这些异常有的是因为用户错误引起，有的是程序错误引起的，还有其它一些是因为物理错误引起的。- ​ 要理解Java异常处理是如何工作的，你需要掌握以下三种类型的异常： 检查性异常：最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。 运行时异常： 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。 错误： 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。 1. Exception 类的层次 ​ 所有的异常类是从 java.lang.Exception 类继承的子类。 ​ Exception 类是 Throwable 类的子类。除了Exception类外，Throwable还有一个子类Error 。 ​ Java 程序通常不捕获错误。错误一般发生在严重故障时，它们在Java程序处理的范畴之外。 ​ Error 用来指示运行时环境发生的错误。 ​ 例如，JVM 内存溢出。一般地，程序不会从错误中恢复。 ​ 异常类有两个主要的子类：IOException 类和 RuntimeException 类。 ​ 在 Java 内置类中(接下来会说明)，有大部分常用检查性和非检查性异常。 2. Java 内置异常类 ​ Java 语言定义了一些异常类在 java.lang 标准包中。 ​ 标准运行时异常类的子类是最常见的异常类。由于 java.lang 包是默认加载到所有的 Java 程序的，所以大部分从运行时异常类继承而来的异常都可以直接使用。 ​ Java 根据各个类库也定义了一些其他的异常，下面的表中列出了 Java 的非检查性异常。 异常 描述 ArithmeticException 当出现异常的运算条件时，抛出此异常。例如，一个整数\"除以零\"时，抛出此类的一个实例。 ArrayIndexOutOfBoundsException 用非法索引访问数组时抛出的异常。如果索引为负或大于等于数组大小，则该索引为非法索引。 ArrayStoreException 试图将错误类型的对象存储到一个对象数组时抛出的异常。 ClassCastException 当试图将对象强制转换为不是实例的子类时，抛出该异常。 IllegalArgumentException 抛出的异常表明向方法传递了一个不合法或不正确的参数。 IllegalMonitorStateException 抛出的异常表明某一线程已经试图等待对象的监视器，或者试图通知其他正在等待对象的监视器而本身没有指定监视器的线程。 IllegalStateException 在非法或不适当的时间调用方法时产生的信号。换句话说，即 Java 环境或 Java 应用程序没有处于请求操作所要求的适当状态下。 IllegalThreadStateException 线程没有处于请求操作所要求的适当状态时抛出的异常。 IndexOutOfBoundsException 指示某排序索引（例如对数组、字符串或向量的排序）超出范围时抛出。 NegativeArraySizeException 如果应用程序试图创建大小为负的数组，则抛出该异常。 NullPointerException 当应用程序试图在需要对象的地方使用 null 时，抛出该异常 NumberFormatException 当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常。 SecurityException 由安全管理器抛出的异常，指示存在安全侵犯。 StringIndexOutOfBoundsException 此异常由 String 方法抛出，指示索引或者为负，或者超出字符串的大小。 UnsupportedOperationException 当不支持请求的操作时，抛出该异常。 ​ 下面的表中列出了 Java 定义在 java.lang 包中的检查性异常类。 异常 描述 ClassNotFoundException 应用程序试图加载类时，找不到相应的类，抛出该异常。 CloneNotSupportedException 当调用 Object 类中的 clone 方法克隆对象，但该对象的类无法实现 Cloneable 接口时，抛出该异常。 IllegalAccessException 拒绝访问一个类的时候，抛出该异常。 InstantiationException 当试图使用 Class 类中的 newInstance 方法创建一个类的实例，而指定的类对象因为是一个接口或是一个抽象类而无法实例化时，抛出该异常。 InterruptedException 一个线程被另一个线程中断，抛出该异常。 NoSuchFieldException 请求的变量不存在 NoSuchMethodException 请求的方法不存在 3. 异常方法 ​ 下面的列表是 Throwable 类的主要方法: 序号 方法 说明 1 public String getMessage() 返回关于发生的异常的详细信息。这个消息在Throwable 类的构造函数中初始化了。 2 public Throwable getCause() 返回一个Throwable 对象代表异常原因。 3 public String toString() 使用getMessage()的结果返回类的串级名字。 4 public void printStackTrace() 打印toString()结果和栈层次到System.err，即错误输出流。 5 public StackTraceElement [] getStackTrace() 返回一个包含堆栈层次的数组。下标为0的元素代表栈顶，最后一个元素代表方法调用堆栈的栈底。 6 public Throwable fillInStackTrace() 用当前的调用栈层次填充Throwable 对象栈层次，添加到栈层次任何先前信息中。 4. 捕获异常 ​ 使用 try 和 catch 关键字可以捕获异常。try/catch 代码块放在异常可能发生的地方。 ​ try/catch代码块中的代码称为保护代码，使用 try/catch 的语法如下： try { // 程序代码 }catch(ExceptionName e1) { //Catch 块 } ​ Catch 语句包含要捕获异常类型的声明。当保护代码块中发生一个异常时，try 后面的 catch 块就会被检查。 ​ 如果发生的异常包含在 catch 块中，异常会被传递到该 catch 块，这和传递一个参数到方法是一样。 ​ 下面的例子中声明有两个元素的一个数组，当代码试图访问数组的第三个元素的时候就会抛出一个异常。 // 文件名 : ExcepTest.java import java.io.*; public class ExcepTest{ public static void main(String args[]){ try{ int a[] = new int[2]; System.out.println(\"Access element three :\" + a[3]); }catch(ArrayIndexOutOfBoundsException e){ System.out.println(\"Exception thrown :\" + e); } System.out.println(\"Out of the block\"); } } 以上代码编译运行输出结果如下： Exception thrown :java.lang.ArrayIndexOutOfBoundsException: 3 Out of the block 5. 多重捕获块 ​ 一个 try 代码块后面跟随多个 catch 代码块的情况就叫多重捕获。 ​ 多重捕获块的语法如下所示： try{ // 程序代码 }catch(异常类型1 异常的变量名1){ // 程序代码 }catch(异常类型2 异常的变量名2){ // 程序代码 }catch(异常类型3 异常的变量名3){ // 程序代码 } ​ 上面的代码段包含了 3 个 catch块。 ​ 可以在 try 语句后面添加任意数量的 catch 块。 ​ 如果保护代码中发生异常，异常被抛给第一个 catch 块。 ​ 如果抛出异常的数据类型与 ExceptionType1 匹配，它在这里就会被捕获。 ​ 如果不匹配，它会被传递给第二个 catch 块。 ​ 如此，直到异常被捕获或者通过所有的 catch 块。 ​ 该实例展示了怎么使用多重 try/catch。 try { file = new FileInputStream(fileName); x = (byte) file.read(); } catch(FileNotFoundException f) { // Not valid! f.printStackTrace(); return -1; } catch(IOException i) { i.printStackTrace(); return -1; } 6. throws/throw 关键字 ​ 如果一个方法没有捕获到一个检查性异常，那么该方法必须使用 throws 关键字来声明。throws 关键字放在方法签名的尾部。 ​ 也可以使用 throw 关键字抛出一个异常，无论它是新实例化的还是刚捕获到的。 ​ 下面方法的声明抛出一个 RemoteException 异常： import java.io.*; public class className { public void deposit(double amount) throws RemoteException { // Method implementation throw new RemoteException(); } //Remainder of class definition } ​ 一个方法可以声明抛出多个异常，多个异常之间用逗号隔开。 ​ 例如，下面的方法声明抛出 RemoteException 和 InsufficientFundsException： import java.io.*; public class className { public void withdraw(double amount) throws RemoteException, InsufficientFundsException { // Method implementation } //Remainder of class definition } 7. finally关键字 ​ finally 关键字用来创建在 try 代码块后面执行的代码块。 ​ 无论是否发生异常，finally 代码块中的代码总会被执行。 ​ 在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。 ​ finally 代码块出现在 catch 代码块最后，语法如下： try{ // 程序代码 }catch(异常类型1 异常的变量名1){ // 程序代码 }catch(异常类型2 异常的变量名2){ // 程序代码 }finally{ // 程序代码 } public class ExcepTest{ public static void main(String args[]){ int a[] = new int[2]; try{ System.out.println(\"Access element three :\" + a[3]); }catch(ArrayIndexOutOfBoundsException e){ System.out.println(\"Exception thrown :\" + e); } finally{ a[0] = 6; System.out.println(\"First element value: \" +a[0]); System.out.println(\"The finally statement is executed\"); } } } ​ 以上实例编译运行结果如下： Exception thrown :java.lang.ArrayIndexOutOfBoundsException: 3 First element value: 6 The finally statement is executed ​ 注意下面事项： catch 不能独立于 try 存在。 在 try/catch 后面添加 finally 块并非强制性要求的。 try 代码后不能既没 catch 块也没 finally 块。 try, catch, finally 块之间不能添加任何代码。 8. 声明自定义异常 ​ 在 Java 中你可以自定义异常。编写自己的异常类时需要记住下面的几点。 所有异常都必须是 Throwable 的子类。 如果希望写一个检查性异常类，则需要继承 Exception 类。 如果你想写一个运行时异常类，那么需要继承 RuntimeException 类。 ​ 可以像下面这样定义自己的异常类： class MyException extends Exception{ } ​ 只继承Exception 类来创建的异常类是检查性异常类。 ​ 下面的 InsufficientFundsException 类是用户定义的异常类，它继承自 Exception。 ​ 一个异常类和其它任何类一样，包含有变量和方法。 ​ 以下实例是一个银行账户的模拟，通过银行卡的号码完成识别，可以进行存钱和取钱的操作。 // 文件名InsufficientFundsException.java import java.io.*; //自定义异常类，继承Exception类 public class InsufficientFundsException extends Exception { //此处的amount用来储存当出现异常（取出钱多于余额时）所缺乏的钱 private double amount; public InsufficientFundsException(double amount) { this.amount = amount; } public double getAmount() { return amount; } } ​ 为了展示如何使用我们自定义的异常类， ​ 在下面的 CheckingAccount 类中包含一个 withdraw() 方法抛出一个 InsufficientFundsException 异常。 // 文件名称 CheckingAccount.java import java.io.*; //此类模拟银行账户 public class CheckingAccount { //balance为余额，number为卡号 private double balance; private int number; public CheckingAccount(int number) { this.number = number; } //方法：存钱 public void deposit(double amount) { balance += amount; } //方法：取钱 public void withdraw(double amount) throws InsufficientFundsException { if(amount 下面的 BankDemo 程序示范了如何调用 CheckingAccount 类的 deposit() 和 withdraw() 方法。 //文件名称 BankDemo.java public class BankDemo { public static void main(String [] args) { CheckingAccount c = new CheckingAccount(101); System.out.println(\"Depositing $500...\"); c.deposit(500.00); try { System.out.println(\"\\nWithdrawing $100...\"); c.withdraw(100.00); System.out.println(\"\\nWithdrawing $600...\"); c.withdraw(600.00); }catch(InsufficientFundsException e) { System.out.println(\"Sorry, but you are short $\" + e.getAmount()); e.printStackTrace(); } } } 编译上面三个文件，并运行程序 BankDemo，得到结果如下所示： Depositing $500... Withdrawing $100... Withdrawing $600... Sorry, but you are short $200.0 InsufficientFundsException at CheckingAccount.withdraw(CheckingAccount.java:25) at BankDemo.main(BankDemo.java:13) 9. 通用异常 ​ 在Java中定义了两种类型的异常和错误。 JVM(Java**虚拟机**) 异常：由 JVM 抛出的异常或错误。例如：NullPointerException 类，ArrayIndexOutOfBoundsException 类，ClassCastException 类。 程序级异常：由程序或者API程序抛出的异常。例如 IllegalArgumentException 类，IllegalStateException 类。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Git/":{"url":"Git/","title":"Git基础","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 概述 2. 简史 3. 功能特性 4. 优缺点 4.1 优点 4.2 缺点 5. 原理 5.1 直接记录快照，而非差异比较 5.2 近乎所有操作都是本地执行 5.3 Git 保证完整性 5.4 Git 一般只添加数据 5.5 三种状态 6. 命令行 7.在线文档地址 8. GitHub GIT CHEAT SHEET 8.1 INSTALL GIT 8.2 CONFIGURE TOOLING 8.3 CREATE REPOSITORIES 8.4 MAKE CHANGES 8.5 GROUP CHANGES 8.6 REFACTOR FILENAMES 8.7 SUPPRESS TRACKING 8.8 SAVE FRAGMENTS 8.9 REVIEW HISTORY 8.10 REDO COMMITS 8.11 SYNCHRONIZE CHANGES 9. 参考内容 Git基础 1. 概述 ​ Git(读音为/gɪt/。)是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 Git 是 Linus Torvalds为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。 ​ 分布式相比于集中式的最大区别在于开发者可以提交到本地，每个开发者通过克隆（git clone），在本地机器上拷贝一个完整的Git仓库。 2. 简史 ​ 同生活中的许多伟大事物一样，Git 诞生于一个极富纷争大举创新的年代。 ​ Linux 内核开源项目有着为数众多的参与者。 绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002年间）。 到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。 ​ 到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。 这就迫使 Linux 开源社区（特别是 Linux 的缔造者 Linus Torvalds）基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。 他们对新的系统制订了若干目标： 速度 简单的设计 对非线性开发模式的强力支持（允许成千上万个并行开发的分支） 完全分布式 有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量） ​ 自诞生于 2005 年以来，Git 日臻成熟完善，在高度易用的同时，仍然保留着初期设定的目标。 它的速度飞快，极其适合管理大项目，有着令人难以置信的非线性分支管理系统。 3. 功能特性 从一般开发者的角度来看，git有以下功能： 1、从服务器上克隆完整的Git仓库（包括代码和版本信息）到单机上。 2、在自己的机器上根据不同的开发目的，创建分支，修改代码。 3、在单机上自己创建的分支上提交代码。 4、在单机上合并分支。 5、把服务器上最新版的代码fetch下来，然后跟自己的主分支合并。 6、生成补丁（patch），把补丁发送给主开发者。 7、看主开发者的反馈，如果主开发者发现两个一般开发者之间有冲突（他们之间可以合作解决的冲突），就会要求他们先解决冲突，然后再由其中一个人提交。如果主开发者可以自己解决，或者没有冲突，就通过。 8、一般开发者之间解决冲突的方法，开发者之间可以使用pull 命令解决冲突，解决完冲突之后再向主开发者提交补丁。 从主开发者的角度（假设主开发者不用开发代码）看，git有以下功能： 1、查看邮件或者通过其它方式查看一般开发者的提交状态。 2、打上补丁，解决冲突（可以自己解决，也可以要求开发者之间解决以后再重新提交，如果是开源项目，还要决定哪些补丁有用，哪些不用）。 3、向公共服务器提交结果，然后通知所有开发人员。 4. 优缺点 4.1 优点 适合分布式开发，强调个体。 公共服务器压力和数据量都不会太大。 速度快、灵活。 任意两个开发者之间可以很容易的解决冲突。 离线工作。 4.2 缺点 资料少（起码中文资料很少）。 学习周期相对而言比较长。 不符合常规思维。 代码保密性差，一旦开发者把整个库克隆下来就可以完全公开所有代码和版本信息。 5. 原理 ​ 那么，简单地说，Git 究竟是怎样的一个系统呢？ 请注意接下来的内容非常重要，若你理解了 Git 的思想和基本工作原理，用起来就会知其所以然，游刃有余。 在开始学习 Git 的时候，请努力分清你对其它版本管理系统的已有认识，如 Subversion 和 Perforce 等；这么做能帮助你使用工具时避免发生混淆。 Git 在保存和对待各种信息的时候与其它版本控制系统有很大差异，尽管操作起来的命令形式非常相近，理解这些差异将有助于防止你使用中的困惑。 5.1 直接记录快照，而非差异比较 ​ Git 和其它版本控制系统（包括 Subversion 和近似工具）的主要差别在于 Git 对待数据的方法。 概念上来区分，其它大部分系统以文件变更列表的方式存储信息。 这类系统（CVS、Subversion、Perforce、Bazaar 等等）将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异。 ​ 正如上图所示，即存储每个文件与初始版本的差异。 ​ Git 不按照以上方式对待或保存数据。 反之，Git 更像是把数据看作是对小型文件系统的一组快照。 每次你提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。 为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。 Git 对待数据更像是一个 快照流。 ​ 正如上图所示，即存储项目随时间改变的快照。 ​ 这是 Git 与几乎所有其它版本控制系统的重要区别。 因此 Git 重新考虑了以前每一代版本控制系统延续下来的诸多方面。 Git 更像是一个小型的文件系统，提供了许多以此为基础构建的超强工具，而不只是一个简单的 VCS。 5.2 近乎所有操作都是本地执行 在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。 如果你习惯于所有操作都有网络延时开销的集中式版本控制系统，Git 在这方面会让你感到速度之神赐给了 Git 超凡的能量。 因为你在本地磁盘上就有项目的完整历史，所以大部分操作看起来瞬间完成。 举个例子，要浏览项目的历史，Git 不需外连到服务器去获取历史，然后再显示出来——它只需直接从本地数据库中读取。 你能立即看到项目历史。 如果你想查看当前版本与一个月前的版本之间引入的修改，Git 会查找到一个月前的文件做一次本地的差异计算，而不是由远程服务器处理或从远程服务器拉回旧版本文件再来本地处理。 这也意味着你离线或者没有 VPN 时，几乎可以进行任何操作。 如你在飞机或火车上想做些工作，你能愉快地提交，直到有网络连接时再上传。 如你回家后 VPN 客户端不正常，你仍能工作。 使用其它系统，做到如此是不可能或很费力的。 比如，用 Perforce，你没有连接服务器时几乎不能做什么事；用 Subversion 和 CVS，你能修改文件，但不能向数据库提交修改（因为你的本地数据库离线了）。 这看起来不是大问题，但是你可能会惊喜地发现它带来的巨大的不同。 5.3 Git 保证完整性 Git 中所有数据在存储前都计算校验和，然后以校验和来引用。 这意味着不可能在 Git 不知情时更改任何文件内容或目录内容。 这个功能建构在 Git 底层，是构成 Git 哲学不可或缺的部分。 若你在传送过程中丢失信息或损坏文件，Git 就能发现。 Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。 这是一个由 40 个十六进制字符（0-9 和 a-f）组成的字符串，基于 Git 中文件的内容或目录结构计算出来。 SHA-1 哈希看起来是这样： 24b9da6552252987aa493b52f8696cd6d3b00373 Git 中使用这种哈希值的情况很多，你将经常看到这种哈希值。 实际上，Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名。 5.4 Git 一般只添加数据 你执行的 Git 操作，几乎只往 Git 数据库中增加数据。 很难让 Git 执行任何不可逆操作，或者让它以任何方式清除数据。 同别的 VCS 一样，未提交更新时有可能丢失或弄乱修改的内容；但是一旦你提交快照到 Git 中，就难以再丢失数据，特别是如果你定期的推送数据库到其它仓库的话。 这使得我们使用 Git 成为一个安心愉悦的过程，因为我们深知可以尽情做各种尝试，而没有把事情弄糟的危险。 更深度探讨 Git 如何保存数据及恢复丢失数据的话题，请参考撤消操作。 5.5 三种状态 好，请注意。 如果你希望后面的学习更顺利，记住下面这些关于 Git 的概念。 Git 有三种状态，你的文件可能处于其中之一：已提交（committed）、已修改（modified）和已暂存（staged）。 已提交表示数据已经安全的保存在本地数据库中。 已修改表示修改了文件，但还没保存到数据库中。 已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。 由此引入 Git 项目的三个工作区域的概念：Git 仓库、工作目录以及暂存区域。 ​ 上图为工作目录、暂存区域以及 Git 仓库。 ​ Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。 ​ 工作目录是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。 ​ 暂存区域是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作“索引”，不过一般说法还是叫暂存区域。 基本的 Git 工作流程如下： 在工作目录中修改文件。 暂存文件，将文件的快照放入暂存区域。 提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。 ​ 如果 Git 目录中保存着特定版本的文件，就属于已提交状态。 如果作了修改并已放入暂存区域，就属于已暂存状态。 如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态。 6. 命令行 ​ Git 有多种使用方式。 你可以使用原生的命令行模式，也可以使用 GUI 模式，这些 GUI 软件也能提供多种功能。 在本书中，我们将使用命令行模式。 这是因为首先，只有在命令行模式下你才能执行 Git 的 所有 命令，而大多数的 GUI 软件只实现了 Git 所有功能的一个子集以降低操作难度。 如果你学会了在命令行下如何操作，那么你在操作 GUI 软件时应该也不会遇到什么困难，但是，反之则不成立。 此外，由于每个人的想法与侧重点不同，不同的人常常会安装不同的 GUI 软件，但 所有 人一定会有命令行工具。 ​ 假如你是 Mac 用户，我们希望你懂得如何使用终端（Terminal）；假如你是 Windows 用户，我们希望你懂得如何使用命令窗口（Command Prompt）或 PowerShell。 如果你尚未掌握以上技能，我们建议你先停下来快速学习一下，本书中的讲述和举例将用到这些技能。 7.在线文档地址 https://git-scm.com/book/zh/v2/ 8. GitHub GIT CHEAT SHEET Git is the open source distributed version control system that facilitates GitHub activities on your laptop or desktop. This cheat sheet summarizes commonly used Git command line instructions for quick reference. 8.1 INSTALL GIT GitHub provides desktop clients that include a graphical user interface for the most common repository actions and an automatically updating command line edition of Git for advanced scenarios. [GitHub for Windows] https://windows.github.com [GitHub for Mac] https://mac.github.com Git distributions for Linux and POSIX systems are available on the official Git SCM web site. [Git for All Platforms] http://git-scm.com 8.2 CONFIGURE TOOLING Configure user information for all local repositories $ git config --global user.name \"[name]\" Sets the name you want atached to your commit transactions $ git config --global user.email \"[email address]\" Sets the email you want atached to your commit transactions $ git config --global color.ui auto Enables helpful colorization of command line output Review edits and craf a commit transaction 8.3 CREATE REPOSITORIES Start a new repository or obtain one from an existing URL $ git init [project-name] Creates a new local repository with the specified name $ git clone [url] Downloads a project and its entire version history 8.4 MAKE CHANGES Review edits and craf a commit transaction $ git status Lists all new or modified files to be commited $ git add [file] Snapshots the file in preparation for versioning $ git reset [file] Unstages the file, but preserve its contents $ git diff Shows file differences not yet staged $ git diff --staged Shows file differences between staging and the last file version $ git commit -m \"[descriptive message]\" Records file snapshots permanently in version history 8.5 GROUP CHANGES Name a series of commits and combine completed efforts $ git branch Lists all local branches in the current repository $ git branch [branch-name] Creates a new branch $ git checkout [branch-name] Switches to the specified branch and updates the working directory $ git merge [branch] Combines the specified branch’s history into the current branch $ git branch -d [branch-name] Deletes the specified branch 8.6 REFACTOR FILENAMES Relocate and remove versioned files $ git rm [file] Deletes the file from the working directory and stages the deletion $ git rm --cached [file] Removes the file from version control but preserves the file locally $ git mv [file-original] [file-renamed] Changes the file name and prepares it for commit 8.7 SUPPRESS TRACKING Exclude temporary files and paths *.log build/ temp-* A text file named .gitignore suppresses accidental versioning of files and paths matching the specified paterns $ git ls-files --other --ignored --exclude-standard Lists all ignored files in this project 8.8 SAVE FRAGMENTS Shelve and restore incomplete changes $ git stash Temporarily stores all modified tracked files $ git stash list Lists all stashed changesets $ git stash pop Restores the most recently stashed files $ git stash drop Discards the most recently stashed changeset 8.9 REVIEW HISTORY Browse and inspect the evolution of project files $ git log Lists version history for the current branch $ git log --follow [file] Lists version history for a file, including renames $ git diff [first-branch]...[second-branch] Shows content differences between two branches $ git show [commit] Outputs metadata and content changes of the specified commit 8.10 REDO COMMITS Erase mistakes and craf replacement history $ git reset [commit] Undoes all commits afer [commit], preserving changes locally $ git reset --hard [commit] Discards all history and changes back to the specified commit 8.11 SYNCHRONIZE CHANGES Register a repository bookmark and exchange version history $ git fetch [bookmark] Downloads all history from the repository bookmark $ git merge [bookmark]/[branch] Combines bookmark’s branch into current local branch $ git push [alias] [branch] Uploads all local branch commits to GitHub $ git pull Downloads bookmark history and incorporates changes 9. 参考内容 《Pro Git》 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Git/Chapter1.html":{"url":"Git/Chapter1.html","title":"第一章：安装Git","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 在 Linux 上安装 2. 在 Mac 上安装 3. 在 Windows 上安装 4. 从源代码安装 5. Win10下的安装 5.1 下载Git 5.2 安装Git 第一章：安装Git ​ 在你开始使用 Git 前，需要将它安装在你的计算机上。 即便已经安装，最好将它升级到最新的版本。 你可以通过软件包或者其它安装程序来安装，或者下载源码编译安装。 1. 在 Linux 上安装 ​ 如果你想在 Linux 上用二进制安装程序来安装 Git，可以使用发行版包含的基础软件包管理工具来安装。 如果以 Fedora 上为例，你可以使用 yum： $ sudo yum install git ​ 如果你在基于 Debian 的发行版上，请尝试用 apt-get： $ sudo apt-get install git ​ 要了解更多选择，Git 官方网站上有在各种 Unix 风格的系统上安装步骤，网址为 http://git-scm.com/download/linux。 2. 在 Mac 上安装 ​ 在 Mac 上安装 Git 有多种方式。 最简单的方法是安装 Xcode Command Line Tools。 Mavericks （10.9） 或更高版本的系统中，在 Terminal 里尝试首次运行 git 命令即可。 如果没有安装过命令行开发者工具，将会提示你安装。 ​ 如果你想安装更新的版本，可以使用二进制安装程序。 官方维护的 OSX Git 安装程序可以在 Git 官方网站下载，网址为 http://git-scm.com/download/mac。 ​ 你也可以将它作为 GitHub for Mac 的一部分来安装。 它们的图形化 Git 工具有一个安装命令行工具的选项。 你可以从 GitHub for Mac 网站下载该工具，网址为 http://mac.github.com。 3. 在 Windows 上安装 ​ 在 Windows 上安装 Git 也有几种安装方法。 官方版本可以在 Git 官方网站下载。 打开 http://git-scm.com/download/win，下载会自动开始。 要注意这是一个名为 Git for Windows 的项目（也叫做 msysGit），和 Git 是分别独立的项目；更多信息请访问 http://msysgit.github.io/。 ​ 另一个简单的方法是安装 GitHub for Windows。 该安装程序包含图形化和命令行版本的 Git。 它也能支持 Powershell，提供了稳定的凭证缓存和健全的换行设置。 稍后我们会对这方面有更多了解，现在只要一句话就够了，这些都是你所需要的。 你可以在 GitHub for Windows 网站下载，网址为 http://windows.github.com。 4. 从源代码安装 ​ 有人觉得从源码安装 Git 更实用，因为你能得到最新的版本。 二进制安装程序倾向于有一些滞后，当然近几年 Git 已经成熟，这个差异不再显著。 ​ 如果你想从源码安装 Git，需要安装 Git 依赖的库：curl、zlib、openssl、expat，还有 libiconv。 如果你的系统上有 yum （如 Fedora）或者 apt-get（如基于 Debian 的系统），可以使用以下命令之一来安装最小化的依赖包来编译和安装 Git 的二进制版： $ sudo yum install curl-devel expat-devel gettext-devel \\ openssl-devel zlib-devel $ sudo apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \\ libz-dev libssl-dev ​ 为了能够添加更多格式的文档（如 doc, html, info），你需要安装以下的依赖包： $ sudo yum install asciidoc xmlto docbook2x $ sudo apt-get install asciidoc xmlto docbook2x ​ 当你安装好所有的必要依赖，你可以继续从几个地方来取得最新发布版本的 tar 包。 你可以从 Kernel.org 网站获取，网址为 https://www.kernel.org/pub/software/scm/git，或从 GitHub 网站上的镜像来获得，网址为 https://github.com/git/git/releases。 通常在 GitHub 上的是最新版本，但 kernel.org 上包含有文件下载签名，如果你想验证下载正确性的话会用到。 ​ 接着，编译并安装： $ tar -zxf git-2.0.0.tar.gz $ cd git-2.0.0 $ make configure $ ./configure --prefix=/usr $ make all doc info $ sudo make install install-doc install-html install-info ​ 完成后，你可以使用 Git 来获取 Git 的升级： $ git clone git://git.kernel.org/pub/scm/git/git.git 5. Win10下的安装 5.1 下载Git ​ 搜索Git下载或打开网址https://git-scm.com/downloads ​ 如上图所示，点击对应系统下载，会自动选取对应系统版本的最新Git版本下载，这里下载的是2.23.0 64Bit版本的。下载完成后得到一个EXE文件，点击安装即可。 5.2 安装Git ​ 稍作等待会打开一个常见的安装界面，如下图所示： ​ 然后一路next，首先会经过安装路径选择，如无必要，默认就好；然后是组件安装选择，如无必要，默认就好；之后还有一项默认编辑器（默认Vim，也可以按照自己喜好选择），如之后基本可以按默认选择一路next即可，最后点击instal安装（注：有兴趣可以逐个研究研究）。 ​ 点击finish完成安装，在桌面点击右键即可发现多了两个右键菜单，Git就按照完成了。正是如图所示，可通过Git GUI或Git Bash的形式使用Git。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Git/Chapter2.html":{"url":"Git/Chapter2.html","title":"第二章：配置Git","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 用户信息 2. 文本编辑器 3. 检查配置信息 4. 获取帮助 第二章：配置Git ​ 既然已经在系统上安装了 Git，你会想要做几件事来定制你的 Git 环境。 每台计算机上只需要配置一次，程序升级时会保留配置信息。 你可以在任何时候再次通过运行命令来修改它们。 ​ Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量。 这些变量存储在三个不同的位置： /etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 --system 选项的 git config 时，它会从此文件读写配置变量。 ~/.gitconfig 或 ~/.config/git/config 文件：只针对当前用户。 可以传递 --global 选项让 Git 读写此文件。 当前使用仓库的 Git 目录中的 config 文件（就是 .git/config）：针对该仓库。 ​ 每一个级别覆盖上一级别的配置，所以 .git/config 的配置变量会覆盖 /etc/gitconfig 中的配置变量。 ​ 在 Windows 系统中，Git 会查找 $HOME 目录下（一般情况下是 C:\\Users\\$USER）的 .gitconfig 文件。 Git 同样也会寻找 /etc/gitconfig 文件，但只限于 MSys 的根目录下，即安装 Git 时所选的目标位置。 1. 用户信息 ​ 当安装完 Git 应该做的第一件事就是设置你的用户名称与邮件地址。 这样做很重要，因为每一个 Git 的提交都会使用这些信息，并且它会写入到你的每一次提交中，不可更改： $ git config --global user.name \"John Doe\" $ git config --global user.email johndoe@example.com ​ 再次强调，如果使用了 --global 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 --global 选项的命令来配置。 ​ 很多 GUI 工具都会在第一次运行时帮助你配置这些信息。 2. 文本编辑器 ​ 既然用户信息已经设置完毕，你可以配置默认文本编辑器了，当 Git 需要你输入信息时会调用它。 如果未配置，Git 会使用操作系统默认的文本编辑器，通常是 Vim。 如果你想使用不同的文本编辑器，例如 Emacs，可以这样做： $ git config --global core.editor emacs warning：Vim 和 Emacs 是像 Linux 与 Mac 等基于 Unix 的系统上开发者经常使用的流行的文本编辑器。 如果你对这些编辑器都不是很了解或者你使用的是 Windows 系统，那么可能需要搜索如何在 Git 中配置你最常用的编辑器。 如果你不设置编辑器并且不知道 Vim 或 Emacs 是什么，当它们运行起来后你可能会被弄糊涂、不知所措。 3. 检查配置信息 ​ 如果想要检查你的配置，可以使用 git config --list 命令来列出所有 Git 当时能找到的配置。 $ git config --list user.name=John Doe user.email=johndoe@example.com color.status=auto color.branch=auto color.interactive=auto color.diff=auto ... ​ 你可能会看到重复的变量名，因为 Git 会从不同的文件中读取同一个配置（例如：/etc/gitconfig 与 ~/.gitconfig）。 这种情况下，Git 会使用它找到的每一个变量的最后一个配置。 ​ 你可以通过输入 git config ： 来检查 Git 的某一项配置 $ git config user.name John Doe 4. 获取帮助 ​ 若你使用 Git 时需要获取帮助，有三种方法可以找到 Git 命令的使用手册： $ git help $ git --help $ man git- ​ 例如，要想获得 config 命令的手册，执行 $ git help config ​ 这些命令很棒，因为你随时随地可以使用而无需联网。 如果你觉得手册或者本书的内容还不够用，你可以尝试在 Freenode IRC 服务器（ irc.freenode.net ）的 #git 或 #github 频道寻求帮助。 这些频道经常有上百人在线，他们都精通 Git 并且乐于助人。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Git/Chapter3.html":{"url":"Git/Chapter3.html","title":"第三章：Git使用","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 获取 Git 仓库 1.1 在现有目录中初始化仓库 1.2 克隆现有的仓库 2. 记录每次更新到仓库 2.1 检查当前文件状态 2.2 跟踪新文件 2.3 暂存已修改文件 2.4 状态简览 2.5 忽略文件 2.6 查看已暂存和未暂存的修改 2.7 提交更新 ~ 2.8 跳过使用暂存区域 2.9 移除文件 2.10 移动文件 3. 查看提交历史 3.1 限制输出长度 4. 撤消操作 4.1 取消暂存的文件 4.2 撤消对文件的修改 5. 远程仓库的使用 5.1 查看远程仓库 5.2 添加远程仓库 5.3 从远程仓库中抓取与拉取 5.4 推送到远程仓库 5.5 查看某个远程仓库 5.6 远程仓库的移除与重命名 6. 打标签 6.1 列出标签 6.2 创建标签 6.3 附注标签 6.4 轻量标签 6.5 后期打标签 6.6 共享标签 6.7 删除标签 6.8 检出标签 7. Git 别名 8. 总结 第三章：Git使用 ​ 假如你只能阅读一章来学习 Git，本章就是你的不二选择。 本章内容涵盖你在使用 Git 完成各种工作中将要使用的各种基本命令。 在学习完本章之后，你应该能够配置并初始化一个仓库（repository）、开始或停止跟踪（track）文件、暂存（stage）或提交（commit）更改。 本章也将向你演示如何配置 Git 来忽略指定的文件和文件模式、如何迅速而简单地撤销错误操作、如何浏览你的项目的历史版本以及不同提交（commits）间的差异、如何向你的远程仓库推送（push）以及如何从你的远程仓库拉取（pull）文件。 1. 获取 Git 仓库 ​ 有两种取得 Git 项目仓库的方法。 第一种是在现有项目或目录下导入所有文件到 Git 中； 第二种是从一个服务器克隆一个现有的 Git 仓库。 1.1 在现有目录中初始化仓库 ​ 如果你打算使用 Git 来对现有的项目进行管理，你只需要进入该项目目录并输入： $ git init ​ 该命令将创建一个名为 .git 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。 但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪。 ​ 如果你是在一个已经存在文件的文件夹（而不是空文件夹）中初始化 Git 仓库来进行版本控制的话，你应该开始跟踪这些文件并提交。 你可通过 git add 命令来实现对指定文件的跟踪，然后执行 git commit 提交： $ git add *.c $ git add LICENSE $ git commit -m 'initial project version' ​ 稍后我们再逐一解释每一条指令的意思。 现在，你已经得到了一个实际维护（或者说是跟踪）着若干个文件的 Git 仓库。 1.2 克隆现有的仓库 ​ 如果你想获得一份已经存在了的 Git 仓库的拷贝，比如说，你想为某个开源项目贡献自己的一份力，这时就要用到 git clone 命令。 如果你对其它的 VCS 系统（比如说 Subversion）很熟悉，请留心一下你所使用的命令是\"clone\"而不是\"checkout\"。 这是 Git 区别于其它版本控制系统的一个重要特性，Git 克隆的是该 Git 仓库服务器上的几乎所有数据，而不是仅仅复制完成你的工作所需要文件。 当你执行 git clone 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。 事实上，如果你的服务器的磁盘坏掉了，你通常可以使用任何一个克隆下来的用户端来重建服务器上的仓库。 ​ 克隆仓库的命令格式是 git clone [url] 。 比如，要克隆 Git 的可链接库 libgit2，可以用下面的命令： $ git clone https://github.com/libgit2/libgit2 ​ 这会在当前目录下创建一个名为 “libgit2” 的目录，并在这个目录下初始化一个 .git 文件夹，从远程仓库拉取下所有数据放入 .git 文件夹，然后从中读取最新版本的文件的拷贝。 如果你进入到这个新建的 libgit2 文件夹，你会发现所有的项目文件已经在里面了，准备就绪等待后续的开发和使用。 如果你想在克隆远程仓库的时候，自定义本地仓库的名字，你可以使用如下命令： $ git clone https://github.com/libgit2/libgit2 mylibgit ​ 这将执行与上一个命令相同的操作，不过在本地创建的仓库名字变为 mylibgit。 ​ Git 支持多种数据传输协议。 上面的例子使用的是 https:// 协议，不过你也可以使用 git:// 协议或者使用 SSH 传输协议，比如 user@server:path/to/repo.git 。 在服务器上搭建 Git 将会介绍所有这些协议在服务器端如何配置使用，以及各种方式之间的利弊。 2. 记录每次更新到仓库 ​ 现在我们手上有了一个真实项目的 Git 仓库，并从这个仓库中取出了所有文件的工作拷贝。 接下来，对这些文件做些修改，在完成了一个阶段的目标之后，提交本次更新到仓库。 ​ 请记住，你工作目录下的每一个文件都不外乎这两种状态：已跟踪或未跟踪。 已跟踪的文件是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后，它们的状态可能处于未修改，已修改或已放入暂存区。 工作目录中除已跟踪文件以外的所有其它文件都属于未跟踪文件，它们既不存在于上次快照的记录中，也没有放入暂存区。 初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态。 ​ 编辑过某些文件之后，由于自上次提交后你对它们做了修改，Git 将它们标记为已修改文件。 我们逐步将这些修改过的文件放入暂存区，然后提交所有暂存了的修改，如此反复。所以使用 Git 时文件的生命周期如下： 2.1 检查当前文件状态 ​ 要查看哪些文件处于什么状态，可以用 git status 命令。 如果在克隆仓库后立即使用此命令，会看到类似这样的输出： $ git status On branch master nothing to commit, working directory clean ​ 这说明你现在的工作目录相当干净。换句话说，所有已跟踪文件在上次提交后都未被更改过。 此外，上面的信息还表明，当前目录下没有出现任何处于未跟踪状态的新文件，否则 Git 会在这里列出来。 最后，该命令还显示了当前所在分支，并告诉你这个分支同远程服务器上对应的分支没有偏离。 现在，分支名是 “master”,这是默认的分支名。 ​ 现在，让我们在项目下创建一个新的 README 文件。 如果之前并不存在这个文件，使用 git status 命令，你将看到一个新的未跟踪文件： $ echo 'My Project' > README $ git status On branch master Untracked files: (use \"git add ...\" to include in what will be committed) README nothing added to commit but untracked files present (use \"git add\" to track) ​ 在状态报告中可以看到新建的 README 文件出现在 Untracked files 下面。 未跟踪的文件意味着 Git 在之前的快照（提交）中没有这些文件；Git 不会自动将之纳入跟踪范围，除非你明明白白地告诉它“我需要跟踪该文件”， 这样的处理让你不必担心将生成的二进制文件或其它不想被跟踪的文件包含进来。 不过现在的例子中，我们确实想要跟踪管理 README 这个文件。 2.2 跟踪新文件 ​ 使用命令 git add 开始跟踪一个文件。 所以，要跟踪 README 文件，运行： $ git add README ​ 此时再运行 git status 命令，会看到 README 文件已被跟踪，并处于暂存状态： $ git status On branch master Changes to be committed: (use \"git reset HEAD ...\" to unstage) new file: README ​ 只要在 Changes to be committed 这行下面的，就说明是已暂存状态。 如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。 你可能会想起之前我们使用 git init 后就运行了 git add (files) 命令，开始跟踪当前目录下的文件。 git add 命令使用文件或目录的路径作为参数；如果参数是目录的路径，该命令将递归地跟踪该目录下的所有文件。 2.3 暂存已修改文件 ​ 现在我们来修改一个已被跟踪的文件。 如果你修改了一个名为 CONTRIBUTING.md 的已被跟踪的文件，然后运行 git status 命令，会看到下面内容： $ git status On branch master Changes to be committed: (use \"git reset HEAD ...\" to unstage) new file: README Changes not staged for commit: (use \"git add ...\" to update what will be committed) (use \"git checkout -- ...\" to discard changes in working directory) modified: CONTRIBUTING.md ​ 文件 CONTRIBUTING.md 出现在 Changes not staged for commit 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。 要暂存这次更新，需要运行 git add 命令。 这是个多功能命令：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。 将这个命令理解为“添加内容到下一次提交中”而不是“将一个文件添加到项目中”要更加合适。 现在让我们运行 git add 将\"CONTRIBUTING.md\"放到暂存区，然后再看看 git status 的输出： $ git add CONTRIBUTING.md $ git status On branch master Changes to be committed: (use \"git reset HEAD ...\" to unstage) new file: README modified: CONTRIBUTING.md ​ 现在两个文件都已暂存，下次提交时就会一并记录到仓库。 假设此时，你想要在 CONTRIBUTING.md 里再加条注释， 重新编辑存盘后，准备好提交。 不过且慢，再运行 git status 看看： $ vim CONTRIBUTING.md $ git status On branch master Changes to be committed: (use \"git reset HEAD ...\" to unstage) new file: README modified: CONTRIBUTING.md Changes not staged for commit: (use \"git add ...\" to update what will be committed) (use \"git checkout -- ...\" to discard changes in working directory) modified: CONTRIBUTING.md ​ 怎么回事？ 现在 CONTRIBUTING.md 文件同时出现在暂存区和非暂存区。 这怎么可能呢？ 好吧，实际上 Git 只不过暂存了你运行 git add 命令时的版本， 如果你现在提交，CONTRIBUTING.md 的版本是你最后一次运行 git add 命令时的那个版本，而不是你运行 git commit 时，在工作目录中的当前版本。 所以，运行了 git add 之后又作了修订的文件，需要重新运行 git add 把最新版本重新暂存起来： $ git add CONTRIBUTING.md $ git status On branch master Changes to be committed: (use \"git reset HEAD ...\" to unstage) new file: README modified: CONTRIBUTING.md 2.4 状态简览 git status 命令的输出十分详细，但其用语有些繁琐。 如果你使用 git status -s 命令或 git status --short 命令，你将得到一种更为紧凑的格式输出。 运行 git status -s ，状态报告输出如下： $ git status -s M README MM Rakefile A lib/git.rb M lib/simplegit.rb ?? LICENSE.txt ​ 新添加的未跟踪文件前面有 ?? 标记，新添加到暂存区中的文件前面有 A 标记，修改过的文件前面有 M 标记。 你可能注意到了 M 有两个可以出现的位置，出现在右边的 M 表示该文件被修改了但是还没放入暂存区，出现在靠左边的 M 表示该文件被修改了并放入了暂存区。 ​ 例如，上面的状态报告显示： README 文件在工作区被修改了但是还没有将修改后的文件放入暂存区,lib/simplegit.rb 文件被修改了并将修改后的文件放入了暂存区。 而 Rakefile 在工作区被修改并提交到暂存区后又在工作区中被修改了，所以在暂存区和工作区都有该文件被修改了的记录。 2.5 忽略文件 ​ 一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。 来看一个实际的例子： $ cat .gitignore *.[oa] *~ ​ 第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的。 第二行告诉 Git 忽略所有以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。 ​ 此外，你可能还需要忽略 log，tmp 或者 pid 目录，以及自动生成的文档等等。 要养成一开始就设置好 .gitignore 文件的习惯，以免将来误提交这类无用的文件。 ​ 文件 .gitignore 的格式规范如下： 所有空行或者以 ＃ 开头的行都会被 Git 忽略。 可以使用标准的 glob 模式匹配。 匹配模式可以以（/）开头防止递归。 匹配模式可以以（/）结尾指定目录。 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。 ​ 所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。 星号（*）匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。 使用两个星号（*) 表示匹配任意中间目录，比如 a/**/z 可以匹配 a/z , a/b/z 或 a/b/c/z 等。 ​ 我们再看一个 .gitignore 文件的例子： # no .a files *.a # but do track lib.a, even though you're ignoring .a files above !lib.a # only ignore the TODO file in the current directory, not subdir/TODO /TODO # ignore all files in the build/ directory build/ # ignore doc/notes.txt, but not doc/server/arch.txt doc/*.txt # ignore all .pdf files in the doc/ directory doc/**/*.pdf Tips:GitHub 有一个十分详细的针对数十种项目及语言的 .gitignore 文件列表，你可以在 https://github.com/github/gitignore 找到它. 2.6 查看已暂存和未暂存的修改 ​ 如果 git status 命令的输出对于你来说过于模糊，你想知道具体修改了什么地方，可以用 git diff 命令。 稍后我们会详细介绍 git diff，你可能通常会用它来回答这两个问题：当前做的哪些更新还没有暂存？ 有哪些更新已经暂存起来准备好了下次提交？ 尽管 git status 已经通过在相应栏下列出文件名的方式回答了这个问题，git diff 将通过文件补丁的格式显示具体哪些行发生了改变。 ​ 假如再次修改 README 文件后暂存，然后编辑 CONTRIBUTING.md 文件后先不暂存， 运行 status 命令将会看到： $ git status On branch master Changes to be committed: (use \"git reset HEAD ...\" to unstage) modified: README Changes not staged for commit: (use \"git add ...\" to update what will be committed) (use \"git checkout -- ...\" to discard changes in working directory) modified: CONTRIBUTING.md ​ 要查看尚未暂存的文件更新了哪些部分，不加参数直接输入 git diff： $ git diff diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md index 8ebb991..643e24f 100644 --- a/CONTRIBUTING.md +++ b/CONTRIBUTING.md @@ -65,7 +65,8 @@ branch directly, things can get messy. Please include a nice description of your changes when you submit your PR; if we have to read the whole diff to figure out why you're contributing in the first place, you're less likely to get feedback and have your change -merged in. +merged in. Also, split your changes into comprehensive chunks if your patch is +longer than a dozen lines. If you are starting to work on a particular area, feel free to submit a PR that highlights your work in progress (and note in the PR title that it's ​ 此命令比较的是工作目录中当前文件和暂存区域快照之间的差异， 也就是修改之后还没有暂存起来的变化内容。 ​ 若要查看已暂存的将要添加到下次提交里的内容，可以用 git diff --cached 命令。（Git 1.6.1 及更高版本还允许使用 git diff --staged，效果是相同的，但更好记些。） $ git diff --staged diff --git a/README b/README new file mode 100644 index 0000000..03902a1 --- /dev/null +++ b/README @@ -0,0 +1 @@ +My Project ​ 请注意，git diff 本身只显示尚未暂存的改动，而不是自上次提交以来所做的所有改动。 所以有时候你一下子暂存了所有更新过的文件后，运行 git diff 后却什么也没有，就是这个原因。 ​ 像之前说的，暂存 CONTRIBUTING.md 后再编辑，运行 git status 会看到暂存前后的两个版本。 如果我们的环境（终端输出）看起来如下： $ git add CONTRIBUTING.md $ echo '# test line' >> CONTRIBUTING.md $ git status On branch master Changes to be committed: (use \"git reset HEAD ...\" to unstage) modified: CONTRIBUTING.md Changes not staged for commit: (use \"git add ...\" to update what will be committed) (use \"git checkout -- ...\" to discard changes in working directory) modified: CONTRIBUTING.md ​ 现在运行 git diff 看暂存前后的变化： $ git diff diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md index 643e24f..87f08c8 100644 --- a/CONTRIBUTING.md +++ b/CONTRIBUTING.md @@ -119,3 +119,4 @@ at the ## Starter Projects See our [projects list](https://github.com/libgit2/libgit2/blob/development/PROJECTS.md). +# test line ​ 然后用 git diff --cached 查看已经暂存起来的变化：（--staged 和 --cached 是同义词） $ git diff --cached diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md index 8ebb991..643e24f 100644 --- a/CONTRIBUTING.md +++ b/CONTRIBUTING.md @@ -65,7 +65,8 @@ branch directly, things can get messy. Please include a nice description of your changes when you submit your PR; if we have to read the whole diff to figure out why you're contributing in the first place, you're less likely to get feedback and have your change -merged in. +merged in. Also, split your changes into comprehensive chunks if your patch is +longer than a dozen lines. If you are starting to work on a particular area, feel free to submit a PR that highlights your work in progress (and note in the PR title that it's Notes:Git Diff 的插件版本在本书中，我们使用 git diff 来分析文件差异。 但是，如果你喜欢通过图形化的方式或其它格式输出方式的话，可以使用 git difftool 命令来用 Araxis ，emerge 或 vimdiff 等软件输出 diff 分析结果。 使用 git difftool --tool-help 命令来看你的系统支持哪些 Git Diff 插件。 2.7 提交更新 ​ 现在的暂存区域已经准备妥当可以提交了。 在此之前，请一定要确认还有什么修改过的或新建的文件还没有 git add 过，否则提交的时候不会记录这些还没暂存起来的变化。 这些修改过的文件只保留在本地磁盘。 所以，每次准备提交前，先用 git status 看下，是不是都已暂存起来了， 然后再运行提交命令 git commit： $ git commit ​ 这种方式会启动文本编辑器以便输入本次提交的说明。 （默认会启用 shell 的环境变量 $EDITOR 所指定的软件，一般都是 vim 或 emacs。当然也可以按照 起步 介绍的方式，使用 git config --global core.editor 命令设定你喜欢的编辑软件。） ​ 编辑器会显示类似下面的文本信息（本例选用 Vim 的屏显方式展示）： # Please enter the commit message for your changes. Lines starting # with '#' will be ignored, and an empty message aborts the commit. # On branch master # Changes to be committed: # new file: README # modified: CONTRIBUTING.md # ~ ~ ~ \".git/COMMIT_EDITMSG\" 9L, 283C ​ 可以看到，默认的提交消息包含最后一次运行 git status 的输出，放在注释行里，另外开头还有一空行，供你输入提交说明。 你完全可以去掉这些注释行，不过留着也没关系，多少能帮你回想起这次更新的内容有哪些。 （如果想要更详细的对修改了哪些内容的提示，可以用 -v 选项，这会将你所做的改变的 diff 输出放到编辑器中从而使你知道本次提交具体做了哪些修改。） 退出编辑器时，Git 会丢掉注释行，用你输入提交附带信息生成一次提交。 ​ 另外，你也可以在 commit 命令后添加 -m 选项，将提交信息与命令放在同一行，如下所示： $ git commit -m \"Story 182: Fix benchmarks for speed\" [master 463dc4f] Story 182: Fix benchmarks for speed 2 files changed, 2 insertions(+) create mode 100644 README ​ 好，现在你已经创建了第一个提交！ 可以看到，提交后它会告诉你，当前是在哪个分支（master）提交的，本次提交的完整 SHA-1 校验和是什么（463dc4f），以及在本次提交中，有多少文件修订过，多少行添加和删改过。 ​ 请记住，提交时记录的是放在暂存区域的快照。 任何还未暂存的仍然保持已修改状态，可以在下次提交时纳入版本管理。 每一次运行提交操作，都是对你项目作一次快照，以后可以回到这个状态，或者进行比较。 2.8 跳过使用暂存区域 ​ 尽管使用暂存区域的方式可以精心准备要提交的细节，但有时候这么做略显繁琐。 Git 提供了一个跳过使用暂存区域的方式， 只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤： $ git status On branch master Changes not staged for commit: (use \"git add ...\" to update what will be committed) (use \"git checkout -- ...\" to discard changes in working directory) modified: CONTRIBUTING.md no changes added to commit (use \"git add\" and/or \"git commit -a\") $ git commit -a -m 'added new benchmarks' [master 83e38c7] added new benchmarks 1 file changed, 5 insertions(+), 0 deletions(-) ​ 看到了吗？提交之前不再需要 git add 文件“CONTRIBUTING.md”了。 2.9 移除文件 ​ 要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。 可以用 git rm 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。 ​ 如果只是简单地从工作目录中手工删除文件，运行 git status 时就会在 “Changes not staged for commit” 部分（也就是 未暂存清单）看到： $ rm PROJECTS.md $ git status On branch master Your branch is up-to-date with 'origin/master'. Changes not staged for commit: (use \"git add/rm ...\" to update what will be committed) (use \"git checkout -- ...\" to discard changes in working directory) deleted: PROJECTS.md no changes added to commit (use \"git add\" and/or \"git commit -a\") ​ 然后再运行 git rm 记录此次移除文件的操作： $ git rm PROJECTS.md rm 'PROJECTS.md' $ git status On branch master Changes to be committed: (use \"git reset HEAD ...\" to unstage) deleted: PROJECTS.md ​ 下一次提交时，该文件就不再纳入版本管理了。 如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f（译注：即 force 的首字母）。 这是一种安全特性，用于防止误删还没有添加到快照的数据，这样的数据不能被 Git 恢复。 ​ 另外一种情况是，我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。 换句话说，你想让文件保留在磁盘，但是并不想让 Git 继续跟踪。 当你忘记添加 .gitignore 文件，不小心把一个很大的日志文件或一堆 .a 这样的编译生成文件添加到暂存区时，这一做法尤其有用。 为达到这一目的，使用 --cached 选项： $ git rm --cached README git rm 命令后面可以列出文件或者目录的名字，也可以使用 glob 模式。 比方说： $ git rm log/\\*.log 注意到星号 * 之前的反斜杠 \\， 因为 Git 有它自己的文件模式扩展匹配方式，所以我们不用 shell 来帮忙展开。 此命令删除 log/ 目录下扩展名为 .log 的所有文件。 类似的比如： $ git rm \\*~ 该命令为删除以 ~ 结尾的所有文件。 2.10 移动文件 ​ 不像其它的 VCS 系统，Git 并不显式跟踪文件移动操作。 如果在 Git 中重命名了某个文件，仓库中存储的元数据并不会体现出这是一次改名操作。 不过 Git 非常聪明，它会推断出究竟发生了什么，至于具体是如何做到的，我们稍后再谈。 ​ 既然如此，当你看到 Git 的 mv 命令时一定会困惑不已。 要在 Git 中对文件改名，可以这么做： $ git mv file_from file_to ​ 它会恰如预期般正常工作。 实际上，即便此时查看状态信息，也会明白无误地看到关于重命名操作的说明： $ git mv README.md README $ git status On branch master Changes to be committed: (use \"git reset HEAD ...\" to unstage) renamed: README.md -> README ​ 其实，运行 git mv 就相当于运行了下面三条命令： $ mv README.md README $ git rm README.md $ git add README ​ 如此分开操作，Git 也会意识到这是一次改名，所以不管何种方式结果都一样。 两者唯一的区别是，mv 是一条命令而另一种方式需要三条命令，直接用 git mv 轻便得多。 不过有时候用其他工具批处理改名的话，要记得在提交前删除老的文件名，再添加新的文件名。 3. 查看提交历史 ​ 在提交了若干更新，又或者克隆了某个项目之后，你也许想回顾下提交历史。 完成这个任务最简单而又有效的工具是 git log 命令。 ​ 接下来的例子会用我专门用于演示的 simplegit 项目， 运行下面的命令获取该项目源代码： git clone https://github.com/schacon/simplegit-progit ​ 然后在此项目中运行 git log，应该会看到下面的输出： $ git log commit ca82a6dff817ec66f44342007202690a93763949 Author: Scott Chacon Date: Mon Mar 17 21:52:11 2008 -0700 changed the version number commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 Author: Scott Chacon Date: Sat Mar 15 16:40:33 2008 -0700 removed unnecessary test commit a11bef06a3f659402fe7563abf99ad00de2209e6 Author: Scott Chacon Date: Sat Mar 15 10:31:28 2008 -0700 first commit ​ 默认不用任何参数的话，git log 会按提交时间列出所有的更新，最近的更新排在最上面。 正如你所看到的，这个命令会列出每个提交的 SHA-1 校验和、作者的名字和电子邮件地址、提交时间以及提交说明。 git log 有许多选项可以帮助你搜寻你所要找的提交， 接下来我们介绍些最常用的。 ​ 一个常用的选项是 -p，用来显示每次提交的内容差异。 你也可以加上 -2 来仅显示最近两次提交： $ git log -p -2 commit ca82a6dff817ec66f44342007202690a93763949 Author: Scott Chacon Date: Mon Mar 17 21:52:11 2008 -0700 changed the version number diff --git a/Rakefile b/Rakefile index a874b73..8f94139 100644 --- a/Rakefile +++ b/Rakefile @@ -5,7 +5,7 @@ require 'rake/gempackagetask' spec = Gem::Specification.new do |s| s.platform = Gem::Platform::RUBY s.name = \"simplegit\" - s.version = \"0.1.0\" + s.version = \"0.1.1\" s.author = \"Scott Chacon\" s.email = \"schacon@gee-mail.com\" s.summary = \"A simple gem for using Git in Ruby code.\" commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 Author: Scott Chacon Date: Sat Mar 15 16:40:33 2008 -0700 removed unnecessary test diff --git a/lib/simplegit.rb b/lib/simplegit.rb index a0a60ae..47c6340 100644 --- a/lib/simplegit.rb +++ b/lib/simplegit.rb @@ -18,8 +18,3 @@ class SimpleGit end end - -if $0 == __FILE__ - git = SimpleGit.new - puts git.show -end \\ No newline at end of file ​ 该选项除了显示基本信息之外，还附带了每次 commit 的变化。 当进行代码审查，或者快速浏览某个搭档提交的 commit 所带来的变化的时候，这个参数就非常有用了。 你也可以为 git log 附带一系列的总结性选项。 比如说，如果你想看到每次提交的简略的统计信息，你可以使用 --stat 选项： $ git log --stat commit ca82a6dff817ec66f44342007202690a93763949 Author: Scott Chacon Date: Mon Mar 17 21:52:11 2008 -0700 changed the version number Rakefile | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-) commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 Author: Scott Chacon Date: Sat Mar 15 16:40:33 2008 -0700 removed unnecessary test lib/simplegit.rb | 5 ----- 1 file changed, 5 deletions(-) commit a11bef06a3f659402fe7563abf99ad00de2209e6 Author: Scott Chacon Date: Sat Mar 15 10:31:28 2008 -0700 first commit README | 6 ++++++ Rakefile | 23 +++++++++++++++++++++++ lib/simplegit.rb | 25 +++++++++++++++++++++++++ 3 files changed, 54 insertions(+) ​ 正如你所看到的，--stat 选项在每次提交的下面列出所有被修改过的文件、有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了。 在每次提交的最后还有一个总结。 ​ 另外一个常用的选项是 --pretty。 这个选项可以指定使用不同于默认格式的方式展示提交历史。 这个选项有一些内建的子选项供你使用。 比如用 oneline 将每个提交放在一行显示，查看的提交数很大时非常有用。 另外还有 short，full 和 fuller 可以用，展示的信息或多或少有些不同，请自己动手实践一下看看效果如何。 $ git log --pretty=oneline ca82a6dff817ec66f44342007202690a93763949 changed the version number 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test a11bef06a3f659402fe7563abf99ad00de2209e6 first commit ​ 但最有意思的是 format，可以定制要显示的记录格式。 这样的输出对后期提取分析格外有用 — 因为你知道输出的格式不会随着 Git 的更新而发生改变： $ git log --pretty=format:\"%h - %an, %ar : %s\" ca82a6d - Scott Chacon, 6 years ago : changed the version number 085bb3b - Scott Chacon, 6 years ago : removed unnecessary test a11bef0 - Scott Chacon, 6 years ago : first commit ​ git log --pretty=format 常用的选项列出了常用的格式占位符写法及其代表的意义。 选项 说明 %H 提交对象（commit）的完整哈希字串 %h 提交对象的简短哈希字串 %T 树对象（tree）的完整哈希字串 %t 树对象的简短哈希字串 %P 父对象（parent）的完整哈希字串 %p 父对象的简短哈希字串 %an 作者（author）的名字 %ae 作者的电子邮件地址 %ad 作者修订日期（可以用 --date= 选项定制格式） %ar 作者修订日期，按多久以前的方式显示 %cn 提交者（committer）的名字 %ce 提交者的电子邮件地址 %cd 提交日期 %cr 提交日期，按多久以前的方式显示 %s 提交说明 ​ 你一定奇怪 作者 和 提交者 之间究竟有何差别， 其实作者指的是实际作出修改的人，提交者指的是最后将此工作成果提交到仓库的人。 所以，当你为某个项目发布补丁，然后某个核心成员将你的补丁并入项目时，你就是作者，而那个核心成员就是提交者。 ​ 当 oneline 或 format 与另一个 log 选项 --graph 结合使用时尤其有用。 这个选项添加了一些 ASCII 字符串来形象地展示你的分支、合并历史： $ git log --pretty=format:\"%h %s\" --graph * 2d3acf9 ignore errors from SIGCHLD on trap * 5e3ee11 Merge branch 'master' of git://github.com/dustin/grit |\\ | * 420eac9 Added a method for getting the current branch. * | 30e367c timeout code and tests * | 5a09431 add timeout protection to grit * | e1193f8 support for heads with slashes in them |/ * d6016bc require time for xmlschema * 11d191e Merge branch 'defunkt' into local ​ 这种输出类型会在我们下一章学完分支与合并以后变得更加有趣。 ​ 以上只是简单介绍了一些 git log 命令支持的选项。 git log 的常用选项列出了我们目前涉及到的和没涉及到的选项，以及它们是如何影响 log 命令的输出的： 选项 说明 -p 按补丁格式显示每个更新之间的差异。 --stat 显示每次更新的文件修改统计信息。 --shortstat 只显示 --stat 中最后的行数修改添加移除统计。 --name-only 仅在提交信息后显示已修改的文件清单。 --name-status 显示新增、修改、删除的文件清单。 --abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。 --relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）。 --graph 显示 ASCII 图形表示的分支合并历史。 --pretty 使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。 3.1 限制输出长度 ​ 除了定制输出格式的选项之外，git log 还有许多非常实用的限制输出长度的选项，也就是只输出部分提交信息。 之前你已经看到过 -2 了，它只显示最近的两条提交， 实际上，这是 - 选项的写法，其中的 n 可以是任何整数，表示仅显示最近的若干条提交。 不过实践中我们是不太用这个选项的，Git 在输出所有提交时会自动调用分页程序，所以你一次只会看到一页的内容。 ​ 另外还有按照时间作限制的选项，比如 --since 和 --until 也很有用。 例如，下面的命令列出所有最近两周内的提交： $ git log --since=2.weeks ​ 这个命令可以在多种格式下工作，比如说具体的某一天 \"2008-01-15\"，或者是相对地多久以前 \"2 years 1 day 3 minutes ago\"。 ​ 还可以给出若干搜索条件，列出符合的提交。 用 --author 选项显示指定作者的提交，用 --grep 选项搜索提交说明中的关键字。 （请注意，如果要得到同时满足这两个选项搜索条件的提交，就必须用 --all-match 选项。否则，满足任意一个条件的提交都会被匹配出来） ​ 另一个非常有用的筛选选项是 -S，可以列出那些添加或移除了某些字符串的提交。 比如说，你想找出添加或移除了某一个特定函数的引用的提交，你可以这样使用： $ git log -Sfunction_name ​ 最后一个很实用的 git log 选项是路径（path）， 如果只关心某些文件或者目录的历史提交，可以在 git log 选项的最后指定它们的路径。 因为是放在最后位置上的选项，所以用两个短划线（--）隔开之前的选项和后面限定的路径名。 ​ 在 限制 git log 输出的选项中列出了常用的选项 选项 说明 -(n) 仅显示最近的 n 条提交 --since, --after 仅显示指定时间之后的提交。 --until, --before 仅显示指定时间之前的提交。 --author 仅显示指定作者相关的提交。 --committer 仅显示指定提交者相关的提交。 --grep 仅显示含指定关键字的提交 -S 仅显示添加或移除了某个关键字的提交 ​ 来看一个实际的例子，如果要查看 Git 仓库中，2008 年 10 月期间，Junio Hamano 提交的但未合并的测试文件，可以用下面的查询命令： $ git log --pretty=\"%h - %s\" --author=gitster --since=\"2008-10-01\" \\ --before=\"2008-11-01\" --no-merges -- t/ 5610e3b - Fix testcase failure when extended attributes are in use acd3b9e - Enhance hold_lock_file_for_{update,append}() API f563754 - demonstrate breakage of detached checkout with symbolic link HEAD d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths 51a94af - Fix \"checkout --track -b newbranch\" on detached HEAD b0ad11e - pull: allow \"git pull origin $something:$current_branch\" into an unborn branch ​ 在近 40000 条提交中，上面的输出仅列出了符合条件的 6 条记录。 4. 撤消操作 ​ 在任何一个阶段，你都有可能想要撤消某些操作。 这里，我们将会学习几个撤消你所做修改的基本工具。 注意，有些撤消操作是不可逆的。 这是在使用 Git 的过程中，会因为操作失误而导致之前的工作丢失的少有的几个地方之一。 ​ 有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 --amend 选项的提交命令尝试重新提交： $ git commit --amend ​ 这个命令会将暂存区中的文件提交。 如果自上次提交以来你还未做任何修改（例如，在上次提交后马上执行了此命令），那么快照会保持不变，而你所修改的只是提交信息。 ​ 文本编辑器启动后，可以看到之前的提交信息。 编辑后保存会覆盖原来的提交信息。 ​ 例如，你提交后发现忘记了暂存某些需要的修改，可以像下面这样操作： $ git commit -m 'initial commit' $ git add forgotten_file $ git commit --amend ​ 最终你只会有一个提交——第二次提交将代替第一次提交的结果。 4.1 取消暂存的文件 ​ 接下来的两个小节演示如何操作暂存区域与工作目录中已修改的文件。 这些命令在修改文件状态的同时，也会提示如何撤消操作。 例如，你已经修改了两个文件并且想要将它们作为两次独立的修改提交，但是却意外地输入了 git add * 暂存了它们两个。 如何只取消暂存两个中的一个呢？ git status 命令提示了你： $ git add * $ git status On branch master Changes to be committed: (use \"git reset HEAD ...\" to unstage) renamed: README.md -> README modified: CONTRIBUTING.md ​ 在 “Changes to be committed” 文字正下方，提示使用 git reset HEAD ... 来取消暂存。 所以，我们可以这样来取消暂存 CONTRIBUTING.md 文件： $ git reset HEAD CONTRIBUTING.md Unstaged changes after reset: M CONTRIBUTING.md $ git status On branch master Changes to be committed: (use \"git reset HEAD ...\" to unstage) renamed: README.md -> README Changes not staged for commit: (use \"git add ...\" to update what will be committed) (use \"git checkout -- ...\" to discard changes in working directory) modified: CONTRIBUTING.md ​ 这个命令有点儿奇怪，但是起作用了。 CONTRIBUTING.md 文件已经是修改未暂存的状态了。 Notes:虽然在调用时加上 --hard 选项可以令 git reset 成为一个危险的命令（译注：可能导致工作目录中所有当前进度丢失！），但本例中工作目录内的文件并不会被修改。 不加选项地调用 git reset 并不危险 — 它只会修改暂存区域。 ​ 到目前为止这个神奇的调用就是你需要对 git reset 命令了解的全部。 4.2 撤消对文件的修改 ​ 如果你并不想保留对 CONTRIBUTING.md 文件的修改怎么办？ 你该如何方便地撤消修改——将它还原成上次提交时的样子（或者刚克隆完的样子，或者刚把它放入工作目录时的样子）？ 幸运的是，git status 也告诉了你应该如何做。 在最后一个例子中，未暂存区域是这样： Changes not staged for commit: (use \"git add ...\" to update what will be committed) (use \"git checkout -- ...\" to discard changes in working directory) modified: CONTRIBUTING.md ​ 它非常清楚地告诉了你如何撤消之前所做的修改。 让我们来按照提示执行： $ git checkout -- CONTRIBUTING.md $ git status On branch master Changes to be committed: (use \"git reset HEAD ...\" to unstage) renamed: README.md -> README ​ 可以看到那些修改已经被撤消了。 Important:你需要知道 git checkout -- [file] 是一个危险的命令，这很重要。 你对那个文件做的任何修改都会消失——你只是拷贝了另一个文件来覆盖它。 除非你确实清楚不想要那个文件了，否则不要使用这个命令。 ​ 如果你仍然想保留对那个文件做出的修改，但是现在仍然需要撤消，我们将会在 Git 分支 介绍保存进度与分支；这些通常是更好的做法。 ​ 记住，在 Git 中任何 已提交的 东西几乎总是可以恢复的。 甚至那些被删除的分支中的提交或使用 --amend 选项覆盖的提交也可以恢复。 然而，任何你未提交的东西丢失后很可能再也找不到了。 5. 远程仓库的使用 ​ 为了能在任意 Git 项目上协作，你需要知道如何管理自己的远程仓库。 远程仓库是指托管在因特网或其他网络中的你的项目的版本库。 你可以有好几个远程仓库，通常有些仓库对你只读，有些则可以读写。 与他人协作涉及管理远程仓库以及根据需要推送或拉取数据。 管理远程仓库包括了解如何添加远程仓库、移除无效的远程仓库、管理不同的远程分支并定义它们是否被跟踪等等。 在本节中，我们将介绍一部分远程管理的技能。 5.1 查看远程仓库 ​ 如果想查看你已经配置的远程仓库服务器，可以运行 git remote 命令。 它会列出你指定的每一个远程服务器的简写。 如果你已经克隆了自己的仓库，那么至少应该能看到 origin ——这是 Git 给你克隆的仓库服务器的默认名字： $ git clone https://github.com/schacon/ticgit Cloning into 'ticgit'... remote: Reusing existing pack: 1857, done. remote: Total 1857 (delta 0), reused 0 (delta 0) Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done. Resolving deltas: 100% (772/772), done. Checking connectivity... done. $ cd ticgit $ git remote origin ​ 你也可以指定选项 -v，会显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL。 $ git remote -v origin https://github.com/schacon/ticgit (fetch) origin https://github.com/schacon/ticgit (push) ​ 如果你的远程仓库不止一个，该命令会将它们全部列出。 例如，与几个协作者合作的，拥有多个远程仓库的仓库看起来像下面这样： $ cd grit $ git remote -v bakkdoor https://github.com/bakkdoor/grit (fetch) bakkdoor https://github.com/bakkdoor/grit (push) cho45 https://github.com/cho45/grit (fetch) cho45 https://github.com/cho45/grit (push) defunkt https://github.com/defunkt/grit (fetch) defunkt https://github.com/defunkt/grit (push) koke git://github.com/koke/grit.git (fetch) koke git://github.com/koke/grit.git (push) origin git@github.com:mojombo/grit.git (fetch) origin git@github.com:mojombo/grit.git (push) ​ 这样我们可以轻松拉取其中任何一个用户的贡献。 此外，我们大概还会有某些远程仓库的推送权限，虽然我们目前还不会在此介绍。 ​ 注意这些远程仓库使用了不同的协议；我们将会在 [在服务器上搭建 Git] 中了解关于它们的更多信息。 5.2 添加远程仓库 ​ 我在之前的章节中已经提到并展示了如何添加远程仓库的示例，不过这里将告诉你如何明确地做到这一点。 运行 git remote add 添加一个新的远程 Git 仓库，同时指定一个你可以轻松引用的简写： $ git remote origin $ git remote add pb https://github.com/paulboone/ticgit $ git remote -v origin https://github.com/schacon/ticgit (fetch) origin https://github.com/schacon/ticgit (push) pb https://github.com/paulboone/ticgit (fetch) pb https://github.com/paulboone/ticgit (push) ​ 现在你可以在命令行中使用字符串 pb 来代替整个 URL。 例如，如果你想拉取 Paul 的仓库中有但你没有的信息，可以运行 git fetch pb： $ git fetch pb remote: Counting objects: 43, done. remote: Compressing objects: 100% (36/36), done. remote: Total 43 (delta 10), reused 31 (delta 5) Unpacking objects: 100% (43/43), done. From https://github.com/paulboone/ticgit * [new branch] master -> pb/master * [new branch] ticgit -> pb/ticgit ​ 现在 Paul 的 master 分支可以在本地通过 pb/master 访问到——你可以将它合并到自己的某个分支中，或者如果你想要查看它的话，可以检出一个指向该点的本地分支。 5.3 从远程仓库中抓取与拉取 ​ 就如刚才所见，从远程仓库中获得数据，可以执行： $ git fetch [remote-name] ​ 这个命令会访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。 ​ 如果你使用 clone 命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以 “origin” 为简写。 所以，git fetch origin 会抓取克隆（或上一次抓取）后新推送的所有工作。 必须注意 git fetch 命令会将数据拉取到你的本地仓库——它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。 ​ 如果你有一个分支设置为跟踪一个远程分支（阅读下一节与 [Git 分支]了解更多信息），可以使用 git pull 命令来自动的抓取然后合并远程分支到当前分支。 这对你来说可能是一个更简单或更舒服的工作流程；默认情况下，git clone 命令会自动设置本地 master 分支跟踪克隆的远程仓库的 master 分支（或不管是什么名字的默认分支）。 运行 git pull 通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支。 5.4 推送到远程仓库 ​ 当你想分享你的项目时，必须将其推送到上游。 这个命令很简单：git push [remote-name] [branch-name]。 当你想要将 master 分支推送到 origin 服务器时（再次说明，克隆时通常会自动帮你设置好那两个名字），那么运行这个命令就可以将你所做的备份到服务器： $ git push origin master ​ 只有当你有所克隆服务器的写入权限，并且之前没有人推送过时，这条命令才能生效。 当你和其他人在同一时间克隆，他们先推送到上游然后你再推送到上游，你的推送就会毫无疑问地被拒绝。 你必须先将他们的工作拉取下来并将其合并进你的工作后才能推送。 阅读 [Git 分支]了解如何推送到远程仓库服务器的详细信息。 5.5 查看某个远程仓库 ​ 如果想要查看某一个远程仓库的更多信息，可以使用 git remote show [remote-name] 命令。 如果想以一个特定的缩写名运行这个命令，例如 origin，会得到像下面类似的信息： $ git remote show origin * remote origin Fetch URL: https://github.com/schacon/ticgit Push URL: https://github.com/schacon/ticgit HEAD branch: master Remote branches: master tracked dev-branch tracked Local branch configured for 'git pull': master merges with remote master Local ref configured for 'git push': master pushes to master (up to date) ​ 它同样会列出远程仓库的 URL 与跟踪分支的信息。 这些信息非常有用，它告诉你正处于 master 分支，并且如果运行 git pull，就会抓取所有的远程引用，然后将远程 master 分支合并到本地 master 分支。 它也会列出拉取到的所有远程引用。 ​ 这是一个经常遇到的简单例子。 如果你是 Git 的重度使用者，那么还可以通过 git remote show 看到更多的信息。 $ git remote show origin * remote origin URL: https://github.com/my-org/complex-project Fetch URL: https://github.com/my-org/complex-project Push URL: https://github.com/my-org/complex-project HEAD branch: master Remote branches: master tracked dev-branch tracked markdown-strip tracked issue-43 new (next fetch will store in remotes/origin) issue-45 new (next fetch will store in remotes/origin) refs/remotes/origin/issue-11 stale (use 'git remote prune' to remove) Local branches configured for 'git pull': dev-branch merges with remote dev-branch master merges with remote master Local refs configured for 'git push': dev-branch pushes to dev-branch (up to date) markdown-strip pushes to markdown-strip (up to date) master pushes to master (up to date) ​ 这个命令列出了当你在特定的分支上执行 git push 会自动地推送到哪一个远程分支。 它也同样地列出了哪些远程分支不在你的本地，哪些远程分支已经从服务器上移除了，还有当你执行 git pull 时哪些分支会自动合并。 5.6 远程仓库的移除与重命名 ​ 如果想要重命名引用的名字可以运行 git remote rename 去修改一个远程仓库的简写名。 例如，想要将 pb 重命名为 paul，可以用 git remote rename 这样做： $ git remote rename pb paul $ git remote origin paul ​ 值得注意的是这同样也会修改你的远程分支名字。 那些过去引用 pb/master 的现在会引用 paul/master。 ​ 如果因为一些原因想要移除一个远程仓库——你已经从服务器上搬走了或不再想使用某一个特定的镜像了，又或者某一个贡献者不再贡献了——可以使用 git remote rm ： $ git remote rm paul $ git remote origin 6. 打标签 ​ 像其他版本控制系统（VCS）一样，Git 可以给历史中的某一个提交打上标签，以示重要。 比较有代表性的是人们会使用这个功能来标记发布结点（v1.0 等等）。 在本节中，你将会学习如何列出已有的标签、如何创建新标签、以及不同类型的标签分别是什么。 6.1 列出标签 ​ 在 Git 中列出已有的标签是非常简单直观的。 只需要输入 git tag： $ git tag v0.1 v1.3 ​ 这个命令以字母顺序列出标签；但是它们出现的顺序并不重要。 ​ 你也可以使用特定的模式查找标签。 例如，Git 自身的源代码仓库包含标签的数量超过 500 个。 如果只对 1.8.5 系列感兴趣，可以运行： $ git tag -l 'v1.8.5*' v1.8.5 v1.8.5-rc0 v1.8.5-rc1 v1.8.5-rc2 v1.8.5-rc3 v1.8.5.1 v1.8.5.2 v1.8.5.3 v1.8.5.4 v1.8.5.5 6.2 创建标签 ​ Git 使用两种主要类型的标签：轻量标签（lightweight）与附注标签（annotated）。 ​ 一个轻量标签很像一个不会改变的分支——它只是一个特定提交的引用。 ​ 然而，附注标签是存储在 Git 数据库中的一个完整对象。 它们是可以被校验的；其中包含打标签者的名字、电子邮件地址、日期时间；还有一个标签信息；并且可以使用 GNU Privacy Guard （GPG）签名与验证。 通常建议创建附注标签，这样你可以拥有以上所有信息；但是如果你只是想用一个临时的标签，或者因为某些原因不想要保存那些信息，轻量标签也是可用的。 6.3 附注标签 ​ 在 Git 中创建一个附注标签是很简单的。 最简单的方式是当你在运行 tag 命令时指定 -a 选项： $ git tag -a v1.4 -m \"my version 1.4\" $ git tag v0.1 v1.3 v1.4 ​ -m 选项指定了一条将会存储在标签中的信息。 如果没有为附注标签指定一条信息，Git 会运行编辑器要求你输入信息。 ​ 通过使用 git show 命令可以看到标签信息与对应的提交信息： $ git show v1.4 tag v1.4 Tagger: Ben Straub Date: Sat May 3 20:19:12 2014 -0700 my version 1.4 commit ca82a6dff817ec66f44342007202690a93763949 Author: Scott Chacon Date: Mon Mar 17 21:52:11 2008 -0700 changed the version number ​ 输出显示了打标签者的信息、打标签的日期时间、附注信息，然后显示具体的提交信息。 6.4 轻量标签 ​ 另一种给提交打标签的方式是使用轻量标签。 轻量标签本质上是将提交校验和存储到一个文件中——没有保存任何其他信息。 创建轻量标签，不需要使用 -a、-s 或 -m 选项，只需要提供标签名字： $ git tag v1.4-lw $ git tag v0.1 v1.3 v1.4 v1.4-lw v1.5 ​ 这时，如果在标签上运行 git show，你不会看到额外的标签信息。 命令只会显示出提交信息： $ git show v1.4-lw commit ca82a6dff817ec66f44342007202690a93763949 Author: Scott Chacon Date: Mon Mar 17 21:52:11 2008 -0700 changed the version number 6.5 后期打标签 ​ 你也可以对过去的提交打标签。 假设提交历史是这样的： $ git log --pretty=oneline 15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment' a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support 0d52aaab4479697da7686c15f77a3d64d9165190 one more thing 6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment' 0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function 4682c3261057305bdd616e23b64b0857d832627b added a todo file 166ae0c4d3f420721acbb115cc33848dfcc2121a started write support 9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile 964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo 8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme ​ 现在，假设在 v1.2 时你忘记给项目打标签，也就是在 “updated rakefile” 提交。 你可以在之后补上标签。 要在那个提交上打标签，你需要在命令的末尾指定提交的校验和（或部分校验和）： $ git tag -a v1.2 9fceb02 ​ 可以看到你已经在那次提交上打上标签了： $ git tag v0.1 v1.2 v1.3 v1.4 v1.4-lw v1.5 $ git show v1.2 tag v1.2 Tagger: Scott Chacon Date: Mon Feb 9 15:32:16 2009 -0800 version 1.2 commit 9fceb02d0ae598e95dc970b74767f19372d61af8 Author: Magnus Chacon Date: Sun Apr 27 20:43:35 2008 -0700 updated rakefile ... 6.6 共享标签 ​ 默认情况下，git push 命令并不会传送标签到远程仓库服务器上。 在创建完标签后你必须显式地推送标签到共享服务器上。 这个过程就像共享远程分支一样——你可以运行 git push origin [tagname]。 $ git push origin v1.5 Counting objects: 14, done. Delta compression using up to 8 threads. Compressing objects: 100% (12/12), done. Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done. Total 14 (delta 3), reused 0 (delta 0) To git@github.com:schacon/simplegit.git * [new tag] v1.5 -> v1.5 ​ 如果想要一次性推送很多标签，也可以使用带有 --tags 选项的 git push 命令。 这将会把所有不在远程仓库服务器上的标签全部传送到那里。 $ git push origin --tags Counting objects: 1, done. Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, done. Total 1 (delta 0), reused 0 (delta 0) To git@github.com:schacon/simplegit.git * [new tag] v1.4 -> v1.4 * [new tag] v1.4-lw -> v1.4-lw ​ 现在，当其他人从仓库中克隆或拉取，他们也能得到你的那些标签。 6.7 删除标签 ​ 要删除掉你本地仓库上的标签，可以使用命令 git tag -d 。例如，可以使用下面的命令删除掉一个轻量级标签： $ git tag -d v1.4-lw Deleted tag 'v1.4-lw' (was e7d5add) ​ 应该注意的是上述命令并不会从任何远程仓库中移除这个标签，你必须使用 git push :refs/tags/ 来更新你的远程仓库： $ git push origin :refs/tags/v1.4-lw To /git@github.com:schacon/simplegit.git - [deleted] v1.4-lw 6.8 检出标签 ​ 如果你想查看某个标签所指向的文件版本，可以使用 git checkout 命令，虽然说这会使你的仓库处于“分离头指针（detacthed HEAD）”状态——这个状态有些不好的副作用： $ git checkout 2.0.0 Note: checking out '2.0.0'. You are in 'detached HEAD' state. You can look around, make experimental changes and commit them, and you can discard any commits you make in this state without impacting any branches by performing another checkout. If you want to create a new branch to retain commits you create, you may do so (now or later) by using -b with the checkout command again. Example: git checkout -b HEAD is now at 99ada87... Merge pull request #89 from schacon/appendix-final $ git checkout 2.0-beta-0.1 Previous HEAD position was 99ada87... Merge pull request #89 from schacon/appendix-final HEAD is now at df3f601... add atlas.json and cover image ​ 在“分离头指针”状态下，如果你做了某些更改然后提交它们，标签不会发生变化，但你的新提交将不属于任何分支，并且将无法访问，除非确切的提交哈希。因此，如果你需要进行更改——比如说你正在修复旧版本的错误——这通常需要创建一个新分支： $ git checkout -b version2 v2.0.0 Switched to a new branch 'version2' ​ 当然，如果在这之后又进行了一次提交，version2 分支会因为这个改动向前移动，version2 分支就会和 v2.0.0 标签稍微有些不同，这时就应该当心了。 7. Git 别名 ​ 在我们结束本章 Git 基础之前，正好有一个小技巧可以使你的 Git 体验更简单、容易、熟悉：别名。 我们不会在之后的章节中引用到或假定你使用过它们，但是你大概应该知道如何使用它们。 ​ Git 并不会在你输入部分命令时自动推断出你想要的命令。 如果不想每次都输入完整的 Git 命令，可以通过 git config 文件来轻松地为每一个命令设置一个别名。 这里有一些例子你可以试试： $ git config --global alias.co checkout $ git config --global alias.br branch $ git config --global alias.ci commit $ git config --global alias.st status ​ 这意味着，当要输入 git commit 时，只需要输入 git ci。 随着你继续不断地使用 Git，可能也会经常使用其他命令，所以创建别名时不要犹豫。 ​ 在创建你认为应该存在的命令时这个技术会很有用。 例如，为了解决取消暂存文件的易用性问题，可以向 Git 中添加你自己的取消暂存别名： $ git config --global alias.unstage 'reset HEAD --' ​ 这会使下面的两个命令等价： $ git unstage fileA $ git reset HEAD -- fileA ​ 这样看起来更清楚一些。 通常也会添加一个 last 命令，像这样： $ git config --global alias.last 'log -1 HEAD' ​ 这样，可以轻松地看到最后一次提交： $ git last commit 66938dae3329c7aebe598c2246a8e6af90d04646 Author: Josh Goebel Date: Tue Aug 26 19:48:51 2008 +0800 test for current head Signed-off-by: Scott Chacon ​ 可以看出，Git 只是简单地将别名替换为对应的命令。 然而，你可能想要执行外部命令，而不是一个 Git 子命令。 如果是那样的话，可以在命令前面加入 ! 符号。 如果你自己要写一些与 Git 仓库协作的工具的话，那会很有用。 我们现在演示将 git visual 定义为 gitk 的别名： $ git config --global alias.visual '!gitk' 8. 总结 ​ 现在，你可以完成所有基本的 Git 本地操作－创建或者克隆一个仓库、做更改、暂存并提交这些更改、浏览你的仓库从创建到现在的所有更改的历史。 下一步，本书将介绍 Git 的杀手级特性：分支模型。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Git/Chapter4.html":{"url":"Git/Chapter4.html","title":"第四章：Git分支","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 分支简介 1.1 分支创建 1.2 分支切换 2. 分支的新建与合并 2.1 新建分支 2.2 分支的合并 2.3 遇到冲突时的分支合并 It looks like you may be committing a merge. Changes to be committed: ` 3. 分支管理 4. 分支开发工作流 4.1 长期分支 4.2 特性分支 5. 远程分支 5.1 推送 5.2 跟踪分支 5.3 拉取 5.4 删除远程分支 6. 变基 6.1 变基的基本操作 6.2 更有趣的变基例子 6.3 变基的风险 6.4 用变基解决变基 6.5 变基 vs. 合并 7. 总结 第四章：Git分支 ​ 几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。 在很多版本控制系统中，这是一个略微低效的过程——常常需要完全创建一个源代码目录的副本。对于大项目来说，这样的过程会耗费很多时间。 ​ 有人把 Git 的分支模型称为它的“必杀技特性”，也正因为这一特性，使得 Git 从众多版本控制系统中脱颖而出。 为何 Git 的分支模型如此出众呢？ Git 处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。 与许多其它版本控制系统不同，Git 鼓励在工作流程中频繁地使用分支与合并，哪怕一天之内进行许多次。 理解和精通这一特性，你便会意识到 Git 是如此的强大而又独特，并且从此真正改变你的开发方式。 1. 分支简介 ​ 为了真正理解 Git 处理分支的方式，我们需要回顾一下 Git 是如何保存数据的。 ​ 或许你还记得起步的内容，Git 保存的不是文件的变化或者差异，而是一系列不同时刻的文件快照。 ​ 在进行提交操作时，Git 会保存一个提交对象（commit object）。知道了 Git 保存数据的方式，我们可以很自然的想到——该提交对象会包含一个指向暂存内容快照的指针。 但不仅仅是这样，该提交对象还包含了作者的姓名和邮箱、提交时输入的信息以及指向它的父对象的指针。首次提交产生的提交对象没有父对象，普通提交操作产生的提交对象有一个父对象，而由多个分支合并产生的提交对象有多个父对象， ​ 为了更加形象地说明，我们假设现在有一个工作目录，里面包含了三个将要被暂存和提交的文件。 暂存操作会为每一个文件计算校验和（使用我们在本书中提到的 SHA-1 哈希算法），然后会把当前版本的文件快照保存到 Git 仓库中（Git 使用 blob 对象来保存它们），最终将校验和加入到暂存区域等待提交： $ git add README test.rb LICENSE $ git commit -m 'The initial commit of my project' ​ 当使用 git commit 进行提交操作时，Git 会先计算每一个子目录（本例中只有项目根目录）的校验和，然后在 Git 仓库中这些校验和保存为树对象。 随后，Git 便会创建一个提交对象，它除了包含上面提到的那些信息外，还包含指向这个树对象（项目根目录）的指针。如此一来，Git 就可以在需要的时候重现此次保存的快照。 ​ 现在，Git 仓库中有五个对象：三个 blob 对象（保存着文件快照）、一个树对象（记录着目录结构和 blob 对象索引）以及一个提交对象（包含着指向前述树对象的指针和所有提交信息）。 ​ 做些修改后再次提交，那么这次产生的提交对象会包含一个指向上次提交对象（父对象）的指针。 ​ Git 的分支，其实本质上仅仅是指向提交对象的可变指针。 Git 的默认分支名字是 master。 在多次提交操作之后，你其实已经有一个指向最后那个提交对象的 master 分支。 它会在每次的提交操作中自动向前移动。 Notes:Git 的 “master” 分支并不是一个特殊分支。 它就跟其它分支完全没有区别。 之所以几乎每一个仓库都有 master 分支，是因为 git init 命令默认创建它，并且大多数人都懒得去改动它。 1.1 分支创建 ​ Git 是怎么创建新分支的呢？ 很简单，它只是为你创建了一个可以移动的新的指针。 比如，创建一个 testing 分支， 你需要使用 git branch 命令： $ git branch testing ​ 这会在当前所在的提交对象上创建一个指针。 ​ 那么，Git 又是怎么知道当前在哪一个分支上呢？ 也很简单，它有一个名为 HEAD 的特殊指针。 请注意它和许多其它版本控制系统（如 Subversion 或 CVS）里的 HEAD 概念完全不同。 在 Git 中，它是一个指针，指向当前所在的本地分支（译注：将 HEAD 想象为当前分支的别名）。 在本例中，你仍然在 master 分支上。 因为 git branch 命令仅仅 创建 一个新分支，并不会自动切换到新分支中去。 ​ 你可以简单地使用 git log 命令查看各个分支当前所指的对象。 提供这一功能的参数是 --decorate。 $ git log --oneline --decorate f30ab (HEAD, master, testing) add feature #32 - ability to add new 34ac2 fixed bug #1328 - stack overflow under certain conditions 98ca9 initial commit of my project ​ 正如你所见，当前 “master” 和 “testing” 分支均指向校验和以 f30ab 开头的提交对象。 1.2 分支切换 ​ 要切换到一个已存在的分支，你需要使用 git checkout 命令。 我们现在切换到新创建的 testing 分支去： $ git checkout testing ​ 这样 HEAD 就指向 testing 分支了。 那么，这样的实现方式会给我们带来什么好处呢？ 现在不妨再提交一次： $ vim test.rb $ git commit -a -m 'made a change' ​ 如图所示，你的 testing 分支向前移动了，但是 master 分支却没有，它仍然指向运行 git checkout 时所指的对象。 这就有意思了，现在我们切换回 master 分支看看： $ git checkout master ​ 这条命令做了两件事。 一是使 HEAD 指回 master 分支，二是将工作目录恢复成 master 分支所指向的快照内容。 也就是说，你现在做修改的话，项目将始于一个较旧的版本。 本质上来讲，这就是忽略 testing 分支所做的修改，以便于向另一个方向进行开发。 Notes:分支切换会改变你工作目录中的文件在切换分支时，一定要注意你工作目录里的文件会被改变。 如果是切换到一个较旧的分支，你的工作目录会恢复到该分支最后一次提交时的样子。 如果 Git 不能干净利落地完成这个任务，它将禁止切换分支。 ​ 我们不妨再稍微做些修改并提交： $ vim test.rb $ git commit -a -m 'made other changes' ​ 现在，这个项目的提交历史已经产生了分叉。 因为刚才你创建了一个新分支，并切换过去进行了一些工作，随后又切换回 master 分支进行了另外一些工作。 上述两次改动针对的是不同分支：你可以在不同分支间不断地来回切换和工作，并在时机成熟时将它们合并起来。 而所有这些工作，你需要的命令只有 branch、checkout 和 commit。 ​ 你可以简单地使用 git log 命令查看分叉历史。 运行 git log --oneline --decorate --graph --all ，它会输出你的提交历史、各个分支的指向以及项目的分支分叉情况。 $ git log --oneline --decorate --graph --all * c2b9e (HEAD, master) made other changes | * 87ab2 (testing) made a change |/ * f30ab add feature #32 - ability to add new formats to the * 34ac2 fixed bug #1328 - stack overflow under certain conditions * 98ca9 initial commit of my project ​ 由于 Git 的分支实质上仅是包含所指对象校验和（长度为 40 的 SHA-1 值字符串）的文件，所以它的创建和销毁都异常高效。 创建一个新分支就相当于往一个文件中写入 41 个字节（40 个字符和 1 个换行符），如此的简单能不快吗？ ​ 这与过去大多数版本控制系统形成了鲜明的对比，它们在创建分支时，将所有的项目文件都复制一遍，并保存到一个特定的目录。 完成这样繁琐的过程通常需要好几秒钟，有时甚至需要好几分钟。所需时间的长短，完全取决于项目的规模。而在 Git 中，任何规模的项目都能在瞬间创建新分支。 同时，由于每次提交都会记录父对象，所以寻找恰当的合并基础（译注：即共同祖先）也是同样的简单和高效。 这些高效的特性使得 Git 鼓励开发人员频繁地创建和使用分支。 ​ 接下来，让我们看看你为什么应该这样做。 2. 分支的新建与合并 ​ 让我们来看一个简单的分支新建与分支合并的例子，实际工作中你可能会用到类似的工作流。 你将经历如下步骤： 开发某个网站。 为实现某个新的需求，创建一个分支。 在这个分支上开展工作。 正在此时，你突然接到一个电话说有个很严重的问题需要紧急修补。 你将按照如下方式来处理： 切换到你的线上分支（production branch）。 为这个紧急任务新建一个分支，并在其中修复它。 在测试通过之后，切换回线上分支，然后合并这个修补分支，最后将改动推送到线上分支。 切换回你最初工作的分支上，继续工作。 2.1 新建分支 首先，我们假设你正在你的项目上工作，并且已经有一些提交。 ​ 现在，你已经决定要解决你的公司使用的问题追踪系统中的 #53 问题。 想要新建一个分支并同时切换到那个分支上，你可以运行一个带有 -b 参数的 git checkout 命令： $ git checkout -b iss53 Switched to a new branch \"iss53\" ​ 它是下面两条命令的简写： $ git branch iss53 $ git checkout iss53 ​ 你继续在 #53 问题上工作，并且做了一些提交。 在此过程中，iss53 分支在不断的向前推进，因为你已经检出到该分支（也就是说，你的 HEAD 指针指向了 iss53 分支） $ vim index.html $ git commit -a -m 'added a new footer [issue 53]' ​ 现在你接到那个电话，有个紧急问题等待你来解决。 有了 Git 的帮助，你不必把这个紧急问题和 iss53 的修改混在一起，你也不需要花大力气来还原关于 53# 问题的修改，然后再添加关于这个紧急问题的修改，最后将这个修改提交到线上分支。 你所要做的仅仅是切换回 master 分支。 ​ 但是，在你这么做之前，要留意你的工作目录和暂存区里那些还没有被提交的修改，它可能会和你即将检出的分支产生冲突从而阻止 Git 切换到该分支。 最好的方法是，在你切换分支之前，保持好一个干净的状态。 有一些方法可以绕过这个问题（即，保存进度（stashing） 和 修补提交（commit amending））， 现在，我们假设你已经把你的修改全部提交了，这时你可以切换回 master 分支了： $ git checkout master Switched to branch 'master' ​ 这个时候，你的工作目录和你在开始 #53 问题之前一模一样，现在你可以专心修复紧急问题了。 请牢记：当你切换分支的时候，Git 会重置你的工作目录，使其看起来像回到了你在那个分支上最后一次提交的样子。 Git 会自动添加、删除、修改文件以确保此时你的工作目录和这个分支最后一次提交时的样子一模一样。 ​ 接下来，你要修复这个紧急问题。 让我们建立一个针对该紧急问题的分支（hotfix branch），在该分支上工作直到问题解决： $ git checkout -b hotfix Switched to a new branch 'hotfix' $ vim index.html $ git commit -a -m 'fixed the broken email address' [hotfix 1fb7853] fixed the broken email address 1 file changed, 2 insertions(+) ​ 你可以运行你的测试，确保你的修改是正确的，然后将其合并回你的 master 分支来部署到线上。 你可以使用 git merge 命令来达到上述目的： $ git checkout master $ git merge hotfix Updating f42c576..3a0874c Fast-forward index.html | 2 ++ 1 file changed, 2 insertions(+) ​ 在合并的时候，你应该注意到了\"快进（fast-forward）\"这个词。 由于当前 master 分支所指向的提交是你当前提交（有关 hotfix 的提交）的直接上游，所以 Git 只是简单的将指针向前移动。 换句话说，当你试图合并两个分支时，如果顺着一个分支走下去能够到达另一个分支，那么 Git 在合并两者的时候，只会简单的将指针向前推进（指针右移），因为这种情况下的合并操作没有需要解决的分歧——这就叫做 “快进（fast-forward）”。 ​ 现在，最新的修改已经在 master 分支所指向的提交快照中，你可以着手发布该修复了。 ​ 关于这个紧急问题的解决方案发布之后，你准备回到被打断之前时的工作中。 然而，你应该先删除 hotfix 分支，因为你已经不再需要它了 —— master 分支已经指向了同一个位置。 你可以使用带 -d 选项的 git branch 命令来删除分支： $ git branch -d hotfix Deleted branch hotfix (3a0874c). ​ 现在你可以切换回你正在工作的分支继续你的工作，也就是针对 #53 问题的那个分支（iss53 分支）。 $ git checkout iss53 Switched to branch \"iss53\" $ vim index.html $ git commit -a -m 'finished the new footer [issue 53]' [iss53 ad82d7a] finished the new footer [issue 53] 1 file changed, 1 insertion(+) ​ 你在 hotfix 分支上所做的工作并没有包含到 iss53 分支中。 如果你需要拉取 hotfix 所做的修改，你可以使用 git merge master 命令将 master 分支合并入 iss53 分支，或者你也可以等到 iss53 分支完成其使命，再将其合并回 master 分支。 2.2 分支的合并 ​ 假设你已经修正了 #53 问题，并且打算将你的工作合并入 master 分支。 为此，你需要合并 iss53 分支到 master 分支，这和之前你合并 hotfix 分支所做的工作差不多。 你只需要检出到你想合并入的分支，然后运行 git merge 命令： $ git checkout master Switched to branch 'master' $ git merge iss53 Merge made by the 'recursive' strategy. index.html | 1 + 1 file changed, 1 insertion(+) ​ 这和你之前合并 hotfix 分支的时候看起来有一点不一样。 在这种情况下，你的开发历史从一个更早的地方开始分叉开来（diverged）。 因为，master 分支所在提交并不是 iss53 分支所在提交的直接祖先，Git 不得不做一些额外的工作。 出现这种情况的时候，Git 会使用两个分支的末端所指的快照（C4 和 C5）以及这两个分支的工作祖先（C2），做一个简单的三方合并。 ​ 和之前将分支指针向前推进所不同的是，Git 将此次三方合并的结果做了一个新的快照并且自动创建一个新的提交指向它。 这个被称作一次合并提交，它的特别之处在于他有不止一个父提交。 ​ 需要指出的是，Git 会自行决定选取哪一个提交作为最优的共同祖先，并以此作为合并的基础；这和更加古老的 CVS 系统或者 Subversion （1.5 版本之前）不同，在这些古老的版本管理系统中，用户需要自己选择最佳的合并基础。 Git 的这个优势使其在合并操作上比其他系统要简单很多。 ​ 既然你的修改已经合并进来了，你已经不再需要 iss53 分支了。 现在你可以在任务追踪系统中关闭此项任务，并删除这个分支。 $ git branch -d iss53 2.3 遇到冲突时的分支合并 ​ 有时候合并操作不会如此顺利。 如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，Git 就没法干净的合并它们。 如果你对 #53 问题的修改和有关 hotfix 的修改都涉及到同一个文件的同一处，在合并它们的时候就会产生合并冲突： $ git merge iss53 Auto-merging index.html CONFLICT (content): Merge conflict in index.html Automatic merge failed; fix conflicts and then commit the result. ​ 此时 Git 做了合并，但是没有自动地创建一个新的合并提交。 Git 会暂停下来，等待你去解决合并产生的冲突。 你可以在合并冲突后的任意时刻使用 git status 命令来查看那些因包含合并冲突而处于未合并（unmerged）状态的文件： $ git status On branch master You have unmerged paths. (fix conflicts and run \"git commit\") Unmerged paths: (use \"git add ...\" to mark resolution) both modified: index.html no changes added to commit (use \"git add\" and/or \"git commit -a\") ​ 任何因包含合并冲突而有待解决的文件，都会以未合并状态标识出来。 Git 会在有冲突的文件中加入标准的冲突解决标记，这样你可以打开这些包含冲突的文件然后手动解决冲突。 出现冲突的文件会包含一些特殊区段，看起来像下面这个样子： contact : email.support@github.com ======= please contact us at support@github.com >>>>>>> iss53:index.html ​ 这表示 HEAD 所指示的版本（也就是你的 master 分支所在的位置，因为你在运行 merge 命令的时候已经检出到了这个分支）在这个区段的上半部分（======= 的上半部分），而 iss53 分支所指示的版本在 ======= 的下半部分。 为了解决冲突，你必须选择使用由 ======= 分割的两部分中的一个，或者你也可以自行合并这些内容。 例如，你可以通过把这段内容换成下面的样子来解决冲突： please contact us at email.support@github.com ​ 上述的冲突解决方案仅保留了其中一个分支的修改，并且 , ======= , 和 >>>>>>> 这些行被完全删除了。 在你解决了所有文件里的冲突之后，对每个文件使用 git add 命令来将其标记为冲突已解决。 一旦暂存这些原本有冲突的文件，Git 就会将它们标记为冲突已解决。 ​ 如果你想使用图形化工具来解决冲突，你可以运行 git mergetool，该命令会为你启动一个合适的可视化合并工具，并带领你一步一步解决这些冲突： $ git mergetool This message is displayed because 'merge.tool' is not configured. See 'git mergetool --tool-help' or 'git help config' for more details. 'git mergetool' will now attempt to use one of the following tools: opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge Merging: index.html Normal merge conflict for 'index.html': {local}: modified file {remote}: modified file Hit return to start merge resolution tool (opendiff): ​ 如果你想使用除默认工具（在这里 Git 使用 opendiff 做为默认的合并工具，因为作者在 Mac 上运行该程序）外的其他合并工具，你可以在 “下列工具中（one of the following tools）” 这句后面看到所有支持的合并工具。 然后输入你喜欢的工具名字就可以了。 Notes:如果你需要更加高级的工具来解决复杂的合并冲突，我们会在 高级合并介绍更多关于分支合并的内容。 ​ 等你退出合并工具之后，Git 会询问刚才的合并是否成功。 如果你回答是，Git 会暂存那些文件以表明冲突已解决： 你可以再次运行 git status 来确认所有的合并冲突都已被解决： $ git status On branch master All conflicts fixed but you are still merging. (use \"git commit\" to conclude merge) Changes to be committed: modified: index.html ​ 如果你对结果感到满意，并且确定之前有冲突的的文件都已经暂存了，这时你可以输入 git commit 来完成合并提交。 默认情况下提交信息看起来像下面这个样子： Merge branch 'iss53' Conflicts: index.html # # It looks like you may be committing a merge. # If this is not correct, please remove the file # .git/MERGE_HEAD # and try again. # Please enter the commit message for your changes. Lines starting # with '#' will be ignored, and an empty message aborts the commit. # On branch master # All conflicts fixed but you are still merging. # # Changes to be committed: # modified: index.html # ​ 如果你觉得上述的信息不够充分，不能完全体现分支合并的过程，你可以修改上述信息，添加一些细节给未来检视这个合并的读者一些帮助，告诉他们你是如何解决合并冲突的，以及理由是什么。 3. 分支管理 ​ 现在已经创建、合并、删除了一些分支，让我们看看一些常用的分支管理工具。 ​ git branch 命令不只是可以创建与删除分支。 如果不加任何参数运行它，会得到当前所有分支的一个列表： $ git branch iss53 * master testing ​ 注意 master 分支前的 * 字符：它代表现在检出的那一个分支（也就是说，当前 HEAD 指针所指向的分支）。 这意味着如果在这时候提交，master 分支将会随着新的工作向前移动。 如果需要查看每一个分支的最后一次提交，可以运行 git branch -v 命令： $ git branch -v iss53 93b412c fix javascript issue * master 7a98805 Merge branch 'iss53' testing 782fd34 add scott to the author list in the readmes ​ --merged 与 --no-merged 这两个有用的选项可以过滤这个列表中已经合并或尚未合并到当前分支的分支。 如果要查看哪些分支已经合并到当前分支，可以运行 git branch --merged： $ git branch --merged iss53 * master ​ 因为之前已经合并了 iss53 分支，所以现在看到它在列表中。 在这个列表中分支名字前没有 * 号的分支通常可以使用 git branch -d 删除掉；你已经将它们的工作整合到了另一个分支，所以并不会失去任何东西。 ​ 查看所有包含未合并工作的分支，可以运行 git branch --no-merged： $ git branch --no-merged testing ​ 这里显示了其他分支。 因为它包含了还未合并的工作，尝试使用 git branch -d 命令删除它时会失败： $ git branch -d testing error: The branch 'testing' is not fully merged. If you are sure you want to delete it, run 'git branch -D testing'. ​ 如果真的想要删除分支并丢掉那些工作，如同帮助信息里所指出的，可以使用 -D 选项强制删除它。 4. 分支开发工作流 ​ 现在你已经学会新建和合并分支，那么你可以或者应该用它来做些什么呢？ 在本节，我们会介绍一些常见的利用分支进行开发的工作流程。而正是由于分支管理的便捷，才衍生出这些典型的工作模式，你可以根据项目实际情况选择一种用用看。 4.1 长期分支 ​ 因为 Git 使用简单的三方合并，所以就算在一段较长的时间内，反复把一个分支合并入另一个分支，也不是什么难事。 也就是说，在整个项目开发周期的不同阶段，你可以同时拥有多个开放的分支；你可以定期地把某些特性分支合并入其他分支中。 ​ 许多使用 Git 的开发者都喜欢使用这种方式来工作，比如只在 master 分支上保留完全稳定的代码——有可能仅仅是已经发布或即将发布的代码。 他们还有一些名为 develop 或者 next 的平行分支，被用来做后续开发或者测试稳定性——这些分支不必保持绝对稳定，但是一旦达到稳定状态，它们就可以被合并入 master 分支了。 这样，在确保这些已完成的特性分支（短期分支，比如之前的 iss53 分支）能够通过所有测试，并且不会引入更多 bug 之后，就可以合并入主干分支中，等待下一次的发布。 ​ 事实上我们刚才讨论的，是随着你的提交而不断右移的指针。 稳定分支的指针总是在提交历史中落后一大截，而前沿分支的指针往往比较靠前。 ​ 通常把他们想象成流水线（work silos）可能更好理解一点，那些经过测试考验的提交会被遴选到更加稳定的流水线上去。 ​ 你可以用这种方法维护不同层次的稳定性。 一些大型项目还有一个 proposed（建议） 或 pu: proposed updates（建议更新）分支，它可能因包含一些不成熟的内容而不能进入 next 或者 master 分支。 这么做的目的是使你的分支具有不同级别的稳定性；当它们具有一定程度的稳定性后，再把它们合并入具有更高级别稳定性的分支中。 再次强调一下，使用多个长期分支的方法并非必要，但是这么做通常很有帮助，尤其是当你在一个非常庞大或者复杂的项目中工作时。 4.2 特性分支 ​ 特性分支对任何规模的项目都适用。 特性分支是一种短期分支，它被用来实现单一特性或其相关工作。 也许你从来没有在其他的版本控制系统（VCS）上这么做过，因为在那些版本控制系统中创建和合并分支通常很费劲。 然而，在 Git 中一天之内多次创建、使用、合并、删除分支都很常见。 ​ 你已经在上一节中你创建的 iss53 和 hotfix 特性分支中看到过这种用法。 你在上一节用到的特性分支（iss53 和 hotfix 分支）中提交了一些更新，并且在它们合并入主干分支之后，你又删除了它们。 这项技术能使你快速并且完整地进行上下文切换（context-switch）——因为你的工作被分散到不同的流水线中，在不同的流水线中每个分支都仅与其目标特性相关，因此，在做代码审查之类的工作的时候就能更加容易地看出你做了哪些改动。 你可以把做出的改动在特性分支中保留几分钟、几天甚至几个月，等它们成熟之后再合并，而不用在乎它们建立的顺序或工作进度。 ​ 考虑这样一个例子，你在 master 分支上工作到 C1，这时为了解决一个问题而新建 iss91 分支，在 iss91 分支上工作到 C4，然而对于那个问题你又有了新的想法，于是你再新建一个 iss91v2 分支试图用另一种方法解决那个问题，接着你回到 master 分支工作了一会儿，你又冒出了一个不太确定的想法，你便在 C10 的时候新建一个 dumbidea 分支，并在上面做些实验。 你的提交历史看起来像下面这个样子： ​ 现在，我们假设两件事情：你决定使用第二个方案来解决那个问题，即使用在 iss91v2 分支中方案；另外，你将 dumbidea 分支拿给你的同事看过之后，结果发现这是个惊人之举。 这时你可以抛弃 iss91 分支（即丢弃 C5 和 C6 提交），然后把另外两个分支合并入主干分支。 最终你的提交历史看起来像下面这个样子： ​ 我们将会在 分布式 Git 中向你揭示更多有关分支工作流的细节，因此，请确保你阅读完那个章节之后，再来决定你的下个项目要使用什么样的分支策略（branching scheme）。 ​ 请牢记，当你做这么多操作的时候，这些分支全部都存于本地。 当你新建和合并分支的时候，所有这一切都只发生在你本地的 Git 版本库中 —— 没有与服务器发生交互。 5. 远程分支 ​ 远程引用是对远程仓库的引用（指针），包括分支、标签等等。 你可以通过 git ls-remote (remote) 来显式地获得远程引用的完整列表，或者通过 git remote show (remote) 获得远程分支的更多信息。 然而，一个更常见的做法是利用远程跟踪分支。 ​ 远程跟踪分支是远程分支状态的引用。 它们是你不能移动的本地引用，当你做任何网络通信操作时，它们会自动移动。 远程跟踪分支像是你上次连接到远程仓库时，那些分支所处状态的书签。 ​ 它们以 (remote)/(branch) 形式命名。 例如，如果你想要看你最后一次与远程仓库 origin 通信时 master 分支的状态，你可以查看 origin/master 分支。 你与同事合作解决一个问题并且他们推送了一个 iss53 分支，你可能有自己的本地 iss53 分支；但是在服务器上的分支会指向 origin/iss53 的提交。 ​ 这可能有一点儿难以理解，让我们来看一个例子。 假设你的网络里有一个在 git.ourcompany.com 的 Git 服务器。 如果你从这里克隆，Git 的 clone 命令会为你自动将其命名为 origin，拉取它的所有数据，创建一个指向它的 master 分支的指针，并且在本地将其命名为 origin/master。 Git 也会给你一个与 origin 的 master 分支在指向同一个地方的本地 master 分支，这样你就有工作的基础。 Notes: “origin” 并无特殊含义远程仓库名字 “origin” 与分支名字 “master” 一样，在 Git 中并没有任何特别的含义一样。 同时 “master” 是当你运行 git init 时默认的起始分支名字，原因仅仅是它的广泛使用，“origin” 是当你运行 git clone 时默认的远程仓库名字。 如果你运行 git clone -o booyah，那么你默认的远程分支名字将会是 booyah/master。 ​ 如果你在本地的 master 分支做了一些工作，与此同时，其他人推送提交到 git.ourcompany.com 并更新了它的 master 分支，那么你的提交历史将向不同的方向前进。 另外，只要你不与 origin 服务器连接，你的 origin/master 指针就不会移动。 ​ 如果要同步你的工作，运行 git fetch origin 命令。 这个命令查找 “origin” 是哪一个服务器（在本例中，它是 git.ourcompany.com），从中抓取本地没有的数据，并且更新本地数据库，移动 origin/master 指针指向新的、更新后的位置。 ​ 为了演示有多个远程仓库与远程分支的情况，我们假定你有另一个内部 Git 服务器，仅用于你的 sprint 小组的开发工作。 这个服务器位于 git.team1.ourcompany.com。 你可以运行 git remote add 命令添加一个新的远程仓库引用到当前的项目，这个命令我们会在 Git 基础中详细说明。 将这个远程仓库命名为 teamone，将其作为整个 URL 的缩写。 ​ 现在，可以运行 git fetch teamone 来抓取远程仓库 teamone 有而本地没有的数据。 因为那台服务器上现有的数据是 origin 服务器上的一个子集，所以 Git 并不会抓取数据而是会设置远程跟踪分支 teamone/master 指向 teamone 的 master 分支。 5.1 推送 ​ 当你想要公开分享一个分支时，需要将其推送到有写入权限的远程仓库上。 本地的分支并不会自动与远程仓库同步——你必须显式地推送想要分享的分支。 这样，你就可以把不愿意分享的内容放到私人分支上，而将需要和别人协作的内容推送到公开分支。 ​ 如果希望和别人一起在名为 serverfix 的分支上工作，你可以像推送第一个分支那样推送它。 运行 git push (remote) (branch): $ git push origin serverfix Counting objects: 24, done. Delta compression using up to 8 threads. Compressing objects: 100% (15/15), done. Writing objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done. Total 24 (delta 2), reused 0 (delta 0) To https://github.com/schacon/simplegit * [new branch] serverfix -> serverfix ​ 这里有些工作被简化了。 Git 自动将 serverfix 分支名字展开为 refs/heads/serverfix:refs/heads/serverfix，那意味着，“推送本地的 serverfix 分支来更新远程仓库上的 serverfix 分支。” 我们将会详细学习 Git 内部原理 的 refs/heads/ 部分，但是现在可以先把它放在儿。 你也可以运行 git push origin serverfix:serverfix，它会做同样的事——也就是说“推送本地的 serverfix 分支，将其作为远程仓库的 serverfix 分支” 可以通过这种格式来推送本地分支到一个命名不相同的远程分支。 如果并不想让远程仓库上的分支叫做 serverfix，可以运行 git push origin serverfix:awesomebranch 来将本地的 serverfix 分支推送到远程仓库上的 awesomebranch 分支。 Notes:如何避免每次输入密码如果你正在使用 HTTPS URL 来推送，Git 服务器会询问用户名与密码。 默认情况下它会在终端中提示服务器是否允许你进行推送。如果不想在每一次推送时都输入用户名与密码，你可以设置一个 “credential cache”。 最简单的方式就是将其保存在内存中几分钟，可以简单地运行 git config --global credential.helper cache 来设置它。想要了解更多关于不同验证缓存的可用选项，查看 凭证存储。 ​ 下一次其他协作者从服务器上抓取数据时，他们会在本地生成一个远程分支 origin/serverfix，指向服务器的 serverfix 分支的引用： $ git fetch origin remote: Counting objects: 7, done. remote: Compressing objects: 100% (2/2), done. remote: Total 3 (delta 0), reused 3 (delta 0) Unpacking objects: 100% (3/3), done. From https://github.com/schacon/simplegit * [new branch] serverfix -> origin/serverfix ​ 要特别注意的一点是当抓取到新的远程跟踪分支时，本地不会自动生成一份可编辑的副本（拷贝）。 换一句话说，这种情况下，不会有一个新的 serverfix 分支——只有一个不可以修改的 origin/serverfix 指针。 ​ 可以运行 git merge origin/serverfix 将这些工作合并到当前所在的分支。 如果想要在自己的 serverfix 分支上工作，可以将其建立在远程跟踪分支之上： $ git checkout -b serverfix origin/serverfix Branch serverfix set up to track remote branch serverfix from origin. Switched to a new branch 'serverfix' ​ 这会给你一个用于工作的本地分支，并且起点位于 origin/serverfix。 5.2 跟踪分支 ​ 从一个远程跟踪分支检出一个本地分支会自动创建所谓的“跟踪分支”（它跟踪的分支叫做“上游分支”）。 跟踪分支是与远程分支有直接关系的本地分支。 如果在一个跟踪分支上输入 git pull，Git 能自动地识别去哪个服务器上抓取、合并到哪个分支。 ​ 当克隆一个仓库时，它通常会自动地创建一个跟踪 origin/master 的 master 分支。 然而，如果你愿意的话可以设置其他的跟踪分支，或是一个在其他远程仓库上的跟踪分支，又或者不跟踪 master 分支。 最简单的实例就是像之前看到的那样，运行 git checkout -b [branch] [remotename]/[branch]。 这是一个十分常用的操作所以 Git 提供了 --track 快捷方式： $ git checkout --track origin/serverfix Branch serverfix set up to track remote branch serverfix from origin. Switched to a new branch 'serverfix' ​ 如果想要将本地分支与远程分支设置为不同名字，你可以轻松地使用上一个命令增加一个不同名字的本地分支： $ git checkout -b sf origin/serverfix Branch sf set up to track remote branch serverfix from origin. Switched to a new branch 'sf' ​ 现在，本地分支 sf 会自动从 origin/serverfix 拉取。 ​ 设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支，你可以在任意时间使用 -u 或 --set-upstream-to 选项运行 git branch 来显式地设置。 $ git branch -u origin/serverfix Branch serverfix set up to track remote branch serverfix from origin. Notes:上游快捷方式当设置好跟踪分支后，可以通过 @{upstream} 或 @{u} 快捷方式来引用它。 所以在 master 分支时并且它正在跟踪 origin/master 时，如果愿意的话可以使用 git merge @{u} 来取代 git merge origin/master。 ​ 如果想要查看设置的所有跟踪分支，可以使用 git branch 的 -vv 选项。 这会将所有的本地分支列出来并且包含更多的信息，如每一个分支正在跟踪哪个远程分支与本地分支是否是领先、落后或是都有。 $ git branch -vv iss53 7e424c3 [origin/iss53: ahead 2] forgot the brackets master 1ae2a45 [origin/master] deploying index fix * serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it testing 5ea463a trying something new ​ 这里可以看到 iss53 分支正在跟踪 origin/iss53 并且 “ahead” 是 2，意味着本地有两个提交还没有推送到服务器上。 也能看到 master 分支正在跟踪 origin/master 分支并且是最新的。 接下来可以看到 serverfix 分支正在跟踪 teamone 服务器上的 server-fix-good 分支并且领先 3 落后 1，意味着服务器上有一次提交还没有合并入同时本地有三次提交还没有推送。 最后看到 testing 分支并没有跟踪任何远程分支。 ​ 需要重点注意的一点是这些数字的值来自于你从每个服务器上最后一次抓取的数据。 这个命令并没有连接服务器，它只会告诉你关于本地缓存的服务器数据。 如果想要统计最新的领先与落后数字，需要在运行此命令前抓取所有的远程仓库。 可以像这样做：$ git fetch --all; git branch -vv 5.3 拉取 ​ 当 git fetch 命令从服务器上抓取本地没有的数据时，它并不会修改工作目录中的内容。 它只会获取数据然后让你自己合并。 然而，有一个命令叫作 git pull 在大多数情况下它的含义是一个 git fetch 紧接着一个 git merge 命令。 如果有一个像之前章节中演示的设置好的跟踪分支，不管它是显式地设置还是通过 clone 或 checkout 命令为你创建的，git pull 都会查找当前分支所跟踪的服务器与分支，从服务器上抓取数据然后尝试合并入那个远程分支。 ​ 由于 git pull 的魔法经常令人困惑所以通常单独显式地使用 fetch 与 merge 命令会更好一些。 5.4 删除远程分支 ​ 假设你已经通过远程分支做完所有的工作了——也就是说你和你的协作者已经完成了一个特性并且将其合并到了远程仓库的 master 分支（或任何其他稳定代码分支）。 可以运行带有 --delete 选项的 git push 命令来删除一个远程分支。 如果想要从服务器上删除 serverfix 分支，运行下面的命令： $ git push origin --delete serverfix To https://github.com/schacon/simplegit - [deleted] serverfix ​ 基本上这个命令做的只是从服务器上移除这个指针。 Git 服务器通常会保留数据一段时间直到垃圾回收运行，所以如果不小心删除掉了，通常是很容易恢复的。 6. 变基 ​ 在 Git 中整合来自不同分支的修改主要有两种方法：merge 以及 rebase。 在本节中我们将学习什么是“变基”，怎样使用“变基”，并将展示该操作的惊艳之处，以及指出在何种情况下你应避免使用它。 6.1 变基的基本操作 ​ 请回顾之前在 分支的合并中的一个例子，你会看到开发任务分叉到两个不同分支，又各自提交了更新。 ​ 之前介绍过，整合分支最容易的方法是 merge 命令。 它会把两个分支的最新快照（C3 和 C4）以及二者最近的共同祖先（C2）进行三方合并，合并的结果是生成一个新的快照（并提交）。 ​ 其实，还有一种方法：你可以提取在 C4 中引入的补丁和修改，然后在 C3 的基础上应用一次。 在 Git 中，这种操作就叫做 变基。 你可以使用 rebase 命令将提交到某一分支上的所有修改都移至另一分支上，就好像“重新播放”一样。 ​ 在上面这个例子中，运行： $ git checkout experiment $ git rebase master First, rewinding head to replay your work on top of it... Applying: added staged command ​ 它的原理是首先找到这两个分支（即当前分支 experiment、变基操作的目标基底分支 master）的最近共同祖先 C2，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件，然后将当前分支指向目标基底 C3, 最后以此将之前另存为临时文件的修改依序应用。（译注：写明了 commit id，以便理解，下同） ​ 现在回到 master 分支，进行一次快进合并。 $ git checkout master $ git merge experiment ​ 此时，C4' 指向的快照就和上面使用 merge 命令的例子中 C5 指向的快照一模一样了。 这两种整合方法的最终结果没有任何区别，但是变基使得提交历史更加整洁。 你在查看一个经过变基的分支的历史记录时会发现，尽管实际的开发工作是并行的，但它们看上去就像是串行的一样，提交历史是一条直线没有分叉。 ​ 一般我们这样做的目的是为了确保在向远程分支推送时能保持提交历史的整洁——例如向某个其他人维护的项目贡献代码时。 在这种情况下，你首先在自己的分支里进行开发，当开发完成时你需要先将你的代码变基到 origin/master 上，然后再向主项目提交修改。 这样的话，该项目的维护者就不再需要进行整合工作，只需要快进合并便可。 ​ 请注意，无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不同罢了。 变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。 6.2 更有趣的变基例子 ​ 在对两个分支进行变基时，所生成的“重放”并不一定要在目标分支上应用，你也可以指定另外的一个分支进行应用。 就像从一个特性分支里再分出一个特性分支的提交历史中的例子那样。 你创建了一个特性分支 server，为服务端添加了一些功能，提交了 C3 和 C4。 然后从 C3 上创建了特性分支 client，为客户端添加了一些功能，提交了 C8 和 C9。 最后，你回到 server 分支，又提交了 C10。 ​ 假设你希望将 client 中的修改合并到主分支并发布，但暂时并不想合并 server 中的修改，因为它们还需要经过更全面的测试。 这时，你就可以使用 git rebase 命令的 --onto 选项，选中在 client 分支里但不在 server 分支里的修改（即 C8 和 C9），将它们在 master 分支上重放： $ git rebase --onto master server client ​ 以上命令的意思是：“取出 client 分支，找出处于 client 分支和 server 分支的共同祖先之后的修改，然后把它们在 master 分支上重放一遍”。 这理解起来有一点复杂，不过效果非常酷。 ​ 现在可以快进合并 master 分支了： $ git checkout master $ git merge client ​ 接下来你决定将 server 分支中的修改也整合进来。 使用 git rebase [basebranch] [topicbranch] 命令可以直接将特性分支（即本例中的 server）变基到目标分支（即 master）上。这样做能省去你先切换到 server 分支，再对其执行变基命令的多个步骤。 $ git rebase master server ​ 如下图所示，server 中的代码被“续”到了 master 后面。 ​ 然后就可以快进合并主分支 master 了： $ git checkout master $ git merge server ​ 至此，client 和 server 分支中的修改都已经整合到主分支里了，你可以删除这两个分支，最终提交历史会变成下图最终的提交历史中的样子： $ git branch -d client $ git branch -d server 6.3 变基的风险 ​ 呃，奇妙的变基也并非完美无缺，要用它得遵守一条准则： ​ 不要对在你的仓库外有副本的分支执行变基。 ​ 如果你遵循这条金科玉律，就不会出差错。 否则，人民群众会仇恨你，你的朋友和家人也会嘲笑你，唾弃你。 ​ 变基操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。 如果你已经将提交推送至某个仓库，而其他人也已经从该仓库拉取提交并进行了后续工作，此时，如果你用 git rebase 命令重新整理了提交并再次推送，你的同伴因此将不得不再次将他们手头的工作与你的提交进行整合，如果接下来你还要拉取并整合他们修改过的提交，事情就会变得一团糟。 ​ 让我们来看一个在公开的仓库上执行变基操作所带来的问题。 假设你从一个中央服务器克隆然后在它的基础上进行了一些开发。 你的提交历史如图所示： ​ 然后，某人又向中央服务器提交了一些修改，其中还包括一次合并。 你抓取了这些在远程分支上的修改，并将其合并到你本地的开发分支，然后你的提交历史就会变成这样： ​ 接下来，这个人又决定把合并操作回滚，改用变基；继而又用 git push --force 命令覆盖了服务器上的提交历史。 之后你从服务器抓取更新，会发现多出来一些新的提交。 ​ 结果就是你们两人的处境都十分尴尬。 如果你执行 git pull 命令，你将合并来自两条提交历史的内容，生成一个新的合并提交，最终仓库会如图所示： ​ 此时如果你执行 git log 命令，你会发现有两个提交的作者、日期、日志居然是一样的，这会令人感到混乱。 此外，如果你将这一堆又推送到服务器上，你实际上是将那些已经被变基抛弃的提交又找了回来，这会令人感到更加混乱。 很明显对方并不想在提交历史中看到 C4 和 C6，因为之前就是他把这两个提交通过变基丢弃的。 6.4 用变基解决变基 ​ 如果你 真的 遭遇了类似的处境，Git 还有一些高级魔法可以帮到你。 如果团队中的某人强制推送并覆盖了一些你所基于的提交，你需要做的就是检查你做了哪些修改，以及他们覆盖了哪些修改。 ​ 实际上，Git 除了对整个提交计算 SHA-1 校验和以外，也对本次提交所引入的修改计算了校验和—— 即 “patch-id”。 ​ 如果你拉取被覆盖过的更新并将你手头的工作基于此进行变基的话，一般情况下 Git 都能成功分辨出哪些是你的修改，并把它们应用到新分支上。 ​ 举个例子，如果遇到前面提到的 有人推送了经过变基的提交，并丢弃了你的本地开发所基于的一些提交那种情境，如果我们不是执行合并，而是执行 git rebase teamone/master, Git 将会： 检查哪些提交是我们的分支上独有的（C2，C3，C4，C6，C7） 检查其中哪些提交不是合并操作的结果（C2，C3，C4） 检查哪些提交在对方覆盖更新时并没有被纳入目标分支（只有 C2 和 C3，因为 C4 其实就是 C4'） 把查到的这些提交应用在 teamone/master 上面 ​ 从而我们将得到与你将相同的内容又合并了一次，生成了一个新的提交中不同的结果，如图在一个被变基然后强制推送的分支上再次执行变基所示。 ​ 要想上述方案有效，还需要对方在变基时确保 C4' 和 C4 是几乎一样的。 否则变基操作将无法识别，并新建另一个类似 C4 的补丁（而这个补丁很可能无法整洁的整合入历史，因为补丁中的修改已经存在于某个地方了）。 ​ 在本例中另一种简单的方法是使用 git pull --rebase 命令而不是直接 git pull。 又或者你可以自己手动完成这个过程，先 git fetch，再 git rebase teamone/master。 ​ 如果你习惯使用 git pull ，同时又希望默认使用选项 --rebase，你可以执行这条语句 git config --global pull.rebase true 来更改 pull.rebase 的默认配置。 ​ 只要你把变基命令当作是在推送前清理提交使之整洁的工具，并且只在从未推送至共用仓库的提交上执行变基命令，就不会有事。 假如在那些已经被推送至共用仓库的提交上执行变基命令，并因此丢弃了一些别人的开发所基于的提交，那你就有大麻烦了，你的同事也会因此鄙视你。 ​ 如果你或你的同事在某些情形下决意要这么做，请一定要通知每个人执行 git pull --rebase 命令，这样尽管不能避免伤痛，但能有所缓解。 6.5 变基 vs. 合并 ​ 至此，你已在实战中学习了变基和合并的用法，你一定会想问，到底哪种方式更好。 在回答这个问题之前，让我们退后一步，想讨论一下提交历史到底意味着什么。 ​ 有一种观点认为，仓库的提交历史即是 记录实际发生过什么。 它是针对历史的文档，本身就有价值，不能乱改。 从这个角度看来，改变提交历史是一种亵渎，你使用 谎言 掩盖了实际发生过的事情。 如果由合并产生的提交历史是一团糟怎么办？ 既然事实就是如此，那么这些痕迹就应该被保留下来，让后人能够查阅。 ​ 另一种观点则正好相反，他们认为提交历史是 项目过程中发生的事。 没人会出版一本书的第一版草稿，软件维护手册也是需要反复修订才能方便使用。 持这一观点的人会使用 rebase 及 filter-branch 等工具来编写故事，怎么方便后来的读者就怎么写。 ​ 现在，让我们回到之前的问题上来，到底合并还是变基好？希望你能明白，这并没有一个简单的答案。 Git 是一个非常强大的工具，它允许你对提交历史做许多事情，但每个团队、每个项目对此的需求并不相同。 既然你已经分别学习了两者的用法，相信你能够根据实际情况作出明智的选择。 ​ 总的原则是，只对尚未推送或分享给别人的本地修改执行变基操作清理历史，从不对已推送至别处的提交执行变基操作，这样，你才能享受到两种方式带来的便利。 7. 总结 ​ 我们已经讲完了 Git 分支与合并的基础知识。 你现在应该能自如地创建并切换至新分支、在不同分支之间切换以及合并本地分支。 你现在应该也能通过推送你的分支至共享服务以分享它们、使用共享分支与他人协作以及在共享之前使用变基操作合并你的分支。 下一章，我们将要讲到，如果你想要运行自己的 Git 仓库托管服务器，你需要知道些什么。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Git/Chapter5.html":{"url":"Git/Chapter5.html","title":"第五章：服务器上的Git","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 协议 1.1 本地协议 1.1.1 优点 1.1.2 缺点 1.2 HTTP 协议 1.2.1 智能（Smart） HTTP 协议 1.2.2 哑（Dumb） HTTP 协议 1.2.3 优点 1.2.4 缺点 1.3 SSH 协议 1.3.1 优势 1.3.2 缺点 1.4 Git 协议 1.4.1 优点 1.4.2 缺点 2. 在服务器上搭建 Git 2.1 把裸仓库放到服务器上 2.2 小型安装 2.2.1 SSH 连接 3. 生成 SSH 公钥 4. 配置服务器 5. Git 守护进程 6. Smart HTTP 6. GitWeb 7. GitLab 7.1 安装 7.2 管理 7.2.1 使用者 7.2.2 组 7.2.3 项目 7.2.4 钩子 7.3 基本用途 7.4 一起工作 8. 第三方托管的选择 9. 总结 第五章：服务器上的Git 1. 协议 ​ 到目前为止，你应该已经有办法使用 Git 来完成日常工作。 然而，为了使用 Git 协作功能，你还需要有远程的 Git 仓库。 尽管在技术上你可以从个人仓库进行推送（push）和拉取（pull）来修改内容，但不鼓励使用这种方法，因为一不留心就很容易弄混其他人的进度。 此外，你希望你的合作者们即使在你的电脑未联机时亦能存取仓库 — 拥有一个更可靠的公用仓库十分有用。 因此，与他人合作的最佳方法即是建立一个你与合作者们都有权利访问，且可从那里推送和拉取资料的共用仓库。 ​ 架设一台 Git 服务器并不难。 首先，选择你希望服务器使用的通讯协议。 在本章第一节将介绍可用的协议以及各自优缺点。 下面一节将解释使用那些协议的典型设置及如何在你的服务器上运行。 最后，如果你不介意托管你的代码在其他人的服务器，且不想经历设置与维护自己服务器的麻烦，可以试试我们介绍的几个仓库托管服务。 ​ 如果你对架设自己的服务器没兴趣，可以跳到本章最后一节去看看如何申请一个代码托管服务的帐户然后继续下一章，我们会在那里讨论分散式源码控制环境的林林总总。 ​ 一个远程仓库通常只是一个裸仓库（bare repository）——即一个没有当前工作目录的仓库。 因为该仓库仅仅作为合作媒介，不需要从磁盘检查快照；存放的只有 Git 的资料。 简单的说，裸仓库就是你工程目录内的 .git 子目录内容，不包含其他资料。 ​ Git 可以使用四种主要的协议来传输资料：本地协议（Local），HTTP 协议，SSH（Secure Shell）协议及 Git 协议。 在此，我们将会讨论那些协议及哪些情形应该使用（或避免使用）他们。 1.1 本地协议 ​ 最基本的就是 本地协议（Local protocol） ，其中的远程版本库就是硬盘内的另一个目录。 这常见于团队每一个成员都对一个共享的文件系统（例如一个挂载的 NFS）拥有访问权，或者比较少见的多人共用同一台电脑的情况。 后者并不理想，因为你的所有代码版本库如果长存于同一台电脑，更可能发生灾难性的损失。 ​ 如果你使用共享文件系统，就可以从本地版本库克隆（clone）、推送（push）以及拉取（pull）。 像这样去克隆一个版本库或者增加一个远程到现有的项目中，使用版本库路径作为 URL。 例如，克隆一个本地版本库，可以执行如下的命令： $ git clone /opt/git/project.git ​ 或你可以执行这个命令： $ git clone file:///opt/git/project.git ​ 如果在 URL 开头明确的指定 file://，那么 Git 的行为会略有不同。 如果仅是指定路径，Git 会尝试使用硬链接（hard link）或直接复制所需要的文件。 如果指定 file://，Git 会触发平时用于网路传输资料的进程，那通常是传输效率较低的方法。 指定 file:// 的主要目的是取得一个没有外部参考（extraneous references）或对象（object）的干净版本库副本– 通常是在从其他版本控制系统导入后或一些类似情况（参见 Git 内部原理 for maintenance tasks）需要这么做。 在此我们将使用普通路径，因为这样通常更快。 ​ 要增加一个本地版本库到现有的 Git 项目，可以执行如下的命令： $ git remote add local_proj /opt/git/project.git ​ 然后，就可以像在网络上一样从远端版本库推送和拉取更新了。 1.1.1 优点 ​ 基于文件系统的版本库的优点是简单，并且直接使用了现有的文件权限和网络访问权限。 如果你的团队已经有共享文件系统，建立版本库会十分容易。 只需要像设置其他共享目录一样，把一个裸版本库的副本放到大家都可以访问的路径，并设置好读/写的权限，就可以了， 我们会在在服务器上搭建 Git讨论如何导出一个裸版本库。 ​ 这也是快速从别人的工作目录中拉取更新的方法。 如果你和别人一起合作一个项目，他想让你从版本库中拉取更新时，运行类似 git pull /home/john/project 的命令比推送到服务器再取回简单多了。 1.1.2 缺点 ​ 这种方法的缺点是，通常共享文件系统比较难配置，并且比起基本的网络连接访问，这不方便从多个位置访问。 如果你想从家里推送内容，必须先挂载一个远程磁盘，相比网络连接的访问方式，配置不方便，速度也慢。 ​ 值得一提的是，如果你使用的是类似于共享挂载的文件系统时，这个方法不一定是最快的。 访问本地版本库的速度与你访问数据的速度是一样的。 在同一个服务器上，如果允许 Git 访问本地硬盘，一般的通过 NFS 访问版本库要比通过 SSH 访问慢。 ​ 最终，这个协议并不保护仓库避免意外的损坏。 每一个用户都有“远程”目录的完整 shell 权限，没有方法可以阻止他们修改或删除 Git 内部文件和损坏仓库。 1.2 HTTP 协议 ​ Git 通过 HTTP 通信有两种模式。 在 Git 1.6.6 版本之前只有一个方式可用，十分简单并且通常是只读模式的。 Git 1.6.6 版本引入了一种新的、更智能的协议，让 Git 可以像通过 SSH 那样智能的协商和传输数据。 之后几年，这个新的 HTTP 协议因为其简单、智能变的十分流行。 新版本的 HTTP 协议一般被称为“智能” HTTP 协议，旧版本的一般被称为“哑” HTTP 协议。 我们先了解一下新的“智能” HTTP 协议。 1.2.1 智能（Smart） HTTP 协议 ​ “智能” HTTP 协议的运行方式和 SSH 及 Git 协议类似，只是运行在标准的 HTTP/S 端口上并且可以使用各种 HTTP 验证机制，这意味着使用起来会比 SSH 协议简单的多，比如可以使用 HTTP 协议的用户名／密码的基础授权，免去设置 SSH 公钥。 ​ 智能 HTTP 协议或许已经是最流行的使用 Git 的方式了，它即支持像 git:// 协议一样设置匿名服务，也可以像 SSH 协议一样提供传输时的授权和加密。 而且只用一个 URL 就可以都做到，省去了为不同的需求设置不同的 URL。 如果你要推送到一个需要授权的服务器上（一般来讲都需要），服务器会提示你输入用户名和密码。 从服务器获取数据时也一样。 ​ 事实上，类似 GitHub 的服务，你在网页上看到的 URL （比如， https://github.com/schacon/simplegit[]），和你在克隆、推送（如果你有权限）时使用的是一样的。 1.2.2 哑（Dumb） HTTP 协议 ​ 如果服务器没有提供智能 HTTP 协议的服务，Git 客户端会尝试使用更简单的“哑” HTTP 协议。 哑 HTTP 协议里 web 服务器仅把裸版本库当作普通文件来对待，提供文件服务。 哑 HTTP 协议的优美之处在于设置起来简单。 基本上，只需要把一个裸版本库放在 HTTP 根目录，设置一个叫做 post-update 的挂钩就可以了（见Git 钩子）。 此时，只要能访问 web 服务器上你的版本库，就可以克隆你的版本库。 下面是设置从 HTTP 访问版本库的方法： $ cd /var/www/htdocs/ $ git clone --bare /path/to/git_project gitproject.git $ cd gitproject.git $ mv hooks/post-update.sample hooks/post-update $ chmod a+x hooks/post-update ​ 这样就可以了。 Git 自带的 post-update 挂钩会默认执行合适的命令（git update-server-info），来确保通过 HTTP 的获取和克隆操作正常工作。 这条命令会在你通过 SSH 向版本库推送之后被执行；然后别人就可以通过类似下面的命令来克隆： $ git clone https://example.com/gitproject.git ​ 这里我们用了 Apache 里设置了常用的路径 /var/www/htdocs，不过你可以使用任何静态 web 服务器 —— 只需要把裸版本库放到正确的目录下就可以。 Git 的数据是以基本的静态文件形式提供的（详情见Git 内部原理）。 ​ 通常的，会在可以提供读／写的智能 HTTP 服务和简单的只读的哑 HTTP 服务之间选一个。 极少会将二者混合提供服务。 1.2.3 优点 ​ 我们将只关注智能 HTTP 协议的优点。 ​ 不同的访问方式只需要一个 URL 以及服务器只在需要授权时提示输入授权信息，这两个简便性让终端用户使用 Git 变得非常简单。 相比 SSH 协议，可以使用用户名／密码授权是一个很大的优势，这样用户就不必须在使用 Git 之前先在本地生成 SSH 密钥对再把公钥上传到服务器。 对非资深的使用者，或者系统上缺少 SSH 相关程序的使用者，HTTP 协议的可用性是主要的优势。 与 SSH 协议类似，HTTP 协议也非常快和高效。 ​ 你也可以在 HTTPS 协议上提供只读版本库的服务，如此你在传输数据的时候就可以加密数据；或者，你甚至可以让客户端使用指定的 SSL 证书。 ​ 另一个好处是 HTTP/S 协议被广泛使用，一般的企业防火墙都会允许这些端口的数据通过。 1.2.4 缺点 ​ 在一些服务器上，架设 HTTP/S 协议的服务端会比 SSH 协议的棘手一些。 除了这一点，用其他协议提供 Git 服务与 “智能” HTTP 协议相比就几乎没有优势了。 ​ 如果你在 HTTP 上使用需授权的推送，管理凭证会比使用 SSH 密钥认证麻烦一些。 然而，你可以选择使用凭证存储工具，比如 OSX 的 Keychain 或者 Windows 的凭证管理器。 参考凭证存储如何安全地保存 HTTP 密码。 1.3 SSH 协议 ​ 架设 Git 服务器时常用 SSH 协议作为传输协议。 因为大多数环境下服务器已经支持通过 SSH 访问 —— 即使没有也很容易架设。 SSH 协议也是一个验证授权的网络协议；并且，因为其普遍性，架设和使用都很容易。 通过 SSH 协议克隆版本库，你可以指定一个 ssh:// 的 URL： $ git clone ssh://user@server/project.git ​ 或者使用一个简短的 scp 式的写法： $ git clone user@server:project.git 你也可以不指定用户，Git 会使用当前登录的用户名。 1.3.1 优势 ​ 用 SSH 协议的优势有很多。 首先，SSH 架设相对简单 —— SSH 守护进程很常见，多数管理员都有使用经验，并且多数操作系统都包含了它及相关的管理工具。 其次，通过 SSH 访问是安全的 —— 所有传输数据都要经过授权和加密。 最后，与 HTTP/S 协议、Git 协议及本地协议一样，SSH 协议很高效，在传输前也会尽量压缩数据。 1.3.2 缺点 ​ SSH 协议的缺点在于你不能通过他实现匿名访问。 即便只要读取数据，使用者也要有通过 SSH 访问你的主机的权限，这使得 SSH 协议不利于开源的项目。 如果你只在公司网络使用，SSH 协议可能是你唯一要用到的协议。 如果你要同时提供匿名只读访问和 SSH 协议，那么你除了为自己推送架设 SSH 服务以外，还得架设一个可以让其他人访问的服务。 1.4 Git 协议 ​ 接下来是 Git 协议。 这是包含在 Git 里的一个特殊的守护进程；它监听在一个特定的端口（9418），类似于 SSH 服务，但是访问无需任何授权。 要让版本库支持 Git 协议，需要先创建一个 git-daemon-export-ok 文件 —— 它是 Git 协议守护进程为这个版本库提供服务的必要条件 —— 但是除此之外没有任何安全措施。 要么谁都可以克隆这个版本库，要么谁也不能。 这意味着，通常不能通过 Git 协议推送。 由于没有授权机制，一旦你开放推送操作，意味着网络上知道这个项目 URL 的人都可以向项目推送数据。 不用说，极少会有人这么做。 1.4.1 优点 ​ 目前，Git 协议是 Git 使用的网络传输协议里最快的。 如果你的项目有很大的访问量，或者你的项目很庞大并且不需要为写进行用户授权，架设 Git 守护进程来提供服务是不错的选择。 它使用与 SSH 相同的数据传输机制，但是省去了加密和授权的开销。 1.4.2 缺点 ​ Git 协议缺点是缺乏授权机制。 把 Git 协议作为访问项目版本库的唯一手段是不可取的。 一般的做法里，会同时提供 SSH 或者 HTTPS 协议的访问服务，只让少数几个开发者有推送（写）权限，其他人通过 git:// 访问只有读权限。 Git 协议也许也是最难架设的。 它要求有自己的守护进程，这就要配置 xinetd 或者其他的程序，这些工作并不简单。 它还要求防火墙开放 9418 端口，但是企业防火墙一般不会开放这个非标准端口。 而大型的企业防火墙通常会封锁这个端口。 2. 在服务器上搭建 Git ​ 现在我们将讨论如何在你自己的服务器上搭建 Git 服务来运行这些协议。 Notes：这里我们将要演示在 Linux 服务器上进行一次基本且简化的安装所需的命令与步骤，当然在 Mac 或 Windows 服务器上同样可以运行这些服务。 事实上，在你的计算机基础架构中建立一个生产环境服务器，将不可避免的使用到不同的安全措施与操作系统工具。但是，希望你能从本节中获得一些必要的知识。 ​ 在开始架设 Git 服务器前，需要把现有仓库导出为裸仓库——即一个不包含当前工作目录的仓库。 这通常是很简单的。 为了通过克隆你的仓库来创建一个新的裸仓库，你需要在克隆命令后加上 --bare 选项。 按照惯例，裸仓库目录名以 .git 结尾，就像这样： $ git clone --bare my_project my_project.git Cloning into bare repository 'my_project.git'... done. ​ 现在，你的 my_project.git 目录中应该有 Git 目录的副本了。 ​ 整体上效果大致相当于 $ cp -Rf my_project/.git my_project.git ​ 虽然在配置文件中有若干不同，但是对于你的目的来说，这两种方式都是一样的。 它只取出 Git 仓库自身，不要工作目录，然后特别为它单独创建一个目录。 2.1 把裸仓库放到服务器上 ​ 既然你有了裸仓库的副本，剩下要做的就是把裸仓库放到服务器上并设置你的协议。 假设一个域名为 git.example.com 的服务器已经架设好，并可以通过 SSH 连接，你想把所有的 Git 仓库放在 /opt/git 目录下。 假设服务器上存在 /opt/git/ 目录，你可以通过以下命令复制你的裸仓库来创建一个新仓库： $ scp -r my_project.git user@git.example.com:/opt/git ​ 此时，其他通过 SSH 连接这台服务器并对 /opt/git 目录拥有可读权限的使用者，通过运行以下命令就可以克隆你的仓库。 $ git clone user@git.example.com:/opt/git/my_project.git ​ 如果一个用户，通过使用 SSH 连接到一个服务器，并且其对 /opt/git/my_project.git 目录拥有可写权限，那么他将自动拥有推送权限。 ​ 如果到该项目目录中运行 git init 命令，并加上 --shared 选项，那么 Git 会自动修改该仓库目录的组权限为可写。 $ ssh user@git.example.com $ cd /opt/git/my_project.git $ git init --bare --shared ​ 由此可见，根据现有的 Git 仓库创建一个裸仓库，然后把它放上你和协作者都有 SSH 访问权的服务器是多么容易。 现在你们已经准备好在同一项目上展开合作了。 ​ 值得注意的是，这的确是架设一个几个人拥有连接权的 Git 服务的全部——只要在服务器上加入可以用 SSH 登录的帐号，然后把裸仓库放在大家都有读写权限的地方。 你已经准备好了一切，无需更多。 ​ 下面的几节中，你会了解如何扩展到更复杂的设定。 这些内容包含如何避免为每一个用户建立一个账户，给仓库添加公共读取权限，架设网页界面等等。 然而，请记住这一点，如果只是和几个人在一个私有项目上合作的话，仅仅 是一个 SSH 服务器和裸仓库就足够了。 2.2 小型安装 ​ 如果设备较少或者你只想在小型开发团队里尝试 Git ，那么一切都很简单。 架设 Git 服务最复杂的地方在于用户管理。 如果需要仓库对特定的用户可读，而给另一部分用户读写权限，那么访问和许可安排就会比较困难。 2.2.1 SSH 连接 ​ 如果你有一台所有开发者都可以用 SSH 连接的服务器，架设你的第一个仓库就十分简单了，因为你几乎什么都不用做（正如我们上一节所说的）。 如果你想在你的仓库上设置更复杂的访问控制权限，只要使用服务器操作系统的普通的文件系统权限就行了。 ​ 如果需要团队里的每个人都对仓库有写权限，又不能给每个人在服务器上建立账户，那么提供 SSH 连接就是唯一的选择了。 我们假设用来共享仓库的服务器已经安装了 SSH 服务，而且你通过它访问服务器。 ​ 有几个方法可以使你给团队每个成员提供访问权。 第一个就是给团队里的每个人创建账号，这种方法很直接但也很麻烦。 或许你不会想要为每个人运行一次 adduser 并且设置临时密码。 ​ 第二个办法是在主机上建立一个 git 账户，让每个需要写权限的人发送一个 SSH 公钥，然后将其加入 git 账户的 ~/.ssh/authorized_keys 文件。 这样一来，所有人都将通过 git 账户访问主机。 这一点也不会影响提交的数据——访问主机用的身份不会影响提交对象的提交者信息。 ​ 另一个办法是让 SSH 服务器通过某个 LDAP 服务，或者其他已经设定好的集中授权机制，来进行授权。 只要每个用户可以获得主机的 shell 访问权限，任何 SSH 授权机制你都可视为是有效的。 3. 生成 SSH 公钥 ​ 如前所述，许多 Git 服务器都使用 SSH 公钥进行认证。 为了向 Git 服务器提供 SSH 公钥，如果某系统用户尚未拥有密钥，必须事先为其生成一份。 这个过程在所有操作系统上都是相似的。 首先，你需要确认自己是否已经拥有密钥。 默认情况下，用户的 SSH 密钥存储在其 ~/.ssh 目录下。 进入该目录并列出其中内容，你便可以快速确认自己是否已拥有密钥： $ cd ~/.ssh $ ls authorized_keys2 id_dsa known_hosts config id_dsa.pub ​ 我们需要寻找一对以 id_dsa 或 id_rsa 命名的文件，其中一个带有 .pub 扩展名。 .pub 文件是你的公钥，另一个则是私钥。 如果找不到这样的文件（或者根本没有 .ssh 目录），你可以通过运行 ssh-keygen 程序来创建它们。在 Linux/Mac 系统中，ssh-keygen 随 SSH 软件包提供；在 Windows 上，该程序包含于 MSysGit 软件包中。 $ ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (/home/schacon/.ssh/id_rsa): Created directory '/home/schacon/.ssh'. Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/schacon/.ssh/id_rsa. Your public key has been saved in /home/schacon/.ssh/id_rsa.pub. The key fingerprint is: d0:82:24:8e:d7:f1:bb:9b:33:53:96:93:49:da:9b:e3 schacon@mylaptop.local ​ 首先 ssh-keygen 会确认密钥的存储位置（默认是 .ssh/id_rsa），然后它会要求你输入两次密钥口令。如果你不想在使用密钥时输入口令，将其留空即可。 ​ 现在，进行了上述操作的用户需要将各自的公钥发送给任意一个 Git 服务器管理员（假设服务器正在使用基于公钥的 SSH 验证设置）。 他们所要做的就是复制各自的 .pub 文件内容，并将其通过邮件发送。 公钥看起来是这样的： $ cat ~/.ssh/id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU GPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3 Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA t3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En mZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx NrRFi9wrf+M7Q== schacon@mylaptop.local ​ 关于在多种操作系统中生成 SSH 密钥的更深入教程，请参阅 GitHub 的 SSH 密钥指南 https://help.github.com/articles/generating-ssh-keys。 4. 配置服务器 ​ 我们来看看如何配置服务器端的 SSH 访问。 本例中，我们将使用 authorized_keys 方法来对用户进行认证。 同时我们假设你使用的操作系统是标准的 Linux 发行版，比如 Ubuntu。 首先，创建一个操作系统用户 git，并为其建立一个 .ssh 目录。 $ sudo adduser git $ su git $ cd $ mkdir .ssh && chmod 700 .ssh $ touch .ssh/authorized_keys && chmod 600 .ssh/authorized_keys ​ 接着，我们需要为系统用户 git 的 authorized_keys 文件添加一些开发者 SSH 公钥。 假设我们已经获得了若干受信任的公钥，并将它们保存在临时文件中。 与前文类似，这些公钥看起来是这样的： $ cat /tmp/id_rsa.john.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4L ojG6rs6hPB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4k Yjh6541NYsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9Ez Sdfd8AcCIicTDWbqLAcU4UpkaX8KyGlLwsNuuGztobF8m72ALC/nLF6JLtPofwFBlgc+myiv O7TCUSBdLQlgMVOFq1I2uPWQOkOWQAHukEOmfjy2jctxSDBQ220ymjaNsHT4kgtZg2AYYgPq dAv8JggJICUvax2T9va5 gsg-keypair ​ 将这些公钥加入系统用户 git 的 .ssh 目录下 authorized_keys 文件的末尾： $ cat /tmp/id_rsa.john.pub >> ~/.ssh/authorized_keys $ cat /tmp/id_rsa.josie.pub >> ~/.ssh/authorized_keys $ cat /tmp/id_rsa.jessica.pub >> ~/.ssh/authorized_keys ​ 现在我们来为开发者新建一个空仓库。可以借助带 --bare 选项的 git init 命令来做到这一点，该命令在初始化仓库时不会创建工作目录： $ cd /opt/git $ mkdir project.git $ cd project.git $ git init --bare Initialized empty Git repository in /opt/git/project.git/ ​ 接着，John、Josie 或者 Jessica 中的任意一人可以将他们项目的最初版本推送到这个仓库中，他只需将此仓库设置为项目的远程仓库并向其推送分支。 请注意，每添加一个新项目，都需要有人登录服务器取得 shell，并创建一个裸仓库。 我们假定这个设置了 git 用户和 Git 仓库的服务器使用 gitserver 作为主机名。 同时，假设该服务器运行在内网，并且你已在 DNS 配置中将 gitserver 指向此服务器。那么我们可以运行如下命令（假定 myproject 是已有项目且其中已包含文件）： # on John's computer $ cd myproject $ git init $ git add . $ git commit -m 'initial commit' $ git remote add origin git@gitserver:/opt/git/project.git $ git push origin master ​ 此时，其他开发者可以克隆此仓库，并推回各自的改动，步骤很简单： $ git clone git@gitserver:/opt/git/project.git $ cd project $ vim README $ git commit -am 'fix for the README file' $ git push origin master ​ 通过这种方法，你可以快速搭建一个具有读写权限、面向多个开发者的 Git 服务器。 ​ 需要注意的是，目前所有（获得授权的）开发者用户都能以系统用户 git 的身份登录服务器从而获得一个普通 shell。 如果你想对此加以限制，则需要修改 passwd 文件中（git 用户所对应）的 shell 值。 ​ 借助一个名为 git-shell 的受限 shell 工具，你可以方便地将用户 git 的活动限制在与 Git 相关的范围内。该工具随 Git 软件包一同提供。 如果将 git-shell 设置为用户 git 的登录 shell（login shell），那么用户 git 便不能获得此服务器的普通 shell 访问权限。 若要使用 git-shell，需要用它替换掉 bash 或 csh，使其成为系统用户的登录 shell。 为进行上述操作，首先你必须确保 git-shell 已存在于 /etc/shells 文件中： $ cat /etc/shells # see if `git-shell` is already in there. If not... $ which git-shell # make sure git-shell is installed on your system. $ sudo vim /etc/shells # and add the path to git-shell from last command ​ 现在你可以使用 chsh 命令修改任一系统用户的 shell： $ sudo chsh git # and enter the path to git-shell, usually: /usr/bin/git-shell ​ 这样，用户 git 就只能利用 SSH 连接对 Git 仓库进行推送和拉取操作，而不能登录机器并取得普通 shell。 如果试图登录，你会发现尝试被拒绝，像这样： $ ssh git@gitserver fatal: Interactive git shell is not enabled. hint: ~/git-shell-commands should exist and have read and execute access. Connection to gitserver closed. ​ 现在，网络相关的 Git 命令依然能够正常工作，但是开发者用户已经无法得到一个普通 shell 了。 正如输出信息所提示的，你也可以在 git 用户的家目录下建立一个目录，来对 git-shell 命令进行一定程度的自定义。 比如，你可以限制掉某些本应被服务器接受的 Git 命令，或者对刚才的 SSH 拒绝登录信息进行自定义，这样，当有开发者用户以类似方式尝试登录时，便会看到你的信息。 要了解更多有关自定义 shell 的信息，请运行 git help shell。 5. Git 守护进程 ​ 接下来我们将通过 “Git” 协议建立一个基于守护进程的仓库。 对于快速且无需授权的 Git 数据访问，这是一个理想之选。 请注意，因为其不包含授权服务，任何通过该协议管理的内容将在其网络上公开。 ​ 如果运行在防火墙之外的服务器上，它应该只对那些公开的只读项目服务。 如果运行在防火墙之内的服务器上，它可用于支撑大量参与人员或自动系统（用于持续集成或编译的主机）只读访问的项目，这样可以省去逐一配置 SSH 公钥的麻烦。 ​ 无论何时，该 Git 协议都是相对容易设定的。 通常，你只需要以守护进程的形式运行该命令： git daemon --reuseaddr --base-path=/opt/git/ /opt/git/ ​ --reuseaddr 允许服务器在无需等待旧连接超时的情况下重启，--base-path 选项允许用户在未完全指定路径的条件下克隆项目，结尾的路径将告诉 Git 守护进程从何处寻找仓库来导出。 如果有防火墙正在运行，你需要开放端口 9418 的通信权限。 ​ 你可以通过许多方式将该进程以守护进程的方式运行，这主要取决于你所使用的操作系统。 在一台 Ubuntu 机器上，你可以使用一份 Upstart 脚本。 因此，找到如下文件： /etc/event.d/local-git-daemon ​ 并添加下列脚本内容： start on startup stop on shutdown exec /usr/bin/git daemon \\ --user=git --group=git \\ --reuseaddr \\ --base-path=/opt/git/ \\ /opt/git/ respawn ​ 出于安全考虑，强烈建议使用一个对仓库拥有只读权限的用户身份来运行该守护进程——你可以创建一个新用户 git-ro 并且以该用户身份来运行守护进程。 为简便起见，我们将像 git-shell 一样，同样使用 git 用户来运行它。 ​ 当你重启机器时，你的 Git 守护进程将会自动启动，并且如果进程被意外结束它会自动重新运行。 为了在不重启的情况下直接运行，你可以运行以下命令： initctl start local-git-daemon ​ 在其他系统中，你可以使用 sysvinit 系统中的 xinetd 脚本，或者另外的方式来实现——只要你能够将其命令守护进程化并实现监控。 ​ 接下来，你需要告诉 Git 哪些仓库允许基于服务器的无授权访问。 你可以在每个仓库下创建一个名为 git-daemon-export-ok 的文件来实现。 $ cd /path/to/project.git $ touch git-daemon-export-ok ​ 该文件将允许 Git 提供无需授权的项目访问服务。 6. Smart HTTP ​ 我们一般通过 SSH 进行授权访问，通过 git:// 进行无授权访问，但是还有一种协议可以同时实现以上两种方式的访问。 设置 Smart HTTP 一般只需要在服务器上启用一个 Git 自带的名为 git-http-backend 的 CGI 脚本。 该 CGI 脚本将会读取由 git fetch 或 git push 命令向 HTTP URL 发送的请求路径和头部信息，来判断该客户端是否支持 HTTP 通信（不低于 1.6.6 版本的客户端支持此特性）。 如果 CGI 发现该客户端支持智能（Smart）模式，它将会以智能模式与它进行通信，否则它将会回落到哑（Dumb）模式下（因此它可以对某些老的客户端实现向下兼容）。 ​ 在完成以上简单的安装步骤后， 我们将用 Apache 来作为 CGI 服务器。 如果你没有安装 Apache，你可以在 Linux 环境下执行如下或类似的命令来安装： $ sudo apt-get install apache2 apache2-utils $ a2enmod cgi alias env ​ 该操作将会启用 mod_cgi， mod_alias， 和 mod_env 等 Apache 模块， 这些模块都是使该功能正常工作所必须的。 ​ 接下来我们要向 Apache 配置文件添加一些内容，来让 git-http-backend 作为 Web 服务器对 /git 路径请求的处理器。 SetEnv GIT_PROJECT_ROOT /opt/git SetEnv GIT_HTTP_EXPORT_ALL ScriptAlias /git/ /usr/lib/git-core/git-http-backend/ ​ 如果留空 GIT_HTTP_EXPORT_ALL 这个环境变量，Git 将只对无授权客户端提供带 git-daemon-export-ok 文件的版本库，就像 Git 守护进程一样。 ​ 接着你需要让 Apache 接受通过该路径的请求，添加如下的内容至 Apache 配置文件： Options ExecCGI Indexes Order allow,deny Allow from all Require all granted ​ 最后，如果想实现写操作授权验证，使用如下的未授权屏蔽配置即可： AuthType Basic AuthName \"Git Access\" AuthUserFile /opt/git/.htpasswd Require valid-user ​ 这需要你创建一个包含所有合法用户密码的 .htaccess 文件。 以下是一个添加 “schacon” 用户到此文件的例子： $ htdigest -c /opt/git/.htpasswd \"Git Access\" schacon ​ 你可以通过许多方式添加 Apache 授权用户，选择使用其中一种方式即可。 以上仅仅只是我们可以找到的最简单的一个例子。 如果愿意的话，你也可以通过 SSL 运行它，以保证所有数据是在加密状态下进行传输的。 ​ 我们不想深入去讲解 Apache 配置文件，因为你可能会使用不同的 Web 服务器，或者可能有不同的授权需求。 它的主要原理是使用一个 Git 附带的，名为 git-http-backend 的 CGI。它被引用来处理协商通过 HTTP 发送和接收的数据。 它本身并不包含任何授权功能，但是授权功能可以在 Web 服务器层引用它时被轻松实现。 你可以在任何所有可以处理 CGI 的 Web 服务器上办到这点，所以随便挑一个你最熟悉的 Web 服务器试手吧。 Notes：欲了解更多的有关配置 Apache 授权访问的信息，请通过以下链接浏览 Apache 文档： http://httpd.apache.org/docs/current/howto/auth.html 6. GitWeb ​ 如果你对项目有读写权限或只读权限，你可能需要建立起一个基于网页的简易查看器。 Git 提供了一个叫做 GitWeb 的 CGI 脚本来做这项工作。 ​ 如果你想要查看 GitWeb 如何展示你的项目，并且在服务器上安装了轻量级网络服务器比如 lighttpd 或 webrick， Git 提供了一个命令来让你启动一个临时的服务器。 在 Linux 系统的电脑上，lighttpd 通常已经安装了，所以你只需要在项目目录里执行 git instaweb 命令即可。 如果你使用 Mac 系统， Mac OS X Leopard 系统已经预安装了 Ruby，所以 webrick 或许是你最好的选择。 如果不想使用 lighttpd 启动 instaweb 命令，你需要在执行时加入 --httpd 参数。 $ git instaweb --httpd=webrick [2009-02-21 10:02:21] INFO WEBrick 1.3.1 [2009-02-21 10:02:21] INFO ruby 1.8.6 (2008-03-03) [universal-darwin9.0] ​ 这个命令启动了一个监听 1234 端口的 HTTP 服务器，并且自动打开了浏览器。 这对你来说十分方便。 当你已经完成了工作并想关闭这个服务器，你可以执行同一个命令，并加上 --stop 选项： $ git instaweb --httpd=webrick --stop ​ 如果你现在想为你的团队或你托管的开源项目持续的运行这个页面，你需要通过普通的 Web 服务器来设置 CGI 脚本。 一些 Linux 发行版的软件库有 gitweb 包，可以通过 apt 或 yum 来安装，你可以先试试。 接下来我们来快速的了解一下如何手动安装 GitWeb。 首先，你需要获得 Git 的源代码，它包含了 GitWeb ，并可以生成自定义的 CGI 脚本： $ git clone git://git.kernel.org/pub/scm/git/git.git $ cd git/ $ make GITWEB_PROJECTROOT=\"/opt/git\" prefix=/usr gitweb SUBDIR gitweb SUBDIR ../ make[2]: `GIT-VERSION-FILE' is up to date. GEN gitweb.cgi GEN static/gitweb.js $ sudo cp -Rf gitweb /var/www/ ​ 需要注意的是，你需要在命令中指定 GITWEB_PROJECTROOT 变量来让程序知道你的 Git 版本库的位置。 现在，你需要在 Apache 中使用这个 CGI 脚本，你需要为此添加一个虚拟主机： ServerName gitserver DocumentRoot /var/www/gitweb Options ExecCGI +FollowSymLinks +SymLinksIfOwnerMatch AllowOverride All order allow,deny Allow from all AddHandler cgi-script cgi DirectoryIndex gitweb.cgi ​ 再次提醒，GitWeb 可以通过任何一个支持 CGI 或 Perl 的网络服务器架设；如果你需要的话，架设起来应该不会很困难。 现在，你可以访问 http://gitserver/ 在线查看你的版本库。 7. GitLab ​ 虽然 GitWeb 相当简单。 但如果你正在寻找一个更现代，功能更全的 Git 服务器，这里有几个开源的解决方案可供你选择安装。 因为 GitLab 是其中最出名的一个，我们将它作为示例并讨论它的安装和使用。 这比 GitWeb 要复杂的多并且需要更多的维护，但它的确是一个功能更全的选择。 7.1 安装 ​ GitLab 是一个数据库支持的 web 应用，所以相比于其他 git 服务器，它的安装过程涉及到更多的东西。 幸运的是，这个过程有非常详细的文档说明和支持。 ​ 这里有一些可参考的方法帮你安装 GitLab 。 为了更快速的启动和运行，你可以下载虚拟机镜像或者在 https://bitnami.com/stack/gitlab 上获取一键安装包，同时调整配置使之符合你特定的环境。 Bitnami 的一个优点在于它的登录界面（通过 alt-&rarr 键进入；）；它会告诉你安装好的 GitLab 的 IP 地址以及默认的用户名和密码。 ​ 无论如何，跟着 GitLab 社区版的 readme 文件一步步来，你可以在这里找到它 https://gitlab.com/gitlab-org/gitlab-ce/tree/master 。 在这里你将会在主菜单中找到安装 GitLab 的帮助，一个可以在 Digital Ocean 上运行的虚拟机，以及 RPM 和 DEB 包（都是测试版）。 这里还有 “非官方” 的引导让 GitLab 运行在非标准的操作系统和数据库上，一个全手动的安装脚本，以及许多其他的话题。 7.2 管理 ​ GitLab 的管理界面是通过网络进入的。 将你的浏览器转到已经安装 GitLab 的 主机名或 IP 地址，然后以管理员身份登录即可。 默认的用户名是 admin@local.host，默认的密码是 5iveL!fe（你会得到类似 请登录后尽快更换密码 的提示）。 登录后，点击主栏上方靠右位置的 “Admin area” 图标进行管理。 7.2.1 使用者 ​ GitLab 上的用户指的是对应协作者的帐号。 用户帐号没有很多复杂的地方，主要是包含登录数据的用户信息集合。 每一个用户账号都有一个 命名空间 ，即该用户项目的逻辑集合。 如果一个叫 jane 的用户拥有一个名称是 project 的项目，那么这个项目的 url 会是 http://server/jane/project 。 ​ 移除一个用户有两种方法。 “屏蔽（Blocking）” 一个用户阻止他登录 GitLab 实例，但是该用户命名空间下的所有数据仍然会被保存，并且仍可以通过该用户提交对应的登录邮箱链接回他的个人信息页。 而另一方面，“销毁（Destroying）” 一个用户，会彻底的将他从数据库和文件系统中移除。 他命名空间下的所有项目和数据都会被删除，拥有的任何组也会被移除。 这显然是一个更永久且更具破坏力的行为，所以很少用到这种方法。 7.2.2 组 一个 GitLab 的组是一些项目的集合，连同关于多少用户可以访问这些项目的数据。 每一个组都有一个项目命名空间（与用户一样），所以如果一个叫 training 的组拥有一个名称是 materials 的项目，那么这个项目的 url 会是 http://server/training/materials 。 ​ 每一个组都有许多用户与之关联，每一个用户对组中的项目以及组本身的权限都有级别区分。 权限的范围从 “访客”（仅能提问题和讨论） 到 “拥有者”（完全控制组、成员和项目）。 权限的种类太多以至于难以在这里一一列举，不过在 GitLab 的管理界面上有帮助链接。 7.2.3 项目 ​ 一个 GitLab 的项目相当于 git 的版本库。 每一个项目都属于一个用户或者一个组的单个命名空间。 如果这个项目属于一个用户，那么这个拥有者对所有可以获取这个项目的人拥有直接管理权；如果这个项目属于一个组，那么该组中用户级别的权限也会起作用。 ​ 每一个项目都有一个可视级别，控制着谁可以看到这个项目页面和仓库。 如果一个项目是 私有 的，这个项目的拥有者必须明确授权从而使特定的用户可以访问。 一个 内部 的项目可以被所有登录的人看到，而一个 公开 的项目则是对所有人可见的。 注意，这种控制既包括 git “fetch” 的使用也包括对项目 web 用户界面的访问。 7.2.4 钩子 ​ GitLab 在项目和系统级别上都支持钩子程序。 对任意级别，当有相关事件发生时，GitLab 的服务器会执行一个包含描述性 JSON 数据的 HTTP 请求。 这是自动化连接你的 git 版本库和 GitLab 实例到其他的开发工具，比如 CI 服务器，聊天室，或者部署工具的一个极好方法。 7.3 基本用途 ​ 你想要在 GitLab 做的第一件事就是建立一个新项目。 这通过点击工具栏上的 “+” 图标完成。 你会被要求填写项目名称，也就是这个项目所属的命名空间，以及它的可视层级。 绝大多数的设定并不是永久的，可以通过设置界面重新调整。 点击 “Create Project”，你就完成了。 ​ 项目存在后，你可能会想将它与本地的 Git 版本库连接。 每一个项目都可以通过 HTTPS 或者 SSH 连接，任意两者都可以被用来配置远程 Git。 在项目主页的顶栏可以看到这个项目的 URLs。 对于一个存在的本地版本库，这个命令将会向主机位置添加一个叫 gitlab 的远程仓库： $ git remote add gitlab https://server/namespace/project.git ​ 如果你的本地没有版本库的副本，你可以这样做： $ git clone https://server/namespace/project.git ​ web 用户界面提供了几个有用的获取版本库信息的网页。 每一个项目的主页都显示了最近的活动，并且通过顶部的链接可以使你浏览项目文件以及提交日志。 7.4 一起工作 ​ 在一个 GitLab 项目上一起工作的最简单方法就是赋予协作者对 git 版本库的直接 push 权限。 你可以通过项目设定的 “Members（成员）” 部分向一个项目添加写作者，并且将这个新的协作者与一个访问级别关联（不同的访问级别在组中已简单讨论）。 通过赋予一个协作者 “Developer（开发者）” 或者更高的访问级别，这个用户就可以毫无约束地直接向版本库或者向分支进行提交。 ​ 另外一个让合作更解耦的方法就是使用合并请求。 它的优点在于让任何能够看到这个项目的协作者在被管控的情况下对这个项目作出贡献。 可以直接访问的协作者能够简单的创建一个分支，向这个分支进行提交，也可以开启一个向 master 或者其他任何一个分支的合并请求。 对版本库没有推送权限的协作者则可以 “fork” 这个版本库（即创建属于自己的这个库的副本），向 那个 副本进行提交，然后从那个副本开启一个到主项目的合并请求。 这个模型使得项目拥有者完全控制着向版本库的提交，以及什么时候允许加入陌生协作者的贡献。 ​ 在 GitLab 中合并请求和问题是一个长久讨论的主要部分。 每一个合并请求都允许在提出改变的行进行讨论（它支持一个轻量级的代码审查），也允许对一个总体性话题进行讨论。 两者都可以被分配给用户，或者组织到 milestones（里程碑） 界面。 ​ 这个部分主要聚焦于在 GitLab 中与 Git 相关的特性，但是 GitLab 作为一个成熟的系统，它提供了许多其他产品来帮助你协同工作，例如项目 wiki 与系统维护工具。 GitLab 的一个优点在于，服务器设置和运行以后，你将很少需要调整配置文件或通过 SSH 连接服务器；绝大多数的管理和日常使用都可以在浏览器界面中完成。 8. 第三方托管的选择 ​ 如果不想设立自己的 Git 服务器，你可以选择将你的 Git 项目托管到一个外部专业的托管网站。 这带来了一些好处：一个托管网站可以用来快速建立并开始项目，且无需进行服务器维护和监控工作。 即使你在内部设立并且运行了自己的服务器，你仍然可以把你的开源代码托管在公共托管网站——这通常更有助于开源社区来发现和帮助你。 ​ 现在，有非常多的托管供你选择，每个选择都有不同的优缺点。 欲查看最新列表，请浏览 Git 维基的 GitHosting 页面 https://git.wiki.kernel.org/index.php/GitHosting ​ 我们会在GitHub详细讲解 GitHub，作为目前最大的 Git 托管平台，你很可能需要与托管在 GitHub 上的项目进行交互，而且你也很可能并不想去设立你自己的 Git 服务器。 9. 总结 ​ 你有多种远程存取 Git 仓库的选择便于与其他人合作或是分享你的工作。 ​ 运行你自己的服务器将有许多权限且允许你运行该服务于你自己的防火墙内，但如此通常需要耗费你大量的时间去设置与维护服务器。 如果你放置你的资料于托管服务器内，可轻易的设置与维护；无论如何，你必须能够保存你的代码在其他服务器，且某些组织不允许此作法。 这将直截了当的决定哪个作法或组合的方式较适合你或你的组织。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Git/Chapter6.html":{"url":"Git/Chapter6.html","title":"第六章：分布式Git","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 分布式工作流程 1.1 集中式工作流 1.2 集成管理者工作流 1.3 司令官与副官工作流 1.4 工作流程总结 2. 向一个项目贡献 2.1 提交准则 2.2 私有小型团队 2.3 私有管理团队 2.4 派生的公开项目 2.5 通过邮件的公开项目 2.6 总结 3. 维护项目 3.1 在特性分支中工作 3.2 应用来自邮件的补丁 3.2.1 使用 apply 命令应用补丁 3.2.2 使用 am 命令应用补丁 3.3 检出远程分支 3.4 确定引入了哪些东西 3.5 将贡献的工作整合进来 3.5.1 合并工作流 3.5.2 大项目合并工作流 3.5.3 变基与拣选工作流 3.5.4 Rerere 3.6 为发布打标签 3.7 生成一个构建号 3.8 准备一次发布 3.9 制作提交简报 4. 总结 第六章：分布式Git ​ 你现在拥有了一个远程 Git 版本库，能为所有开发者共享代码提供服务，在一个本地工作流程下，你也已经熟悉了基本 Git 命令。你现在可以学习如何利用 Git 提供的一些分布式工作流程了。 ​ 这一章中，你将会学习如何作为贡献者或整合者，在一个分布式协作的环境中使用 Git。 你会学习为一个项目成功地贡献代码，并接触一些最佳实践方式，让你和项目的维护者能轻松地完成这个过程。另外，你也会学到如何管理有很多开发者提交贡献的项目。 1. 分布式工作流程 ​ 同传统的集中式版本控制系统（CVCS）不同，Git 的分布式特性使得开发者间的协作变得更加灵活多样。 在集中式系统中，每个开发者就像是连接在集线器上的节点，彼此的工作方式大体相像。 而在 Git 中，每个开发者同时扮演着节点和集线器的角色——也就是说，每个开发者既可以将自己的代码贡献到其他的仓库中，同时也能维护自己的公开仓库，让其他人可以在其基础上工作并贡献代码。 由此，Git 的分布式协作可以为你的项目和团队衍生出种种不同的工作流程，接下来的章节会介绍几种利用了 Git 的这种灵活性的常见应用方式。 我们将讨论每种方式的优点以及可能的缺点；你可以选择使用其中的某一种，或者将它们的特性混合搭配使用。 1.1 集中式工作流 ​ 集中式系统中通常使用的是单点协作模型——集中式工作流。 一个中心集线器，或者说仓库，可以接受代码，所有人将自己的工作与之同步。 若干个开发者则作为节点——也就是中心仓库的消费者——并且与其进行同步。 ​ 这意味着如果两个开发者从中心仓库克隆代码下来，同时作了一些修改，那么只有第一个开发者可以顺利地把数据推送回共享服务器。 第二个开发者在推送修改之前，必须先将第一个人的工作合并进来，这样才不会覆盖第一个人的修改。 这和 Subversion （或任何 CVCS）中的概念一样，而且这个模式也可以很好地运用到 Git 中。 ​ 如果在公司或者团队中，你已经习惯了使用这种集中式工作流程，完全可以继续采用这种简单的模式。 只需要搭建好一个中心仓库，并给开发团队中的每个人推送数据的权限，就可以开展工作了。Git 不会让用户覆盖彼此的修改。 例如 John 和 Jessica 同时开始工作。 John 完成了他的修改并推送到服务器。 接着 Jessica 尝试提交她自己的修改，却遭到服务器拒绝。 她被告知她的修改正通过非快进式（non-fast-forward）的方式推送，只有将数据抓取下来并且合并后方能推送。 这种模式的工作流程的使用非常广泛，因为大多数人对其很熟悉也很习惯。 ​ 当然这并不局限于小团队。 利用 Git 的分支模型，通过同时在多个分支上工作的方式，即使是上百人的开发团队也可以很好地在单个项目上协作。 1.2 集成管理者工作流 ​ Git 允许多个远程仓库存在，使得这样一种工作流成为可能：每个开发者拥有自己仓库的写权限和其他所有人仓库的读权限。 这种情形下通常会有个代表“官方”项目的权威的仓库。 要为这个项目做贡献，你需要从该项目克隆出一个自己的公开仓库，然后将自己的修改推送上去。 接着你可以请求官方仓库的维护者拉取更新合并到主项目。 维护者可以将你的仓库作为远程仓库添加进来，在本地测试你的变更，将其合并入他们的分支并推送回官方仓库。 这一流程的工作方式如下所示（见集成管理者工作流）： 项目维护者推送到主仓库。 贡献者克隆此仓库，做出修改。 贡献者将数据推送到自己的公开仓库。 贡献者给维护者发送邮件，请求拉取自己的更新。 维护者在自己本地的仓库中，将贡献者的仓库加为远程仓库并合并修改。 维护者将合并后的修改推送到主仓库。 ​ 这是 GitHub 和 GitLab 等集线器式（hub-based）工具最常用的工作流程。人们可以容易地将某个项目派生成为自己的公开仓库，向这个仓库推送自己的修改，并为每个人所见。 这么做最主要的优点之一是你可以持续地工作，而主仓库的维护者可以随时拉取你的修改。 贡献者不必等待维护者处理完提交的更新——每一方都可以按照自己的节奏工作。 1.3 司令官与副官工作流 ​ 这其实是多仓库工作流程的变种。 一般拥有数百位协作开发者的超大型项目才会用到这样的工作方式，例如著名的 Linux 内核项目。 被称为副官（lieutenant）的各个集成管理者分别负责集成项目中的特定部分。 所有这些副官头上还有一位称为司令官（dictator）的总集成管理者负责统筹。 司令官维护的仓库作为参考仓库，为所有协作者提供他们需要拉取的项目代码。 整个流程看起来是这样的（见司令官与副官工作流）： 普通开发者在自己的特性分支上工作，并根据 master 分支进行变基。 这里是司令官的 master 分支。 副官将普通开发者的特性分支合并到自己的 master 分支中。 司令官将所有副官的 master 分支并入自己的 master 分支中。 司令官将集成后的 master 分支推送到参考仓库中，以便所有其他开发者以此为基础进行变基。 ​ 这种工作流程并不常用，只有当项目极为庞杂，或者需要多级别管理时，才会体现出优势。 利用这种方式，项目总负责人（即司令官）可以把大量分散的集成工作委托给不同的小组负责人分别处理，然后在不同时刻将大块的代码子集统筹起来，用于之后的整合。 1.4 工作流程总结 ​ 上面介绍了在 Git 等分布式系统中经常使用的工作流程，但是在实际的开发中，你会遇到许多可能适合你的特定工作流程的变种。 现在你应该已经清楚哪种工作流程组合可能比较适合你了，我们会给出一些如何扮演不同工作流程中主要角色的更具体的例子。 下一节我们将会学习为项目做贡献的一些常用模式。 2. 向一个项目贡献 ​ 描述如何向一个项目贡献的主要困难在于完成贡献有很多不同的方式。 因为 Git 非常灵活，人们可以通过不同的方式来一起工作，所以描述应该如何贡献并不是非常准确——每一个项目都有一点儿不同。 影响因素包括活跃贡献者的数量、选择的工作流程、提交权限与可能包含的外部贡献方法。 ​ 第一个影响因素是活跃贡献者的数量——积极地向这个项目贡献代码的用户数量以及他们的贡献频率。 在许多情况下，你可能会有两三个开发者一天提交几次，对于不活跃的项目可能更少。 对于大一些的公司或项目，开发者的数量可能会是上千，每天都有成百上千次提交。 这很重要，因为随着开发者越来越多，在确保你的代码能干净地应用或轻松地合并时会遇到更多问题。 提交的改动可能表现为过时的，也可能在你正在做改动或者等待改动被批准应用时被合并入的工作严重损坏。 如何保证代码始终是最新的，并且提交始终是有效的？ ​ 下一个影响因素是项目使用的工作流程。 它是中心化的吗，即每一个开发者都对主线代码有相同的写入权限？ 项目是否有一个检查所有补丁的维护者或整合者？ 是否所有的补丁是同行评审后批准的？ 你是否参与了那个过程？ 是否存在副官系统，你必须先将你的工作提交到上面？ ​ 下一个问题是提交权限。 是否有项目的写权限会使向项目贡献所需的流程有极大的不同。 如果没有写权限，项目会选择何种方式接受贡献的工作？ 是否甚至有一个如何贡献的规范？ 你一次贡献多少工作？ 你多久贡献一次？ ​ 所有这些问题都会影响实际如何向一个项目贡献，以及对你来说哪些工作流程更适合或者可用。 我们将会由浅入深，通过一系列用例来讲述其中的每一个方面；从这些例子应该能够建立实际中你需要的特定工作流程。 2.1 提交准则 ​ 在我们开始查看特定的用例前，这里有一个关于提交信息的快速说明。 有一个好的创建提交的准则并且坚持使用会让与 Git 工作和与其他人协作更容易。 Git 项目提供了一个文档，其中列举了关于创建提交到提交补丁的若干好的提示——可以在 Git 源代码中的 Documentation/SubmittingPatches 文件中阅读它。 ​ 首先，你不会想要把空白错误（根据 git help diff 的描述，结合下面给出的图片，空白错误是指行尾的空格、Tab 制表符，和行首空格后跟 Tab 制表符的行为）提交上去。 Git 提供了一个简单的方式来检查这点——在提交前，运行 git diff --check，它将会找到可能的空白错误并将它们为你列出来。 ​ 如果在提交前运行那个命令，可以知道提交中是否包含可能会使其他开发者恼怒的空白问题。 ​ 接下来，尝试让每一个提交成为一个逻辑上的独立变更集。 如果可以，尝试让改动可以理解——不要在整个周末编码解决五个问题，然后在周一时将它们提交为一个巨大的提交。 即使在周末期间你无法提交，在周一时使用暂存区域将你的工作最少拆分为每个问题一个提交，并且为每一个提交附带一个有用的信息。 如果其中一些改动修改了同一个文件，尝试使用 git add --patch 来部分暂存文件（在 交互式暂存 中有详细介绍）。 不管你做一个或五个提交，只要所有的改动是在同一时刻添加的，项目分支末端的快照就是独立的，使同事开发者必须审查你的改动时尽量让事情容易些。 当你之后需要时这个方法也会使拉出或还原一个变更集更容易些。 重写历史 描述了重写历史与交互式暂存文件的若干有用的 Git 技巧——在将工作发送给其他人前使用这些工具来帮助生成一个干净又易懂的历史。 ​ 最后一件要牢记的事是提交信息。 有一个创建优质提交信息的习惯会使 Git 的使用与协作容易的多。 一般情况下，信息应当以少于 50 个字符（25个汉字）的单行开始且简要地描述变更，接着是一个空白行，再接着是一个更详细的解释。 Git 项目要求一个更详细的解释，包括做改动的动机和它的实现与之前行为的对比——这是一个值得遵循的好规则。 在这些信息中使用现在时态祈使语气也是一个好想法。 换句话说，使用命令。 使用 “Add tests for” 而不是 “I added tests for” 或 “Adding tests for”。 这里是一份最初由 Tim Pope 写的模板： 修改的摘要（50 个字符或更少） 如果必要的话，加入更详细的解释文字。在 大概 72 个字符的时候换行。在某些情形下， 第一行被当作一封电子邮件的标题，剩下的 文本作为正文。分隔摘要与正文的空行是 必须的（除非你完全省略正文）；如果你将 两者混在一起，那么类似变基等工具无法 正常工作。 空行接着更进一步的段落。 - 句号也是可以的。 - 项目符号可以使用典型的连字符或星号 前面一个空格，之间用空行隔开， 但是可以依据不同的惯例有所不同。 ​ 如果你所有的提交信息看起来都像这样，对你与跟你工作在一起的其他开发者来说事情会变得非常容易。 Git 项目有一个良好格式化的提交信息——尝试在那儿运行 git log --no-merges 来看看漂亮的格式化的项目提交历史像什么样。 在接下来的例子中，以及贯穿本书大部分，出于简洁性的原因本书不会有像这样漂亮格式的信息；相反，我们使用 -m 选项的 git commit。 照我们说的做，而不是照我们做的做。 2.2 私有小型团队 ​ 你可能会遇到的最简单的配置是有一两个其他开发者的私有项目。 “私有” 在这个上下文中，意味着闭源——不可以从外面的世界中访问到。 你和其他的开发者都有仓库的推送权限。 ​ 在这个环境下，可以采用一个类似使用 Subversion 或其他集中式的系统时会使用的工作流程。 依然可以得到像离线提交、非常容易地新建分支与合并分支等高级功能，但是工作流程可以是很简单的；主要的区别是合并发生在客户端这边而不是在提交时发生在服务器那边。 让我们看看当两个开发者在一个共享仓库中一起工作时会是什么样子。 第一个开发者，John，克隆了仓库，做了改动，然后本地提交。 （为了缩短这些例子长度，协议信息已被替换为 ...。） # John's Machine $ git clone john@githost:simplegit.git Initialized empty Git repository in /home/john/simplegit/.git/ ... $ cd simplegit/ $ vim lib/simplegit.rb $ git commit -am 'removed invalid default value' [master 738ee87] removed invalid default value 1 files changed, 1 insertions(+), 1 deletions(-) ​ 第二个开发者，Jessica，做了同样的事情——克隆仓库并提交了一个改动： # Jessica's Machine $ git clone jessica@githost:simplegit.git Initialized empty Git repository in /home/jessica/simplegit/.git/ ... $ cd simplegit/ $ vim TODO $ git commit -am 'add reset task' [master fbff5bc] add reset task 1 files changed, 1 insertions(+), 0 deletions(-) ​ 现在，Jessica 把她的工作推送到服务器上： # Jessica's Machine $ git push origin master ... To jessica@githost:simplegit.git 1edee6b..fbff5bc master -> master ​ John 也尝试推送他的改动： # John's Machine $ git push origin master To john@githost:simplegit.git ! [rejected] master -> master (non-fast forward) error: failed to push some refs to 'john@githost:simplegit.git' ​ 不允许 John 推送是因为在同一时间 Jessica 已经推送了。 如果之前习惯于用 Subversion 那么理解这点特别重要，因为你会注意到两个开发者并没有编辑同一个文件。 尽管 Subversion 会对编辑的不同文件在服务器上自动进行一次合并，但 Git 要求你在本地合并提交。 John 必须抓取 Jessica 的改动并合并它们，才能被允许推送。 $ git fetch origin ... From john@githost:simplegit + 049d078...fbff5bc master -> origin/master ​ 在这个时候，John 的本地仓库看起来像这样： ​ John 有一个引用指向 Jessica 推送上去的改动，但是他必须将它们合并入自己的工作中之后才能被允许推送。 $ git merge origin/master Merge made by recursive. TODO | 1 + 1 files changed, 1 insertions(+), 0 deletions(-) ​ 合并进行地很顺利—— John 的提交历史现在看起来像这样： ​ 现在，John 可以测试代码，确保它依然正常工作，然后他可以把合并的新工作推送到服务器上： $ git push origin master ... To john@githost:simplegit.git fbff5bc..72bbc59 master -> master ​ 最终，John 的提交历史看起来像这样： ​ 在此期间，Jessica 在一个特性分支上工作。 她创建了一个称作 issue54 的特性分支并且在那个分支上做了三次提交。 她还没有抓取 John 的改动，所以她的提交历史看起来像这样： ​ Jessica 想要与 John 同步，所以她进行了抓取操作： # Jessica's Machine $ git fetch origin ... From jessica@githost:simplegit fbff5bc..72bbc59 master -> origin/master ​ 那会同时拉取 John 推送的工作。 Jessica 的历史现在看起来像这样： ​ Jessica 认为她的特性分支已经准备好了，但是她想要知道必须合并什么进入她的工作才能推送。 她运行 git log 来找出： $ git log --no-merges issue54..origin/master commit 738ee872852dfaa9d6634e0dea7a324040193016 Author: John Smith Date: Fri May 29 16:01:27 2009 -0700 removed invalid default value ​ issue54..origin/master 语法是一个日志过滤器，要求 Git 只显示所有在后面分支（在本例中是 origin/master）但不在前面分支（在本例中是 issue54）的提交的列表。 我们将会在 提交区间 中详细介绍这个语法。 ​ 目前，我们可以从输出中看到有一个 John 生成的但是 Jessica 还没有合并入的提交。 如果她合并 origin/master，也就是说将会修改她的本地工作的那个单个提交。 ​ 现在，Jessica 可以合并她的特性工作到她的 master 分支，合并 John 的工作（origin/master）进入她的 master 分支，然后再次推送回服务器。 首先，为了整合所有这些工作她切换回她的 master 分支。 $ git checkout master Switched to branch 'master' Your branch is behind 'origin/master' by 2 commits, and can be fast-forwarded. ​ 她既可以先合并 origin/master 也可以先合并 issue54 ——它们都是上游，所以顺序并没有关系。 不论她选择的顺序是什么最终的结果快照是完全一样的；只是历史会有一点轻微的区别。 她选择先合并入 issue54： $ git merge issue54 Updating fbff5bc..4af4298 Fast forward README | 1 + lib/simplegit.rb | 6 +++++- 2 files changed, 6 insertions(+), 1 deletions(-) ​ 没有发生问题；如你所见它是一次简单的快进。 现在 Jessica 合并入 John 的工作（origin/master）： $ git merge origin/master Auto-merging lib/simplegit.rb Merge made by recursive. lib/simplegit.rb | 2 +- 1 files changed, 1 insertions(+), 1 deletions(-) ​ 每一个文件都干净地合并了，Jessica 的历史看起来像这样： ​ 现在 origin/master 是可以从 Jessica 的 master 分支到达的，所以她应该可以成功地推送（假设同一时间 John 并没有再次推送）： $ git push origin master ... To jessica@githost:simplegit.git 72bbc59..8059c15 master -> master ​ 每一个开发者都提交了几次并成功地合并了其他人的工作。 ​ 这是一个最简单的工作流程。 你通常在一个特性分支工作一会儿，当它准备好整合时合并回你的 master 分支。 当想要共享工作时，将其合并回你自己的 master 分支，如果有改动的话然后抓取并合并 origin/master，最终推送到服务器上的 master 分支。 通常顺序像这样： 2.3 私有管理团队 ​ 在接下来的情形中，你会看到大型私有团队中贡献者的角色。 在你将学习到的这种工作环境中，小组基于特性进行协作，这些团队的贡献将会由其他人整合。 ​ 让我们假设 John 与 Jessica 在一个特性上工作，同时 Jessica 与 Josie 在第二个特性上工作。 在本例中，公司使用了一种整合-管理者工作流程，独立小组的工作只能被特定的工程师整合，主仓库的 master 分支只能被那些工程师更新。 在这种情况下，所有的工作都是在基于团队的分支上完成的并且稍后会被整合者拉到一起。 ​ 因为 Jessica 在两个特性上工作，并且平行地与两个不同的开发者协作，让我们跟随她的工作流程。 假设她已经克隆了仓库，首先决定在 featureA 上工作。 她为那个特性创建了一个新分支然后在那做了一些工作： # Jessica's Machine $ git checkout -b featureA Switched to a new branch 'featureA' $ vim lib/simplegit.rb $ git commit -am 'add limit to log function' [featureA 3300904] add limit to log function 1 files changed, 1 insertions(+), 1 deletions(-) ​ 在这个时候，她需要将工作共享给 John，所以她推送了 featureA 分支的提交到服务器上。 Jessica 没有 master 分支的推送权限——只有整合者有——所以为了与 John 协作必须推送另一个分支。 $ git push -u origin featureA ... To jessica@githost:simplegit.git * [new branch] featureA -> featureA ​ Jessica 向 John 发邮件告诉他已经推送了一些工作到 featureA 分支现在可以看一看。 当她等待 John 的反馈时，Jessica 决定与 Josie 开始在 featureB 上工作。 为了开始工作，她基于服务器的 master 分支开始了一个新分支。 # Jessica's Machine $ git fetch origin $ git checkout -b featureB origin/master Switched to a new branch 'featureB' ​ 现在，Jessica 在 featureB 分支上创建了几次提交： $ vim lib/simplegit.rb $ git commit -am 'made the ls-tree function recursive' [featureB e5b0fdc] made the ls-tree function recursive 1 files changed, 1 insertions(+), 1 deletions(-) $ vim lib/simplegit.rb $ git commit -am 'add ls-files' [featureB 8512791] add ls-files 1 files changed, 5 insertions(+), 0 deletions(-) ​ Jessica 的仓库看起来像这样： ​ 她准备好推送工作了，但是一封来自 Josie 的邮件告知一些初始工作已经被推送到服务器上的 featureBee 上了。 Jessica 在能推送到服务器前首先需要将那些改动与她自己的合并。 然后她可以通过 git fetch 抓取 Josie 的改动： $ git fetch origin ... From jessica@githost:simplegit * [new branch] featureBee -> origin/featureBee ​ Jessica 现在可以通过 git merge 将其合并到她做的工作中： $ git merge origin/featureBee Auto-merging lib/simplegit.rb Merge made by recursive. lib/simplegit.rb | 4 ++++ 1 files changed, 4 insertions(+), 0 deletions(-) ​ 有点儿问题——她需要将在 featureB 分支上合并的工作推送到服务器上的 featureBee 分支。 她可以通过指定本地分支加上冒号（:）加上远程分支给 git push 命令来这样做： $ git push -u origin featureB:featureBee ... To jessica@githost:simplegit.git fba9af8..cd685d1 featureB -> featureBee ​ 这称作一个 引用规格。 查看引用规格了解关于 Git 引用规格与通过它们可以做的不同的事情的详细讨论。 也要注意 -u 标记；这是 --set-upstream 的简写，该标记会为之后轻松地推送与拉取配置分支。 ​ 紧接着，John 发邮件给 Jessica 说他已经推送了一些改动到 featureA 分支并要求她去验证它们。 她运行一个 git fetch 来拉取下那些改动： $ git fetch origin ... From jessica@githost:simplegit 3300904..aad881d featureA -> origin/featureA ​ 然后，通过 git log 她可以看到哪些发生了改变： $ git log featureA..origin/featureA commit aad881d154acdaeb2b6b18ea0e827ed8a6d671e6 Author: John Smith Date: Fri May 29 19:57:33 2009 -0700 changed log output to 30 from 25 ​ 最终，她合并 John 的工作到她自己的 featureA 分支： $ git checkout featureA Switched to branch 'featureA' $ git merge origin/featureA Updating 3300904..aad881d Fast forward lib/simplegit.rb | 10 +++++++++- 1 files changed, 9 insertions(+), 1 deletions(-) ​ Jessica 想要轻微调整一些东西，所以她再次提交然后将其推送回服务器： $ git commit -am 'small tweak' [featureA 774b3ed] small tweak 1 files changed, 1 insertions(+), 1 deletions(-) $ git push ... To jessica@githost:simplegit.git 3300904..774b3ed featureA -> featureA ​ Jessica 的提交历史现在看起来像这样： ​ Jessica、Josie 与 John 通知整合者在服务器上的 featureA 与 featureBee 分支准备好整合到主线中了。 在整合者合并这些分支到主线后，一次抓取会拿下来一个新的合并提交，使历史看起来像这样： ​ 许多团队切换到 Git 是因为这一允许多个团队并行工作、并在之后合并不同工作的能力。 团队中更小一些的子小组可以通过远程分支协作而不必影响或妨碍整个团队的能力是 Git 的一个巨大优势。 在这儿看到的工作流程顺序类似这样： 2.4 派生的公开项目 ​ 向公开项目做贡献有一点儿不同。 因为没有权限直接更新项目的分支，你必须用其他办法将工作给维护者。 第一个例子描述在支持简单派生的 Git 托管上使用派生来做贡献。 许多托管站点支持这个功能（包括 GitHub、BitBucket、Google Code、repo.or.cz 等等），许多项目维护者期望这种风格的贡献。 下一节会讨论偏好通过邮件接受贡献补丁的项目。 ​ 首先，你可能想要克隆主仓库，为计划贡献的补丁或补丁序列创建一个特性分支，然后在那儿做工作。 顺序看起来基本像这样： $ git clone (url) $ cd project $ git checkout -b featureA # (work) $ git commit # (work) $ git commit Notes:你可能会想要使用 rebase -i 来将工作压缩成一个单独的提交，或者重排提交中的工作使补丁更容易被维护者审核——查看重写历史了解关于交互式变基的更多信息。 ​ 当你的分支工作完成后准备将其贡献回维护者，去原始项目中然后点击 “Fork” 按钮，创建一份自己的可写的项目派生仓库。 然后需要添加这个新仓库 URL 为第二个远程仓库，在本例中称作 myfork： $ git remote add myfork (url) ​ 然后需要推送工作到上面。 相对于合并到主分支再推送上去，推送你正在工作的特性分支到仓库上更简单。 原因是工作如果不被接受或者是被拣选的，就不必回退你的 master 分支。 如果维护者合并、变基或拣选你的工作，不管怎样你最终会通过拉取他们的仓库找回来你的工作。 $ git push -u myfork featureA ​ 当工作已经被推送到你的派生后，你需要通知维护者。 这通常被称作一个拉取请求（pull request），你既可以通过网站生成它—— GitHub 有它自己的 Pull Request 机制，我们将会在 [GitHub] 介绍——也可以运行 git request-pull 命令然后手动地将输出发送电子邮件给项目的维护者。 ​ request-pull 命令接受特性分支拉入的基础分支，以及它们拉入的 Git 仓库 URL，输出请求拉入的所有修改的总结。 例如，Jessica 想要发送给 John 一个拉取请求，她已经在刚刚推送的分支上做了两次提交。她可以运行这个： $ git request-pull origin/master myfork The following changes since commit 1edee6b1d61823a2de3b09c160d7080b8d1b3a40: John Smith (1): added a new function are available in the git repository at: git://githost/simplegit.git featureA Jessica Smith (2): add limit to log function change log output to 30 from 25 lib/simplegit.rb | 10 +++++++++- 1 files changed, 9 insertions(+), 1 deletions(-) ​ 这个输出可以被发送给维护者——它告诉他们工作是从哪个分支开始、归纳的提交与从哪里拉入这些工作。 ​ 在一个你不是维护者的项目上，通常有一个总是跟踪 origin/master 的 master 分支会很方便，在特性分支上做工作是因为如果它们被拒绝时你可以轻松地丢弃。 如果同一时间主仓库移动了然后你的提交不再能干净地应用，那么使工作主题独立于特性分支也会使你变基（rebase）工作时更容易。 例如，你想要提供第二个特性工作到项目，不要继续在刚刚推送的特性分支上工作——从主仓库的 master 分支重新开始： $ git checkout -b featureB origin/master # (work) $ git commit $ git push myfork featureB # (email maintainer) $ git fetch origin ​ 现在，每一个特性都保存在一个贮藏库中——类似于补丁队列——可以重写、变基与修改而不会让特性互相干涉或互相依赖，像这样： ​ 假设项目维护者已经拉取了一串其他补丁，然后尝试拉取你的第一个分支，但是没有干净地合并。 在这种情况下，可以尝试变基那个分支到 origin/master 的顶部，为维护者解决冲突，然后重新提交你的改动： $ git checkout featureA $ git rebase origin/master $ git push -f myfork featureA ​ 这样会重写你的历史，现在看起来像是featureA 工作之后的提交历史 ​ 因为你将分支变基了，所以必须为推送命令指定 -f 选项，这样才能将服务器上有一个不是它的后代的提交的 featureA 分支替换掉。 一个替代的选项是推送这个新工作到服务器上的一个不同分支（可能称作 featureAv2）。 ​ 让我们看一个更有可能的情况：维护者看到了你的第二个分支上的工作并且很喜欢其中的概念，但是想要你修改一下实现的细节。 你也可以利用这次机会将工作基于项目现在的 master 分支。 你从现在的 origin/master 分支开始一个新分支，在那儿压缩 featureB 的改动，解决任何冲突，改变实现，然后推送它为一个新分支。 $ git checkout -b featureBv2 origin/master $ git merge --squash featureB # (change implementation) $ git commit $ git push myfork featureBv2 ​ --squash 选项接受被合并的分支上的所有工作，并将其压缩至一个变更集，使仓库变成一个真正的合并发生的状态，而不会真的生成一个合并提交。 这意味着你的未来的提交将会只有一个父提交，并允许你引入另一个分支的所有改动，然后在记录一个新提交前做更多的改动。 同样 --no-commit 选项在默认合并过程中可以用来延迟生成合并提交。 ​ 现在你可以给维护者发送一条消息，表示你已经做了要求的修改然后他们可以在你的 featureBv2 分支上找到那些改动。 2.5 通过邮件的公开项目 ​ 许多项目建立了接受补丁的流程——需要检查每一个项目的特定规则，因为它们之间有区别。 因为有几个历史悠久的、大型的项目会通过一个开发者的邮件列表接受补丁，现在我们将会通过一个例子来演示。 ​ 工作流程与之前的用例是类似的——你为工作的每一个补丁序列创建特性分支。 区别是如何提交它们到项目中。 生成每一个提交序列的电子邮件版本然后邮寄它们到开发者邮件列表，而不是派生项目然后推送到你自己的可写版本。 $ git checkout -b topicA # (work) $ git commit # (work) $ git commit ​ 现在有两个提交要发送到邮件列表。 使用 git format-patch 来生成可以邮寄到列表的 mbox 格式的文件——它将每一个提交转换为一封电子邮件，提交信息的第一行作为主题，剩余信息与提交引入的补丁作为正文。 它有一个好处是使用 format-patch 生成的一封电子邮件应用的提交正确地保留了所有的提交信息。 $ git format-patch -M origin/master 0001-add-limit-to-log-function.patch 0002-changed-log-output-to-30-from-25.patch ​ format-patch 命令打印出它创建的补丁文件名字。 -M 开关告诉 Git 查找重命名。 文件最后看起来像这样： $ cat 0001-add-limit-to-log-function.patch From 330090432754092d704da8e76ca5c05c198e71a8 Mon Sep 17 00:00:00 2001 From: Jessica Smith Date: Sun, 6 Apr 2008 10:17:23 -0700 Subject: [PATCH 1/2] add limit to log function Limit log functionality to the first 20 --- lib/simplegit.rb | 2 +- 1 files changed, 1 insertions(+), 1 deletions(-) diff --git a/lib/simplegit.rb b/lib/simplegit.rb index 76f47bc..f9815f1 100644 --- a/lib/simplegit.rb +++ b/lib/simplegit.rb @@ -14,7 +14,7 @@ class SimpleGit end def log(treeish = 'master') - command(\"git log #{treeish}\") + command(\"git log -n 20 #{treeish}\") end def ls_tree(treeish = 'master') -- 2.1.0 ​ 也可以编辑这些补丁文件为邮件列表添加更多不想要在提交信息中显示出来的信息。 如果在 --- 行与补丁开头（diff --git 行）之间添加文本，那么开发者就可以阅读它；但是应用补丁时会排除它。 ​ 为了将其邮寄到邮件列表，你既可以将文件粘贴进电子邮件客户端，也可以通过命令行程序发送它。 粘贴文本经常会发生格式化问题，特别是那些不会合适地保留换行符与其他空白的 “更聪明的” 客户端。 幸运的是，Git 提供了一个工具帮助你通过 IMAP 发送正确格式化的补丁，这可能对你更容易些。 我们将会演示如何通过 Gmail 发送一个补丁，它正好是我们所知最好的邮件代理；可以在之前提到的 Git 源代码中的 Documentation/SubmittingPatches 文件的最下面了解一系列邮件程序的详细指令。 ​ 首先，需要在 ~/.gitconfig 文件中设置 imap 区块。 可以通过一系列的 git config 命令来分别设置每一个值，或者手动添加它们，不管怎样最后配置文件应该看起来像这样： [imap] folder = \"[Gmail]/Drafts\" host = imaps://imap.gmail.com user = user@gmail.com pass = p4ssw0rd port = 993 sslverify = false ​ 如果 IMAP 服务器不使用 SSL，最后两行可能没有必要，host 的值会是 imap:// 而不是 imaps://。 当那些设置完成后，可以使用 git imap-send 将补丁序列放在特定 IMAP 服务器的 Drafts 文件夹中： $ cat *.patch |git imap-send Resolving imap.gmail.com... ok Connecting to [74.125.142.109]:993... ok Logging in... sending 2 messages 100% (2/2) done ​ 在这个时候，你应该能够到 Drafts 文件夹中，修改收件人字段为想要发送补丁的邮件列表，可能需要抄送给维护者或负责那个部分的人，然后发送。 ​ 你也可以通过一个 SMTP 服务器发送补丁。 同之前一样，你可以通过一系列的 git config 命令来分别设置选项，或者你可以手动地将它们添加到你的 ~/.gitconfig 文件的 sendmail 区块： [sendemail] smtpencryption = tls smtpserver = smtp.gmail.com smtpuser = user@gmail.com smtpserverport = 587 ​ 当这完成后，你可以使用 git send-email 发送你的补丁： $ git send-email *.patch 0001-added-limit-to-log-function.patch 0002-changed-log-output-to-30-from-25.patch Who should the emails appear to be from? [Jessica Smith ] Emails will be sent from: Jessica Smith Who should the emails be sent to? jessica@example.com Message-ID to be used as In-Reply-To for the first email? y ​ 然后，对于正在发送的每一个补丁，Git 会吐出这样的一串日志信息： (mbox) Adding cc: Jessica Smith from \\line 'From: Jessica Smith ' OK. Log says: Sendmail: /usr/sbin/sendmail -i jessica@example.com From: Jessica Smith To: jessica@example.com Subject: [PATCH 1/2] added limit to log function Date: Sat, 30 May 2009 13:29:15 -0700 Message-Id: X-Mailer: git-send-email 1.6.2.rc1.20.g8c5b.dirty In-Reply-To: References: Result: OK 2.6 总结 ​ 这个部分介绍了处理可能会遇到的几个迥然不同类型的 Git 项目的一些常见的工作流程，介绍了帮助管理这个过程的一些新工具。 接下来，你会了解到如何在贡献的另一面工作：维护一个 Git 项目。 你将会学习如何成为一个仁慈的独裁者或整合管理者。 3. 维护项目 ​ 除了如何有效地参与一个项目的贡献之外，你可能也需要了解如何维护项目。 这包含接受并应用别人使用 format-patch 生成并通过电子邮件发送过来的补丁，或对项目添加的远程版本库分支中的更改进行整合。 但无论是管理版本库，还是帮忙验证、审核收到的补丁，都需要同其他贡献者约定某种长期可持续的工作方式。 3.1 在特性分支中工作 ​ 如果你想向项目中整合一些新东西，最好将这些尝试局限在特性分支——一种通常用来尝试新东西的临时分支中。 这样便于单独调整补丁，如果遇到无法正常工作的情况，可以先不用管，等到有时间的时候再来处理。 如果你基于你所尝试进行工作的特性为分支创建一个简单的名字，比如 ruby_client 或者具有类似描述性的其他名字，这样即使你必须暂时抛弃它，以后回来时也不会忘记。 项目的维护者一般还会为这些分支附带命名空间，比如 sc/ruby_client（其中 sc 是贡献该项工作的人名称的简写）。 你应该记得，可以使用如下方式基于 master 分支建立特性分支： $ git branch sc/ruby_client master ​ 或者如果你同时想立刻切换到新分支上的话，可以使用 checkout -b 选项： $ git checkout -b sc/ruby_client master ​ 现在你已经准备好将别人贡献的工作加入到这个特性分支，并考虑是否将其合并到长期分支中去了。 3.2 应用来自邮件的补丁 ​ 如果你通过电子邮件收到了一个需要整合进入项目的补丁，你需要将其应用到特性分支中进行评估。 有两种应用该种补丁的方法：使用 git apply，或者使用 git am。 3.2.1 使用 apply 命令应用补丁 ​ 如果你收到了一个使用 git diff 或 Unix diff 命令（不推荐使用这种方式，具体见下一节）创建的补丁，可以使用 git apply 命令来应用。 假设你将补丁保存在了 /tmp/patch-ruby-client.patch 中，可以这样应用补丁： $ git apply /tmp/patch-ruby-client.patch ​ 这会修改工作目录中的文件。 它与运行 patch -p1 命令来应用补丁几乎是等效的，但是这种方式更加严格，相对于 patch 来说，它能够接受的模糊匹配更少。 它也能够处理 git diff 格式文件所描述的文件添加、删除和重命名操作，而 patch 则不会。 最后，git apply 命令采用了一种“全部应用，否则就全部撤销（apply all or abort all）”的模型，即补丁只有全部内容都被应用和完全不被应用两个状态，而 patch 可能会导致补丁文件被部分应用，最后使你的工作目录保持在一个比较奇怪的状态。 总体来看，git apply 命令要比 patch 谨慎得多。 并且，它不会为你创建提交——在运行之后，你需要手动暂存并提交补丁所引入的更改。 ​ 在实际应用补丁前，你还可以使用 git apply 来检查补丁是否可以顺利应用——即对补丁运行 git apply --check 命令： $ git apply --check 0001-seeing-if-this-helps-the-gem.patch error: patch failed: ticgit.gemspec:1 error: ticgit.gemspec: patch does not apply ​ 如果没有产生输出，则该补丁可以顺利应用。 如果检查失败了，该命令还会以一个非零的状态退出，所以需要时你也可以在脚本中使用它。 3.2.2 使用 am 命令应用补丁 ​ 如果补丁的贡献者也是一个 Git 用户，并且其能熟练使用 format-patch 命令来生成补丁，这样的话你的工作会变得更加轻松，因为这种补丁中包含了作者信息和提交信息供你参考。 如果可能的话，请鼓励贡献者使用 format-patch 而不是 diff 来为你生成补丁。 而只有对老式的补丁，你才必须使用 git apply 命令。 ​ 要应用一个由 format-patch 命令生成的补丁，你应该使用 git am 命令。 从技术的角度看，git am 是为了读取 mbox 文件而构建的，mbox 是一种用来在单个文本文件中存储一个或多个电子邮件消息的简单纯文本格式。 其大致格式如下所示： From 330090432754092d704da8e76ca5c05c198e71a8 Mon Sep 17 00:00:00 2001 From: Jessica Smith Date: Sun, 6 Apr 2008 10:17:23 -0700 Subject: [PATCH 1/2] add limit to log function Limit log functionality to the first 20 ​ 这其实就是你前面看到的 format-patch 命令输出的开始几行。 而同时它也是有效的 mbox 电子邮件格式。 如果有人使用 git send-email 命令将补丁以电子邮件的形式发送给你，你便可以将它下载为 mbox 格式的文件，之后将 git am 命令指向该文件，它会应用其中包含的所有补丁。 如果你所使用的邮件客户端能够同时将多封邮件保存为 mbox 格式的文件，你甚至能够将一系列补丁打包为单个 mbox 文件，并利用 git am 命令将它们一次性全部应用。 ​ 然而，如果贡献者将 format-patch 生成的补丁文件上传到类似 Request Ticket 的任务处理系统，你可以先将其保存到本地，之后通过 git am 来应用补丁： $ git am 0001-limit-log-function.patch Applying: add limit to log function ​ 你会看到补丁被顺利地应用，并且为你自动创建了一个新的提交。 其中的作者信息来自于电子邮件头部的 From 和 Date 字段，提交消息则取自 Subject 和邮件正文中补丁之前的内容。 比如，应用上面那个 mbox 示例后生成的提交是这样的： $ git log --pretty=fuller -1 commit 6c5e70b984a60b3cecd395edd5b48a7575bf58e0 Author: Jessica Smith AuthorDate: Sun Apr 6 10:17:23 2008 -0700 Commit: Scott Chacon CommitDate: Thu Apr 9 09:19:06 2009 -0700 add limit to log function Limit log functionality to the first 20 ​ 其中 Commit 信息表示的是应用补丁的人和应用补丁的时间。 Author 信息则表示补丁的原作者和原本的创建时间。 ​ 但是，有时候无法顺利地应用补丁。 这也许是因为你的主分支和创建补丁的分支相差较多，也有可能是因为这个补丁依赖于其他你尚未应用的补丁。 这种情况下，git am 进程将会报错并且询问你要做什么： $ git am 0001-seeing-if-this-helps-the-gem.patch Applying: seeing if this helps the gem error: patch failed: ticgit.gemspec:1 error: ticgit.gemspec: patch does not apply Patch failed at 0001. When you have resolved this problem run \"git am --resolved\". If you would prefer to skip this patch, instead run \"git am --skip\". To restore the original branch and stop patching run \"git am --abort\". ​ 该命令将会在所有出现问题的文件内加入冲突标记，就和发生冲突的合并或变基操作一样。 而你解决问题的手段很大程度上也是一样的——即手动编辑那些文件来解决冲突，暂存新的文件，之后运行 git am --resolved 继续应用下一个补丁： $ (fix the file) $ git add ticgit.gemspec $ git am --resolved Applying: seeing if this helps the gem ​ 如果你希望 Git 能够尝试以更加智能的方式解决冲突，你可以对其传递 -3 选项来使 Git 尝试进行三方合并。 该选项默认并没有打开，因为如果用于创建补丁的提交并不在你的版本库内的话，这样做是没有用处的。 而如果你确实有那个提交的话——比如补丁是基于某个公共提交的——那么通常 -3 选项对于应用有冲突的补丁是更加明智的选择。 $ git am -3 0001-seeing-if-this-helps-the-gem.patch Applying: seeing if this helps the gem error: patch failed: ticgit.gemspec:1 error: ticgit.gemspec: patch does not apply Using index info to reconstruct a base tree... Falling back to patching base and 3-way merge... No changes -- Patch already applied. ​ 比如上面这种情况，我在之前已经应用过同样的补丁。 如果没有 -3 选项的话，这看起来就像是存在一个冲突。 ​ 如果你正在利用一个 mbox 文件应用多个补丁，也可以在交互模式下运行 am 命令，这样在每个补丁之前，它会停住询问你是否要应用该补丁： $ git am -3 -i mbox Commit Body is: -------------------------- seeing if this helps the gem -------------------------- Apply? [y]es/[n]o/[e]dit/[v]iew patch/[a]ccept all ​ 这在你保存的补丁较多时很好用，因为你可以在应用之前查看忘掉内容的补丁，并且跳过已经应用过的补丁。 ​ 当与你的特性相关的所有补丁都被应用并提交到分支中之后，你就可以选择是否以及如何将其整合到更长期的分支中去了。 3.3 检出远程分支 ​ 如果你的贡献者建立了自己的版本库，并且向其中推送了若干修改，之后将版本库的 URL 和包含更改的远程分支发送给你，那么你可以将其添加为一个远程分支，并且在本地进行合并。 ​ 比如 Jessica 向你发送了一封电子邮件，内容是在她的版本库中的 ruby-client 分支中有一个很不错的新功能，为了测试该功能，你可以将其添加为一个远程分支，并在本地检出： $ git remote add jessica git://github.com/jessica/myproject.git $ git fetch jessica $ git checkout -b rubyclient jessica/ruby-client ​ 如果她再次发邮件说另一个分支中包含另一个优秀功能，因为之前已经设置好远程分支了，你就可以直接进行抓取及检出操作。 ​ 这对于与他人长期合作工作来说很有用。 而对于提交补丁频率较小的贡献者，相对于每个人维护自己的服务器，不断增删远程分支的做法，使用电子邮件来接收可能会比较省时。 况且你也不会想要加入数百个只提供一两个补丁的远程分支。 然而，脚本和托管服务在一定程度上可以简化这些工作——这很大程度上依赖于你和你的贡献者开发的方式。 ​ 这种方式的另一种优点是你可以同时得到提交历史。 虽然代码合并中可能会出现问题，但是你能获知他人的工作是基于你的历史中的具体哪一个位置；所以 Git 会默认进行三方合并，不需要提供 -3 选项，你也不需要担心补丁是基于某个你无法访问的提交生成的。 ​ 对于非持续性的合作，如果你依然想要以这种方式拉取数据的话，你可以对远程版本库的 URL 调用 git pull 命令。 这会执行一个一次性的抓取，而不会将该 URL 存为远程引用： $ git pull https://github.com/onetimeguy/project From https://github.com/onetimeguy/project * branch HEAD -> FETCH_HEAD Merge made by recursive. 3.4 确定引入了哪些东西 ​ 你已经有了一个包含其他人贡献的特性分支。 现在你可以决定如何处理它们了。 本节回顾了若干命令，以便于你检查若将其合并入主分支所引入的更改。 ​ 一般来说，你应该对该分支中所有 master 分支尚未包含的提交进行检查。 通过在分支名称前加入 --not 选项，你可以排除 master 分支中的提交。 这和我们之前使用的 master..contrib 格式是一样的。 假设贡献者向你发送了两个补丁，为此你创建了一个名叫 contrib 的分支并在其上应用补丁，你可以运行： $ git log contrib --not master commit 5b6235bd297351589efc4d73316f0a68d484f118 Author: Scott Chacon Date: Fri Oct 24 09:53:59 2008 -0700 seeing if this helps the gem commit 7482e0d16d04bea79d0dba8988cc78df655f16a0 Author: Scott Chacon Date: Mon Oct 22 19:38:36 2008 -0700 updated the gemspec to hopefully work better ​ 如果要查看每次提交所引入的具体修改，你应该记得可以给 git log 命令传递 -p 选项，这样它会在每次提交后面附加对应的差异（diff）。 ​ 而要查看将该特性分支与另一个分支合并的完整 diff，你可能需要使用一个有些奇怪的技巧来得到正确的结果。 你可能会想到这种方式： $ git diff master ​ 这个命令会输出一个 diff，但它可能并不是我们想要的。 如果在你创建特性分支之后，master 分支向前移动了，你获得的结果就会显得有些不对。 这是因为 Git 会直接将该特性分支与 master 分支的最新提交快照进行比较。 比如说你在 master 分支中向某个文件添加了一行内容，那么直接比对最新快照的结果看上去就像是你在特性分支中将这一行删除了。 ​ 如果 master 分支是你的特性分支的直接祖先，其实是没有任何问题的；但是一旦两个分支的历史产生了分叉，上述比对产生的 diff 看上去就像是将特性分支中所有的新东西加入，并且将 master 分支所独有的东西删除。 ​ 而你真正想要检查的东西，实际上仅仅是特性分支所添加的更改——也就是该分支与 master 分支合并所要引入的工作。 要达到此目的，你需要让 Git 对特性分支上最新的提交与该分支与 master 分支的首个公共祖先进行比较。 ​ 从技术的角度讲，你可以以手工的方式找出公共祖先，并对其显式运行 diff 命令： $ git merge-base contrib master 36c7dba2c95e6bbb78dfa822519ecfec6e1ca649 $ git diff 36c7db ​ 然而，这种做法比较麻烦，所以 Git 提供了一种比较便捷的方式：三点语法。 对于 diff 命令来说，你可以通过把 ... 置于另一个分支名后来对该分支的最新提交与两个分支的共同祖先进行比较： $ git diff master...contrib ​ 该命令仅会显示自当前特性分支与 master 分支的共同祖先起，该分支中的工作。 这个语法很有用，应该牢记。 3.5 将贡献的工作整合进来 ​ 当特性分支中所有的工作都已经准备好整合进入更靠近主线的分支时，接下来的问题就是如何进行整合了。 此外，还有一个问题是，你想使用怎样的总体工作流来维护你的项目？ 你的选择有很多，我们会介绍其中的一部分。 3.5.1 合并工作流 ​ 一种非常简单的工作流会直接将工作合并进入 master 分支。 在这种情况下，master 分支包含的代码是基本稳定的。 当你完成某个特性分支的工作，或审核通过了其他人所贡献的工作时，你会将其合并进入 master 分支，之后将特性分支删除，如此反复。 如果我们的版本库包含类似包含若干特性分支的提交历史的两个名称分别为 ruby_client 和 php_client 的分支，并且我们先合并 ruby_client 分支，之后合并 php_client 分支，那么提交历史最后会变成合并特性分支之后的样子。 ​ 包含若干特性分支的提交历史。 ​ 合并特性分支之后。 ​ 这也许是最简单的工作流了，但是当项目更大，或更稳定，你对自己所引入的工作更加在意时，它可能会带来问题。 ​ 如果你的项目非常重要，你可能会使用两阶段合并循环。 在这种情况下，你会维护两个长期分支，分别是 master 和 develop，master 分支只会在一个非常稳定的版本发布时才会更新，而所有的新代码会首先整合进入 develop 分支。 你定期将这两个分支推送到公共版本库中。 每次需要合并新的特性分支时（合并特性分支前。），你都应该合并进入 develop 分支（合并特性分支后）；当打标签发布的时候，你会将 master 分支快进到已经稳定的 develop 分支（一次发布之后）。 ​ 合并特性分支前。 ​ 合并特性分支后。 ​ 一次发布之后。 ​ 这样当人们克隆你项目的版本库后，既可以检出 master 分支以构建最新的稳定版本并保持更新，也可以检出包含更多新东西的 develop 分支。 你也可以扩展这个概念，维护一个将所有工作合并到一起的整合分支。 当该分支的代码稳定并通过测试之后，将其合并进入 develop 分支；经过一段时间，确认其稳定之后，将其以快进的形式并入 master 分支。 3.5.2 大项目合并工作流 ​ Git 项目包含四个长期分支：master、next，用于新工作的 pu（proposed updates）和用于维护性向后移植工作（maintenance backports）的 maint 分支。 贡献者的新工作会以类似之前所介绍的方式收入特性分支中（见管理复杂的一系列接收贡献的平行特性分支）。 之后对特性分支进行测试评估，检查其是否已经能够合并，或者仍需要更多工作。 安全的特性分支会被合并入 next 分支，之后该分支会被推送使得所有人都可以尝试整合到一起的特性。 ​ 管理复杂的一系列接收贡献的平行特性分支。 ​ 如果特性分支需要更多工作，它则会被并入 pu 分支。 当它们完全稳定之后，会被再次并入 master 分支。 这意味着 master 分支始终在进行快进，next 分支偶尔会被变基，而 pu 分支的变基比较频繁： ​ 将贡献的特性分支并入长期整合分支。 ​ 当特性分支最终被并入 master 分支后，便会被从版本库中删除掉。 Git 项目还有一个从上一次发布中派生出来的 maint 分支来提供向后移植过来的补丁以供发布维护更新。 因此，当你克隆 Git 的版本库之后，就会有四个可分别评估该项目开发的不同阶段的可检出的分支，检出哪个分支，取决于你需要多新的版本，或者你想要如何进行贡献；对于维护者来说，这套结构化的工作流能帮助它们审查新的贡献。 3.5.3 变基与拣选工作流 ​ 为了保持线性的提交历史，有些维护者更喜欢在 master 分支上对贡献过来的工作进行变基和拣选，而不是直接将其合并。 当你完成了某个特性分支中的工作，并且决定要将其整合的时候，你可以在该分支中运行变基命令，在当前 master 分支（或者是 develop 等分支）的基础上重新构造修改。 如果结果理想的话，你可以快进 master 分支，最后得到一个线性的项目提交历史。 ​ 另一种将引入的工作转移到其他分支的方法是拣选。 Git 中的拣选类似于对特定的某次提交的变基。 它会提取该提交的补丁，之后尝试将其重新应用到当前分支上。 这种方式在你只想引入特性分支中的某个提交，或者特性分支中只有一个提交，而你不想运行变基时很有用。 举个例子，假设你的项目提交历史类似： ​ 拣选之前的示例历史。 ​ 如果你希望将提交 e43a6 拉取到 master 分支，你可以运行： $ git cherry-pick e43a6fd3e94888d76779ad79fb568ed180e5fcdf Finished one cherry-pick. [master]: created a0a41a9: \"More friendly message when locking the index fails.\" 3 files changed, 17 insertions(+), 3 deletions(-) ​ 这样会拉取和 e43a6 相同的更改，但是因为应用的日期不同，你会得到一个新的提交 SHA-1 值。 现在你的历史会变成这样： ​ 拣选特性分支中的一个提交后的历史。 ​ 现在你可以删除这个特性分支，并丢弃不想拉入的提交。 3.5.4 Rerere ​ 如果你在进行大量的合并或变基，或维护一个长期的特性分支，Git 提供的一个叫做“rerere”的功能会有一些帮助。 ​ Rerere 是“重用已记录的冲突解决方案（reuse recorded resolution）”的意思——它是一种简化冲突解决的方法。 当启用 rerere 时，Git 将会维护一些成功合并之前和之后的镜像，当 Git 发现之前已经修复过类似的冲突时，便会使用之前的修复方案，而不需要你的干预。 ​ 这个功能包含两个部分：一个配置选项和一个命令。 其中的配置选项是 rerere.enabled，把它放在全局配置中就可以了： $ git config --global rerere.enabled true ​ 现在每当你进行一次需要解决冲突的合并时，解决方案都会被记录在缓存中，以备之后使用。 ​ 如果你需要和 rerere 的缓存交互，你可以使用 git rerere 命令。 当单独调用它时，Git 会检查解决方案数据库，尝试寻找一个和当前任一冲突相关的匹配项并解决冲突（尽管当 rerere.enabled 被设置为 true 时会自动进行）。 它也有若干子命令，可用来查看记录项，删除特定解决方案和清除缓存全部内容等。 我们将在 Rerere 中详细探讨。 3.6 为发布打标签 ​ 当你决定进行一次发布时，你可能想要留下一个标签，这样在之后的任何一个提交点都可以重新创建该发布。 你在Git 基础 中已经了解了创建新标签的过程。 作为一个维护者，如果你决定要为标签签名的话，打标签的过程应该是这样子的： $ git tag -s v1.5 -m 'my signed 1.5 tag' You need a passphrase to unlock the secret key for user: \"Scott Chacon \" 1024-bit DSA key, ID F721C45A, created 2009-02-09 ​ 如果你为标签签名了，你可能会遇到分发用来签名的 PGP 公钥的问题。 Git 项目的维护者已经解决了这一问题，其方法是在版本库中以 blob 对象的形式包含他们的公钥，并添加一个直接指向该内容的标签。 要完成这一任务，首先你可以通过运行 gpg --list-keys 找出你所想要的 key： $ gpg --list-keys /Users/schacon/.gnupg/pubring.gpg --------------------------------- pub 1024D/F721C45A 2009-02-09 [expires: 2010-02-09] uid Scott Chacon sub 2048g/45D02282 2009-02-09 [expires: 2010-02-09] ​ 之后你可以通过导出 key 并通过管道传递给 git hash-object 来直接将 key 导入到 Git 的数据库中，git hash-object 命令会向 Git 中写入一个包含其内容的新 blob 对象，并向你返回该 blob 对象的 SHA-1 值： $ gpg -a --export F721C45A | git hash-object -w --stdin 659ef797d181633c87ec71ac3f9ba29fe5775b92 ​ 既然 Git 中已经包含你的 key 的内容了，你就可以通过指定由 hash-object 命令给出的新 SHA-1 值来创建一个直接指向它的标签： $ git tag -a maintainer-pgp-pub 659ef797d181633c87ec71ac3f9ba29fe5775b92 ​ 如果你运行 git push --tags 命令，那么 maintainer-pgp-pub 标签将会被共享给所有人。 需要校验标签的人可以通过从数据库中直接拉取 blob 对象并导入到 GPG 中来导入 PGP key： $ git show maintainer-pgp-pub | gpg --import ​ 人们可以使用这个 key 来校验所有由你签名的标签。 另外，如果你在标签信息中包含了一些操作说明，用户可以通过运行 git show 来获取更多关于标签校验的说明。 3.7 生成一个构建号 ​ Git 中不存在随每次提交递增的“v123”之类的数字序列，如果你想要为提交附上一个可读的名称，可以对其运行 git describe 命令。 Git 将会给出一个字符串，它由最近的标签名、自该标签之后的提交数目和你所描述的提交的部分 SHA-1 值构成： $ git describe master v1.6.2-rc1-20-g8c5b85c ​ 这样你在导出一个快照或构建时，可以给出一个便于人们理解的命名。 实际上，如果你的 Git 是从 Git 自己的版本库克隆下来并构建的，那么 git --version 命令给出的结果是与此类似的。 如果你所描述的提交自身就有一个标签，那么它将只会输出标签名，没有后面两项信息。 ​ 注意 git describe 命令只适用于有注解的标签（即使用 -a 或 -s 选项创建的标签），所以如果你在使用 git describe 命令的话，为了确保能为标签生成合适的名称，打发布标签时都应该采用加注解的方式。 你也可以使用这个字符串来调用 checkout 或 show 命令，但是这依赖于其末尾的简短 SHA-1 值，因此不一定一直有效。 比如，最近 Linux 内核为了保证 SHA-1 值对象的唯一性，将其位数由 8 位扩展到了 10 位，导致以前的 git describe 输出全部失效。 3.8 准备一次发布 ​ 现在你可以发布一个构建了。 其中一件事情就是为那些不使用 Git 的可怜包们创建一个最新的快照归档。 使用 git archive 命令完成此工作： $ git archive master --prefix='project/' | gzip > `git describe master`.tar.gz $ ls *.tar.gz v1.6.2-rc1-20-g8c5b85c.tar.gz ​ 如果有人将这个压缩包解压，他就可以得到你的项目文件夹的最新快照。 你也可以以类似的方式创建一个 zip 压缩包，但此时你应该向 git archive 命令传递 --format=zip 选项： $ git archive master --prefix='project/' --format=zip > `git describe master`.zip ​ 现在你有了本次发布的一个 tar 包和一个 zip 包，可以将其上传到网站或以电子邮件的形式发送给人们。 3.9 制作提交简报 ​ 现在是时候通知邮件列表里那些好奇你的项目发生了什么的人了。 使用 git shortlog 命令可以快速生成一份包含从上次发布之后项目新增内容的修改日志（changelog）类文档。 它会对你给定范围内的所有提交进行总结；比如，你的上一次发布名称是 v1.0.1，那么下面的命令可以给出上次发布以来所有提交的总结： $ git shortlog --no-merges master --not v1.0.1 Chris Wanstrath (8): Add support for annotated tags to Grit::Tag Add packed-refs annotated tag support. Add Grit::Commit#to_patch Update version and History.txt Remove stray `puts` Make ls_tree ignore nils Tom Preston-Werner (4): fix dates in history dynamic version method Version bump to 1.0.2 Regenerated gemspec for version 1.0.2 ​ 这份整洁的总结包括了自 v1.0.1 以来的所有提交，并且已经按照作者分好组，你可以通过电子邮件将其直接发送到列表中。 4. 总结 ​ 你现在能自如地使用 Git 为项目做出贡献、维护自己的项目或采纳其他用户的贡献了。 恭喜你成为了一个高效的 Git 开发者！ 下一章中，你将会学到如何使用规模最大最流行的 Git 托管服务，GitHub。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Git/Chapter7.html":{"url":"Git/Chapter7.html","title":"第七章：GitHub","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 账户的创建和配置 1.1 SSH 访问 1.2 头像 1.3 邮件地址 1.4 两步验证 2. 对项目做出贡献 2.1 派生（Fork）项目 2.2 GitHub 流程 2.2.1 创建合并请求 2.2.2 利用合并请求 2.3 合并请求的进阶用法 2.3.1 将合并请求制作成补丁 2.3.2 与上游保持同步 2.3.3 参考 2.4 Markdown 2.4.1 GitHub 风格的 Markdown 2.4.1.1 任务列表 2.4.1.2 摘录代码 … … … Mobile Tools for Java (J2ME) Package Files # virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml 5.6 Octokit 6. 总结 第七章：GitHub ​ GitHub 是最大的 Git 版本库托管商，是成千上万的开发者和项目能够合作进行的中心。 大部分 Git 版本库都托管在 GitHub，很多开源项目使用 GitHub 实现 Git 托管、问题追踪、代码审查以及其它事情。 所以，尽管这不是 Git 开源项目的直接部分，但如果想要专业地使用 Git，你将不可避免地与 GitHub 打交道，所以这依然是一个绝好的学习机会。 ​ 本章将讨论如何高效地使用 GitHub。 我们将学习如何注册和管理账户、创建和使用 Git 版本库、向已有项目贡献的通用流程以及如何接受别人向你自己项目的贡献、GitHub 的编程接口和很多能够让这些操作更简单的小提示。 ​ 如果你对如何使用 GitHub 托管自己的项目，或者与已经托管在 GitHub 上面的项目进行合作没有兴趣，可以直接跳到Git 工具这一章。 1. 账户的创建和配置 ​ 你所需要做的第一件事是创建一个免费账户。 直接访问 https://github.com，选择一个未被占用的用户名，提供一个电子邮件地址和密码，点击写着“Sign up for GitHub”的绿色大按钮即可。 ​ GitHub 注册表单。 ​ 你将看到的下一个页面是升级计划的价格页面，目前我们可以直接忽略这个页面。 GitHub 会给你提供的邮件地址发送一封验证邮件。 尽快到你的邮箱进行验证，这是非常重要的（我们会在后面了解到这点）。 Notes:GitHub 为免费账户提供了完整功能，限制是你的项目都将被完全公开（每个人都具有读权限）。 GitHub 的付费计划可以让你拥有一定数目的私有项目，不过本书将不涉及这部分内容。 点击屏幕左上角的 Octocat 图标，你将来到控制面板页面。 现在，你已经做好了使用 GitHub 的准备工作。 1.1 SSH 访问 ​ 现在，你完全可以使用 https:// 协议，通过你刚刚创建的用户名和密码访问 Git 版本库。 但是，如果仅仅克隆公有项目，你甚至不需要注册——刚刚我们创建的账户是为了以后 fork 其它项目，以及推送我们自己的修改。 ​ 如果你习惯使用 SSH 远程，你需要配置一个公钥。 （如果你没有公钥，参考 [生成 SSH 公钥]） 使用窗口右上角的链接打开你的账户设置： ​ “Account settings”链接。 ​ 然后在左侧选择“SSH keys”部分。 ​ “SSH keys”链接。 ​ 在这个页面点击“Add an SSH key”按钮，给你的公钥起一个名字，将你的 ~/.ssh/id_rsa.pub （或者自定义的其它名字）公钥文件的内容粘贴到文本区，然后点击“Add key”。 Notes:确保给你的 SSH 密钥起一个能够记得住的名字。 你可以为每一个密钥起名字（例如，“我的笔记本电脑”或者“工作账户”等），以便以后需要吊销密钥时能够方便地区分。 1.2 头像 ​ 下一步，如果愿意的话，你可以将生成的头像换成你喜欢的图片。 首先，来到“Profile”标签页（在“SSH Keys”标签页上方），点击“Upload new picture”。 ​ “Profile”链接。 ​ 我们选择了本地磁盘上的一个 Git 图标，上传之后还可以对其进行裁剪。 ​ 裁剪头像 ​ 现在，在网站任意有你参与的位置，人们都可以在你的用户名旁边看到你的头像。 ​ 如果你已经把头像上传到了流行的 Gravatar 托管服务（Wordpress 账户经常使用），默认就会使用这个头像，因此，你就不需要进行这一步骤了。 1.3 邮件地址 ​ GitHub 使用用户邮件地址区分 Git 提交。 如果你在自己的提交中使用了多个邮件地址，希望 GitHub 可以正确地将它们连接起来，你需要在管理页面的 Emails 部分添加你拥有的所有邮箱地址。 ​ 添加邮件地址 ​ 在 添加邮件地址中我们可以看到一些不同的状态。 顶部的地址是通过验证的，并且被设置为主要地址，这意味着该地址会接收到所有的通知和回复。 第二个地址是通过验证的，如果愿意的话，可以将其设置为主要地址。 最后一个地址是未通过验证的，这意味着你不能将其设置为主要地址。 当 GitHub 发现任意版本库中的任意提交信息包含了这些地址，它就会将其链接到你的账户。 1.4 两步验证 ​ 最后，为了额外的安全性，你绝对应当设置两步验证，简写为 “2FA”。 两步验证是一种用于降低因你的密码被盗而带来的账户风险的验证机制，现在已经变得越来越流行。 开启两步验证，GitHub 会要求你用两种不同的验证方法，这样，即使其中一个被攻破，攻击者也不能访问你的账户。 ​ 你可以在 Account settings 页面的 Security 标签页中找到 Two-factor Authentication 设置。 ​ Security 标签页中的 2FA ​ 点击“Set up two-factor authentication”按钮，会跳转到设置页面。该页面允许你选择是要在登录时使用手机 app 生成辅助码（一种“基于时间的一次性密码”），还是要 GitHub 通过 SMS 发送辅助码。 ​ 选择合适的方法后，按照提示步骤设置 2FA，你的账户会变得更安全，每次登录 GitHub 时都需要提供除密码以外的辅助码。 2. 对项目做出贡献 ​ 账户已经建立好了，现在我们来了解一些能帮助你对现有的项目做出贡献的知识。 2.1 派生（Fork）项目 ​ 如果你想要参与某个项目，但是并没有推送权限，这时可以对这个项目进行“派生”。 派生的意思是指，GitHub 将在你的空间中创建一个完全属于你的项目副本，且你对其具有推送权限。 Notes:在以前，“fork”是一个贬义词，指的是某个人使开源项目向不同的方向发展，或者创建一个竞争项目，使得原项目的贡献者分裂。 在 GitHub，“fork”指的是你自己的空间中创建的项目副本，这个副本允许你以一种更开放的方式对其进行修改。 ​ 通过这种方式，项目的管理者不再需要忙着把用户添加到贡献者列表并给予他们推送权限。 人们可以派生这个项目，将修改推送到派生出的项目副本中，并通过创建合并请求（Pull Request）来让他们的改动进入源版本库，下文我们会详细说明。 创建了合并请求后，就会开启一个可供审查代码的板块，项目的拥有者和贡献者可以在此讨论相关修改，直到项目拥有者对其感到满意，并且认为这些修改可以被合并到版本库。 你可以通过点击项目页面右上角的“Fork”按钮，来派生这个项目。 ​ “Fork”按钮 ​ 稍等片刻，你将被转到新项目页面，该项目包含可写的代码副本。 2.2 GitHub 流程 ​ GitHub 设计了一个以合并请求为中心的特殊合作流程。 它基于我们在Git 分支的特性分支中提到的工作流程。 不管你是在一个紧密的团队中使用单独的版本库，或者使用许多的“Fork”来为一个由陌生人组成的国际企业或网络做出贡献，这种合作流程都能应付。 ​ 流程通常如下： 从 master 分支中创建一个新分支 提交一些修改来改进项目 将这个分支推送到 GitHub 上 创建一个合并请求 讨论，根据实际情况继续修改 项目的拥有者合并或关闭你的合并请求 ​ 这基本和集成管理者工作流中的一体化管理流程差不多，但是团队可以使用 GitHub 提供的网页工具替代电子邮件来交流和审查修改。 ​ 现在我们来看一个使用这个流程的例子。 2.2.1 创建合并请求 ​ Tony 在找一些能在他的 Arduino 微控制器上运行的代码，他觉得 https://github.com/schacon/blink 中的代码不错。 ​ 他想要做出贡献的项目 ​ 但是有个问题，这个代码中的的闪烁频率太高，我们觉得 3 秒一次比 1 秒一次更好一些。 所以让我们来改进这个程序，并将修改后的代码提交给这个项目。 ​ 首先，单击“Fork”按钮来获得这个项目的副本。 我们使用的用户名是“tonychacon”，所以这个项目副本的访问地址是： https://github.com/tonychacon/blink 。 我们将它克隆到本地，创建一个分支，修改代码，最后再将改动推送到 GitHub。 $ git clone https://github.com/tonychacon/blink (1) Cloning into 'blink'... $ cd blink $ git checkout -b slow-blink (2) Switched to a new branch 'slow-blink' $ sed -i '' 's/1000/3000/' blink.ino (3) $ git diff --word-diff (4) diff --git a/blink.ino b/blink.ino index 15b9911..a6cc5a5 100644 --- a/blink.ino +++ b/blink.ino @@ -18,7 +18,7 @@ void setup() { // the loop routine runs over and over again forever: void loop() { digitalWrite(led, HIGH); // turn the LED on (HIGH is the voltage level) [-delay(1000);-]{+delay(3000);+} // wait for a second digitalWrite(led, LOW); // turn the LED off by making the voltage LOW [-delay(1000);-]{+delay(3000);+} // wait for a second } $ git commit -a -m 'three seconds is better' (5) [slow-blink 5ca509d] three seconds is better 1 file changed, 2 insertions(+), 2 deletions(-) $ git push origin slow-blink (6) Username for 'https://github.com': tonychacon Password for 'https://tonychacon@github.com': Counting objects: 5, done. Delta compression using up to 8 threads. Compressing objects: 100% (3/3), done. Writing objects: 100% (3/3), 340 bytes | 0 bytes/s, done. Total 3 (delta 1), reused 0 (delta 0) To https://github.com/tonychacon/blink * [new branch] slow-blink -> slow-blink 将派生出的副本克隆到本地 创建出名称有意义的分支 修改代码 检查改动 将改动提交到分支中 将新分支推送到 GitHub 的副本中 ​ 现在到 GitHub 上查看之前的项目副本，可以看到 GitHub 提示我们有新的分支，并且显示了一个大大的绿色按钮让我们可以检查我们的改动，并给源项目创建合并请求。 ​ 你也可以到“Branches”（分支）页面查看分支并创建合并请求： https://github.com///branches ​ 合并请求按钮 ​ 如果你点击了那个绿色按钮，就会看到一个新页面，在这里我们可以对改动填写标题和描述，让项目的拥有者考虑一下我们的改动。通常花点时间来编写个清晰有用的描述是个不错的主意，这能让作者明白为什么这个改动可以给他的项目带来好处，并且让他接受合并请求。 ​ 同时我们也能看到比主分支中所“领先”（ahead）的提交（在这个例子中只有一个）以及所有将会被合并的改动与之前代码的对比。 ​ 合并请求创建页面 ​ 当你单击了“Create pull request”（创建合并请求）的按钮后，这个项目的拥有者将会收到一条包含关改动和合并请求页面的链接的提醒。 Notes:虽然合并请求通常是在贡献者准备好在公开项目中提交改动的时候提交，但是也常被用在仍处于开发阶段的内部项目中。因为合并请求在提交后 依然可以加入新的改动 ，它也经常被用来建立团队合作的环境，而不只是在最终阶段使用。 2.2.2 利用合并请求 ​ 现在，项目的拥有者可以看到你的改动并合并它，拒绝它或是发表评论。在这里我们就当作他喜欢这个点子，但是他想要让灯熄灭的时间比点亮的时间稍长一些。 ​ 接下来可能会通过电子邮件进行互动，就像我们在 [分布式 Git]中提到的工作流程那样，但是在 GitHub，这些都在线上完成。项目的拥有者可以审查修改，只需要单击某一行，就可以对其发表评论。 ​ 对合并请求内的特定一行发表评论 ​ 当维护者发表评论后，提交合并请求的人，以及所有正在关注（Watching）这个版本库的用户都会收到通知。我们待会儿将会告诉你如何修改这项设置。现在，如果 Tony 有开启电子邮件提醒，他将会收到这样的一封邮件： ​ 通过电子邮件发送的评论提醒 ​ 每个人都能在合并请求中发表评论。在 [合并请求讨论页面]里我们可以看到项目拥有者对某行代码发表评论，并在讨论区留下了一个普通评论。你可以看到被评论的代码也会在互动中显示出来。 ​ 合并请求讨论页面 ​ 现在贡献者可以看到如何做才能让他们的改动被接受。幸运的是，这也是一件轻松的事情。如果你使用的是电子邮件进行交流，你需要再次对代码进行修改并重新提交至邮件列表，在 GitHub 上，你只需要再次提交到你的分支中并推送即可。 ​ 如果贡献者完成了以上的操作，项目的拥有者会再次收到提醒，当他们查看页面时，将会看到最新的改动。事实上，只要提交中有一行代码改动，GitHub 都会注意到并处理掉旧的变更集。 ​ 最终的合并请求 ​ 如果你点开合并请求的“Files Changed”（更改的文件）选项卡，你将会看到“整理过的”差异表 —— 也就是这个分支被合并到主分支之后将会产生的所有改动，其实就是 git diff master... 命令的执行结果。你可以浏览 [确定引入了哪些东西]来了解更多关于差异表的知识。 ​ 你还会注意到，GitHub 会检查你的合并请求是否能直接合并，如果可以，将会提供一个按钮来进行合并操作。这个按钮只在你对版本库有写入权限并且可以进行简洁合并时才会显示。你点击后 GitHub 将做出一个“非快进式”（non-fast-forward）合并，即使这个合并 能够 快进式（fast-forward）合并，GitHub 依然会创建一个合并提交。 ​ 如果你需要，你还可以将分支拉取并在本地合并。如果你将这个分支合并到 master 分支中并推送到 GitHub，这个合并请求会被自动关闭。 ​ 这就是大部分 GitHub 项目使用的工作流程。创建分支，基于分支创建合并请求，进行讨论，根据需要继续在分支上进行修改，最终关闭或合并合并请求。 Notes:不必总是 Fork有件很重要的事情：你可以在同一个版本库中不同的分支提交合并请求。如果你正在和某人实现某个功能，而且你对项目有写权限，你可以推送分支到版本库，并在 master 分支提交一个合并请求并在此进行代码审查和讨论的操作。不需要进行“Fork”。 2.3 合并请求的进阶用法 ​ 目前，我们学到了如何在 GitHub 平台对一个项目进行最基础的贡献。现在我们会教给你一些小技巧，让你可以更加有效率地使用合并请求。 2.3.1 将合并请求制作成补丁 ​ 有一件重要的事情：许多项目并不认为合并请求可以作为补丁，就和通过邮件列表工作的的项目对补丁贡献的看法一样。大多数的 GitHub 项目将合并请求的分支当作对改动的交流方式，并将变更集合起来统一进行合并。 ​ 这是个重要的差异，因为一般来说改动会在代码完成前提出，这和基于邮件列表的补丁贡献有着天差地别。这使得维护者们可以更早的沟通，由社区中的力量能提出更好的方案。当有人从合并请求提交了一些代码，并且维护者和社区提出了一些意见，这个补丁系列并不需要从头来过，只需要将改动重新提交并推送到分支中，这使得讨论的背景和过程可以齐头并进。 ​ 举个例子，你可以回去看看 [最终的合并请求]，你会注意到贡献者没有变基他的提交再提交一个新的合并请求，而是直接增加了新的提交并推送到已有的分支中。如果你之后再回去查看这个合并请求，你可以轻松地找到这个修改的原因。点击网页上的“Merge”（合并）按钮后，会建立一个合并提交并指向这个合并请求，你就可以很轻松的研究原来的讨论内容。 2.3.2 与上游保持同步 ​ 如果你的合并请求由于过时或其他原因不能干净地合并，你需要进行修复才能让维护者对其进行合并。GitHub 会对每个提交进行测试，让你知道你的合并请求能否简洁的合并。 ​ 不能进行干净合并 ​ 如果你看到了像不能进行干净合并中的画面，你就需要修复你的分支让这个提示变成绿色，这样维护者就不需要再做额外的工作。 ​ 你有两种方法来解决这个问题。你可以把你的分支变基到目标分支中去（通常是你派生出的版本库中的 master 分支），或者你可以合并目标分支到你的分支中去。 ​ GitHub 上的大多数的开发者会使用后一种方法，基于我们在上一节提到的理由：我们最看重的是历史记录和最后的合并，变基除了给你带来看上去简洁的历史记录，只会让你的工作变得更加困难且更容易犯错。 ​ 如果你想要合并目标分支来让你的合并请求变得可合并，你需要将源版本库添加为一个新的远端，并从远端抓取内容，合并主分支的内容到你的分支中去，修复所有的问题并最终重新推送回你提交合并请求使用的分支。 ​ 在这个例子中，我们再次使用之前的“tonychacon”用户来进行示范，源作者提交了一个改动，使得合并请求和它产生了冲突。现在来看我们解决这个问题的步骤。 $ git remote add upstream https://github.com/schacon/blink (1) $ git fetch upstream (2) remote: Counting objects: 3, done. remote: Compressing objects: 100% (3/3), done. Unpacking objects: 100% (3/3), done. remote: Total 3 (delta 0), reused 0 (delta 0) From https://github.com/schacon/blink * [new branch] master -> upstream/master $ git merge upstream/master (3) Auto-merging blink.ino CONFLICT (content): Merge conflict in blink.ino Automatic merge failed; fix conflicts and then commit the result. $ vim blink.ino (4) $ git add blink.ino $ git commit [slow-blink 3c8d735] Merge remote-tracking branch 'upstream/master' \\ into slower-blink $ git push origin slow-blink (5) Counting objects: 6, done. Delta compression using up to 8 threads. Compressing objects: 100% (6/6), done. Writing objects: 100% (6/6), 682 bytes | 0 bytes/s, done. Total 6 (delta 2), reused 0 (delta 0) To https://github.com/tonychacon/blink ef4725c..3c8d735 slower-blink -> slow-blink 将源版本库添加为一个远端，并命名为“upstream”（上游） 从远端抓取最新的内容 将主分支的内容合并到你的分支中 修复产生的冲突 再推送回同一个分支 ​ 你完成了上面的步骤后，合并请求将会自动更新并重新检查是否能干净的合并。 合并请求现在可以干净地合并了 ​ Git 的伟大之处就是你可以一直重复以上操作。如果你有一个运行了十分久的项目，你可以轻松地合并目标分支且只需要处理最近的一次冲突，这使得管理流程更加容易。 ​ 如果你一定想对分支做变基并进行清理，你可以这么做，但是强烈建议你不要强行的提交到已经提交了合并请求的分支。如果其他人拉取了这个分支并进行一些修改，你将会遇到 [变基的风险]中提到的问题。相对的，将变基后的分支推送到 GitHub 上的一个新分支中，并且创建一个全新的合并请求引用旧的合并请求，然后关闭旧的合并请求。 2.3.3 参考 ​ 你的下个问题可能是“我该如何引用旧的合并请求？”。有许多方法可以让你在 GitHub 上的几乎任何地方引用其他东西。 ​ 先从如何对合并请求或议题（Issue）进行相互引用开始。所有的合并请求和议题在项目中都会有一个独一无二的编号。举个例子，你无法同时拥有 3 号合并请求和 3 号议题。如果你想要引用任何一个合并请求或议题，你只需要在提交或描述中输入 # 即可。你也可以指定引用其他版本库的议题或合并请求，如果你想要引用其他人对该版本库的“Fork”中的议题或合并请求，输入 用户名# ，如果在不同的版本库中，输入 用户名/版本库名# 。 ​ 我们来看一个例子。假设我们对上个例子中的分支进行了变基，并为此创建一个新的合并请求，现在我们希望能在新的合并请求中引用旧的合并请求。我们同时希望引用一个派生出的项目中的议题和一个完全不同的项目中的议题，就可以像 [在合并请求中的交叉引用]这样填写描述。 ​ 在合并请求中的交叉引用 当我们提交了这个合并请求，我们将会看到以上内容被渲染成这样：[在合并请求中渲染后的交叉引用] 在合并请求中渲染后的交叉引用 ​ 你会注意到完整的 GitHub 地址被简化了，只留下了必要的信息。 ​ 如果 Tony 回去关闭了源合并请求，我们可以看到一个被引用的提示，GitHub 会自动的反向追踪事件并显示在合并请求的时间轴上。这意味着任何查看这个合并请求的人可以轻松地访问新的合并请求。这个链接就像 [在合并请求中渲染后的交叉引用]中展示的那样。 在合并请求中渲染后的交叉引用 ​ 除了议题编号外，你还可以通过使用提交的 SHA-1 来引用提交。你必须完整的写出 40 位长的 SHA，GitHub 会在评论中自动地产生指向这个提交的链接。同样的，你可以像引用议题一样对“Fork”出的项目中的提交或者其他项目中的提交进行引用。 2.4 Markdown ​ 对于在 GitHub 中绝大多数文本框中能够做到的事，引用其他议题只是个开始。在议题和合并请求的描述，评论和代码评论还有其他地方，都可以使用“GitHub 风格的 Markdown”。Markdown 可以让你输入纯文本，但是渲染出丰富的内容。 查看 [一个 Markdown 的例子和渲染效果]里的例子来了解如何书写评论或文本，并通过 Markdown 进行渲染。 一个 Markdown 的例子和渲染效果 2.4.1 GitHub 风格的 Markdown ​ GitHub 风格的 Markdown 增加了一些基础的 Markdown 中做不到的东西。它在创建合并请求和议题中的评论和描述时十分有用。 2.4.1.1 任务列表 ​ 第一个 GitHub 专属的 Markdown 功能，特别是用在合并请求中，就是任务列表。一个任务列表可以展示出一系列你想要完成的事情，并带有复选框。把它们放在议题或合并请求中时，通常可以展示你想要完成的事情。 你可以这样创建一个任务列表： - [X] 编写代码 - [ ] 编写所有测试程序 - [ ] 为代码编写文档 ​ 如果我们将这个列表加入合并请求或议题的描述中，它将会被渲染 [Markdown 评论中渲染后的任务列表] 这样。 Markdown 评论中渲染后的任务列表 ​ 在合并请求中，任务列表经常被用来在合并之前展示这个分支将要完成的事情。最酷的地方就是，你只需要点击复选框，就能更新评论 —— 你不需要直接修改 Markdown。 ​ 不仅如此，GitHub 还会将你在议题和合并请求中的任务列表整理起来集中展示。举个例子，如果你在一个合并请求中有任务清单，你将会在所有合并请求的总览页面上看到它的进度。这使得人们可以把一个合并请求分解成不同的小任务，同时便于其他人了解分支的进度。你可以在 [在合并请求列表中的任务列表总结]看到一个例子。 在合并请求列表中的任务列表总结 ​ 当你在实现一个任务的早期就提交合并请求，并使用任务清单追踪你的进度，这个功能会十分的有用。 2.4.1.2 摘录代码 ​ 你也可以在评论中摘录代码。这在你想要展示尚未提交到分支中的代码时会十分有用。它也经常被用在展示无法正常工作的代码或这个合并请求需要的代码。 ​ 你需要用“反引号”将需要添加的摘录代码包起来。 ​```java for(int i=0 ; i ​ 如果加入语言的名称，就像我们这里加入的“java”一样，GitHub 会自动尝试对摘录的片段进行语法高亮。在下面的例子中，它最终会渲染成这个样子： [渲染后的摘录代码示例] 。 ![渲染后的摘录代码](..\\images\\Git\\markdown-04-fenced-code.png) 渲染后的摘录代码示例 ##### 2.4.1.3 引用 ​ 如果你在回复一个很长的评论之中的一小段，你只需要复制你需要的片段，并在每行前添加 `>` 符号即可。事实上，因为这个功能会被经常用到，它也有一个快捷键。只要你把你要回应的文字选中，并按下 `r` 键，选中的问题会自动引用并填入评论框。 ​ 引用的部分就像这样: Whether 'tis Nobler in the mind to suffer The Slings and Arrows of outrageous Fortune, How big are these slings and in particular, these arrows? ​ 经过渲染后，就会变成这样： [渲染后的引用示例] ![渲染后的引用](..\\images\\Git\\markdown-05-quote.png) 渲染后的引用示例 ##### 2.4.1.4 表情符号（EMOJI） ​ 最后，我们可以在评论中使用表情符号。这经常出现在 GitHub 的议题和合并请求的评论中。GitHub 上甚至有表情助手。如果你在输入评论时以 `:` 开头，自动完成器会帮助你找到你需要的表情。 ![表情符号自动完成器](..\\images\\Git\\markdown-06-emoji-complete.png) 表情符号自动完成器 ​ 你也可以在评论的任何地方使用 `::` 来添加表情符号。举个例子，你可以输入以下文字： I :eyes: that :bug: and I :cold_sweat:. :trophy: for :microscope: it. :+1: and :sparkles: on this :ship:, it's :fire::poop:! :clap::tada::panda_face: ​ 渲染之后，就会变成这样： 使用了大量表情符号的评论 ![Emoji](..\\images\\Git\\markdown-07-emoji.png) 使用了大量表情符号的评论 ​ 虽然这个功能并不是非常实用，但是它在这种不方便表达感情的媒体里，加入了趣味的元素。 > **Notes**:事实上现在已经有大量的在线服务可以使用表情符号，这里有个列表可以让你快速的找到能表达你的情绪的表情符号：[http://www.emoji-cheat-sheet.com](http://www.emoji-cheat-sheet.com/) ##### 2.4.1.5 图片 ​ 从技术层面来说，这并不是 GitHub 风格 Markdown 的功能，但是也很有用。如果不想使用 Markdown 语法来插入图片，GitHub 允许你通过拖拽图片到文本区来插入图片。 ![拖拽插入图片](..\\images\\Git\\markdown-08-drag-drop.png) 通过拖拽的方式自动插入图片 如果你回去查看 [在合并请求中的交叉引用]，你会发现文本区上有个“Parsed as Markdown”的提示。点击它你可以了解所有能在 GitHub 上使用的 Markdown 功能。 ## 3. 维护项目 ​ 现在我们可以很方便地向一个项目贡献内容，来看一下另一个方面的内容：创建、维护和管理你自己的项目。 ### 3.1 创建新的版本库 让我们创建一个版本库来分享我们的项目。 通过点击面板右侧的“New repository”按钮，或者顶部工具条你用户名旁边的 `+` 按钮来开始我们的旅程。 参见 [这是 “New repository” 下拉列表.]。 ![“Your repositories” 区域.](..\\images\\Git\\newrepo.png) 这是 “Your repositories” 区域. ![“new repository” 下拉列表.](..\\images\\Git\\new-repo.png) 这是 “New repository” 下拉列表. 这会带你到 “new repository” 表单: ![“new repository” 表单。](..\\images\\Git\\newrepoform.png) 这是 “new repository” 表单. ​ 这里除了一个你必须要填的项目名，其他字段都是可选的。 现在只需要点击 “Create Repository” 按钮，Duang!!! – 你就在 GitHub 上拥有了一个以 `/` 命名的新仓库了。 ​ 因为目前暂无代码，GitHub 会显示有关创建新版本库或者关联到一个已有的 Git 版本库的一些说明。 我们不会在这里详细说明此项，如果你需要复习，去看 [Git 基础]。 ​ 现在你的项目就托管在 GitHub 上了，你可以把 URL 给任何你想分享的人。 GitHub 上的项目可通过 HTTP 或 SSH 访问，格式是：HTTP ： `https://github.com//` ， SSH ： `git@github.com:/` 。 Git 可以通过以上两种 URL 进行抓取和推送，但是用户的访问权限又因连接时使用的证书不同而异。 > **Notes**:通常对于公开项目可以优先分享基于 HTTP 的 URL，因为用户克隆项目不需要有一个 GitHub 帐号。 如果你分享 SSH URL，用户必须有一个帐号并且上传 SSH 密钥才能访问你的项目。 HTTP URL 与你贴到浏览器里查看项目用的地址是一样的。 ### 3.2 添加合作者 ​ 如果你想与他人合作，并想给他们提交的权限，你需要把他们添加为 “Collaborators”。 如果 Ben，Jeff，Louise 都在 GitHub 上注册了，你想给他们推送的权限，你可以将他们添加到你的项目。 这样做会给他们 “推送” 权限，就是说他们对项目和 Git 版本库都有读写的权限。 ​ 点击边栏底部的 “Settings” 链接。 ![版本库设置链接.](..\\images\\Git\\reposettingslink.png) 版本库设置链接. ​ 然后从左侧菜单中选择 “Collaborators” 。 然后，在输入框中填写用户名，点击 “Add collaborator.” 如果你想授权给多个人，你可以多次重复这个步骤。 如果你想收回权限，点击他们同一行右侧的 “X” ![版本库合作者.](..\\images\\Git\\collaborators.png) 版本库合作者. ### 3.3 管理合并请求 ​ 现在你有一个包含一些代码的项目，可能还有几个有推送权限的合作者，下面来看当你收到合并请求时该做什么。 ​ 合并请求可以来自仓库副本的一个分支，或者同一仓库的另一个分支。 唯一的区别是 fork 过来的通常是和你不能互相推送的人，而内部的推送通常都可以互相访问。 ​ 作为例子，假设你是 “tonychacon” ，你创建了一个名为 “fade” 的 Arduino 项目. #### 3.3.1 邮件通知 ​ 有人来修改了你的代码，给你发了一个合并请求。 你会收一封关于合并请求的提醒邮件，它看起来像 [新的合并请求的邮件通知.]。 ![合并请求的邮件通知](..\\images\\Git\\maint-01-email.png) 新的合并请求的邮件通知. ​ 关于这个邮件有几个要注意的地方。 它会给你一个小的变动统计结果 — 一个包含合并请求中改变的文件和改变了多少的列表。 它还给你一个 GitHub 上进行合并请求操作的链接。 还有几个可以在命令行使用的 URL。 ​ 如果你注意到 `git pull patch-1` 这一行，这是一种合并远程分支的简单方式，无需必须添加一个远程分支。 我们很快会在[检出远程分支]讲到它。 如果你愿意，你可以创建并切换到一个主题分支，然后运行这个命令把合并请求合并进来。 ​ 还有一些有趣的 URL，像 `.diff` 和 `.patch` ，就像你猜的那样，它们提供 diff 和 patch 的标准版本。 你可以技术性地用下面的方法合并“合并请求”： ```console $ curl http://github.com/tonychacon/fade/pull/1.patch | git am 3.3.2 在合并请求上进行合作 ​ 就像我们在 [GitHub 流程]， 说过的，现在你可以跟开启合并请求的人进行会话。 你既可以对某些代码添加注释，也可以对整个提交添加注释或对整个合并请求添加注释，在任何地方都可以用 GitHub Flavored Markdown。 ​ 每次有人在合并请求上进行注释你都会收到通知邮件，通知你哪里发生改变。 他们都会包含一个到改变位置的链接，你可以直接在邮件中对合并请求进行注释。 Responses to emails are included in the thread. ​ 一旦代码符合了你的要求，你想把它合并进来，你可以把代码拉取下来在本地进行合并，也可以用我们之前提到过的 git pull 语法，或者把 fork 添加为一个 remote，然后进行抓取和合并。 ​ 对于很琐碎的合并，你也可以用 GitHub 网站上的 “Merge” 按钮。 它会做一个 “non-fast-forward” 合并，即使可以快进（fast-forward）合并也会产生一个合并提交记录。 就是说无论如何，只要你点击 merge 按钮，就会产生一个合并提交记录。 你可以在 [合并按钮和手工合并一个合并请求的指令.] 看到，如果你点击提示链接，GitHub 会给你所有的这些信息。 合并按钮和手工合并一个合并请求的指令. ​ 如果你决定不合并它，你可以把合并请求关掉，开启合并请求的人会收到通知。 3.3.3 合并请求引用 ​ 如果你正在处理 许多 合并请求，不想添加一堆 remote 或者每次都要做一次拉取，这里有一个可以在 GitHub 上用的小技巧。 这是有点高级的技巧，但它相当有用，我们会在 [引用规格]有更多的细节说明。 ​ 实际上 GitHub 在服务器上把合并请求分支视为一种 “假分支”。 默认情况下你克隆时不会得到它们，但它们还是隐式地存在，你可以很容易地访问到它们。 ​ 为了展示这个，我们要用到一个叫做 ls-remote 的低级命令（通常被叫做“plumbing”，我们会在 [底层命令和高层命令] 读到更多相关内容）。 这个命令在日常 Git 操作中基本不会用到，但在显示服务器上有哪些引用（reference）时很管用。 ​ 如果在我们之前用过的 “blink” 版本库上使用这个命令，我们会得到一个版本库里所有的分支，标签和其它引用（reference）的列表。 $ git ls-remote https://github.com/schacon/blink 10d539600d86723087810ec636870a504f4fee4d HEAD 10d539600d86723087810ec636870a504f4fee4d refs/heads/master 6a83107c62950be9453aac297bb0193fd743cd6e refs/pull/1/head afe83c2d1a70674c9505cc1d8b7d380d5e076ed3 refs/pull/1/merge 3c8d735ee16296c242be7a9742ebfbc2665adec1 refs/pull/2/head 15c9f4f80973a2758462ab2066b6ad9fe8dcf03d refs/pull/2/merge a5a7751a33b7e86c5e9bb07b26001bb17d775d1a refs/pull/4/head 31a45fc257e8433c8d8804e3e848cf61c9d3166c refs/pull/4/merge ​ 当然，如果你在你自己的版本库或其它你想检查的远程版本库中使用 git ls-remote origin ，它会显示相似的内容。 ​ 如果版本库在 GitHub 上并且有打开的合并请求，你会得到一些以 refs/pull/ 开头的引用。 它们实际上是分支，但因为它们不在 refs/heads/ 中，所以正常情况下你克隆时不会从服务器上得到它们 — 抓取过程正常情况下会忽略它们。 ​ 每个合并请求有两个引用——其中以 /head 结尾的引用指向的提交记录与合并请求分支中的最后一个提交记录是同一个。 所以如果有人在我们的版本库中开启了一个合并请求，他们的分支叫做 bug-fix，指向 a5a775 这个提交记录，那么在 我们的 版本库中我们没有 bug-fix 分支（因为那是在他们的 fork 中），但我们 可以 有一个 pull//head 指向 a5a775。 这意味着我们可以很容易地拉取每一个合并请求分支而不用添加一堆 remote。 ​ 现在，你可以像直接抓取引用一样抓取那些分支或提交。 $ git fetch origin refs/pull/958/head From https://github.com/libgit2/libgit2 * branch refs/pull/958/head -> FETCH_HEAD ​ 这告诉 Git： “连接到 origin 这个 remote，下载名字为 refs/pull/958/head 的引用。” Git 高高兴兴去执行，下载构建那个引用需要的所有内容，然后把指针指向 .git/FETCH_HEAD 下面你想要的提交记录。 然后你可以用 git merge FETCH_HEAD 把它合并到你想进行测试的分支，但那个合并的提交信息看起来有点怪。 然而，如果你需要审查 一大批 合并请求，这样操作会很麻烦。 ​ 还有一种方法可以抓取 所有的 合并请求，并且在你连接到远程（remote）的时候保持更新。 用你最喜欢的编辑器打开 .git/config ，查找 origin 远程（remote）。 看起来差不多像下面这样： [remote \"origin\"] url = https://github.com/libgit2/libgit2 fetch = +refs/heads/*:refs/remotes/origin/* ​ 以 fetch = 开头的行是一个 “refspec.” 它是一种把 remote 的名称映射到你本地 .git 目录的方法。 这一条（就是上面的这一条）告诉 Git，“remote 上 refs/heads 下面的内容在我本地版本库中都放在 refs/remotes/origin 。” 你可以把这一段修改一下，添加另一个 refspec： [remote \"origin\"] url = https://github.com/libgit2/libgit2.git fetch = +refs/heads/*:refs/remotes/origin/* fetch = +refs/pull/*/head:refs/remotes/origin/pr/* ​ 最后一行告诉 Git： “所有看起来像 refs/pull/123/head 的引用应该在本地版本库像 refs/remotes/origin/pr/123 一样存储” 现在，如果你保存那个文件，执行 git fetch： $ git fetch # … * [new ref] refs/pull/1/head -> origin/pr/1 * [new ref] refs/pull/2/head -> origin/pr/2 * [new ref] refs/pull/4/head -> origin/pr/4 # … ​ 现在所有的合并请求在本地像分支一样展现，它们是只读的，当你执行抓取时它们也会更新。 这让在本地测试合并请求中的代码变得超级简单： $ git checkout pr/2 Checking out files: 100% (3769/3769)， done. Branch pr/2 set up to track remote branch pr/2 from origin. Switched to a new branch 'pr/2' ​ 你的鹰眼系统会发现在 refspec 的 remote 部分的结尾有个 head 。 在 GitHub 那边也有一个 refs/pull/#/merge 引用，它代表的是如果你在网站上按了 “merge” 按钮对应的提交记录。 这甚至让你可以在按按钮之前就测试这个合并。 3.3.4 合并请求之上的合并请求 ​ 你不仅可以在主分支或者说 master 分支上开启合并请求，实际上你可以在网络上的任何一个分支上开启合并请求。 其实，你甚至可以在另一个合并请求上开启一个合并请求。 ​ 如果你看到一个合并请求在向正确的方向发展，然后你想在这个合并请求上做一些修改或者你不太确定这是个好主意，或者你没有目标分支的推送权限，你可以直接在合并请求上开启一个合并请求。 ​ 当你开启一个合并请求时，在页面的顶端有一个框框显示你要合并到哪个分支和你从哪个分支合并过来的。 如果你点击那个框框右边的 “Edit” 按钮，你不仅可以改变分支，还可以选择哪个 fork。 手工修改合并请求的目标. ​ 这里你可以很简单地指明合并你的分支到哪一个合并请求或 fork。 3.5 提醒和通知 ​ GitHub 内置了一个很好的通知系统，当你需要与别人或别的团队交流时用起来很方便。 ​ 在任何评论中你可以先输入一个 @ ，系统会自动补全项目中合作者或贡献者的名字和用户名。 输入 @ 来提醒某人. ​ 你也可以提醒不在列表中的用户，但是通常自动补全用起更快。 ​ 当你发布了一个带用户提醒的评论，那个用户会收到通知。 这意味着把人们拉进会话中要比让他们投票有效率得多。 对于 GitHub 上的合并请求，人们经常把他们团队或公司中的其它人拉来审查问题或合并请求。 ​ 如果有人收到了合并请求或问题的提醒，他们会“订阅”它，后面有新的活动发生他们都会持续收到提醒。 如果你是合并请求或者问题的发起方你也会被订阅上，比如你在关注一个版本库或者你评论了什么东西。 如果你不想再收到提醒，在页面上有个 “Unsubscribe” 按钮，点一下就不会再收到更新了。 取消订阅一个问题或合并请求. 3.6 通知页面 ​ 当我们在这提到特指 GitHub 的 “notifications” ，指的是当 GitHub 上有事件发生时，它通知你的方式，这里有几种不同的方式来配置它们。 如果你打开配置页面的 “Notification center” 标签，你可以看到一些选项。 通知中心选项. ​ 有两个选项，通过“邮件（Email）”和通过“网页（Web）”，你可以选用一个或者都不选或者都选。 3.7 网页通知 ​ 网页通知只在 GitHub 上存在，你也只能在 GitHub 上查看。 如果你打开了这个选项并且有一个你的通知，你会在你屏幕上方的通知图标上看到一个小蓝点。参见 [通知中心.]。 通知中心. ​ 如果你点击那个玩意儿，你会看到你被通知到的所有条目，按照项目分好了组。 你可以点击左边栏的项目名字来过滤项目相关的通知。 你可以点击通知旁边的对号图标把通知标为已读，或者点击组上面的图标把项目中 所有的 通知标为已读。 在每个对号图标旁边都有一个静音按钮，你可以点一下，以后就不会收到它相关的通知。 ​ 所有这些工具对于处理大量通知非常有用。 很多 GitHub 资深用户都关闭邮件通知，在这个页面上处理他们所有的通知。 3.8 邮件通知 ​ 邮件通知是你处理 GitHub 通知的另一种方式。 如果你打开这个选项，每当有通知时，你会收到一封邮件。 我们在 [通过电子邮件发送的评论提醒] 和 [新的合并请求的邮件通知.] 看到了一些例子。 邮件也会被合适地按话题组织在一起，如果你使用一个具有会话功能的邮件客户端那会很方便。 ​ GitHub 在发送给你的邮件头中附带了很多元数据，这对于设置过滤器和邮件规则非常有帮助。 ​ 举个例子，我们来看一看在 [新的合并请求的邮件通知.]中发给 Tony 的一封真实邮件的头部，我们会看到下面这些： To: tonychacon/fade Message-ID: Subject: [fade] Wait longer to see the dimming effect better (#1) X-GitHub-Recipient: tonychacon List-ID: tonychacon/fade List-Archive: https://github.com/tonychacon/fade List-Post: List-Unsubscribe: ，... X-GitHub-Recipient-Address: tchacon@example.com ​ 这里有一些有趣的东西。 如果你想高亮或者转发这个项目甚至这个合并请求相关的邮件，Message-ID 中的信息会以 /// 的格式展现所有的数据。 例如，如果这是一个问题（issue），那么 字段就会是 “issues” 而不是 “pull” 。 ​ List-Post 和 List-Unsubscribe 字段表示如果你的邮件客户端能够处理这些，那么你可以很容易地在列表中发贴或取消对这个相关帖子的订阅。 那会很有效率，就像在页面中点击静音按钮或在问题／合并请求页面点击 “Unsubscribe” 一样。 ​ 值得注意的是，如果你同时打开了邮件和网页通知，那么当你在邮件客户端允许加载图片的情况下阅读邮件通知时，对应的网页通知也将会同时被标记为已读。 3.9 特殊文件 ​ 如果你的版本库中有一些特殊文件，GitHub 会提醒你。 3.10 README ​ 第一个就是 README 文件，可以是几乎任何 GitHub 可以识别的格式。 例如，它可以是 README ，README.md ， README.asciidoc 。 如果 GitHub 在你的版本库中找到 README 文件，会把它在项目的首页渲染出来。 很多团队在这个文件里放版本库或项目新人需要了解的所有相关的信息。 它一般包含这些内容： 该项目的作用 如何配置与安装 有关如何使用和运行的例子 项目的许可证 如何向项目贡献力量 ​ 因为 GitHub 会渲染这个文件，你可以在文件里植入图片或链接让它更容易理解。 3.11 贡献 CONTRIBUTING ​ 另一个 GitHub 可以识别的特殊文件是 CONTRIBUTING 。 如果你有一个任意扩展名的 CONTRIBUTING 文件，当有人开启一个合并请求时 GitHub 会显示 [开启合并请求时有 CONTRIBUTING 文件存在.]。 开启合并请求时有 CONTRIBUTING 文件存在. ​ 这个的作用就是你可以在这里指出对于你的项目开启的合并请求你想要的／不想要的各种事情。 这样别人在开启合并请求之前可以读到这些指导方针。 3.12 项目管理 ​ 对于一个单个项目其实没有很多管理事务要做，但也有几点有趣的。 3.12.1 改变默认分支 ​ 如果你想用 “master” 之外的分支作为你的默认分支，其他人将默认会在这个分支上开启合并请求或进行浏览，你可以在你版本库的设置页面的 \"options\" 标签下修改。 改变项目的默认分支. ​ 简单地改变默认分支下拉列表中的选项，它就会作为所有主要操作的默认分支，他人进行克隆时该分支也将被默认检出。 3.12.2 移交项目 ​ 如果你想把一个项目移交给 GitHub 中的另一个人或另一个组织，还是设置页面的这个 “options” 标签下有一个 “Transfer ownership” 选项可以用来干这个。 把项目移交给另一个 GitHub 用户或组织。 ​ 当你正准备放弃一个项目且正好有别人想要接手时，或者你的项目壮大了想把它移到一个组织里时，这就管用了。 ​ 这么做不仅会把版本库连带它所有的观察和星标数都移到另一个地方，它还会将你的 URL 重定向到新的位置。 它也重定向了来自 Git 的克隆和抓取，而不仅仅是网页端请求。 4. 管理组织 ​ 除了个人帐户之外，GitHub 还提供被称为组织（Organizations）的帐户。 组织账户和个人账户一样都有一个用于存放所拥有项目的命名空间，但是许多其他的东西都是不同的。 组织帐户代表了一组共同拥有多个项目的人，同时也提供一些工具用于对成员进行分组管理。 通常，这种账户被用于开源群组（例如：“perl”或者“rails”），或者公司（例如：“google”或者“twitter”）。 4.1 组织的基本知识 ​ 我们可以很简单地创建一个组织，只需要点击任意 GitHub 页面右上角的“+”图标，在菜单中选择“New organization”即可。 “New organization”菜单项 ​ 首先你必须提供组织的名称和组织的主要联系邮箱。 然后，如果你希望的话，也可以邀请其他用户作为共同拥有人。 ​ 完成以上步骤后，你就会拥有一个全新的组织。 类似于个人帐户，如果组织的所有内容都是开源的，那么你就可以免费使用这个组织。 ​ 作为一个组织的拥有者，当你在派生一个版本库的时候，你可以选择把它派生到你的组织的命名空间内。 当你新建版本库时，你可以把它存放到你的个人帐户或你拥有的组织内。 同时，你也会自动地“关注”所有这些组织内的新版本库。 ​ 就像[头像]，你可以为你的组织上传头像，使它更个性化。 同时，也和个人帐户类似，组织会有一个着陆页（landing page），用于列出该组织所有的版本库，并且该页面可供所有人浏览。 下面我们来说一些组织和个人帐户不同的地方。 4.2 团队 ​ 组织使用团队（Teams）来管理成员，团队就是组织中的一组个人账户和版本库，以及团队成员对这些版本库的访问权限。 ​ 例如，假设你的公司有三个版本库：frontend、backend 和 deployscripts。 你会希望你的 HTML/CSS/Javascript 开发者有 frontend 或者 backend 的访问权限，操作人员有 backend 和 deployscripts 的访问权限。 团队让这个任务变得更简单，而不用为每个版本库管理它的协作者。 ​ 组织页面主要由一个面板（dashboard）构成，这个仪表盘包含了这个组织内的所有版本库，用户和团队。 组织页面 ​ 你可以点击 [组织页面] 右边的团队侧边栏（Teams）来管理你的团队。 点击之后，你会进入一个新页面，在这里你可以添加新成员和版本库到团队中，或者管理团队的访问权限和其它设置。 每个团队对于版本库可以有只读、读写和管理三种权限。 你可以通过点击在 [团队页面]内的 “Settings” 按钮更改相应权限等级。 团队页面 ​ 当你邀请一个用户加入团队，该用户会收到一封通知他被邀请的邮件。 ​ 除此之外，团队也类似于个人帐户，有 @mentions（例如：@acmecorp/frontend）的功能，不同之处就在于被提及的团队内 所有 成员都会成为这个话题的订阅者。 当你希望得到团队中某个人的关注，又不知道具体应该问谁的时候，这个功能就显得很有帮助。 ​ 一个用户可以加入任意数量的团队，所以别把自己局限于拥有访问控制的团队。 对于某一类课题，像 ux, css 或者 refactoring 这样有着特殊关注点的团队就显得很有帮助，而像 legal 和 colorblind 这样的就完全是针对它们各自领域的。 4.3 审计日志 ​ 组织的拥有者还可以访问组织中发生的事情的所有信息。 在 Audit Log 标签页有整个组织的日志，你可以看到谁在世界上哪个地方做了什么事。 审计日志 ​ 你也可以通过选定某一类型的事件、某个地方、某个人对日志进行过滤。 5. 脚本 GitHub ​ 所以现在我们已经介绍了 GitHub 的大部分功能与工作流程，但是任意一个小组或项目都会去自定义，因为他们想要创造或扩展想要整合的服务。 ​ 对我们来说很幸运的是，GitHub 在许多方面都真的很方便 Hack。 在本节中我们将会介绍如何使用 GitHub 钩子系统与 API 接口，使 GitHub 按照我们的设想来工作。 5.1 钩子 ​ GitHub 仓库管理中的钩子与服务区块是 GitHub 与外部系统交互最简单的方式。 5.1.1 服务 ​ 首先我们来看一下服务。 钩子与服务整合都可以在仓库的设置区块中找到，就在我们之前添加协作者与改变项目的默认分支的地方。 在 “Webhooks and Services” 标签下你会看到与 [服务与钩子配置区域] 类似的内容。 服务与钩子配置区域 ​ 有许多可以选择的服务，大多数是整合到其他的商业与开源系统中。 它们中的大多数是为了整合持续集成服务、BUG 与问题追踪系统、聊天室系统与文档系统。 我们将会通过设置一个非常简单的例子来介绍。 如果从 “Add Service” 选择 “email”，会得到一个类似 [电子邮件服务配置]的配置屏幕。 电子邮件服务配置 ​ 在本例中，如果我们点击 “Add service” 按钮，每次有人推送内容到仓库时，指定的电子邮件地址都会收到一封邮件。 服务可以监听许多不同类型的事件，但是大多数只监听推送事件然后使用那些数据做一些事情。 ​ 如果有一个正在使用的系统想要整合到 GitHub，应当先检查这里看有没有已有的可用的服务整合。 例如，如果正使用 Jenkins 来测试你的代码库，当每次有人推送到你的仓库时你可以启用 Jenkins 内置的整合启动测试运行。 5.1.2 钩子 ​ 如果需要做一些更具体的事，或者想要整合一个不在这个列表中的服务或站点，可以转而使用更通用的钩子系统。 GitHub 仓库钩子是非常简单的。 指定一个 URL 然后 GitHub 在任一期望的事件发生时就会发送一个 HTTP 请求到那个 URL 。 ​ 通常做这件事的方式是可以设置一个小的 web 服务来监听 GitHub 钩子请求然后使用收到的数据做一些事情。 ​ 为了启用一个钩子，点击 [服务与钩子配置区域]中的 “Add webhook” 按钮。 这会将你引导至一个类似 [Web 钩子配置]的页面。 Web 钩子配置 ​ Web 钩子的设置非常简单。 大多数情况下只需要输入一个 URL 与一个密钥然后点击 “Add webhook”。 有几个选项可以指定在哪个事件时想要 GitHub 发送请求 — 默认的行为是只有当某人推送新代码到仓库的任一分支时的 push 事件获得一个请求。 ​ 让我们看一个设置处理 web 钩子的 web 服务的小例子。 我们将会使用 Ruby web 框架 Sinatra，因为它相当简洁，应该能够轻松地看到我们正在做什么。 ​ 假设我们想要在某个特定的人推送到我们的项目的特定分支并修改一个特定文件时得到一封邮件。 我们可以相当容易地使用类似下面的代码做到： require 'sinatra' require 'json' require 'mail' post '/payload' do push = JSON.parse(request.body.read) # parse the JSON # gather the data we're looking for pusher = push[\"pusher\"][\"name\"] branch = push[\"ref\"] # get a list of all the files touched files = push[\"commits\"].map do |commit| commit['added'] + commit['modified'] + commit['removed'] end files = files.flatten.uniq # check for our criteria if pusher == 'schacon' && branch == 'ref/heads/special-branch' && files.include?('special-file.txt') Mail.deliver do from 'tchacon@example.com' to 'tchacon@example.com' subject 'Scott Changed the File' body \"ALARM\" end end end ​ 这里我们拿到一个 GitHub 传送给我们的 JSON 请求然后查找推送者，他们推送到了什么分支以及推送的所有提交都改动了哪些文件。 然后我们检查它是否与我们的条件区配，如果匹配则发送一封邮件。 ​ 为了开发与测试类似这样的东西，在设置钩子的地方有一个漂亮的开发者控制台。 可以看到 GitHub 为那个 webhook 的最后几次请求。 对每一个钩子，当它发送后都可以深入挖掘，检测它是否是成功的与请求及回应的消息头与消息体。 这使得测试与调试钩子非常容易。 Web 钩子调试信息 ​ 开发者控制台的另一个很棒的功能是可以轻松地重新发送任何请求来测试你的服务。 ​ 关于如何编写 web 钩子与所有可监听的不同事件类型的更多信息，请访问在 https://developer.github.com/webhooks/ 的 GitHub 开发者文档。 5.2 GitHub API ​ 服务与钩子给你提供了一种方式来接收关于在仓库中发生的事件的推送通知，但是如何获取相关事件的详情呢？如何自动化一些诸如添加协作者或给问题加标签的事情呢？ ​ 这是 GitHub API 派上用场的地方。 在自动化流行的趋势下，GitHub 提供了大量的 API 接口，可以进行几乎任何能在网站上进行的操作。 在本节中我们将会学习如何授权与连接到 API，如何通过 API 在一个问题上评论与如何修改一个 Pull Request 的状态。 5.3 基本用途 ​ 可以做的最基本的事情是向一个不需要授权的接口上发送一个简单的 GET 请求。 该接口可能是一个用户或开源项目的只读信息。 例如，如果我们想要知道更多关于名为 “schacon” 的用户信息，我们可以运行类似下面的东西： $ curl https://api.github.com/users/schacon { \"login\": \"schacon\", \"id\": 70, \"avatar_url\": \"https://avatars.githubusercontent.com/u/70\", # … \"name\": \"Scott Chacon\", \"company\": \"GitHub\", \"following\": 19, \"created_at\": \"2008-01-27T17:19:28Z\", \"updated_at\": \"2014-06-10T02:37:23Z\" } ​ 有大量类似这样的接口来获得关于组织、项目、问题、提交的信息 — 差不多就是你能在 GitHub 上看到的所有东西。 甚至可以使用 API 来渲染任意 Markdown 或寻找一个 .gitignore 模板。 $ curl https://api.github.com/gitignore/templates/Java { \"name\": \"Java\", \"source\": \"*.class # Mobile Tools for Java (J2ME) .mtj.tmp/ # Package Files # *.jar *.war *.ear # virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml hs_err_pid* \" } 5.4 在一个问题上评论 ​ 然而，如果想要在网站上进行一个操作，如在 Issue 或 Pull Request 上评论，或者想要查看私有内容或与其交互，你需要授权。 ​ 这里提供了几种授权方式。 你可以使用仅需用户名与密码的基本授权，但是通常更好的主意是使用一个个人访问令牌。 可以从设置页的 “Applications” 标签生成访问令牌。 从设置页的 “Applications” 标签生成访问令牌。 ​ 它会询问这个令牌的作用域与一个描述。 确保使用一个好的描述信息，这样当脚本或应用不再使用时你会很放心地移除。 ​ GitHub 只会显示令牌一次，所以记得一定要拷贝它。 现在可以在脚本中使用它代替使用用户名写密码来授权。 这很漂亮，因为可以限制想要做的范围并且令牌是可废除的。 ​ 这也会有一个提高频率上限的附加优点。 如果没有授权的话，你会被限制在一小时最多发起 60 次请求。 如果授权则可以一小时最多发起 5000 次请求。 ​ 所以让我们利用它来对我们的其中一个问题进行评论。 想要对一个特定问题 Issue #6 留下一条评论。 必须使用刚刚生成的令牌作为 Authorization 头信息，发送一个到 repos///issues//comments 的 HTTP POST 请求。 $ curl -H \"Content-Type: application/json\" \\ -H \"Authorization: token TOKEN\" \\ --data '{\"body\":\"A new comment, :+1:\"}' \\ https://api.github.com/repos/schacon/blink/issues/6/comments { \"id\": 58322100, \"html_url\": \"https://github.com/schacon/blink/issues/6#issuecomment-58322100\", ... \"user\": { \"login\": \"tonychacon\", \"id\": 7874698, \"avatar_url\": \"https://avatars.githubusercontent.com/u/7874698?v=2\", \"type\": \"User\", }, \"created_at\": \"2014-10-08T07:48:19Z\", \"updated_at\": \"2014-10-08T07:48:19Z\", \"body\": \"A new comment, :+1:\" } ​ 现在如果进入到那个问题，可以看到我们刚刚发布的评论，像 [从 GitHub API 发布的一条评论]一样。 从 GitHub API 发布的一条评论 ​ 可以使用 API 去做任何可以在网站上做的事情 — 创建与设置里程碑、指派人员到 Issues 与 Pull Requests，创建与修改标签、访问提交数据、创建新的提交与分支、打开关闭或合并 Pull Requests、创建与编辑团队、在 Pull Request 中评论某行代码、搜索网站等等。 5.5 修改 Pull Request 的状态 ​ 如果使用 Pull Requests 的话我们将要看到的最后一个例子会很有用。 每一个提交可以有一个或多个与它关联的状态，有 API 来添加与查询状态。 ​ 大多数持续集成与测试服务通过测试推送的代码后使用这个 API 来回应，然后报告提交是否通过了全部测试。 你也可以使用该接口来检查提交信息是否经过合适的格式化、提交者是否遵循了所有你的贡献准则、提交是否经过有效的签名 — 种种这类事情。 ​ 假设在仓库中设置了一个 web 钩子访问一个用来检查提交信息中的 Signed-off-by 字符串的小的 web 服务。 require 'httparty' require 'sinatra' require 'json' post '/payload' do push = JSON.parse(request.body.read) # parse the JSON repo_name = push['repository']['full_name'] # look through each commit message push[\"commits\"].each do |commit| # look for a Signed-off-by string if /Signed-off-by/.match commit['message'] state = 'success' description = 'Successfully signed off!' else state = 'failure' description = 'No signoff found.' end # post status to GitHub sha = commit[\"id\"] status_url = \"https://api.github.com/repos/#{repo_name}/statuses/#{sha}\" status = { \"state\" => state, \"description\" => description, \"target_url\" => \"http://example.com/how-to-signoff\", \"context\" => \"validate/signoff\" } HTTParty.post(status_url, :body => status.to_json, :headers => { 'Content-Type' => 'application/json', 'User-Agent' => 'tonychacon/signoff', 'Authorization' => \"token #{ENV['TOKEN']}\" } ) end end ​ 希望这相当容易做。 在这个 web 钩子处理器中我们浏览刚刚推送上来的每一个提交，在提交信息中查找字符串 Signed-off-by 并且最终使用 HTTP 向 /repos///statuses/ API 接口发送一个带有状态的 POST 请求。 ​ 在本例中可以发送一个状态（success, failure, error）、一个发生了什么的描述信息、一个用户可以了解更多信息的目标 URL 与一个 “context” 以防一个单独的提交有多个状态。 例如，一个测试服务可以提供一个状态与一个类似这样的验证服务也可能提供一个状态 — “context” 字段是用来区别它们的。 ​ 如果某人在 GitHub 中打开了一个新的 Pull Request 并且这个钩子已经设置，会看到类似 [通过 API 的提交状态]的信息。 通过 API 的提交状态 ​ 现在可以看到一个小的绿色对勾标记在提交信息中有 “Signed-off-by” 的提交旁边，红色的对勾标记在作者忘记签名的提交旁边。 也可以看到 Pull Request 显示在那个分支上的最后提交的状态，如果失败的话会警告你。 如果对测试结果使用这个 API 那么就不会不小心合并某些未通过测试的最新提交。 5.6 Octokit ​ 尽管我们在这些例子中都是通过 curl 与基本的 HTTP 请求来做几乎所有的事情，还有一些以更自然的方式利用 API 的开源库存在着。 在写这篇文章的时候，被支持的语言包括 Go、Objective-C、Ruby 与 .NET。 访问 http://github.com/octokit 了解更多相关信息，它们帮你处理了更多 HTTP 相关的内容。 ​ 希望这些工具能帮助你自定义与修改 GitHub 来更好地为特定的工作流程工作。 关于全部 API 的完整文档与常见任务的指南，请查阅 https://developer.github.com。 6. 总结 ​ 现在你已经是一名 GitHub 用户了。 你知道了如何创建账户、管理组织、创建和推送版本库、向别人的项目提供贡献以及接受别人的贡献。 在下一章中，你将学习更多强有力的工具，以及处理复杂情况的知识，这些将使你成为真正的 Git 大师。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Git/Chapter8.html":{"url":"Git/Chapter8.html","title":"第八章：Git工具","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 选择修订版本 1.1 单个修订版本 1.2 简短的 SHA-1 1.3 分支引用 1.4 引用日志 1.5 祖先引用 1.6 提交区间 1.6.1 双点 1.6.2 多点 1.6.3 三点 2. 交互式暂存 2.1 暂存与取消暂存文件 2.2 暂存补丁 3. 储藏与清理 3.1 储藏工作 modified: index.html ` modified: index.html Changed but not updated: modified: lib/simplegit.rb ` 3.2 创造性的储藏 3.3 从储藏创建一个分支 modified: index.html Changed but not updated: modified: lib/simplegit.rb Dropped refs/stash@{0} (f0dfc4d5dc332d1cee34a634182e168c4efc3359) 3.4 清理工作目录 4. 签署工作 4.1 GPG 介绍 4.2 签署标签 4.3 验证标签 4.4 签署提交 4.5 每个人必须签署 5. 搜索 5.1 Git Grep 5.2 Git 日志搜索 5.2.1 行日志搜索 6. 重写历史 6.1 修改最后一次提交 6.2 修改多个提交信息 Commands: These lines can be re-ordered; they are executed from top to bottom. If you remove a line here THAT COMMIT WILL BE LOST. However, if you remove everything, the rebase will be aborted. Note that empty commits are commented out 6.3 重新排序提交 6.4 压缩提交 Commands: These lines can be re-ordered; they are executed from top to bottom. If you remove a line here THAT COMMIT WILL BE LOST. However, if you remove everything, the rebase will be aborted. Note that empty commits are commented out 6.5 拆分提交 6.6 核武器级选项：filter-branch 6.6.1 从每一个提交移除一个文件 6.6.2 使一个子目录做为新的根目录 6.6.3 全局修改邮箱地址 7. 重置揭密 7.1 三棵树 7.1.1 HEAD 7.1.2 索引 7.1.3 工作目录 7.2 工作流程 7.3 重置的作用 7.3.1 第 1 步：移动 HEAD 7.3.2 第 2 步：更新索引（--mixed） 7.3.3 第 3 步：更新工作目录（--hard） 7.3.4 回顾 7.4 通过路径来重置 7.5 压缩 7.6 检出 7.6.1 不带路径 7.6.2 带路径 7.7 总结 8. 高级合并 8.1 合并冲突 8.1.1 中断一次合并 8.1.2 忽略空白 8.1.3 手动文件再合并 8.1.4 检出冲突 8.1.5 合并日志 8.1.6 组合式差异格式 8.2 撤消合并 8.2.1 修复引用 8.2.2还原提交 8.3 其他类型的合并 8.3.1 我们的或他们的偏好 8.3.2 子树合并 9. Rerere both modified: hello.rb ` 10. 使用 Git 调试 10.1 文件标注 10.2 二分查找 11. 子模块 11.1 开始使用子模块 11.2 克隆含有子模块的项目 11.3 在包含子模块的项目上工作 11.3.1 拉取上游修改 11.3.2 在子模块上工作 11.3.3 发布子模块改动 11.3.4 合并子模块改动 11.4 子模块技巧 11.4.1 子模块遍历 11.4.2 有用的别名 11.5 子模块的问题 12. 打包 13. 替换 14. 凭证存储 14.1 底层实现 14.2 自定义凭证缓存 15. 总结 第八章：Git工具 ​ 现在，你已经学习了管理或者维护 Git 仓库、实现代码控制所需的大多数日常命令和工作流程。 你已经尝试了跟踪和提交文件的基本操作，并且发挥了暂存区和轻量级的分支及合并的威力。 ​ 接下来你将学习一些 Git 的强大功能，这些功能你可能并不会在日常操作中使用，但在某些时候你可能会需要。 1. 选择修订版本 ​ Git 允许你通过几种方法来指明特定的或者一定范围内的提交。 了解它们并不是必需的，但是了解一下总没坏处。 1.1 单个修订版本 ​ 你可以通过 Git 给出的 SHA-1 值来获取一次提交，不过还有很多更人性化的方式来做同样的事情。 本节将会介绍获取单个提交的多种方法。 1.2 简短的 SHA-1 ​ Git 十分智能，你只需要提供 SHA-1 的前几个字符就可以获得对应的那次提交，当然你提供的 SHA-1 字符数量不得少于 4 个，并且没有歧义——也就是说，当前仓库中只有一个对象以这段 SHA-1 开头。 ​ 例如查看一次指定的提交，假设你执行 git log 命令来查看之前新增一个功能的那次提交： $ git log commit 734713bc047d87bf7eac9674765ae793478c50d3 Author: Scott Chacon Date: Fri Jan 2 18:32:33 2009 -0800 fixed refs handling, added gc auto, updated tests commit d921970aadf03b3cf0e71becdaab3147ba71cdef Merge: 1c002dd... 35cfb2b... Author: Scott Chacon Date: Thu Dec 11 15:08:43 2008 -0800 Merge commit 'phedders/rdocs' commit 1c002dd4b536e7479fe34593e72e6c6c1819e53b Author: Scott Chacon Date: Thu Dec 11 14:58:32 2008 -0800 added some blame and merge stuff ​ 假设这个提交是 1c002dd....，如果你想 git show 这个提交，下面的命令是等价的（假设简短的版本没有歧义）： $ git show 1c002dd4b536e7479fe34593e72e6c6c1819e53b $ git show 1c002dd4b536e7479f $ git show 1c002d ​ Git 可以为 SHA-1 值生成出简短且唯一的缩写。 如果你在 git log 后加上 --abbrev-commit 参数，输出结果里就会显示简短且唯一的值；默认使用七个字符，不过有时为了避免 SHA-1 的歧义，会增加字符数： $ git log --abbrev-commit --pretty=oneline ca82a6d changed the version number 085bb3b removed unnecessary test code a11bef0 first commit ​ 通常 8 到 10 个字符就已经足够在一个项目中避免 SHA-1 的歧义。 ​ 比如 Linux 内核这个相当大的 Git 项目，目前有超过 45 万个提交，包含 360 万个对象，也只需要前 11 个字符就能保证唯一性。 Notes:关于 SHA-1 的简短说明许多人觉得他们的仓库里有可能出现两个 SHA-1 值相同的对象。 然后呢？如果你真的向仓库里提交了一个跟之前的某个对象具有相同 SHA-1 值的对象，Git 发现仓库里已经存在了拥有相同 HASH 值的对象，就会认为这个新的提交是已经被写入仓库的。 如果之后你想检出那个对象时，你将得到先前那个对象的数据。但是这种情况发生的概率十分渺小。 SHA-1 摘要长度是 20 字节，也就是 160 位。 2^80 个随机哈希对象才有 50% 的概率出现一次冲突 （计算冲突机率的公式是 p = (n(n-1)/2) * (1/2^160)) ）。2^80 是 1.2 x 10^24 也就是一亿亿亿。 那是地球上沙粒总数的 1200 倍。举例说一下怎样才能产生一次 SHA-1 冲突。 如果地球上 65 亿个人类都在编程，每人每秒都在产生等价于整个 Linux 内核历史（360 万个 Git 对象）的代码，并将之提交到一个巨大的 Git 仓库里面，这样持续两年的时间才会产生足够的对象，使其拥有 50% 的概率产生一次 SHA-1 对象冲突。 这要比你编程团队的成员同一个晚上在互不相干的意外中被狼袭击并杀死的机率还要小。 1.3 分支引用 ​ 指明一次提交最直接的方法是有一个指向它的分支引用。 这样你就可以在任意一个 Git 命令中使用这个分支名来代替对应的提交对象或者 SHA-1 值。 例如，你想要查看一个分支的最后一次提交的对象，假设 topic1 分支指向 ca82a6d ，那么以下的命令是等价的： $ git show ca82a6dff817ec66f44342007202690a93763949 $ git show topic1 ​ 如果你想知道某个分支指向哪个特定的 SHA-1，或者想看任何一个例子中被简写的 SHA-1 ，你可以使用一个叫做 rev-parse 的 Git 探测工具。 你可以在 [Git 内部原理]中查看更多关于探测工具的信息。简单来说，rev-parse 是为了底层操作而不是日常操作设计的。 不过，有时你想看 Git 现在到底处于什么状态时，它可能会很有用。 你可以在你的分支上执行 rev-parse $ git rev-parse topic1 ca82a6dff817ec66f44342007202690a93763949 1.4 引用日志 ​ 当你在工作时， Git 会在后台保存一个引用日志（reflog），引用日志记录了最近几个月你的 HEAD 和分支引用所指向的历史。 ​ 你可以使用 git reflog 来查看引用日志 $ git reflog 734713b HEAD@{0}: commit: fixed refs handling, added gc auto, updated d921970 HEAD@{1}: merge phedders/rdocs: Merge made by recursive. 1c002dd HEAD@{2}: commit: added some blame and merge stuff 1c36188 HEAD@{3}: rebase -i (squash): updating HEAD 95df984 HEAD@{4}: commit: # This is a combination of two commits. 1c36188 HEAD@{5}: rebase -i (squash): updating HEAD 7e05da5 HEAD@{6}: rebase -i (pick): updating HEAD ​ 每当你的 HEAD 所指向的位置发生了变化，Git 就会将这个信息存储到引用日志这个历史记录里。 通过这些数据，你可以很方便地获取之前的提交历史。 如果你想查看仓库中 HEAD 在五次前的所指向的提交，你可以使用 @{n} 来引用 reflog 中输出的提交记录。 $ git show HEAD@{5} ​ 你同样可以使用这个语法来查看某个分支在一定时间前的位置。 例如，查看你的 master 分支在昨天的时候指向了哪个提交，你可以输入 $ git show master@{yesterday} ​ 就会显示昨天该分支的顶端指向了哪个提交。 这个方法只对还在你引用日志里的数据有用，所以不能用来查好几个月之前的提交。 ​ 可以运行 git log -g 来查看类似于 git log 输出格式的引用日志信息： $ git log -g master commit 734713bc047d87bf7eac9674765ae793478c50d3 Reflog: master@{0} (Scott Chacon ) Reflog message: commit: fixed refs handling, added gc auto, updated Author: Scott Chacon Date: Fri Jan 2 18:32:33 2009 -0800 fixed refs handling, added gc auto, updated tests commit d921970aadf03b3cf0e71becdaab3147ba71cdef Reflog: master@{1} (Scott Chacon ) Reflog message: merge phedders/rdocs: Merge made by recursive. Author: Scott Chacon Date: Thu Dec 11 15:08:43 2008 -0800 Merge commit 'phedders/rdocs' ​ 值得注意的是，引用日志只存在于本地仓库，一个记录你在你自己的仓库里做过什么的日志。 其他人拷贝的仓库里的引用日志不会和你的相同；而你新克隆一个仓库的时候，引用日志是空的，因为你在仓库里还没有操作。 git show HEAD@{2.months.ago} 这条命令只有在你克隆了一个项目至少两个月时才会有用——如果你是五分钟前克隆的仓库，那么它将不会有结果返回。 Tips:将引用日志想作 Git 版的 shell 历史记录如果你有 UNIX 或者 Linux 的背景，你不妨将引用日志想作 Git 版的 shell 历史记录，重点在于仅与你和你的会话相关，而与他人无关。 1.5 祖先引用 ​ 祖先引用是另一种指明一个提交的方式。 如果你在引用的尾部加上一个 ^， Git 会将其解析为该引用的上一个提交。 假设你的提交历史是： $ git log --pretty=format:'%h %s' --graph * 734713b fixed refs handling, added gc auto, updated tests * d921970 Merge commit 'phedders/rdocs' |\\ | * 35cfb2b Some rdoc changes * | 1c002dd added some blame and merge stuff |/ * 1c36188 ignore *.gem * 9b29157 add open3_detach to gemspec file list ​ 你可以使用 HEAD^ 来查看上一个提交，也就是 “HEAD 的父提交”： $ git show HEAD^ commit d921970aadf03b3cf0e71becdaab3147ba71cdef Merge: 1c002dd... 35cfb2b... Author: Scott Chacon Date: Thu Dec 11 15:08:43 2008 -0800 Merge commit 'phedders/rdocs' ​ 你也可以在 ^ 后面添加一个数字——例如 d921970^2 代表 “d921970 的第二父提交” 这个语法只适用于合并（merge）的提交，因为合并提交会有多个父提交。 第一父提交是你合并时所在分支，而第二父提交是你所合并的分支： $ git show d921970^ commit 1c002dd4b536e7479fe34593e72e6c6c1819e53b Author: Scott Chacon Date: Thu Dec 11 14:58:32 2008 -0800 added some blame and merge stuff $ git show d921970^2 commit 35cfb2b795a55793d7cc56a6cc2060b4bb732548 Author: Paul Hedderly Date: Wed Dec 10 22:22:03 2008 +0000 Some rdoc changes ​ 另一种指明祖先提交的方法是 ~。 同样是指向第一父提交，因此 HEAD~ 和 HEAD^ 是等价的。 而区别在于你在后面加数字的时候。 HEAD~2 代表“第一父提交的第一父提交”，也就是“祖父提交”—— Git 会根据你指定的次数获取对应的第一父提交。 例如，在之前的列出的提交历史中，HEAD~3 就是 $ git show HEAD~3 commit 1c3618887afb5fbcbea25b7c013f4e2114448b8d Author: Tom Preston-Werner Date: Fri Nov 7 13:47:59 2008 -0500 ignore *.gem ​ 也可以写成 HEAD^^^，也是第一父提交的第一父提交的第一父提交： $ git show HEAD^^^ commit 1c3618887afb5fbcbea25b7c013f4e2114448b8d Author: Tom Preston-Werner Date: Fri Nov 7 13:47:59 2008 -0500 ignore *.gem ​ 你也可以组合使用这两个语法——你可以通过 HEAD~3^2 来取得之前引用的第二父提交（假设它是一个合并提交）。 1.6 提交区间 ​ 你已经学会如何单次的提交，现在来看看如何指明一定区间的提交。 当你有很多分支时，这对管理你的分支时十分有用，你可以用提交区间来解决“这个分支还有哪些提交尚未合并到主分支？”的问题 1.6.1 双点 ​ 最常用的指明提交区间语法是双点。 这种语法可以让 Git 选出在一个分支中而不在另一个分支中的提交。 例如，你有如下的提交历史 Example history for range selection. Example history for range selection. ​ 你想要查看 experiment 分支中还有哪些提交尚未被合并入 master 分支。 你可以使用 master..experiment 来让 Git 显示这些提交。也就是“在 experiment 分支中而不在 master 分支中的提交”。 为了使例子简单明了，我使用了示意图中提交对象的字母来代替真实日志的输出，所以会显示： $ git log master..experiment D C ​ 反过来，如果你想查看在 master 分支中而不在 experiment 分支中的提交，你只要交换分支名即可。 experiment..master 会显示在 master 分支中而不在 experiment 分支中的提交： $ git log experiment..master F E ​ 这可以让你保持 experiment 分支跟随最新的进度以及查看你即将合并的内容。 另一个常用的场景是查看你即将推送到远端的内容： $ git log origin/master..HEAD ​ 这个命令会输出在你当前分支中而不在远程 origin 中的提交。 如果你执行 git push 并且你的当前分支正在跟踪 origin/master，由 git log origin/master..HEAD 所输出的提交就是会被传输到远端服务器的提交。 如果你留空了其中的一边， Git 会默认为 HEAD。 例如， git log origin/master.. 将会输出与之前例子相同的结果 —— Git 使用 HEAD 来代替留空的一边。 1.6.2 多点 ​ 双点语法很好用，但有时候你可能需要两个以上的分支才能确定你所需要的修订，比如查看哪些提交是被包含在某些分支中的一个，但是不在你当前的分支上。 Git 允许你在任意引用前加上 ^ 字符或者 --not 来指明你不希望提交被包含其中的分支。 因此下列3个命令是等价的： $ git log refA..refB $ git log ^refA refB $ git log refB --not refA ​ 这个语法很好用，因为你可以在查询中指定超过两个的引用，这是双点语法无法实现的。 比如，你想查看所有被 refA 或 refB 包含的但是不被 refC 包含的提交，你可以输入下面中的任意一个命令 $ git log refA refB ^refC $ git log refA refB --not refC ​ 这就构成了一个十分强大的修订查询系统，你可以通过它来查看你的分支里包含了哪些东西。 1.6.3 三点 ​ 最后一种主要的区间选择语法是三点，这个语法可以选择出被两个引用中的一个包含但又不被两者同时包含的提交。 再看看之前双点例子中的提交历史。 如果你想看 master 或者 experiment 中包含的但不是两者共有的提交，你可以执行 $ git log master...experiment F E D C ​ 这和通常 log 按日期排序的输出一样，仅仅给出了4个提交的信息。 ​ 这种情形下，log 命令的一个常用参数是 --left-right，它会显示每个提交到底处于哪一侧的分支。 这会让输出数据更加清晰。 $ git log --left-right master...experiment D > C ​ 有了这些工具，你就可以十分方便地查看你 Git 仓库中的提交。 2. 交互式暂存 ​ Git 自带的一些脚本可以使在命令行下工作更容易。 本节的几个交互命令可以帮助你将文件的特定部分组合成提交。 当你修改一组文件后，希望这些改动能放到若干提交而不是混杂在一起成为一个提交时，这几个工具会非常有用。 通过这种方式，可以确保提交是逻辑上独立的变更集，同时也会使其他开发者在与你工作时很容易地审核。 如果运行 git add 时使用 -i 或者 --interactive 选项，Git 将会进入一个交互式终端模式，显示类似下面的东西： $ git add -i staged unstaged path 1: unchanged +0/-1 TODO 2: unchanged +1/-1 index.html 3: unchanged +5/-1 lib/simplegit.rb *** Commands *** 1: status 2: update 3: revert 4: add untracked 5: patch 6: diff 7: quit 8: help What now> ​ 可以看到这个命令以非常不同的视图显示了暂存区——基本上与 git status 是相同的信息，但是更简明扼要一些。 它将暂存的修改列在左侧，未暂存的修改列在右侧。 ​ 在这块区域后是命令区域。 在这里你可以做一些工作，包括暂存文件、取消暂存文件、暂存文件的一部分、添加未被追踪的文件、查看暂存内容的区别。 2.1 暂存与取消暂存文件 ​ 如果在 What now> 提示符后键入 2 或 u，脚本将会提示想要暂存哪个文件： What now> 2 staged unstaged path 1: unchanged +0/-1 TODO 2: unchanged +1/-1 index.html 3: unchanged +5/-1 lib/simplegit.rb Update>> ​ 要暂存 TODO 与 index.html 文件，可以输入数字： Update>> 1,2 staged unstaged path * 1: unchanged +0/-1 TODO * 2: unchanged +1/-1 index.html 3: unchanged +5/-1 lib/simplegit.rb Update>> ​ 每个文件前面的 * 意味着选中的文件将会被暂存。 如果在 Update>> 提示符后不输入任何东西并直接按回车，Git 将会暂存之前选择的文件： Update>> updated 2 paths *** Commands *** 1: status 2: update 3: revert 4: add untracked 5: patch 6: diff 7: quit 8: help What now> 1 staged unstaged path 1: +0/-1 nothing TODO 2: +1/-1 nothing index.html 3: unchanged +5/-1 lib/simplegit.rb ​ 现在可以看到 TODO 与 index.html 文件已经被暂存而 simplegit.rb 文件还未被暂存。 如果这时想要取消暂存 TODO 文件，使用 3 或 r（撤消）选项： *** Commands *** 1: status 2: update 3: revert 4: add untracked 5: patch 6: diff 7: quit 8: help What now> 3 staged unstaged path 1: +0/-1 nothing TODO 2: +1/-1 nothing index.html 3: unchanged +5/-1 lib/simplegit.rb Revert>> 1 staged unstaged path * 1: +0/-1 nothing TODO 2: +1/-1 nothing index.html 3: unchanged +5/-1 lib/simplegit.rb Revert>> [enter] reverted one path ​ 再次查看 Git 状态，可以看到已经取消暂存 TODO 文件： *** Commands *** 1: status 2: update 3: revert 4: add untracked 5: patch 6: diff 7: quit 8: help What now> 1 staged unstaged path 1: unchanged +0/-1 TODO 2: +1/-1 nothing index.html 3: unchanged +5/-1 lib/simplegit.rb ​ 如果想要查看已暂存内容的区别，可以使用 6 或 d（区别）命令。 它会显示暂存文件的一个列表，可以从中选择想要查看的暂存区别。 这跟你在命令行指定 git diff --cached 非常相似： *** Commands *** 1: status 2: update 3: revert 4: add untracked 5: patch 6: diff 7: quit 8: help What now> 6 staged unstaged path 1: +1/-1 nothing index.html Review diff>> 1 diff --git a/index.html b/index.html index 4d07108..4335f49 100644 --- a/index.html +++ b/index.html @@ -16,7 +16,7 @@ Date Finder ... -contact : support@github.com +contact : email.support@github.com ​ 通过这些基本命令，可以使用交互式添加模式来轻松地处理暂存区。 2.2 暂存补丁 ​ Git 也可以暂存文件的特定部分。 例如，如果在 simplegit.rb 文件中做了两处修改，但只想要暂存其中的一个而不是另一个，Git 会帮你轻松地完成。 从交互式提示符中，输入 5 或 p（补丁）。 Git 会询问你想要部分暂存哪些文件；然后，对已选择文件的每一个部分，它都会一个个地显示文件区别并询问你是否想要暂存它们： diff --git a/lib/simplegit.rb b/lib/simplegit.rb index dd5ecc4..57399e0 100644 --- a/lib/simplegit.rb +++ b/lib/simplegit.rb @@ -22,7 +22,7 @@ class SimpleGit end def log(treeish = 'master') - command(\"git log -n 25 #{treeish}\") + command(\"git log -n 30 #{treeish}\") end def blame(path) Stage this hunk [y,n,a,d,/,j,J,g,e,?]? ​ 这时有很多选项。 输入 ? 显示所有可以使用的命令列表： Stage this hunk [y,n,a,d,/,j,J,g,e,?]? ? y - stage this hunk n - do not stage this hunk a - stage this and all the remaining hunks in the file d - do not stage this hunk nor any of the remaining hunks in the file g - select a hunk to go to / - search for a hunk matching the given regex j - leave this hunk undecided, see next undecided hunk J - leave this hunk undecided, see next hunk k - leave this hunk undecided, see previous undecided hunk K - leave this hunk undecided, see previous hunk s - split the current hunk into smaller hunks e - manually edit the current hunk ? - print help ​ 通常情况下可以输入 y 或 n 来选择是否要暂存每一个区块，当然，暂存特定文件中的所有部分或为之后的选择跳过一个区块也是非常有用的。 如果你只暂存文件的一部分，状态输出可能会像下面这样： What now> 1 staged unstaged path 1: unchanged +0/-1 TODO 2: +1/-1 nothing index.html 3: +1/-1 +4/-0 lib/simplegit.rb ​ simplegit.rb 文件的状态很有趣。 它显示出若干行被暂存与若干行未被暂存。 已经部分地暂存了这个文件。 在这时，可以退出交互式添加脚本并且运行 git commit 来提交部分暂存的文件。 ​ 也可以不必在交互式添加模式中做部分文件暂存——可以在命令行中使用 git add -p 或 git add --patch 来启动同样的脚本。 ​ 更进一步地，可以使用 reset --patch 命令的补丁模式来部分重置文件，通过 checkout --patch 命令来部分检出文件与 stash save --patch 命令来部分暂存文件。 我们将会在接触这些命令的高级使用方法时了解更多详细信息。 3. 储藏与清理 ​ 有时，当你在项目的一部分上已经工作一段时间后，所有东西都进入了混乱的状态，而这时你想要切换到另一个分支做一点别的事情。 问题是，你不想仅仅因为过会儿回到这一点而为做了一半的工作创建一次提交。 针对这个问题的答案是 git stash 命令。 ​ 储藏会处理工作目录的脏的状态——即跟踪文件的修改与暂存的改动——然后将未完成的修改保存到一个栈上，而你可以在任何时候重新应用这些改动。 3.1 储藏工作 ​ 为了演示，进入项目并改动几个文件，然后可能暂存其中的一个改动。 如果运行 git status，可以看到有改动的状态： $ git status Changes to be committed: (use \"git reset HEAD ...\" to unstage) modified: index.html Changes not staged for commit: (use \"git add ...\" to update what will be committed) (use \"git checkout -- ...\" to discard changes in working directory) modified: lib/simplegit.rb ​ 现在想要切换分支，但是还不想要提交之前的工作；所以储藏修改。 将新的储藏推送到栈上，运行 git stash 或 git stash save： $ git stash Saved working directory and index state \\ \"WIP on master: 049d078 added the index file\" HEAD is now at 049d078 added the index file (To restore them type \"git stash apply\") ​ 工作目录是干净的了： $ git status # On branch master nothing to commit, working directory clean ​ 在这时，你能够轻易地切换分支并在其他地方工作；你的修改被存储在栈上。 要查看储藏的东西，可以使用 git stash list： $ git stash list stash@{0}: WIP on master: 049d078 added the index file stash@{1}: WIP on master: c264051 Revert \"added file_size\" stash@{2}: WIP on master: 21d80a5 added number to log ​ 在本例中，有两个之前做的储藏，所以你接触到了三个不同的储藏工作。 可以通过原来 stash 命令的帮助提示中的命令将你刚刚储藏的工作重新应用：git stash apply。 如果想要应用其中一个更旧的储藏，可以通过名字指定它，像这样：git stash apply stash@{2}。 如果不指定一个储藏，Git 认为指定的是最近的储藏： $ git stash apply # On branch master # Changed but not updated: # (use \"git add ...\" to update what will be committed) # # modified: index.html # modified: lib/simplegit.rb # ​ 可以看到 Git 重新修改了当你保存储藏时撤消的文件。 在本例中，当尝试应用储藏时有一个干净的工作目录，并且尝试将它应用在保存它时所在的分支；但是有一个干净的工作目录与应用在同一分支并不是成功应用储藏的充分必要条件。 可以在一个分支上保存一个储藏，切换到另一个分支，然后尝试重新应用这些修改。 当应用储藏时工作目录中也可以有修改与未提交的文件——如果有任何东西不能干净地应用，Git 会产生合并冲突。 ​ 文件的改动被重新应用了，但是之前暂存的文件却没有重新暂存。 想要那样的话，必须使用 --index 选项来运行 git stash apply 命令，来尝试重新应用暂存的修改。 如果已经那样做了，那么你将回到原来的位置： $ git stash apply --index # On branch master # Changes to be committed: # (use \"git reset HEAD ...\" to unstage) # # modified: index.html # # Changed but not updated: # (use \"git add ...\" to update what will be committed) # # modified: lib/simplegit.rb # ​ 应用选项只会尝试应用暂存的工作——在堆栈上还有它。 可以运行 git stash drop 加上将要移除的储藏的名字来移除它： $ git stash list stash@{0}: WIP on master: 049d078 added the index file stash@{1}: WIP on master: c264051 Revert \"added file_size\" stash@{2}: WIP on master: 21d80a5 added number to log $ git stash drop stash@{0} Dropped stash@{0} (364e91f3f268f0900bc3ee613f9f733e82aaed43) ​ 也可以运行 git stash pop 来应用储藏然后立即从栈上扔掉它。 3.2 创造性的储藏 ​ 有几个储藏的变种可能也很有用。 第一个非常流行的选项是 stash save 命令的 --keep-index 选项。 它告诉 Git 不要储藏任何你通过 git add 命令已暂存的东西。 ​ 当你做了几个改动并只想提交其中的一部分，过一会儿再回来处理剩余改动时，这个功能会很有用。 $ git status -s M index.html M lib/simplegit.rb $ git stash --keep-index Saved working directory and index state WIP on master: 1b65b17 added the index file HEAD is now at 1b65b17 added the index file $ git status -s M index.html ​ 另一个经常使用储藏来做的事情是像储藏跟踪文件一样储藏未跟踪文件。 默认情况下，git stash 只会储藏已经在索引中的文件。 如果指定 --include-untracked 或 -u 标记，Git 也会储藏任何创建的未跟踪文件。 $ git status -s M index.html M lib/simplegit.rb ?? new-file.txt $ git stash -u Saved working directory and index state WIP on master: 1b65b17 added the index file HEAD is now at 1b65b17 added the index file $ git status -s $ ​ 最终，如果指定了 --patch 标记，Git 不会储藏所有修改过的任何东西，但是会交互式地提示哪些改动想要储藏、哪些改动需要保存在工作目录中。 $ git stash --patch diff --git a/lib/simplegit.rb b/lib/simplegit.rb index 66d332e..8bb5674 100644 --- a/lib/simplegit.rb +++ b/lib/simplegit.rb @@ -16,6 +16,10 @@ class SimpleGit return `#{git_cmd} 2>&1`.chomp end end + + def show(treeish = 'master') + command(\"git show #{treeish}\") + end end test Stash this hunk [y,n,q,a,d,/,e,?]? y Saved working directory and index state WIP on master: 1b65b17 added the index file 3.3 从储藏创建一个分支 ​ 如果储藏了一些工作，将它留在那儿了一会儿，然后继续在储藏的分支上工作，在重新应用工作时可能会有问题。 如果应用尝试修改刚刚修改的文件，你会得到一个合并冲突并不得不解决它。 如果想要一个轻松的方式来再次测试储藏的改动，可以运行 git stash branch 创建一个新分支，检出储藏工作时所在的提交，重新在那应用工作，然后在应用成功后扔掉储藏： $ git stash branch testchanges Switched to a new branch \"testchanges\" # On branch testchanges # Changes to be committed: # (use \"git reset HEAD ...\" to unstage) # # modified: index.html # # Changed but not updated: # (use \"git add ...\" to update what will be committed) # # modified: lib/simplegit.rb # Dropped refs/stash@{0} (f0dfc4d5dc332d1cee34a634182e168c4efc3359) ​ 这是在新分支轻松恢复储藏工作并继续工作的一个很不错的途径。 3.4 清理工作目录 ​ 对于工作目录中一些工作或文件，你想做的也许不是储藏而是移除。 git clean 命令会帮你做这些事。 ​ 有一些通用的原因比如说为了移除由合并或外部工具生成的东西，或是为了运行一个干净的构建而移除之前构建的残留。 ​ 你需要谨慎地使用这个命令，因为它被设计为从工作目录中移除未被追踪的文件。 如果你改变主意了，你也不一定能找回来那些文件的内容。 一个更安全的选项是运行 git stash --all 来移除每一样东西并存放在栈中。 ​ 你可以使用 git clean 命令去除冗余文件或者清理工作目录。 使用 git clean -f -d 命令来移除工作目录中所有未追踪的文件以及空的子目录。 -f 意味着 强制 或 “确定移除”。 ​ 如果只是想要看看它会做什么，可以使用 -n 选项来运行命令，这意味着 “做一次演习然后告诉你 将要 移除什么”。 $ git clean -d -n Would remove test.o Would remove tmp/ ​ 默认情况下，git clean 命令只会移除没有忽略的未跟踪文件。 任何与 .gitiignore 或其他忽略文件中的模式匹配的文件都不会被移除。 如果你也想要移除那些文件，例如为了做一次完全干净的构建而移除所有由构建生成的 .o 文件，可以给 clean 命令增加一个 -x 选项。 $ git status -s M lib/simplegit.rb ?? build.TMP ?? tmp/ $ git clean -n -d Would remove build.TMP Would remove tmp/ $ git clean -n -d -x Would remove build.TMP Would remove test.o Would remove tmp/ ​ 如果不知道 git clean 命令将会做什么，在将 -n 改为 -f 来真正做之前总是先用 -n 来运行它做双重检查。 另一个小心处理过程的方式是使用 -i 或 “interactive” 标记来运行它。 ​ 这将会以交互模式运行 clean 命令。 $ git clean -x -i Would remove the following items: build.TMP test.o *** Commands *** 1: clean 2: filter by pattern 3: select by numbers 4: ask each 5: quit 6: help What now> ​ 这种方式下可以分别地检查每一个文件或者交互地指定删除的模式。 4. 签署工作 ​ Git 虽然是密码级安全的，但它不是万无一失的。 如果你从因特网上的其他人那里拿取工作，并且想要验证提交是不是真正地来自于可信来源，Git 提供了几种通过 GPG 来签署和验证工作的方式。 4.1 GPG 介绍 ​ 首先，在开始签名之前你需要先配置 GPG 并安装个人密钥。 $ gpg --list-keys /Users/schacon/.gnupg/pubring.gpg --------------------------------- pub 2048R/0A46826A 2014-06-04 uid Scott Chacon (Git signing key) sub 2048R/874529A9 2014-06-04 ​ 如果你还没有安装一个密钥，可以使用 gpg --gen-key 生成一个。 gpg --gen-key ​ 一旦你有一个可以签署的私钥，可以通过设置 Git 的 user.signingkey 选项来签署。 git config --global user.signingkey 0A46826A ​ 现在 Git 默认使用你的密钥来签署标签与提交。 4.2 签署标签 ​ 如果已经设置好一个 GPG 私钥，可以使用它来签署新的标签。 所有需要做的只是使用 -s 代替 -a 即可： $ git tag -s v1.5 -m 'my signed 1.5 tag' You need a passphrase to unlock the secret key for user: \"Ben Straub \" 2048-bit RSA key, ID 800430EB, created 2014-05-04 ​ 如果在那个标签上运行 git show，会看到你的 GPG 签名附属在后面： $ git show v1.5 tag v1.5 Tagger: Ben Straub Date: Sat May 3 20:29:41 2014 -0700 my signed 1.5 tag -----BEGIN PGP SIGNATURE----- Version: GnuPG v1 iQEcBAABAgAGBQJTZbQlAAoJEF0+sviABDDrZbQH/09PfE51KPVPlanr6q1v4/Ut LQxfojUWiLQdg2ESJItkcuweYg+kc3HCyFejeDIBw9dpXt00rY26p05qrpnG+85b hM1/PswpPLuBSr+oCIDj5GMC2r2iEKsfv2fJbNW8iWAXVLoWZRF8B0MfqX/YTMbm ecorc4iXzQu7tupRihslbNkfvfciMnSDeSvzCpWAHl7h8Wj6hhqePmLm9lAYqnKp 8S5B/1SSQuEAjRZgI4IexpZoeKGVDptPHxLLS38fozsyi0QyDyzEgJxcJQVMXxVi RUysgqjcpT8+iQM1PblGfHR4XAhuOqN5Fx06PSaFZhqvWFezJ28/CLyX5q+oIVk= =EFTF -----END PGP SIGNATURE----- commit ca82a6dff817ec66f44342007202690a93763949 Author: Scott Chacon Date: Mon Mar 17 21:52:11 2008 -0700 changed the version number 4.3 验证标签 ​ 要验证一个签署的标签，可以运行 git tag -v [tag-name]。 这个命令使用 GPG 来验证签名。 为了验证能正常工作，签署者的公钥需要在你的钥匙链中。 $ git tag -v v1.4.2.1 object 883653babd8ee7ea23e6a5c392bb739348b1eb61 type commit tag v1.4.2.1 tagger Junio C Hamano 1158138501 -0700 GIT 1.4.2.1 Minor fixes since 1.4.2, including git-mv and git-http with alternates. gpg: Signature made Wed Sep 13 02:08:25 2006 PDT using DSA key ID F3119B9A gpg: Good signature from \"Junio C Hamano \" gpg: aka \"[jpeg image of size 1513]\" Primary key fingerprint: 3565 2A26 2040 E066 C9A7 4A7D C0C6 D9A4 F311 9B9A ​ 如果没有签署者的公钥，那么你将会得到类似下面的东西： gpg: Signature made Wed Sep 13 02:08:25 2006 PDT using DSA key ID F3119B9A gpg: Can't check signature: public key not found error: could not verify the tag 'v1.4.2.1' 4.4 签署提交 ​ 在最新版本的 Git 中（v1.7.9 及以上），也可以签署个人提交。 如果相对于标签而言你对直接签署到提交更感兴趣的话，所有要做的只是增加一个 -S 到 git commit 命令。 $ git commit -a -S -m 'signed commit' You need a passphrase to unlock the secret key for user: \"Scott Chacon (Git signing key) \" 2048-bit RSA key, ID 0A46826A, created 2014-06-04 [master 5c3386c] signed commit 4 files changed, 4 insertions(+), 24 deletions(-) rewrite Rakefile (100%) create mode 100644 lib/git.rb ​ git log 也有一个 --show-signature 选项来查看及验证这些签名。 $ git log --show-signature -1 commit 5c3386cf54bba0a33a32da706aa52bc0155503c2 gpg: Signature made Wed Jun 4 19:49:17 2014 PDT using RSA key ID 0A46826A gpg: Good signature from \"Scott Chacon (Git signing key) \" Author: Scott Chacon Date: Wed Jun 4 19:49:17 2014 -0700 signed commit ​ 另外，也可以配置 git log 来验证任何找到的签名并将它们以 %G? 格式列在输出中。 $ git log --pretty=\"format:%h %G? %aN %s\" 5c3386c G Scott Chacon signed commit ca82a6d N Scott Chacon changed the version number 085bb3b N Scott Chacon removed unnecessary test code a11bef0 N Scott Chacon first commit ​ 这里我们可以看到只有最后一次提交是签署并有效的，而之前的提交都不是。 ​ 在 Git 1.8.3 及以后的版本中，“git merge” 与“git pull” 可以使用 --verify-signatures 选项来检查并拒绝没有携带可信 GPG 签名的提交。 ​ 如果使用这个选项来合并一个包含未签名或有效的提交的分支时，合并不会生效。 $ git merge --verify-signatures non-verify fatal: Commit ab06180 does not have a GPG signature. ​ 如果合并包含的只有有效的签名的提交，合并命令会提示所有的签名它已经检查过了然后会继续向前。 $ git merge --verify-signatures signed-branch Commit 13ad65e has a good GPG signature by Scott Chacon (Git signing key) Updating 5c3386c..13ad65e Fast-forward README | 2 ++ 1 file changed, 2 insertions(+) ​ 也可以给 git merge 命令附加 -S 选项来签署自己生成的合并提交。 下面的例子演示了验证将要合并的分支的每一个提交都是签名的并且签署最后生成的合并提交。 $ git merge --verify-signatures -S signed-branch Commit 13ad65e has a good GPG signature by Scott Chacon (Git signing key) You need a passphrase to unlock the secret key for user: \"Scott Chacon (Git signing key) \" 2048-bit RSA key, ID 0A46826A, created 2014-06-04 Merge made by the 'recursive' strategy. README | 2 ++ 1 file changed, 2 insertions(+) 4.5 每个人必须签署 ​ 签署标签与提交很棒，但是如果决定在正常的工作流程中使用它，你必须确保团队中的每一个人都理解如何这样做。 如果没有，你将会花费大量时间帮助其他人找出并用签名的版本重写提交。 在采用签署成为标准工作流程的一部分前，确保你完全理解 GPG 及签署带来的好处。 5. 搜索 ​ 无论仓库里的代码量有多少，你经常需要查找一个函数是在哪里调用或者定义的，或者一个方法的变更历史。 Git 提供了两个有用的工具来快速地从它的数据库中浏览代码和提交。 我们来简单的看一下。 5.1 Git Grep ​ Git 提供了一个 grep 命令，你可以很方便地从提交历史或者工作目录中查找一个字符串或者正则表达式。 我们用 Git 本身源代码的查找作为例子。 ​ 默认情况下 Git 会查找你工作目录的文件。 你可以传入 -n 参数来输出 Git 所找到的匹配行行号。 $ git grep -n gmtime_r compat/gmtime.c:3:#undef gmtime_r compat/gmtime.c:8: return git_gmtime_r(timep, &result); compat/gmtime.c:11:struct tm *git_gmtime_r(const time_t *timep, struct tm *result) compat/gmtime.c:16: ret = gmtime_r(timep, result); compat/mingw.c:606:struct tm *gmtime_r(const time_t *timep, struct tm *result) compat/mingw.h:162:struct tm *gmtime_r(const time_t *timep, struct tm *result); date.c:429: if (gmtime_r(&now, &now_tm)) date.c:492: if (gmtime_r(&time, tm)) { git-compat-util.h:721:struct tm *git_gmtime_r(const time_t *, struct tm *); git-compat-util.h:723:#define gmtime_r git_gmtime_r ​ grep 命令有一些有趣的选项。 ​ 例如，你可以使用 --count 选项来使 Git 输出概述的信息，仅仅包括哪些文件包含匹配以及每个文件包含了多少个匹配。 $ git grep --count gmtime_r compat/gmtime.c:4 compat/mingw.c:1 compat/mingw.h:1 date.c:2 git-compat-util.h:2 ​ 如果你想看匹配的行是属于哪一个方法或者函数，你可以传入 -p 选项： $ git grep -p gmtime_r *.c date.c=static int match_multi_number(unsigned long num, char c, const char *date, char *end, struct tm *tm) date.c: if (gmtime_r(&now, &now_tm)) date.c=static int match_digit(const char *date, struct tm *tm, int *offset, int *tm_gmt) date.c: if (gmtime_r(&time, tm)) { ​ 在这里我们可以看到在 date.c 文件中有 match_multi_number 和 match_digit 两个函数调用了 gmtime_r。 ​ 你还可以使用 --and 标志来查看复杂的字符串组合，也就是在同一行同时包含多个匹配。 比如，我们要查看在旧版本 1.8.0 的 Git 代码库中定义了常量名包含 “LINK” 或者 “BUF_MAX” 这两个字符串所在的行。 ​ 这里我们也用到了 --break 和 --heading 选项来使输出更加容易阅读。 $ git grep --break --heading \\ -n -e '#define' --and \\( -e LINK -e BUF_MAX \\) v1.8.0 v1.8.0:builtin/index-pack.c 62:#define FLAG_LINK (1u ​ 相比于一些常用的搜索命令比如 grep 和 ack，git grep 命令有一些的优点。 第一就是速度非常快，第二是你不仅仅可以可以搜索工作目录，还可以搜索任意的 Git 树。 在上一个例子中，我们在一个旧版本的 Git 源代码中查找，而不是当前检出的版本。 5.2 Git 日志搜索 ​ 或许你不想知道某一项在 哪里 ，而是想知道是什么 时候 存在或者引入的。 git log 命令有许多强大的工具可以通过提交信息甚至是 diff 的内容来找到某个特定的提交。 ​ 例如，如果我们想找到 ZLIB_BUF_MAX 常量是什么时候引入的，我们可以使用 -S 选项来显示新增和删除该字符串的提交。 $ git log -SZLIB_BUF_MAX --oneline e01503b zlib: allow feeding more than 4GB in one go ef49a7a zlib: zlib can only process 4GB at a time ​ 如果我们查看这些提交的 diff，我们可以看到在 ef49a7a 这个提交引入了常量，并且在 e01503b 这个提交中被修改了。 ​ 如果你希望得到更精确的结果，你可以使用 -G 选项来使用正则表达式搜索。 5.2.1 行日志搜索 ​ 行日志搜索是另一个相当高级并且有用的日志搜索功能。 这是一个最近新增的不太知名的功能，但却是十分有用。 在 git log 后加上 -L 选项即可调用，它可以展示代码中一行或者一个函数的历史。 ​ 例如，假设我们想查看 zlib.c 文件中git_deflate_bound 函数的每一次变更，我们可以执行 git log -L :git_deflate_bound:zlib.c。 Git 会尝试找出这个函数的范围，然后查找历史记录，并且显示从函数创建之后一系列变更对应的补丁。 $ git log -L :git_deflate_bound:zlib.c commit ef49a7a0126d64359c974b4b3b71d7ad42ee3bca Author: Junio C Hamano Date: Fri Jun 10 11:52:15 2011 -0700 zlib: zlib can only process 4GB at a time diff --git a/zlib.c b/zlib.c --- a/zlib.c +++ b/zlib.c @@ -85,5 +130,5 @@ -unsigned long git_deflate_bound(z_streamp strm, unsigned long size) +unsigned long git_deflate_bound(git_zstream *strm, unsigned long size) { - return deflateBound(strm, size); + return deflateBound(&strm->z, size); } commit 225a6f1068f71723a910e8565db4e252b3ca21fa Author: Junio C Hamano Date: Fri Jun 10 11:18:17 2011 -0700 zlib: wrap deflateBound() too diff --git a/zlib.c b/zlib.c --- a/zlib.c +++ b/zlib.c @@ -81,0 +85,5 @@ +unsigned long git_deflate_bound(z_streamp strm, unsigned long size) +{ + return deflateBound(strm, size); +} + ​ 如果 Git 无法计算出如何匹配你代码中的函数或者方法，你可以提供一个正则表达式。 例如，这个命令和上面的是等同的：git log -L '/unsigned long git_deflate_bound/',/^}/:zlib.c。 你也可以提供单行或者一个范围的行号来获得相同的输出。 6. 重写历史 ​ 许多时候，在使用 Git 时，可能会因为某些原因想要修正提交历史。 Git 很棒的一点是它允许你在最后时刻做决定。 你可以在将暂存区内容提交前决定哪些文件进入提交，可以通过 stash 命令来决定不与某些内容工作，也可以重写已经发生的提交就像它们以另一种方式发生的一样。 这可能涉及改变提交的顺序，改变提交中的信息或修改文件，将提交压缩或是拆分，或完全地移除提交——在将你的工作成果与他人共享之前。 ​ 在本节中，你可以学到如何完成这些非常有用的工作，这样在与他人分享你的工作成果时你的提交历史将如你所愿地展示出来。 6.1 修改最后一次提交 ​ 修改你最近一次提交可能是所有修改历史提交的操作中最常见的一个。 对于你的最近一次提交，你往往想做两件事情：修改提交信息，或者修改你添加、修改和移除的文件的快照。 如果，你只是想修改最近一次提交的提交信息，那么很简单： $ git commit --amend ​ 这会把你带入文本编辑器，里面包含了你最近一条提交信息，供你修改。 当保存并关闭编辑器后，编辑器将会用你输入的内容替换最近一条提交信息。 ​ 如果你已经完成提交，又因为之前提交时忘记添加一个新创建的文件，想通过添加或修改文件来更改提交的快照，也可以通过类似的操作来完成。 通过修改文件然后运行 git add 或 git rm 一个已追踪的文件，随后运行 git commit --amend 拿走当前的暂存区域并使其做为新提交的快照。 ​ 使用这个技巧的时候需要小心，因为修正会改变提交的 SHA-1 校验和。 它类似于一个小的变基——如果已经推送了最后一次提交就不要修正它。 6.2 修改多个提交信息 ​ 为了修改在提交历史中较远的提交，必须使用更复杂的工具。 Git 没有一个改变历史工具，但是可以使用变基工具来变基一系列提交，基于它们原来的 HEAD 而不是将其移动到另一个新的上面。 通过交互式变基工具，可以在任何想要修改的提交后停止，然后修改信息、添加文件或做任何想做的事情。 可以通过给 git rebase 增加 -i 选项来交互式地运行变基。 必须指定想要重写多久远的历史，这可以通过告诉命令将要变基到的提交来做到。 ​ 例如，如果想要修改最近三次提交信息，或者那组提交中的任意一个提交信息，将想要修改的最近一次提交的父提交作为参数传递给 git rebase -i 命令，即 HEAD~2^ 或 HEAD~3。 记住 ~3 可能比较容易，因为你正尝试修改最后三次提交；但是注意实际上指定了以前的四次提交，即想要修改提交的父提交： $ git rebase -i HEAD~3 ​ 再次记住这是一个变基命令——在 HEAD~3..HEAD 范围内的每一个提交都会被重写，无论你是否修改信息。 不要涉及任何已经推送到中央服务器的提交——这样做会产生一次变更的两个版本，因而使他人困惑。 ​ 运行这个命令会在文本编辑器上给你一个提交的列表，看起来像下面这样： pick f7f3f6d changed my name a bit pick 310154e updated README formatting and added blame pick a5f4a0d added cat-file # Rebase 710f0f8..a5f4a0d onto 710f0f8 # # Commands: # p, pick = use commit # r, reword = use commit, but edit the commit message # e, edit = use commit, but stop for amending # s, squash = use commit, but meld into previous commit # f, fixup = like \"squash\", but discard this commit's log message # x, exec = run command (the rest of the line) using shell # # These lines can be re-ordered; they are executed from top to bottom. # # If you remove a line here THAT COMMIT WILL BE LOST. # # However, if you remove everything, the rebase will be aborted. # # Note that empty commits are commented out ​ 需要重点注意的是相对于正常使用的 log 命令，这些提交显示的顺序是相反的。 运行一次 log 命令，会看到类似这样的东西： $ git log --pretty=format:\"%h %s\" HEAD~3..HEAD a5f4a0d added cat-file 310154e updated README formatting and added blame f7f3f6d changed my name a bit ​ 注意其中的反序显示。 交互式变基给你一个它将会运行的脚本。 它将会从你在命令行中指定的提交（HEAD~3）开始，从上到下的依次重演每一个提交引入的修改。 它将最旧的而不是最新的列在上面，因为那会是第一个将要重演的。 ​ 你需要修改脚本来让它停留在你想修改的变更上。 要达到这个目的，你只要将你想修改的每一次提交前面的 ‘pick’ 改为 ‘edit’。 例如，只想修改第三次提交信息，可以像下面这样修改文件： edit f7f3f6d changed my name a bit pick 310154e updated README formatting and added blame pick a5f4a0d added cat-file ​ 当保存并退出编辑器时，Git 将你带回到列表中的最后一次提交，把你送回命令行并提示以下信息： $ git rebase -i HEAD~3 Stopped at f7f3f6d... changed my name a bit You can amend the commit now, with git commit --amend Once you’re satisfied with your changes, run git rebase --continue ​ 这些指令准确地告诉你该做什么。 输入 $ git commit --amend ​ 修改提交信息，然后退出编辑器。 然后，运行 $ git rebase --continue ​ 这个命令将会自动地应用另外两个提交，然后就完成了。 如果需要将不止一处的 pick 改为 edit，需要在每一个修改为 edit 的提交上重复这些步骤。 每一次，Git 将会停止，让你修正提交，然后继续直到完成。 6.3 重新排序提交 ​ 也可以使用交互式变基来重新排序或完全移除提交。 如果想要移除 “added cat-file” 提交然后修改另外两个提交引入的顺序，可以将变基脚本从这样： pick f7f3f6d changed my name a bit pick 310154e updated README formatting and added blame pick a5f4a0d added cat-file ​ 改为这样： pick 310154e updated README formatting and added blame pick f7f3f6d changed my name a bit ​ 当保存并退出编辑器时，Git 将你的分支带回这些提交的父提交，应用 310154e 然后应用 f7f3f6d，最后停止。 事实修改了那些提交的顺序并完全地移除了 “added cat-file” 提交。 6.4 压缩提交 ​ 通过交互式变基工具，也可以将一连串提交压缩成一个单独的提交。 在变基信息中脚本给出了有用的指令： # # Commands: # p, pick = use commit # r, reword = use commit, but edit the commit message # e, edit = use commit, but stop for amending # s, squash = use commit, but meld into previous commit # f, fixup = like \"squash\", but discard this commit's log message # x, exec = run command (the rest of the line) using shell # # These lines can be re-ordered; they are executed from top to bottom. # # If you remove a line here THAT COMMIT WILL BE LOST. # # However, if you remove everything, the rebase will be aborted. # # Note that empty commits are commented out ​ 如果，指定 “squash” 而不是 “pick” 或 “edit”，Git 将应用两者的修改并合并提交信息在一起。 所以，如果想要这三次提交变为一个提交，可以这样修改脚本： pick f7f3f6d changed my name a bit squash 310154e updated README formatting and added blame squash a5f4a0d added cat-file ​ 当保存并退出编辑器时，Git 应用所有的三次修改然后将你放到编辑器中来合并三次提交信息： # This is a combination of 3 commits. # The first commit's message is: changed my name a bit # This is the 2nd commit message: updated README formatting and added blame # This is the 3rd commit message: added cat-file ​ 当你保存之后，你就拥有了一个包含前三次提交的全部变更的提交。 6.5 拆分提交 ​ 拆分一个提交会撤消这个提交，然后多次地部分地暂存与提交直到完成你所需次数的提交。 例如，假设想要拆分三次提交的中间那次提交。 想要将它拆分为两次提交：第一个 “updated README formatting”，第二个 “added blame” 来代替原来的 “updated README formatting and added blame”。 可以通过修改 rebase -i 的脚本来做到这点，将要拆分的提交的指令修改为 “edit”： pick f7f3f6d changed my name a bit edit 310154e updated README formatting and added blame pick a5f4a0d added cat-file ​ 然后，当脚本将你进入到命令行时，重置那个提交，拿到被重置的修改，从中创建几次提交。 当保存并退出编辑器时，Git 带你到列表中第一个提交的父提交，应用第一个提交（f7f3f6d），应用第二个提交（310154e），然后让你进入命令行。 那里，可以通过 git reset HEAD^ 做一次针对那个提交的混合重置，实际上将会撤消那次提交并将修改的文件未暂存。 现在可以暂存并提交文件直到有几个提交，然后当完成时运行 git rebase --continue： $ git reset HEAD^ $ git add README $ git commit -m 'updated README formatting' $ git add lib/simplegit.rb $ git commit -m 'added blame' $ git rebase --continue ​ Git 在脚本中应用最后一次提交（a5f4a0d），历史记录看起来像这样： $ git log -4 --pretty=format:\"%h %s\" 1c002dd added cat-file 9b29157 added blame 35cfb2b updated README formatting f3cc40e changed my name a bit ​ 再次强调，这些改动了所有在列表中的提交的 SHA-1 校验和，所以要确保列表中的提交还没有推送到共享仓库中。 6.6 核武器级选项：filter-branch ​ 有另一个历史改写的选项，如果想要通过脚本的方式改写大量提交的话可以使用它——例如，全局修改你的邮箱地址或从每一个提交中移除一个文件。 这个命令是 filter-branch，它可以改写历史中大量的提交，除非你的项目还没有公开并且其他人没有基于要改写的工作的提交做的工作，你不应当使用它。 然而，它可以很有用。 你将会学习到几个常用的用途，这样就得到了它适合使用地方的想法。 6.6.1 从每一个提交移除一个文件 ​ 这经常发生。 有人粗心地通过 git add . 提交了一个巨大的二进制文件，你想要从所有地方删除它。 可能偶然地提交了一个包括一个密码的文件，然而你想要开源项目。 filter-branch 是一个可能会用来擦洗整个提交历史的工具。 为了从整个提交历史中移除一个叫做 passwords.txt 的文件，可以使用 --tree-filter 选项给 filter-branch： $ git filter-branch --tree-filter 'rm -f passwords.txt' HEAD Rewrite 6b9b3cf04e7c5686a9cb838c3f36a8cb6a0fc2bd (21/21) Ref 'refs/heads/master' was rewritten ​ --tree-filter 选项在检出项目的每一个提交后运行指定的命令然后重新提交结果。 在本例中，你从每一个快照中移除了一个叫作 passwords.txt 的文件，无论它是否存在。 如果想要移除所有偶然提交的编辑器备份文件，可以运行类似 git filter-branch --tree-filter 'rm -f *~' HEAD 的命令。 ​ 最后将可以看到 Git 重写树与提交然后移动分支指针。 通常一个好的想法是在一个测试分支中做这件事，然后当你决定最终结果是真正想要的，可以硬重置 master 分支。 为了让 filter-branch 在所有分支上运行，可以给命令传递 --all 选项。 6.6.2 使一个子目录做为新的根目录 ​ 假设已经从另一个源代码控制系统中导入，并且有几个没意义的子目录（trunk、tags 等等）。 如果想要让 trunk 子目录作为每一个提交的新的项目根目录，filter-branch 也可以帮助你那么做： $ git filter-branch --subdirectory-filter trunk HEAD Rewrite 856f0bf61e41a27326cdae8f09fe708d679f596f (12/12) Ref 'refs/heads/master' was rewritten ​ 现在新项目根目录是 trunk 子目录了。 Git 会自动移除所有不影响子目录的提交。 6.6.3 全局修改邮箱地址 ​ 另一个常见的情形是在你开始工作时忘记运行 git config 来设置你的名字与邮箱地址，或者你想要开源一个项目并且修改所有你的工作邮箱地址为你的个人邮箱地址。 任何情形下，你也可以通过 filter-branch 来一次性修改多个提交中的邮箱地址。 需要小心的是只修改你自己的邮箱地址，所以你使用 --commit-filter： $ git filter-branch --commit-filter ' if [ \"$GIT_AUTHOR_EMAIL\" = \"schacon@localhost\" ]; then GIT_AUTHOR_NAME=\"Scott Chacon\"; GIT_AUTHOR_EMAIL=\"schacon@example.com\"; git commit-tree \"$@\"; else git commit-tree \"$@\"; fi' HEAD ​ 这会遍历并重写每一个提交来包含你的新邮箱地址。 因为提交包含了它们父提交的 SHA-1 校验和，这个命令会修改你的历史中的每一个提交的 SHA-1 校验和，而不仅仅只是那些匹配邮箱地址的提交。 7. 重置揭密 ​ 在继续了解更专业的工具前，我们先讨论一下 reset 与 checkout。 在你初次遇到的 Git 命令中，这两个是最让人困惑的。 它们能做很多事情，所以看起来我们很难真正地理解并恰当地运用它们。 针对这一点，我们先来做一个简单的比喻。 7.1 三棵树 ​ 理解 reset 和 checkout 的最简方法，就是以 Git 的思维框架（将其作为内容管理器）来管理三棵不同的树。 “树” 在我们这里的实际意思是 “文件的集合”，而不是指特定的数据结构。 （在某些情况下索引看起来并不像一棵树，不过我们现在的目的是用简单的方式思考它。） ​ Git 作为一个系统，是以它的一般操作来管理并操纵这三棵树的： 树 用途 HEAD 上一次提交的快照，下一次提交的父结点 Index 预期的下一次提交的快照 Working Directory 沙盒 7.1.1 HEAD ​ HEAD 是当前分支引用的指针，它总是指向该分支上的最后一次提交。 这表示 HEAD 将是下一次提交的父结点。 通常，理解 HEAD 的最简方式，就是将它看做 你的上一次提交 的快照。 ​ 其实，查看快照的样子很容易。 下例就显示了 HEAD 快照实际的目录列表，以及其中每个文件的 SHA-1 校验和： $ git cat-file -p HEAD tree cfda3bf379e4f8dba8717dee55aab78aef7f4daf author Scott Chacon 1301511835 -0700 committer Scott Chacon 1301511835 -0700 initial commit $ git ls-tree -r HEAD 100644 blob a906cb2a4a904a152... README 100644 blob 8f94139338f9404f2... Rakefile 040000 tree 99f1a6d12cb4b6f19... lib ​ cat-file 与 ls-tree 是底层命令，它们一般用于底层工作，在日常工作中并不使用。不过它们能帮助我们了解到底发生了什么。 7.1.2 索引 ​ 索引是你的 预期的下一次提交。 我们也会将这个概念引用为 Git 的“暂存区域”，这就是当你运行 git commit 时 Git 看起来的样子。 ​ Git 将上一次检出到工作目录中的所有文件填充到索引区，它们看起来就像最初被检出时的样子。 之后你会将其中一些文件替换为新版本，接着通过 git commit 将它们转换为树来用作新的提交。 $ git ls-files -s 100644 a906cb2a4a904a152e80877d4088654daad0c859 0 README 100644 8f94139338f9404f26296befa88755fc2598c289 0 Rakefile 100644 47c6340d6459e05787f644c2447d2595f5d3a54b 0 lib/simplegit.rb ​ 再说一次，我们在这里又用到了 ls-files 这个幕后的命令，它会显示出索引当前的样子。 ​ 确切来说，索引并非技术上的树结构，它其实是以扁平的清单实现的。不过对我们而言，把它当做树就够了。 7.1.3 工作目录 ​ 最后，你就有了自己的工作目录。 另外两棵树以一种高效但并不直观的方式，将它们的内容存储在 .git 文件夹中。 工作目录会将它们解包为实际的文件以便编辑。 你可以把工作目录当做 沙盒。在你将修改提交到暂存区并记录到历史之前，可以随意更改。 $ tree . ├── README ├── Rakefile └── lib └── simplegit.rb 1 directory, 3 files 7.2 工作流程 ​ Git 主要的目的是通过操纵这三棵树来以更加连续的状态记录项目的快照。 ​ 让我们来可视化这个过程：假设我们进入到一个新目录，其中有一个文件。 我们称其为该文件的 v1 版本，将它标记为蓝色。 现在运行 git init，这会创建一个 Git 仓库，其中的 HEAD 引用指向未创建的分支（master 还不存在）。 ​ 此时，只有工作目录有内容。 ​ 现在我们想要提交这个文件，所以用 git add 来获取工作目录中的内容，并将其复制到索引中。 ​ 接着运行 git commit，它会取得索引中的内容并将它保存为一个永久的快照，然后创建一个指向该快照的提交对象，最后更新 master 来指向本次提交。 ​ 此时如果我们运行 git status，会发现没有任何改动，因为现在三棵树完全相同。 ​ 现在我们想要对文件进行修改然后提交它。 我们将会经历同样的过程；首先在工作目录中修改文件。 我们称其为该文件的 v2 版本，并将它标记为红色。 ​ 如果现在运行 git status，我们会看到文件显示在 “Changes not staged for commit” 下面并被标记为红色，因为该条目在索引与工作目录之间存在不同。 接着我们运行 git add 来将它暂存到索引中。 ​ 此时，由于索引和 HEAD 不同，若运行 git status 的话就会看到 “Changes to be committed” 下的该文件变为绿色 ——也就是说，现在预期的下一次提交与上一次提交不同。 最后，我们运行 git commit 来完成提交。 ​ 现在运行 git status 会没有输出，因为三棵树又变得相同了。 ​ 切换分支或克隆的过程也类似。 当检出一个分支时，它会修改 HEAD 指向新的分支引用，将 索引 填充为该次提交的快照，然后将 索引 的内容复制到 工作目录 中。 7.3 重置的作用 ​ 在以下情景中观察 reset 命令会更有意义。 ​ 为了演示这些例子，假设我们再次修改了 file.txt 文件并第三次提交它。 现在的历史看起来是这样的： 让我们跟着 reset 看看它都做了什么。 它以一种简单可预见的方式直接操纵这三棵树。 它做了三个基本操作。 7.3.1 第 1 步：移动 HEAD ​ reset 做的第一件事是移动 HEAD 的指向。 这与改变 HEAD 自身不同（checkout 所做的）；reset 移动 HEAD 指向的分支。 这意味着如果 HEAD 设置为 master 分支（例如，你正在 master 分支上），运行 git reset 9e5e6a4 将会使 master 指向 9e5e6a4。 ​ 无论你调用了何种形式的带有一个提交的 reset，它首先都会尝试这样做。 使用 reset --soft，它将仅仅停在那儿。 ​ 现在看一眼上图，理解一下发生的事情：它本质上是撤销了上一次 git commit 命令。 当你在运行 git commit 时，Git 会创建一个新的提交，并移动 HEAD 所指向的分支来使其指向该提交。 当你将它 reset 回 HEAD~（HEAD 的父结点）时，其实就是把该分支移动回原来的位置，而不会改变索引和工作目录。 现在你可以更新索引并再次运行 git commit 来完成 git commit --amend 所要做的事情了（见 修改最后一次提交）。 7.3.2 第 2 步：更新索引（--mixed） ​ 注意，如果你现在运行 git status 的话，就会看到新的 HEAD 和以绿色标出的它和索引之间的区别。 接下来，reset 会用 HEAD 指向的当前快照的内容来更新索引。 ​ 如果指定 --mixed 选项，reset 将会在这时停止。 这也是默认行为，所以如果没有指定任何选项（在本例中只是 git reset HEAD~），这就是命令将会停止的地方。 ​ 现在再看一眼上图，理解一下发生的事情：它依然会撤销一上次 提交，但还会 取消暂存 所有的东西。 于是，我们回滚到了所有 git add 和 git commit 的命令执行之前。 7.3.3 第 3 步：更新工作目录（--hard） ​ reset 要做的的第三件事情就是让工作目录看起来像索引。 如果使用 --hard 选项，它将会继续这一步。 ​ 现在让我们回想一下刚才发生的事情。 你撤销了最后的提交、git add 和 git commit 命令以及工作目录中的所有工作。 ​ 必须注意，--hard 标记是 reset 命令唯一的危险用法，它也是 Git 会真正地销毁数据的仅有的几个操作之一。 其他任何形式的 reset 调用都可以轻松撤消，但是 --hard 选项不能，因为它强制覆盖了工作目录中的文件。 在这种特殊情况下，我们的 Git 数据库中的一个提交内还留有该文件的 v3 版本，我们可以通过 reflog 来找回它。但是若该文件还未提交，Git 仍会覆盖它从而导致无法恢复。 7.3.4 回顾 reset 命令会以特定的顺序重写这三棵树，在你指定以下选项时停止： 移动 HEAD 分支的指向 （若指定了 --soft，则到此停止） 使索引看起来像 HEAD （若未指定 --hard，则到此停止） 使工作目录看起来像索引 7.4 通过路径来重置 ​ 前面讲述了 reset 基本形式的行为，不过你还可以给它提供一个作用路径。 若指定了一个路径，reset 将会跳过第 1 步，并且将它的作用范围限定为指定的文件或文件集合。 这样做自然有它的道理，因为 HEAD 只是一个指针，你无法让它同时指向两个提交中各自的一部分。 不过索引和工作目录 可以部分更新，所以重置会继续进行第 2、3 步。 ​ 现在，假如我们运行 git reset file.txt （这其实是 git reset --mixed HEAD file.txt 的简写形式，因为你既没有指定一个提交的 SHA-1 或分支，也没有指定 --soft 或 --hard），它会： 移动 HEAD 分支的指向 （已跳过） 让索引看起来像 HEAD （到此处停止） ​ 所以它本质上只是将 file.txt 从 HEAD 复制到索引中。 ​ 它还有 取消暂存文件 的实际效果。 如果我们查看该命令的示意图，然后再想想 git add 所做的事，就会发现它们正好相反。 ​ 这就是为什么 git status 命令的输出会建议运行此命令来取消暂存一个文件。 （查看 取消暂存的文件 来了解更多。） ​ 我们可以不让 Git 从 HEAD 拉取数据，而是通过具体指定一个提交来拉取该文件的对应版本。 我们只需运行类似于 git reset eb43bf file.txt 的命令即可。 ​ 它其实做了同样的事情，也就是把工作目录中的文件恢复到 v1 版本，运行 git add 添加它，然后再将它恢复到 v3 版本（只是不用真的过一遍这些步骤）。 如果我们现在运行 git commit，它就会记录一条“将该文件恢复到 v1 版本”的更改，尽管我们并未在工作目录中真正地再次拥有它。 还有一点同 git add 一样，就是 reset 命令也可以接受一个 --patch 选项来一块一块地取消暂存的内容。 这样你就可以根据选择来取消暂存或恢复内容了。 7.5 压缩 ​ 我们来看看如何利用这种新的功能来做一些有趣的事情——压缩提交。 ​ 假设你的一系列提交信息中有 “oops.”“WIP” 和 “forgot this file”， 聪明的你就能使用 reset 来轻松快速地将它们压缩成单个提交，也显出你的聪明。 （[压缩提交] 展示了另一种方式，不过在本例中用 reset 更简单。） ​ 假设你有一个项目，第一次提交中有一个文件，第二次提交增加了一个新的文件并修改了第一个文件，第三次提交再次修改了第一个文件。 由于第二次提交是一个未完成的工作，因此你想要压缩它。 ​ 那么可以运行 git reset --soft HEAD~2 来将 HEAD 分支移动到一个旧一点的提交上（即你想要保留的第一个提交）： ​ 然后只需再次运行 git commit： ​ 现在你可以查看可到达的历史，即将会推送的历史，现在看起来有个 v1 版 file-a.txt 的提交，接着第二个提交将 file-a.txt 修改成了 v3 版并增加了 file-b.txt。 包含 v2 版本的文件已经不在历史中了。 7.6 检出 ​ 最后，你大概还想知道 checkout 和 reset 之间的区别。 和 reset 一样，checkout 也操纵三棵树，不过它有一点不同，这取决于你是否传给该命令一个文件路径。 7.6.1 不带路径 ​ 运行 git checkout [branch] 与运行 git reset --hard [branch] 非常相似，它会更新所有三棵树使其看起来像 [branch]，不过有两点重要的区别。 ​ 首先不同于 reset --hard，checkout 对工作目录是安全的，它会通过检查来确保不会将已更改的文件弄丢。 其实它还更聪明一些。它会在工作目录中先试着简单合并一下，这样所有还未修改过的文件都会被更新。 而 reset --hard 则会不做检查就全面地替换所有东西。 ​ 第二个重要的区别是如何更新 HEAD。 reset 会移动 HEAD 分支的指向，而 checkout 只会移动 HEAD 自身来指向另一个分支。 ​ 例如，假设我们有 master 和 develop 分支，它们分别指向不同的提交；我们现在在 develop 上（所以 HEAD 指向它）。 如果我们运行 git reset master，那么 develop 自身现在会和 master 指向同一个提交。 而如果我们运行 git checkout master 的话，develop 不会移动，HEAD 自身会移动。 现在 HEAD 将会指向 master。 ​ 所以，虽然在这两种情况下我们都移动 HEAD 使其指向了提交 A，但做法是非常不同的。 reset 会移动 HEAD 分支的指向，而 checkout 则移动 HEAD 自身。 7.6.2 带路径 ​ 运行 checkout 的另一种方式就是指定一个文件路径，这会像 reset 一样不会移动 HEAD。 它就像 git reset [branch] file 那样用该次提交中的那个文件来更新索引，但是它也会覆盖工作目录中对应的文件。 它就像是 git reset --hard [branch] file（如果 reset 允许你这样运行的话）- 这样对工作目录并不安全，它也不会移动 HEAD。 ​ 此外，同 git reset 和 git add 一样，checkout 也接受一个 --patch 选项，允许你根据选择一块一块地恢复文件内容。 7.7 总结 ​ 希望你现在熟悉并理解了 reset 命令，不过关于它和 checkout 之间的区别，你可能还是会有点困惑，毕竟不太可能记住不同调用的所有规则。 ​ 下面的速查表列出了命令对树的影响。 “HEAD” 一列中的 “REF” 表示该命令移动了 HEAD 指向的分支引用，而 “HEAD” 则表示只移动了 HEAD 自身。 特别注意 WD Safe? 一列——如果它标记为 NO，那么运行该命令之前请考虑一下。 HEAD Index Workdir WD Safe? Commit Level reset --soft [commit] REF NO NO YES reset [commit] REF YES NO YES reset --hard [commit] REF YES YES NO checkout [commit] HEAD YES YES YES File Level reset (commit) [file] NO YES NO YES checkout (commit) [file] NO YES YES NO 8. 高级合并 ​ 在 Git 中合并是相当容易的。 因为 Git 使多次合并另一个分支变得很容易，这意味着你可以有一个始终保持最新的长期分支，经常解决小的冲突，比在一系列提交后解决一个巨大的冲突要好。 ​ 然而，有时也会有棘手的冲突。 不像其他的版本控制系统，Git 并不会尝试过于聪明的合并冲突解决方案。 Git 的哲学是聪明地决定无歧义的合并方案，但是如果有冲突，它不会尝试智能地自动解决它。 因此，如果很久之后才合并两个分叉的分支，你可能会撞上一些问题。 ​ 在本节中，我们将会仔细查看那些问题是什么以及 Git 给了我们什么工具来帮助我们处理这些更难办的情形。我们也会了解你可以做的不同的、非标准类型的合并，也会看到如何后退到合并之前。 8.1 合并冲突 ​ 我们在 [遇到冲突时的分支合并] 介绍了解决合并冲突的一些基础知识，对于更复杂的冲突，Git 提供了几个工具来帮助你指出将会发生什么以及如何更好地处理冲突。 ​ 首先，在做一次可能有冲突的合并前尽可能保证工作目录是干净的。 如果你有正在做的工作，要么提交到一个临时分支要么储藏它。 这使你可以撤消在这里尝试做的 任何事情 。 如果在你尝试一次合并时工作目录中有未保存的改动，下面的这些技巧可能会使你丢失那些工作。 ​ 让我们通过一个非常简单的例子来了解一下。 我们有一个超级简单的打印 hello world 的 Ruby 文件。 #! /usr/bin/env ruby def hello puts 'hello world' end hello() ​ 在我们的仓库中，创建一个名为 whitespace 的新分支并将所有 Unix 换行符修改为 DOS 换行符，实质上虽然改变了文件的每一行，但改变的都只是空白字符。 然后我们修改行 “hello world” 为 “hello mundo”。 $ git checkout -b whitespace Switched to a new branch 'whitespace' $ unix2dos hello.rb unix2dos: converting file hello.rb to DOS format ... $ git commit -am 'converted hello.rb to DOS' [whitespace 3270f76] converted hello.rb to DOS 1 file changed, 7 insertions(+), 7 deletions(-) $ vim hello.rb $ git diff -b diff --git a/hello.rb b/hello.rb index ac51efd..e85207e 100755 --- a/hello.rb +++ b/hello.rb @@ -1,7 +1,7 @@ #! /usr/bin/env ruby def hello - puts 'hello world' + puts 'hello mundo'^M end hello() $ git commit -am 'hello mundo change' [whitespace 6d338d2] hello mundo change 1 file changed, 1 insertion(+), 1 deletion(-) ​ 现在我们切换回我们的 master 分支并为函数增加一些注释。 $ git checkout master Switched to branch 'master' $ vim hello.rb $ git diff diff --git a/hello.rb b/hello.rb index ac51efd..36c06c8 100755 --- a/hello.rb +++ b/hello.rb @@ -1,5 +1,6 @@ #! /usr/bin/env ruby +# prints out a greeting def hello puts 'hello world' end $ git commit -am 'document the function' [master bec6336] document the function 1 file changed, 1 insertion(+) ​ 现在我们尝试合并入我们的 whitespace 分支，因为修改了空白字符，所以合并会出现冲突。 $ git merge whitespace Auto-merging hello.rb CONFLICT (content): Merge conflict in hello.rb Automatic merge failed; fix conflicts and then commit the result. 8.1.1 中断一次合并 ​ 我们现在有几个选项。 首先，让我们介绍如何摆脱这个情况。 你可能不想处理冲突这种情况，完全可以通过 git merge --abort 来简单地退出合并。 $ git status -sb ## master UU hello.rb $ git merge --abort $ git status -sb ## master ​ git merge --abort 选项会尝试恢复到你运行合并前的状态。 但当运行命令前，在工作目录中有未储藏、未提交的修改时它不能完美处理，除此之外它都工作地很好。 ​ 如果因为某些原因你发现自己处在一个混乱的状态中然后只是想要重来一次，也可以运行 git reset --hard HEAD 回到之前的状态或其他你想要恢复的状态。 请牢记这会将清除工作目录中的所有内容，所以确保你不需要保存这里的任意改动。 8.1.2 忽略空白 ​ 在这个特定的例子中，冲突与空白有关。 我们知道这点是因为这个例子很简单，但是在实际的例子中发现这样的冲突也很容易，因为每一行都被移除而在另一边每一行又被加回来了。 默认情况下，Git 认为所有这些行都改动了，所以它不会合并文件。 ​ 默认合并策略可以带有参数，其中的几个正好是关于忽略空白改动的。 如果你看到在一次合并中有大量的空白问题，你可以简单地中止它并重做一次，这次使用 -Xignore-all-space 或 -Xignore-space-change 选项。 第一个选项忽略任意 数量 的已有空白的修改，第二个选项忽略所有空白修改。 $ git merge -Xignore-space-change whitespace Auto-merging hello.rb Merge made by the 'recursive' strategy. hello.rb | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-) ​ 因为在本例中，实际上文件修改并没有冲突，一旦我们忽略空白修改，每一行都能被很好地合并。 ​ 如果你的团队中的某个人可能不小心重新格式化空格为制表符或者相反的操作，这会是一个救命稻草。 8.1.3 手动文件再合并 ​ 虽然 Git 对空白的预处理做得很好，还有很多其他类型的修改，Git 也许无法自动处理，但是脚本可以处理它们。 例如，假设 Git 无法处理空白修改因此我们需要手动处理。 ​ 我们真正想要做的是对将要合并入的文件在真正合并前运行 dos2unix 程序。 所以如果那样的话，我们该如何做？ ​ 首先，我们进入到了合并冲突状态。 然后我们想要我的版本的文件，他们的版本的文件（从我们将要合并入的分支）和共同的版本的文件（从分支叉开时的位置）的拷贝。 然后我们想要修复任何一边的文件，并且为这个单独的文件重试一次合并。 ​ 获得这三个文件版本实际上相当容易。 Git 在索引中存储了所有这些版本，在 “stages” 下每一个都有一个数字与它们关联。 Stage 1 是它们共同的祖先版本，stage 2 是你的版本，stage 3 来自于 MERGE_HEAD，即你将要合并入的版本（“theirs”）。 ​ 通过 git show 命令与一个特别的语法，你可以将冲突文件的这些版本释放出一份拷贝。 $ git show :1:hello.rb > hello.common.rb $ git show :2:hello.rb > hello.ours.rb $ git show :3:hello.rb > hello.theirs.rb ​ 如果你想要更专业一点，也可以使用 ls-files -u 底层命令来得到这些文件的 Git blob 对象的实际 SHA-1 值。 $ git ls-files -u 100755 ac51efdc3df4f4fd328d1a02ad05331d8e2c9111 1 hello.rb 100755 36c06c8752c78d2aff89571132f3bf7841a7b5c3 2 hello.rb 100755 e85207e04dfdd5eb0a1e9febbc67fd837c44a1cd 3 hello.rb ​ :1:hello.rb 只是查找那个 blob 对象 SHA-1 值的简写。 ​ 既然在我们的工作目录中已经有这所有三个阶段的内容，我们可以手工修复它们来修复空白问题，然后使用鲜为人知的 git merge-file 命令来重新合并那个文件。 $ dos2unix hello.theirs.rb dos2unix: converting file hello.theirs.rb to Unix format ... $ git merge-file -p \\ hello.ours.rb hello.common.rb hello.theirs.rb > hello.rb $ git diff -b diff --cc hello.rb index 36c06c8,e85207e..0000000 --- a/hello.rb +++ b/hello.rb @@@ -1,8 -1,7 +1,8 @@@ #! /usr/bin/env ruby +# prints out a greeting def hello - puts 'hello world' + puts 'hello mundo' end hello() ​ 在这时我们已经漂亮地合并了那个文件。 实际上，这比使用 ignore-space-change 选项要更好，因为在合并前真正地修复了空白修改而不是简单地忽略它们。 在使用 ignore-space-change 进行合并操作后，我们最终得到了有几行是 DOS 行尾的文件，从而使提交内容混乱了。 ​ 如果你想要在最终提交前看一下我们这边与另一边之间实际的修改，你可以使用 git diff 来比较将要提交作为合并结果的工作目录与其中任意一个阶段的文件差异。 让我们看看它们。 ​ 要在合并前比较结果与在你的分支上的内容，换一句话说，看看合并引入了什么，可以运行 git diff --ours $ git diff --ours * Unmerged path hello.rb diff --git a/hello.rb b/hello.rb index 36c06c8..44d0a25 100755 --- a/hello.rb +++ b/hello.rb @@ -2,7 +2,7 @@ # prints out a greeting def hello - puts 'hello world' + puts 'hello mundo' end hello() ​ 这里我们可以很容易地看到在我们的分支上发生了什么，在这次合并中我们实际引入到这个文件的改动，是修改了其中一行。 ​ 如果我们想要查看合并的结果与他们那边有什么不同，可以运行 git diff --theirs。 在本例及后续的例子中，我们会使用 -b 来去除空白，因为我们将它与 Git 中的，而不是我们清理过的 hello.theirs.rb 文件比较。 $ git diff --theirs -b * Unmerged path hello.rb diff --git a/hello.rb b/hello.rb index e85207e..44d0a25 100755 --- a/hello.rb +++ b/hello.rb @@ -1,5 +1,6 @@ #! /usr/bin/env ruby +# prints out a greeting def hello puts 'hello mundo' end ​ 最终，你可以通过 git diff --base 来查看文件在两边是如何改动的。 $ git diff --base -b * Unmerged path hello.rb diff --git a/hello.rb b/hello.rb index ac51efd..44d0a25 100755 --- a/hello.rb +++ b/hello.rb @@ -1,7 +1,8 @@ #! /usr/bin/env ruby +# prints out a greeting def hello - puts 'hello world' + puts 'hello mundo' end hello() ​ 在这时我们可以使用 git clean 命令来清理我们为手动合并而创建但不再有用的额外文件。 $ git clean -f Removing hello.common.rb Removing hello.ours.rb Removing hello.theirs.rb 8.1.4 检出冲突 ​ 也许有时我们并不满意这样的解决方案，或许有时还要手动编辑一边或者两边的冲突，但还是依旧无法正常工作，这时我们需要更多的上下文关联来解决这些冲突。 ​ 让我们来稍微改动下例子。 对于本例，我们有两个长期分支，每一个分支都有几个提交，但是在合并时却创建了一个合理的冲突。 $ git log --graph --oneline --decorate --all * f1270f7 (HEAD, master) update README * 9af9d3b add a README * 694971d update phrase to hola world | * e3eb223 (mundo) add more tests | * 7cff591 add testing script | * c3ffff1 changed text to hello mundo |/ * b7dcc89 initial hello world code ​ 现在有只在 master 分支上的三次单独提交，还有其他三次提交在 mundo 分支上。 如果我们尝试将 mundo 分支合并入 master 分支，我们得到一个冲突。 $ git merge mundo Auto-merging hello.rb CONFLICT (content): Merge conflict in hello.rb Automatic merge failed; fix conflicts and then commit the result. ​ 我们想要看一下合并冲突是什么。 如果我们打开这个文件，我们将会看到类似下面的内容： #! /usr/bin/env ruby def hello >>>>>> mundo end hello() ​ 合并的两边都向这个文件增加了内容，但是导致冲突的原因是其中一些提交修改了文件的同一个地方。 ​ 让我们探索一下现在你手边可用来查明这个冲突是如何产生的工具。 应该如何修复这个冲突看起来或许并不明显。 这时你需要更多上下文。 ​ 一个很有用的工具是带 --conflict 选项的 git checkout。 这会重新检出文件并替换合并冲突标记。 如果想要重置标记并尝试再次解决它们的话这会很有用。 ​ 可以传递给 --conflict 参数 diff3 或 merge（默认选项）。 如果传给它 diff3，Git 会使用一个略微不同版本的冲突标记：不仅仅只给你 “ours” 和 “theirs” 版本，同时也会有 “base” 版本在中间来给你更多的上下文。 $ git checkout --conflict=diff3 hello.rb ​ 一旦我们运行它，文件看起来会像下面这样： #! /usr/bin/env ruby def hello >>>>>> theirs end hello() ​ 如果你喜欢这种格式，可以通过设置 merge.conflictstyle 选项为 diff3 来做为以后合并冲突的默认选项。 $ git config --global merge.conflictstyle diff3 ​ git checkout 命令也可以使用 --ours 和 --theirs 选项，这是一种无需合并的快速方式，你可以选择留下一边的修改而丢弃掉另一边修改。 ​ 当有二进制文件冲突时这可能会特别有用，因为可以简单地选择一边，或者可以只合并另一个分支的特定文件——可以做一次合并然后在提交前检出一边或另一边的特定文件。 8.1.5 合并日志 ​ 另一个解决合并冲突有用的工具是 git log。 这可以帮助你得到那些对冲突有影响的上下文。 回顾一点历史来记起为什么两条线上的开发会触碰同一片代码有时会很有用。 ​ 为了得到此次合并中包含的每一个分支的所有独立提交的列表，我们可以使用之前在 三点 学习的“三点”语法。 $ git log --oneline --left-right HEAD...MERGE_HEAD e3eb223 add more tests > 7cff591 add testing script > c3ffff1 changed text to hello mundo ​ 这个漂亮的列表包含 6 个提交和每一个提交所在的不同开发路径。 ​ 我们可以通过更加特定的上下文来进一步简化这个列表。 如果我们添加 --merge 选项到 git log 中，它会只显示任何一边接触了合并冲突文件的提交。 $ git log --oneline --left-right --merge c3ffff1 changed text to hello mundo ​ 如果你运行命令时用 -p 选项代替，你会得到所有冲突文件的区别。 快速获得你需要帮助理解为什么发生冲突的上下文，以及如何聪明地解决它，这会 非常 有用。 8.1.6 组合式差异格式 ​ 因为 Git 暂存合并成功的结果，当你在合并冲突状态下运行 git diff 时，只会得到现在还在冲突状态的区别。 当需要查看你还需要解决哪些冲突时这很有用。 ​ 在合并冲突后直接运行的 git diff 会给你一个相当独特的输出格式。 $ git diff diff --cc hello.rb index 0399cd5,59727f0..0000000 --- a/hello.rb +++ b/hello.rb @@@ -1,7 -1,7 +1,11 @@@ #! /usr/bin/env ruby def hello ++>>>>>> mundo end hello() ​ 这种叫作“组合式差异”的格式会在每一行给你两列数据。 第一列为你显示 “ours” 分支与工作目录的文件区别（添加或删除），第二列显示 “theirs” 分支与工作目录的拷贝区别。 ​ 所以在上面的例子中可以看到 与 >>>>>>> 行在工作拷贝中但是并不在合并的任意一边中。 这很有意义，合并工具因为我们的上下文被困住了，它期望我们去移除它们。 ​ 如果我们解决冲突再次运行 git diff，我们将会看到同样的事情，但是它有一点帮助。 $ vim hello.rb $ git diff diff --cc hello.rb index 0399cd5,59727f0..0000000 --- a/hello.rb +++ b/hello.rb @@@ -1,7 -1,7 +1,7 @@@ #! /usr/bin/env ruby def hello - puts 'hola world' - puts 'hello mundo' ++ puts 'hola mundo' end hello() ​ 这里显示出 “hola world” 在我们这边但不在工作拷贝中，那个 “hello mundo” 在他们那边但不在工作拷贝中，最终 “hola mundo” 不在任何一边但是现在在工作拷贝中。 在提交解决方案前这对审核很有用。 ​ 也可以在合并后通过 git log 来获取相同信息，并查看冲突是如何解决的。 如果你对一个合并提交运行 git show 命令 Git 将会输出这种格式，或者你也可以在 git log -p（默认情况下该命令只会展示还没有合并的补丁）命令之后加上 --cc 选项。 $ git log --cc -p -1 commit 14f41939956d80b9e17bb8721354c33f8d5b5a79 Merge: f1270f7 e3eb223 Author: Scott Chacon Date: Fri Sep 19 18:14:49 2014 +0200 Merge branch 'mundo' Conflicts: hello.rb diff --cc hello.rb index 0399cd5,59727f0..e1d0799 --- a/hello.rb +++ b/hello.rb @@@ -1,7 -1,7 +1,7 @@@ #! /usr/bin/env ruby def hello - puts 'hola world' - puts 'hello mundo' ++ puts 'hola mundo' end hello() 8.2 撤消合并 ​ 虽然你已经知道如何创建一个合并提交，但有时出错是在所难免的。 使用 Git 最棒的一件事情是犯错是可以的，因为有可能（大多数情况下都很容易）修复它们。 ​ 合并提交并无不同。 假设现在在一个特性分支上工作，不小心将其合并到 master 中，现在提交历史看起来是这样： 意外的合并提交 有两种方法来解决这个问题，这取决于你想要的结果是什么。 8.2.1 修复引用 ​ 如果这个不想要的合并提交只存在于你的本地仓库中，最简单且最好的解决方案是移动分支到你想要它指向的地方。 大多数情况下，如果你在错误的 git merge 后运行 git reset --hard HEAD~，这会重置分支指向所以它们看起来像这样： 在 git reset --hard HEAD~ 之后的历史 ​ 我们之前在 [重置揭密] 已经介绍了 reset，所以现在指出这里发生了什么并不是很困难。 让我们快速复习下：reset --hard 通常会经历三步： 移动 HEAD 指向的分支。 在本例中，我们想要移动 master 到合并提交（C6）之前所在的位置。 使索引看起来像 HEAD。 使工作目录看起来像索引。 ​ 这个方法的缺点是它会重写历史，在一个共享的仓库中这会造成问题的。 查阅 [变基的风险] 来了解更多可能发生的事情；用简单的话说就是如果其他人已经有你将要重写的提交，你应当避免使用 reset。 如果有任何其他提交在合并之后创建了，那么这个方法也会无效；移动引用实际上会丢失那些改动。 8.2.2还原提交 ​ 如果移动分支指针并不适合你，Git 给你一个生成一个新提交的选项，提交将会撤消一个已存在提交的所有修改。 Git 称这个操作为“还原”，在这个特定的场景下，你可以像这样调用它： $ git revert -m 1 HEAD [master b1d8379] Revert \"Merge branch 'topic'\" ​ -m 1 标记指出 “mainline” 需要被保留下来的父结点。 当你引入一个合并到 HEAD（git merge topic），新提交有两个父结点：第一个是 HEAD（C6），第二个是将要合并入分支的最新提交（C4）。 在本例中，我们想要撤消所有由父结点 #2（C4）合并引入的修改，同时保留从父结点 #1（C4）开始的所有内容。 ​ 有还原提交的历史看起来像这样： 在 git revert -m 1 后的历史 ​ 新的提交 ^M 与 C6 有完全一样的内容，所以从这儿开始就像合并从未发生过，除了“现在还没合并”的提交依然在 HEAD 的历史中。 如果你尝试再次合并 topic 到 master Git 会感到困惑： $ git merge topic Already up-to-date. ​ topic 中并没有东西不能从 master 中追踪到达。 更糟的是，如果你在 topic 中增加工作然后再次合并，Git 只会引入被还原的合并 之后 的修改。 含有坏掉合并的历史 ​ 解决这个最好的方式是撤消还原原始的合并，因为现在你想要引入被还原出去的修改，然后 创建一个新的合并提交： $ git revert ^M [master 09f0126] Revert \"Revert \"Merge branch 'topic'\"\" $ git merge topic 在重新合并一个还原合并后的历史 ​ 在本例中，M 与 ^M 抵消了。 ^^M 事实上合并入了 C3 与 C4 的修改，C8 合并了 C7 的修改，所以现在 topic 已经完全被合并了。 8.3 其他类型的合并 ​ 到目前为止我们介绍的都是通过一个叫作 “recursive” 的合并策略来正常处理的两个分支的正常合并。 然而还有其他方式来合并两个分支到一起。 让我们来快速介绍其中的几个。 8.3.1 我们的或他们的偏好 ​ 首先，有另一种我们可以通过 “recursive” 合并模式做的有用工作。 我们之前已经看到传递给 -X 的 ignore-all-space 与 ignore-space-change 选项，但是我们也可以告诉 Git 当它看见一个冲突时直接选择一边。 ​ 默认情况下，当 Git 看到两个分支合并中的冲突时，它会将合并冲突标记添加到你的代码中并标记文件为冲突状态来让你解决。 如果你希望 Git 简单地选择特定的一边并忽略另外一边而不是让你手动合并冲突，你可以传递给 merge 命令一个 -Xours 或 -Xtheirs 参数。 ​ 如果 Git 看到这个，它并不会增加冲突标记。 任何可以合并的区别，它会直接合并。 任何有冲突的区别，它会简单地选择你全局指定的一边，包括二进制文件。 ​ 如果我们回到之前我们使用的 “hello world” 例子中，我们可以看到合并入我们的分支时引发了冲突。 $ git merge mundo Auto-merging hello.rb CONFLICT (content): Merge conflict in hello.rb Resolved 'hello.rb' using previous resolution. Automatic merge failed; fix conflicts and then commit the result. ​ 然而如果我们运行时增加 -Xours 或 -Xtheirs 参数就不会有冲突。 $ git merge -Xours mundo Auto-merging hello.rb Merge made by the 'recursive' strategy. hello.rb | 2 +- test.sh | 2 ++ 2 files changed, 3 insertions(+), 1 deletion(-) create mode 100644 test.sh ​ 在上例中，它并不会为 “hello mundo” 与 “hola world” 标记合并冲突，它只会简单地选取 “hola world”。 然而，在那个分支上所有其他非冲突的改动都可以被成功地合并入。 ​ 这个选项也可以传递给我们之前看到的 git merge-file 命令，通过运行类似 git merge-file --ours 的命令来合并单个文件。 ​ 如果想要做类似的事情但是甚至并不想让 Git 尝试合并另外一边的修改，有一个更严格的选项，它是 “ours” 合并 策略。 这与 “ours” recursive 合并 选项 不同。 ​ 这本质上会做一次假的合并。 它会记录一个以两边分支作为父结点的新合并提交，但是它甚至根本不关注你正合并入的分支。 它只会简单地把当前分支的代码当作合并结果记录下来。 $ git merge -s ours mundo Merge made by the 'ours' strategy. $ git diff HEAD HEAD~ $ ​ 你可以看到合并后与合并前我们的分支并没有任何区别。 ​ 当再次合并时从本质上欺骗 Git 认为那个分支已经合并过经常是很有用的。 例如，假设你有一个分叉的 release 分支并且在上面做了一些你想要在未来某个时候合并回 master 的工作。 与此同时 master 分支上的某些 bugfix 需要向后移植回 release 分支。 你可以合并 bugfix 分支进入 release 分支同时也 merge -s ours 合并进入你的 master 分支（即使那个修复已经在那儿了）这样当你之后再次合并 release 分支时，就不会有来自 bugfix 的冲突。 8.3.2 子树合并 ​ 子树合并的思想是你有两个项目，并且其中一个映射到另一个项目的一个子目录，或者反过来也行。 当你执行一个子树合并时，Git 通常可以自动计算出其中一个是另外一个的子树从而实现正确的合并。 ​ 我们来看一个例子如何将一个项目加入到一个已存在的项目中，然后将第二个项目的代码合并到第一个项目的子目录中。 ​ 首先，我们将 Rack 应用添加到你的项目里。 我们把 Rack 项目作为一个远程的引用添加到我们的项目里，然后检出到它自己的分支。 $ git remote add rack_remote https://github.com/rack/rack $ git fetch rack_remote warning: no common commits remote: Counting objects: 3184, done. remote: Compressing objects: 100% (1465/1465), done. remote: Total 3184 (delta 1952), reused 2770 (delta 1675) Receiving objects: 100% (3184/3184), 677.42 KiB | 4 KiB/s, done. Resolving deltas: 100% (1952/1952), done. From https://github.com/rack/rack * [new branch] build -> rack_remote/build * [new branch] master -> rack_remote/master * [new branch] rack-0.4 -> rack_remote/rack-0.4 * [new branch] rack-0.9 -> rack_remote/rack-0.9 $ git checkout -b rack_branch rack_remote/master Branch rack_branch set up to track remote branch refs/remotes/rack_remote/master. Switched to a new branch \"rack_branch\" ​ 现在在我们的 rack_branch 分支里就有 Rack 项目的根目录，而我们的项目则在 master 分支里。 如果你从一个分支切换到另一个分支，你可以看到它们的项目根目录是不同的： $ ls AUTHORS KNOWN-ISSUES Rakefile contrib lib COPYING README bin example test $ git checkout master Switched to branch \"master\" $ ls README ​ 这个是一个比较奇怪的概念。 并不是仓库中的所有分支都是必须属于同一个项目的分支. 这并不常见，因为没啥用，但是却是在不同分支里包含两条完全不同提交历史的最简单的方法。 ​ 在这个例子中，我们希望将 Rack 项目拉到 master 项目中作为一个子目录。 我们可以在 Git 中执行 git read-tree 来实现。 你可以在 [Git 内部原理]中查看更多 read-tree 的相关信息，现在你只需要知道它会读取一个分支的根目录树到当前的暂存区和工作目录里。 先切回你的 master 分支，将 rack_back 分支拉取到我们项目的 master 分支中的 rack 子目录。 $ git read-tree --prefix=rack/ -u rack_branch ​ 当我们提交时，那个子目录中拥有所有 Rack 项目的文件 —— 就像我们直接从压缩包里复制出来的一样。 有趣的是你可以很容易地将一个分支的变更合并到另一个分支里。 所以，当 Rack 项目有更新时，我们可以切换到那个分支来拉取上游的变更。 $ git checkout rack_branch $ git pull ​ 接着，我们可以将这些变更合并回我们的 master 分支。 使用 --squash 选项和使用 -Xsubtree 选项（它采用递归合并策略），都可以用来可以拉取变更并且预填充提交信息。 （递归策略在这里是默认的，提到它是为了让读者有个清晰的概念。） $ git checkout master $ git merge --squash -s recursive -Xsubtree=rack rack_branch Squash commit -- not updating HEAD Automatic merge went well; stopped before committing as requested ​ Rack 项目中所有的改动都被合并了，等待被提交到本地。 你也可以用相反的方法——在 master 分支上的 rack 子目录中做改动然后将它们合并入你的 rack_branch 分支中，之后你可能将其提交给项目维护着或者将它们推送到上游。 ​ 这给我们提供了一种类似子模块工作流的工作方式，但是它并不需要用到子模块（有关子模块的内容我们会在 [子模块]中介绍）。 我们可以在自己的仓库中保持一些和其他项目相关的分支，偶尔使用子树合并将它们合并到我们的项目中。 某些时候这种方式很有用，例如当所有的代码都提交到一个地方的时候。 然而，它同时也有缺点，它更加复杂且更容易让人犯错，例如重复合并改动或者不小心将分支提交到一个无关的仓库上去。 ​ 另外一个有点奇怪的地方是，当你想查看 rack 子目录和 rack_branch 分支的差异——来确定你是否需要合并它们——你不能使用普通的 diff 命令。 取而代之的是，你必须使用 git diff-tree 来和你的目标分支做比较： $ git diff-tree -p rack_branch ​ 或者，将你的 rack 子目和最近一次从服务器上抓取的 master 分支进行比较，你可以运行： $ git diff-tree -p rack_remote/master 9. Rerere ​ git rerere 功能是一个隐藏的功能。 正如它的名字 “reuse recorded resolution” 所指，它允许你让 Git 记住解决一个块冲突的方法，这样在下一次看到相同冲突时，Git 可以为你自动地解决它。 ​ 有几种情形下这个功能会非常有用。 在文档中提到的一个例子是如果你想要保证一个长期分支会干净地合并，但是又不想要一串中间的合并提交。 将 rerere 功能打开后偶尔合并，解决冲突，然后返回到合并前。 如果你持续这样做，那么最终的合并会很容易，因为 rerere 可以为你自动做所有的事情。 ​ 可以将同样的策略用在维持一个变基的分支时，这样就不用每次解决同样的变基冲突了。 或者你将一个分支合并并修复了一堆冲突后想要用变基来替代合并——你可能并不想要再次解决相同的冲突。 ​ 另一个情形是当你偶尔将一堆正在改进的特性分支合并到一个可测试的头时，就像 Git 项目自身经常做的。 如果测试失败，你可以倒回合并之前然后在去除导致测试失败的那个特性分支后重做合并，而不用再次重新解决所有的冲突。 ​ 为了启用 rerere 功能，仅仅需要运行这个配置选项： $ git config --global rerere.enabled true ​ 也通过在特定的仓库中创建 .git/rr-cache 目录来开启它，但是设置选项更干净并且可以应用到全局。 ​ 现在我们看一个简单的例子，类似之前的那个。 假设有一个像这样的文件： #! /usr/bin/env ruby def hello puts 'hello world' end ​ 在一个分支中修改单词 “hello” 为 “hola”，然后在另一个分支中修改 “world” 为 “mundo”，就像之前一样。 ​ 当合并两个分支到一起时，我们将会得到一个合并冲突： $ git merge i18n-world Auto-merging hello.rb CONFLICT (content): Merge conflict in hello.rb Recorded preimage for 'hello.rb' Automatic merge failed; fix conflicts and then commit the result. ​ 你会注意到那个新行 Recorded preimage for FILE。 除此之外它应该看起来就像一个普通的合并冲突。 在这个时候，rerere 可以告诉我们几件事。 和往常一样，在这个时候你可以运行 git status 来查看所有冲突的内容： $ git status # On branch master # Unmerged paths: # (use \"git reset HEAD ...\" to unstage) # (use \"git add ...\" to mark resolution) # # both modified: hello.rb # ​ 然而，git rerere 也会通过 git rerere status 告诉你它记录的合并前状态。 $ git rerere status hello.rb ​ 并且 git rerere diff 将会显示解决方案的当前状态——开始解决前与解决后的样子。 $ git rerere diff --- a/hello.rb +++ b/hello.rb @@ -1,11 +1,11 @@ #! /usr/bin/env ruby def hello ->>>>>> +======= + puts 'hello mundo' +>>>>>>> i18n-world end ​ 同样（这并不是真的与 rerere 有关系），可以使用 ls-files -u 来查看冲突文件的之前、左边与右边版本： $ git ls-files -u 100644 39804c942a9c1f2c03dc7c5ebcd7f3e3a6b97519 1 hello.rb 100644 a440db6e8d1fd76ad438a49025a9ad9ce746f581 2 hello.rb 100644 54336ba847c3758ab604876419607e9443848474 3 hello.rb ​ 现在可以通过改为 puts 'hola mundo' 来解决它，可以再次运行 rerere diff 命令来查看 rerere 将会记住的内容： $ git rerere diff --- a/hello.rb +++ b/hello.rb @@ -1,11 +1,7 @@ #! /usr/bin/env ruby def hello ->>>>>> + puts 'hola mundo' end ​ 所以从本质上说，当 Git 看到一个 hello.rb 文件的一个块冲突中有 “hello mundo” 在一边与 “hola world” 在另一边，它会将其解决为 “hola mundo”。 ​ 现在我们可以将它标记为已解决并提交它： $ git add hello.rb $ git commit Recorded resolution for 'hello.rb'. [master 68e16e5] Merge branch 'i18n' ​ 可以看到它 \"Recorded resolution for FILE\"。 ​ 现在，让我们撤消那个合并然后将它变基到 master 分支顶部来替代它。可以通过使用之前在 重置揭密 看到的 reset 来回滚分支。 $ git reset --hard HEAD^ HEAD is now at ad63f15 i18n the hello ​ 我们的合并被撤消了。 现在让我们变基特性分支。 $ git checkout i18n-world Switched to branch 'i18n-world' $ git rebase master First, rewinding head to replay your work on top of it... Applying: i18n one word Using index info to reconstruct a base tree... Falling back to patching base and 3-way merge... Auto-merging hello.rb CONFLICT (content): Merge conflict in hello.rb Resolved 'hello.rb' using previous resolution. Failed to merge in the changes. Patch failed at 0001 i18n one word ​ 现在，正像我们期望的一样，得到了相同的合并冲突，但是看一下 Resolved FILE using previous resolution 这行。 如果我们看这个文件，会发现它已经被解决了，而且在它里面没有合并冲突标记。 $ cat hello.rb #! /usr/bin/env ruby def hello puts 'hola mundo' end ​ 同样，git diff 将会显示出它是如何自动地重新解决的： $ git diff diff --cc hello.rb index a440db6,54336ba..0000000 --- a/hello.rb +++ b/hello.rb @@@ -1,7 -1,7 +1,7 @@@ #! /usr/bin/env ruby def hello - puts 'hola world' - puts 'hello mundo' ++ puts 'hola mundo' end ​ 也可以通过 checkout 命令重新恢复到冲突时候的文件状态： $ git checkout --conflict=merge hello.rb $ cat hello.rb #! /usr/bin/env ruby def hello >>>>>> theirs end ​ 我们将会在 [高级合并]中看到这个的一个例子。 然而现在，让我们通过运行 rerere 来重新解决它： $ git rerere Resolved 'hello.rb' using previous resolution. $ cat hello.rb #! /usr/bin/env ruby def hello puts 'hola mundo' end ​ 我们通过 rerere 缓存的解决方案来自动重新解决了文件冲突。 现在可以添加并继续变基来完成它。 $ git add hello.rb $ git rebase --continue Applying: i18n one word ​ 所以，如果做了很多次重新合并，或者想要一个特性分支始终与你的 master 分支保持最新但却不想要一大堆合并，或者经常变基，打开 rerere 功能可以帮助你的生活变得更美好。 10. 使用 Git 调试 ​ Git 也提供了两个工具来辅助你调试项目中的问题。 由于 Git 被设计成适用于几乎所有类型的项目，这些工具是比较通用的，但它们可以在出现问题的时候帮助你找到 bug 或者错误。 10.1 文件标注 ​ 如果你在追踪代码中的一个 bug，并且想知道是什么时候以及为何会引入，文件标注通常是最好用的工具。 它展示了文件中每一行最后一次修改的提交。 所以，如果你在代码中看到一个有问题的方法，你可以使用 git blame 标注这个文件，查看这个方法每一行的最后修改时间以及是被谁修改的。 这个例子使用 -L 选项来限制输出范围在第12至22行： $ git blame -L 12,22 simplegit.rb ^4832fe2 (Scott Chacon 2008-03-15 10:31:28 -0700 12) def show(tree = 'master') ^4832fe2 (Scott Chacon 2008-03-15 10:31:28 -0700 13) command(\"git show #{tree}\") ^4832fe2 (Scott Chacon 2008-03-15 10:31:28 -0700 14) end ^4832fe2 (Scott Chacon 2008-03-15 10:31:28 -0700 15) 9f6560e4 (Scott Chacon 2008-03-17 21:52:20 -0700 16) def log(tree = 'master') 79eaf55d (Scott Chacon 2008-04-06 10:15:08 -0700 17) command(\"git log #{tree}\") 9f6560e4 (Scott Chacon 2008-03-17 21:52:20 -0700 18) end 9f6560e4 (Scott Chacon 2008-03-17 21:52:20 -0700 19) 42cf2861 (Magnus Chacon 2008-04-13 10:45:01 -0700 20) def blame(path) 42cf2861 (Magnus Chacon 2008-04-13 10:45:01 -0700 21) command(\"git blame #{path}\") 42cf2861 (Magnus Chacon 2008-04-13 10:45:01 -0700 22) end ​ 请注意，第一个字段是最后一次修改该行的提交的部分 SHA-1 值。 接下来两个字段的值是从提交中提取出来的——作者的名字以及提交的时间——所以你就可以很轻易地找到是谁在什么时候修改了那一行。 接下来就是行号和文件内容。 注意一下 ^4832fe2 这个提交的那些行，这些指的是这个文件第一次提交的那些行。 这个提交是这个文件第一次加入到这个项目时的提交，并且这些行从未被修改过。 这会带来小小的困惑，因为你已经至少看到三种 Git 使用 ^ 来修饰一个提交的 SHA-1 值的不同含义，但这里确实就是这个意思。 ​ 另一件比较酷的事情是 Git 不会显式地记录文件的重命名。 它会记录快照，然后在事后尝试计算出重命名的动作。 这其中有一个很有意思的特性就是你可以让 Git 找出所有的代码移动。 如果你在 git blame 后面加上一个 -C，Git 会分析你正在标注的文件，并且尝试找出文件中从别的地方复制过来的代码片段的原始出处。 比如，你将 GITServerHandler.m 这个文件拆分为数个文件，其中一个文件是 GITPackUpload.m。 对 GITPackUpload.m 执行带 -C 参数的 blame 命令，你就可以看到代码块的原始出处： $ git blame -C -L 141,153 GITPackUpload.m f344f58d GITServerHandler.m (Scott 2009-01-04 141) f344f58d GITServerHandler.m (Scott 2009-01-04 142) - (void) gatherObjectShasFromC f344f58d GITServerHandler.m (Scott 2009-01-04 143) { 70befddd GITServerHandler.m (Scott 2009-03-22 144) //NSLog(@\"GATHER COMMI ad11ac80 GITPackUpload.m (Scott 2009-03-24 145) ad11ac80 GITPackUpload.m (Scott 2009-03-24 146) NSString *parentSha; ad11ac80 GITPackUpload.m (Scott 2009-03-24 147) GITCommit *commit = [g ad11ac80 GITPackUpload.m (Scott 2009-03-24 148) ad11ac80 GITPackUpload.m (Scott 2009-03-24 149) //NSLog(@\"GATHER COMMI ad11ac80 GITPackUpload.m (Scott 2009-03-24 150) 56ef2caf GITServerHandler.m (Scott 2009-01-05 151) if(commit) { 56ef2caf GITServerHandler.m (Scott 2009-01-05 152) [refDict setOb 56ef2caf GITServerHandler.m (Scott 2009-01-05 153) ​ 这个功能很有用。 通常来说，你会认为复制代码过来的那个提交是最原始的提交，因为那是你第一次在这个文件中修改了这几行。 但 Git 会告诉你，你第一次写这几行代码的那个提交才是原始提交，即使这是在另外一个文件里写的。 10.2 二分查找 ​ 当你知道问题是在哪里引入的情况下文件标注可以帮助你查找问题。 如果你不知道哪里出了问题，并且自从上次可以正常运行到现在已经有数十个或者上百个提交，这个时候你可以使用 git bisect 来帮助查找。 bisect 命令会对你的提交历史进行二分查找来帮助你尽快找到是哪一个提交引入了问题。 ​ 假设你刚刚在线上环境部署了你的代码，接着收到一些 bug 反馈，但这些 bug 在你之前的开发环境里没有出现过，这让你百思不得其解。 你重新查看了你的代码，发现这个问题是可以被重现的，但是你不知道哪里出了问题。 你可以用二分法来找到这个问题。 首先执行 git bisect start 来启动，接着执行 git bisect bad 来告诉系统当前你所在的提交是有问题的。 然后你必须告诉 bisect 已知的最后一次正常状态是哪次提交，使用 git bisect good [good_commit]： $ git bisect start $ git bisect bad $ git bisect good v1.0 Bisecting: 6 revisions left to test after this [ecb6e1bc347ccecc5f9350d878ce677feb13d3b2] error handling on repo ​ Git 发现在你标记为正常的提交（v1.0）和当前的错误版本之间有大约12次提交，于是 Git 检出中间的那个提交。 现在你可以执行测试，看看在这个提交下问题是不是还是存在。 如果还存在，说明问题是在这个提交之前引入的；如果问题不存在，说明问题是在这个提交之后引入的。 假设测试结果是没有问题的，你可以通过 git bisect good 来告诉 Git，然后继续寻找。 $ git bisect good Bisecting: 3 revisions left to test after this [b047b02ea83310a70fd603dc8cd7a6cd13d15c04] secure this thing ​ 现在你在另一个提交上了，这个提交是刚刚那个测试通过的提交和有问题的提交的中点。 你再一次执行测试，发现这个提交下是有问题的，因此你可以通过 git bisect bad 告诉 Git： $ git bisect bad Bisecting: 1 revisions left to test after this [f71ce38690acf49c1f3c9bea38e09d82a5ce6014] drop exceptions table ​ 这个提交是正常的，现在 Git 拥有的信息已经可以确定引入问题的位置在哪里。 它会告诉你第一个错误提交的 SHA-1 值并显示一些提交说明，以及哪些文件在那次提交里修改过，这样你可以找出引入 bug 的根源： $ git bisect good b047b02ea83310a70fd603dc8cd7a6cd13d15c04 is first bad commit commit b047b02ea83310a70fd603dc8cd7a6cd13d15c04 Author: PJ Hyett Date: Tue Jan 27 14:48:32 2009 -0800 secure this thing :040000 040000 40ee3e7821b895e52c1695092db9bdc4c61d1730 f24d3c6ebcfc639b1a3814550e62d60b8e68a8e4 M config ​ 当你完成这些操作之后，你应该执行 git bisect reset 重置你的 HEAD 指针到最开始的位置，否则你会停留在一个很奇怪的状态： $ git bisect reset ​ 这是一个可以帮助你在几分钟内从数百个提交中找到 bug 的强大工具。 事实上，如果你有一个脚本在项目是正常的情况下返回 0，在不正常的情况下返回非 0，你可以使 git bisect 自动化这些操作。 首先，你设定好项目正常以及不正常所在提交的二分查找范围。 你可以通过 bisect start 命令的参数来设定这两个提交，第一个参数是项目不正常的提交，第二个参数是项目正常的提交： $ git bisect start HEAD v1.0 $ git bisect run test-error.sh ​ Git 会自动在每个被检出的提交里执行 test-error.sh 直到找到第一个项目不正常的提交。 你也可以执行 make 或者 make tests 或者其他东西来进行自动化测试。 11. 子模块 ​ 有种情况我们经常会遇到：某个工作中的项目需要包含并使用另一个项目。 也许是第三方库，或者你独立开发的，用于多个父项目的库。 现在问题来了：你想要把它们当做两个独立的项目，同时又想在一个项目中使用另一个。 ​ 我们举一个例子。 假设你正在开发一个网站然后创建了 Atom 订阅。 你决定使用一个库，而不是写自己的 Atom 生成代码。 你可能不得不通过 CPAN 安装或 Ruby gem 来包含共享库中的代码，或者将源代码直接拷贝到自己的项目中。 如果将这个库包含进来，那么无论用何种方式都很难定制它，部署则更加困难，因为你必须确保每一个客户端都包含该库。 如果将代码复制到自己的项目中，那么你做的任何自定义修改都会使合并上游的改动变得困难。 ​ Git 通过子模块来解决这个问题。 子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。 它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。 11.1 开始使用子模块 ​ 我们将要演示如何在一个被分成一个主项目与几个子项目的项目上开发。 ​ 我们首先将一个已存在的 Git 仓库添加为正在工作的仓库的子模块。 你可以通过在 git submodule add 命令后面加上想要跟踪的项目 URL 来添加新的子模块。 在本例中，我们将会添加一个名为 “DbConnector” 的库。 $ git submodule add https://github.com/chaconinc/DbConnector Cloning into 'DbConnector'... remote: Counting objects: 11, done. remote: Compressing objects: 100% (10/10), done. remote: Total 11 (delta 0), reused 11 (delta 0) Unpacking objects: 100% (11/11), done. Checking connectivity... done. ​ 默认情况下，子模块会将子项目放到一个与仓库同名的目录中，本例中是 “DbConnector”。 如果你想要放到其他地方，那么可以在命令结尾添加一个不同的路径。 ​ 如果这时运行 git status，你会注意到几件事。 $ git status On branch master Your branch is up-to-date with 'origin/master'. Changes to be committed: (use \"git reset HEAD ...\" to unstage) new file: .gitmodules new file: DbConnector ​ 首先应当注意到新的 .gitmodules 文件。 该配置文件保存了项目 URL 与已经拉取的本地目录之间的映射： $ cat .gitmodules [submodule \"DbConnector\"] path = DbConnector url = https://github.com/chaconinc/DbConnector ​ 如果有多个子模块，该文件中就会有多条记录。 要重点注意的是，该文件也像 .gitignore 文件一样受到（通过）版本控制。 它会和该项目的其他部分一同被拉取推送。 这就是克隆该项目的人知道去哪获得子模块的原因。 Notes:由于 .gitmodules 文件中的 URL 是人们首先尝试克隆/拉取的地方，因此请尽可能确保你使用的 URL 大家都能访问。 例如，若你要使用的推送 URL 与他人的拉取 URL 不同，那么请使用他人能访问到的 URL。 你也可以根据自己的需要，通过在本地执行 git config submodule.DbConnector.url 来覆盖这个选项的值。 如果可行的话，一个相对路径会很有帮助。 ​ 在 git status 输出中列出的另一个是项目文件夹记录。 如果你运行 git diff，会看到类似下面的信息： $ git diff --cached DbConnector diff --git a/DbConnector b/DbConnector new file mode 160000 index 0000000..c3f01dc --- /dev/null +++ b/DbConnector @@ -0,0 +1 @@ +Subproject commit c3f01dc8862123d317dd46284b05b6892c7b29bc ​ 虽然 DbConnector 是工作目录中的一个子目录，但 Git 还是会将它视作一个子模块。当你不在那个目录中时，Git 并不会跟踪它的内容， 而是将它看作该仓库中的一个特殊提交。 ​ 如果你想看到更漂亮的差异输出，可以给 git diff 传递 --submodule 选项。 $ git diff --cached --submodule diff --git a/.gitmodules b/.gitmodules new file mode 100644 index 0000000..71fc376 --- /dev/null +++ b/.gitmodules @@ -0,0 +1,3 @@ +[submodule \"DbConnector\"] + path = DbConnector + url = https://github.com/chaconinc/DbConnector Submodule DbConnector 0000000...c3f01dc (new submodule) ​ 当你提交时，会看到类似下面的信息： $ git commit -am 'added DbConnector module' [master fb9093c] added DbConnector module 2 files changed, 4 insertions(+) create mode 100644 .gitmodules create mode 160000 DbConnector ​ 注意 DbConnector 记录的 160000 模式。 这是 Git 中的一种特殊模式，它本质上意味着你是将一次提交记作一项目录记录的，而非将它记录成一个子目录或者一个文件。 11.2 克隆含有子模块的项目 ​ 接下来我们将会克隆一个含有子模块的项目。 当你在克隆这样的项目时，默认会包含该子模块目录，但其中还没有任何文件： $ git clone https://github.com/chaconinc/MainProject Cloning into 'MainProject'... remote: Counting objects: 14, done. remote: Compressing objects: 100% (13/13), done. remote: Total 14 (delta 1), reused 13 (delta 0) Unpacking objects: 100% (14/14), done. Checking connectivity... done. $ cd MainProject $ ls -la total 16 drwxr-xr-x 9 schacon staff 306 Sep 17 15:21 . drwxr-xr-x 7 schacon staff 238 Sep 17 15:21 .. drwxr-xr-x 13 schacon staff 442 Sep 17 15:21 .git -rw-r--r-- 1 schacon staff 92 Sep 17 15:21 .gitmodules drwxr-xr-x 2 schacon staff 68 Sep 17 15:21 DbConnector -rw-r--r-- 1 schacon staff 756 Sep 17 15:21 Makefile drwxr-xr-x 3 schacon staff 102 Sep 17 15:21 includes drwxr-xr-x 4 schacon staff 136 Sep 17 15:21 scripts drwxr-xr-x 4 schacon staff 136 Sep 17 15:21 src $ cd DbConnector/ $ ls $ ​ 其中有 DbConnector 目录，不过是空的。 你必须运行两个命令：git submodule init 用来初始化本地配置文件，而 git submodule update 则从该项目中抓取所有数据并检出父项目中列出的合适的提交。 $ git submodule init Submodule 'DbConnector' (https://github.com/chaconinc/DbConnector) registered for path 'DbConnector' $ git submodule update Cloning into 'DbConnector'... remote: Counting objects: 11, done. remote: Compressing objects: 100% (10/10), done. remote: Total 11 (delta 0), reused 11 (delta 0) Unpacking objects: 100% (11/11), done. Checking connectivity... done. Submodule path 'DbConnector': checked out 'c3f01dc8862123d317dd46284b05b6892c7b29bc' ​ 现在 DbConnector 子目录是处在和之前提交时相同的状态了。 ​ 不过还有更简单一点的方式。 如果给 git clone 命令传递 --recursive 选项，它就会自动初始化并更新仓库中的每一个子模块。 $ git clone --recursive https://github.com/chaconinc/MainProject Cloning into 'MainProject'... remote: Counting objects: 14, done. remote: Compressing objects: 100% (13/13), done. remote: Total 14 (delta 1), reused 13 (delta 0) Unpacking objects: 100% (14/14), done. Checking connectivity... done. Submodule 'DbConnector' (https://github.com/chaconinc/DbConnector) registered for path 'DbConnector' Cloning into 'DbConnector'... remote: Counting objects: 11, done. remote: Compressing objects: 100% (10/10), done. remote: Total 11 (delta 0), reused 11 (delta 0) Unpacking objects: 100% (11/11), done. Checking connectivity... done. Submodule path 'DbConnector': checked out 'c3f01dc8862123d317dd46284b05b6892c7b29bc' 11.3 在包含子模块的项目上工作 ​ 现在我们有一份包含子模块的项目副本，我们将会同时在主项目和子模块项目上与队员协作。 11.3.1 拉取上游修改 ​ 在项目中使用子模块的最简模型，就是只使用子项目并不时地获取更新，而并不在你的检出中进行任何更改。 我们来看一个简单的例子。 ​ 如果想要在子模块中查看新工作，可以进入到目录中运行 git fetch 与 git merge，合并上游分支来更新本地代码。 $ git fetch From https://github.com/chaconinc/DbConnector c3f01dc..d0354fc master -> origin/master $ git merge origin/master Updating c3f01dc..d0354fc Fast-forward scripts/connect.sh | 1 + src/db.c | 1 + 2 files changed, 2 insertions(+) ​ 如果你现在返回到主项目并运行 git diff --submodule，就会看到子模块被更新的同时获得了一个包含新添加提交的列表。 如果你不想每次运行 git diff 时都输入 --submodle，那么可以将 diff.submodule 设置为 “log” 来将其作为默认行为。 $ git config --global diff.submodule log $ git diff Submodule DbConnector c3f01dc..d0354fc: > more efficient db routine > better connection routine ​ 如果在此时提交，那么你会将子模块锁定为其他人更新时的新代码。 ​ 如果你不想在子目录中手动抓取与合并，那么还有种更容易的方式。 运行 git submodule update --remote，Git 将会进入子模块然后抓取并更新。 $ git submodule update --remote DbConnector remote: Counting objects: 4, done. remote: Compressing objects: 100% (2/2), done. remote: Total 4 (delta 2), reused 4 (delta 2) Unpacking objects: 100% (4/4), done. From https://github.com/chaconinc/DbConnector 3f19983..d0354fc master -> origin/master Submodule path 'DbConnector': checked out 'd0354fc054692d3906c85c3af05ddce39a1c0644' ​ 此命令默认会假定你想要更新并检出子模块仓库的 master 分支。 不过你也可以设置为想要的其他分支。 例如，你想要 DbConnector 子模块跟踪仓库的 “stable” 分支，那么既可以在 .gitmodules 文件中设置（这样其他人也可以跟踪它），也可以只在本地的 .git/config 文件中设置。 让我们在 .gitmodules 文件中设置它： $ git config -f .gitmodules submodule.DbConnector.branch stable $ git submodule update --remote remote: Counting objects: 4, done. remote: Compressing objects: 100% (2/2), done. remote: Total 4 (delta 2), reused 4 (delta 2) Unpacking objects: 100% (4/4), done. From https://github.com/chaconinc/DbConnector 27cf5d3..c87d55d stable -> origin/stable Submodule path 'DbConnector': checked out 'c87d55d4c6d4b05ee34fbc8cb6f7bf4585ae6687' ​ 如果不用 -f .gitmodules 选项，那么它只会为你做修改。但是在仓库中保留跟踪信息更有意义一些，因为其他人也可以得到同样的效果。 ​ 这时我们运行 git status，Git 会显示子模块中有“新提交”。 $ git status On branch master Your branch is up-to-date with 'origin/master'. Changes not staged for commit: (use \"git add ...\" to update what will be committed) (use \"git checkout -- ...\" to discard changes in working directory) modified: .gitmodules modified: DbConnector (new commits) no changes added to commit (use \"git add\" and/or \"git commit -a\") ​ 如果你设置了配置选项 status.submodulesummary，Git 也会显示你的子模块的更改摘要： $ git config status.submodulesummary 1 $ git status On branch master Your branch is up-to-date with 'origin/master'. Changes not staged for commit: (use \"git add ...\" to update what will be committed) (use \"git checkout -- ...\" to discard changes in working directory) modified: .gitmodules modified: DbConnector (new commits) Submodules changed but not updated: * DbConnector c3f01dc...c87d55d (4): > catch non-null terminated lines ​ 这时如果运行 git diff，可以看到我们修改了 .gitmodules 文件，同时还有几个已拉取的提交需要提交到我们自己的子模块项目中。 $ git diff diff --git a/.gitmodules b/.gitmodules index 6fc0b3d..fd1cc29 100644 --- a/.gitmodules +++ b/.gitmodules @@ -1,3 +1,4 @@ [submodule \"DbConnector\"] path = DbConnector url = https://github.com/chaconinc/DbConnector + branch = stable Submodule DbConnector c3f01dc..c87d55d: > catch non-null terminated lines > more robust error handling > more efficient db routine > better connection routine ​ 这非常有趣，因为我们可以直接看到将要提交到子模块中的提交日志。 提交之后，你也可以运行 git log -p 查看这个信息。 $ git log -p --submodule commit 0a24cfc121a8a3c118e0105ae4ae4c00281cf7ae Author: Scott Chacon Date: Wed Sep 17 16:37:02 2014 +0200 updating DbConnector for bug fixes diff --git a/.gitmodules b/.gitmodules index 6fc0b3d..fd1cc29 100644 --- a/.gitmodules +++ b/.gitmodules @@ -1,3 +1,4 @@ [submodule \"DbConnector\"] path = DbConnector url = https://github.com/chaconinc/DbConnector + branch = stable Submodule DbConnector c3f01dc..c87d55d: > catch non-null terminated lines > more robust error handling > more efficient db routine > better connection routine ​ 当运行 git submodule update --remote 时，Git 默认会尝试更新所有子模块，所以如果有很多子模块的话，你可以传递想要更新的子模块的名字。 11.3.2 在子模块上工作 ​ 你很有可能正在使用子模块，因为你确实想在子模块中编写代码的同时，还想在主项目上编写代码（或者跨子模块工作）。 否则你大概只能用简单的依赖管理系统（如 Maven 或 Rubygems）来替代了。 ​ 现在我们将通过一个例子来演示如何在子模块与主项目中同时做修改，以及如何同时提交与发布那些修改。 ​ 到目前为止，当我们运行 git submodule update 从子模块仓库中抓取修改时，Git 将会获得这些改动并更新子目录中的文件，但是会将子仓库留在一个称作“游离的 HEAD”的状态。 这意味着没有本地工作分支（例如 “master” ）跟踪改动。 所以你做的任何改动都不会被跟踪。 ​ 为了将子模块设置得更容易进入并修改，你需要做两件事。 首先，进入每个子模块并检出其相应的工作分支。 接着，若你做了更改就需要告诉 Git 它该做什么，然后运行 git submodule update --remote 来从上游拉取新工作。 你可以选择将它们合并到你的本地工作中，也可以尝试将你的工作变基到新的更改上。 ​ 首先，让我们进入子模块目录然后检出一个分支。 $ git checkout stable Switched to branch 'stable' ​ 然后尝试用 “merge” 选项。 为了手动指定它，我们只需给 update 添加 --merge 选项即可。 这时我们将会看到服务器上的这个子模块有一个改动并且它被合并了进来。 $ git submodule update --remote --merge remote: Counting objects: 4, done. remote: Compressing objects: 100% (2/2), done. remote: Total 4 (delta 2), reused 4 (delta 2) Unpacking objects: 100% (4/4), done. From https://github.com/chaconinc/DbConnector c87d55d..92c7337 stable -> origin/stable Updating c87d55d..92c7337 Fast-forward src/main.c | 1 + 1 file changed, 1 insertion(+) Submodule path 'DbConnector': merged in '92c7337b30ef9e0893e758dac2459d07362ab5ea' ​ 如果我们进入 DbConnector 目录，可以发现新的改动已经合并入本地 stable 分支。 现在让我们看看当我们对库做一些本地的改动而同时其他人推送另外一个修改到上游时会发生什么。 $ cd DbConnector/ $ vim src/db.c $ git commit -am 'unicode support' [stable f906e16] unicode support 1 file changed, 1 insertion(+) ​ 如果我们现在更新子模块，就会看到当我们在本地做了更改时上游也有一个改动，我们需要将它并入本地。 $ git submodule update --remote --rebase First, rewinding head to replay your work on top of it... Applying: unicode support Submodule path 'DbConnector': rebased into '5d60ef9bbebf5a0c1c1050f242ceeb54ad58da94' ​ 如果你忘记 --rebase 或 --merge，Git 会将子模块更新为服务器上的状态。并且会将项目重置为一个游离的 HEAD 状态。 $ git submodule update --remote Submodule path 'DbConnector': checked out '5d60ef9bbebf5a0c1c1050f242ceeb54ad58da94' ​ 即便这真的发生了也不要紧，你只需回到目录中再次检出你的分支（即还包含着你的工作的分支）然后手动地合并或变基 origin/stable（或任何一个你想要的远程分支）就行了。 ​ 如果你没有提交子模块的改动，那么运行一个子模块更新也不会出现问题，此时 Git 会只抓取更改而并不会覆盖子模块目录中未保存的工作。 $ git submodule update --remote remote: Counting objects: 4, done. remote: Compressing objects: 100% (3/3), done. remote: Total 4 (delta 0), reused 4 (delta 0) Unpacking objects: 100% (4/4), done. From https://github.com/chaconinc/DbConnector 5d60ef9..c75e92a stable -> origin/stable error: Your local changes to the following files would be overwritten by checkout: scripts/setup.sh Please, commit your changes or stash them before you can switch branches. Aborting Unable to checkout 'c75e92a2b3855c9e5b66f915308390d9db204aca' in submodule path 'DbConnector' ​ 如果你做了一些与上游改动冲突的改动，当运行更新时 Git 会让你知道。 $ git submodule update --remote --merge Auto-merging scripts/setup.sh CONFLICT (content): Merge conflict in scripts/setup.sh Recorded preimage for 'scripts/setup.sh' Automatic merge failed; fix conflicts and then commit the result. Unable to merge 'c75e92a2b3855c9e5b66f915308390d9db204aca' in submodule path 'DbConnector' ​ 你可以进入子模块目录中然后就像平时那样修复冲突。 11.3.3 发布子模块改动 ​ 现在我们的子模块目录中有一些改动。 其中有一些是我们通过更新从上游引入的，而另一些是本地生成的，由于我们还没有推送它们，所以对任何其他人都不可用。 $ git diff Submodule DbConnector c87d55d..82d2ad3: > Merge from origin/stable > updated setup script > unicode support > remove unnecessary method > add new option for conn pooling ​ 如果我们在主项目中提交并推送但并不推送子模块上的改动，其他尝试检出我们修改的人会遇到麻烦，因为他们无法得到依赖的子模块改动。 那些改动只存在于我们本地的拷贝中。 ​ 为了确保这不会发生，你可以让 Git 在推送到主项目前检查所有子模块是否已推送。 git push 命令接受可以设置为 “check” 或 “on-demand” 的 --recurse-submodules 参数。 如果任何提交的子模块改动没有推送那么 “check” 选项会直接使 push 操作失败。 $ git push --recurse-submodules=check The following submodule paths contain changes that can not be found on any remote: DbConnector Please try git push --recurse-submodules=on-demand or cd to the path and use git push to push them to a remote. ​ 如你所见，它也给我们了一些有用的建议，指导接下来该如何做。 最简单的选项是进入每一个子模块中然后手动推送到远程仓库，确保它们能被外部访问到，之后再次尝试这次推送。 ​ 另一个选项是使用 “on-demand” 值，它会尝试为你这样做。 $ git push --recurse-submodules=on-demand Pushing submodule 'DbConnector' Counting objects: 9, done. Delta compression using up to 8 threads. Compressing objects: 100% (8/8), done. Writing objects: 100% (9/9), 917 bytes | 0 bytes/s, done. Total 9 (delta 3), reused 0 (delta 0) To https://github.com/chaconinc/DbConnector c75e92a..82d2ad3 stable -> stable Counting objects: 2, done. Delta compression using up to 8 threads. Compressing objects: 100% (2/2), done. Writing objects: 100% (2/2), 266 bytes | 0 bytes/s, done. Total 2 (delta 1), reused 0 (delta 0) To https://github.com/chaconinc/MainProject 3d6d338..9a377d1 master -> master ​ 如你所见，Git 进入到 DbConnector 模块中然后在推送主项目前推送了它。 如果那个子模块因为某些原因推送失败，主项目也会推送失败。 11.3.4 合并子模块改动 ​ 如果你其他人同时改动了一个子模块引用，那么可能会遇到一些问题。 也就是说，如果子模块的历史已经分叉并且在父项目中分别提交到了分叉的分支上，那么你需要做一些工作来修复它。 ​ 如果一个提交是另一个的直接祖先（一个快进式合并），那么 Git 会简单地选择之后的提交来合并，这样没什么问题。 ​ 不过，Git 甚至不会尝试去进行一次简单的合并。 如果子模块提交已经分叉且需要合并，那你会得到类似下面的信息： $ git pull remote: Counting objects: 2, done. remote: Compressing objects: 100% (1/1), done. remote: Total 2 (delta 1), reused 2 (delta 1) Unpacking objects: 100% (2/2), done. From https://github.com/chaconinc/MainProject 9a377d1..eb974f8 master -> origin/master Fetching submodule DbConnector warning: Failed to merge submodule DbConnector (merge following commits not found) Auto-merging DbConnector CONFLICT (submodule): Merge conflict in DbConnector Automatic merge failed; fix conflicts and then commit the result. ​ 所以本质上 Git 在这里指出了子模块历史中的两个分支记录点已经分叉并且需要合并。 它将其解释为 “merge following commits not found” （未找到接下来需要合并的提交），虽然这有点令人困惑，不过之后我们会解释为什么是这样。 ​ 为了解决这个问题，你需要弄清楚子模块应该处于哪种状态。 奇怪的是，Git 并不会给你多少能帮你摆脱困境的信息，甚至连两边提交历史中的 SHA-1 值都没有。 幸运的是，这很容易解决。 如果你运行 git diff，就会得到试图合并的两个分支中记录的提交的 SHA-1 值。 $ git diff diff --cc DbConnector index eb41d76,c771610..0000000 --- a/DbConnector +++ b/DbConnector ​ 所以，在本例中，eb41d76 是我们的子模块中大家共有的提交，而 c771610 是上游拥有的提交。 如果我们进入子模块目录中，它应该已经在 eb41d76 上了，因为合并没有动过它。 如果不是的话，无论什么原因，你都可以简单地创建并检出一个指向它的分支。 ​ 来自另一边的提交的 SHA-1 值比较重要。 它是需要你来合并解决的。 你可以尝试直接通过 SHA-1 合并，也可以为它创建一个分支然后尝试合并。 我们建议后者，哪怕只是为了一个更漂亮的合并提交信息。 ​ 所以，我们将会进入子模块目录，基于 git diff 的第二个 SHA 创建一个分支然后手动合并。 $ cd DbConnector $ git rev-parse HEAD eb41d764bccf88be77aced643c13a7fa86714135 $ git branch try-merge c771610 (DbConnector) $ git merge try-merge Auto-merging src/main.c CONFLICT (content): Merge conflict in src/main.c Recorded preimage for 'src/main.c' Automatic merge failed; fix conflicts and then commit the result. ​ 我们在这儿得到了一个真正的合并冲突，所以如果想要解决并提交它，那么只需简单地通过结果来更新主项目。 $ vim src/main.c (1) $ git add src/main.c $ git commit -am 'merged our changes' Recorded resolution for 'src/main.c'. [master 9fd905e] merged our changes $ cd .. (2) $ git diff (3) diff --cc DbConnector index eb41d76,c771610..0000000 --- a/DbConnector +++ b/DbConnector @@@ -1,1 -1,1 +1,1 @@@ - Subproject commit eb41d764bccf88be77aced643c13a7fa86714135 -Subproject commit c77161012afbbe1f58b5053316ead08f4b7e6d1d ++Subproject commit 9fd905e5d7f45a0d4cbc43d1ee550f16a30e825a $ git add DbConnector (4) $ git commit -m \"Merge Tom's Changes\" (5) [master 10d2c60] Merge Tom's Changes 首先解决冲突 然后返回到主项目目录中 再次检查 SHA-1 值 解决冲突的子模块记录 提交我们的合并 这可能会让你有点儿困惑，但它确实不难。 ​ 有趣的是，Git 还能处理另一种情况。 如果子模块目录中存在着这样一个合并提交，它的历史中包含了的两边的提交，那么 Git 会建议你将它作为一个可行的解决方案。 它看到有人在子模块项目的某一点上合并了包含这两次提交的分支，所以你可能想要那个。 这就是为什么前面的错误信息是 “merge following commits not found”，因为它不能 这样 做。 它让人困惑是因为谁能想到它会尝试这样做？ ​ 如果它找到了一个可以接受的合并提交，你会看到类似下面的信息： $ git merge origin/master warning: Failed to merge submodule DbConnector (not fast-forward) Found a possible merge resolution for the submodule: 9fd905e5d7f45a0d4cbc43d1ee550f16a30e825a: > merged our changes If this is correct simply add it to the index for example by using: git update-index --cacheinfo 160000 9fd905e5d7f45a0d4cbc43d1ee550f16a30e825a \"DbConnector\" which will accept this suggestion. Auto-merging DbConnector CONFLICT (submodule): Merge conflict in DbConnector Automatic merge failed; fix conflicts and then commit the result. ​ 它会建议你更新索引，就像你运行了 git add 那样，这样会清除冲突然后提交。不过你可能不应该这样做。你可以轻松地进入子模块目录，查看差异是什么，快进到这次提交，恰当地测试，然后提交它。 $ cd DbConnector/ $ git merge 9fd905e Updating eb41d76..9fd905e Fast-forward $ cd .. $ git add DbConnector $ git commit -am 'Fast forwarded to a common submodule child' ​ 这些命令完成了同一件事，但是通过这种方式你至少可以验证工作是否有效，以及当你在完成时可以确保子模块目录中有你的代码。 11.4 子模块技巧 ​ 你可以做几件事情来让用子模块工作轻松一点儿。 11.4.1 子模块遍历 ​ 有一个 foreach 子模块命令，它能在每一个子模块中运行任意命令。 如果项目中包含了大量子模块，这会非常有用。 ​ 例如，假设我们想要开始开发一项新功能或者修复一些错误，并且需要在几个子模块内工作。 我们可以轻松地保存所有子模块的工作进度。 $ git submodule foreach 'git stash' Entering 'CryptoLibrary' No local changes to save Entering 'DbConnector' Saved working directory and index state WIP on stable: 82d2ad3 Merge from origin/stable HEAD is now at 82d2ad3 Merge from origin/stable ​ 然后我们可以创建一个新分支，并将所有子模块都切换过去。 $ git submodule foreach 'git checkout -b featureA' Entering 'CryptoLibrary' Switched to a new branch 'featureA' Entering 'DbConnector' Switched to a new branch 'featureA' ​ 你应该明白。 能够生成一个主项目与所有子项目的改动的统一差异是非常有用的。 $ git diff; git submodule foreach 'git diff' Submodule DbConnector contains modified content diff --git a/src/main.c b/src/main.c index 210f1ae..1f0acdc 100644 --- a/src/main.c +++ b/src/main.c @@ -245,6 +245,8 @@ static int handle_alias(int *argcp, const char ***argv) commit_pager_choice(); + url = url_decode(url_orig); + /* build alias_argv */ alias_argv = xmalloc(sizeof(*alias_argv) * (argc + 1)); alias_argv[0] = alias_string + 1; Entering 'DbConnector' diff --git a/src/db.c b/src/db.c index 1aaefb6..5297645 100644 --- a/src/db.c +++ b/src/db.c @@ -93,6 +93,11 @@ char *url_decode_mem(const char *url, int len) return url_decode_internal(&url, len, NULL, &out, 0); } +char *url_decode(const char *url) +{ + return url_decode_mem(url, strlen(url)); +} + char *url_decode_parameter_name(const char **query) { struct strbuf out = STRBUF_INIT; ​ 在这里，我们看到子模块中定义了一个函数并在主项目中调用了它。 这明显是个简化了的例子，但是希望它能让你明白这种方法的用处。 11.4.2 有用的别名 ​ 你可能想为其中一些命令设置别名，因为它们可能会非常长而你又不能设置选项作为它们的默认选项。 我们在 [Git 别名]介绍了设置 Git 别名，但是如果你计划在 Git 中大量使用子模块的话，这里有一些例子。 $ git config alias.sdiff '!'\"git diff && git submodule foreach 'git diff'\" $ git config alias.spush 'push --recurse-submodules=on-demand' $ git config alias.supdate 'submodule update --remote --merge' ​ 这样当你想要更新子模块时可以简单地运行 git supdate，或 git spush 检查子模块依赖后推送。 11.5 子模块的问题 ​ 然而使用子模块还是有一些小问题。 ​ 例如在有子模块的项目中切换分支可能会造成麻烦。 如果你创建一个新分支，在其中添加一个子模块，之后切换到没有该子模块的分支上时，你仍然会有一个还未跟踪的子模块目录。 $ git checkout -b add-crypto Switched to a new branch 'add-crypto' $ git submodule add https://github.com/chaconinc/CryptoLibrary Cloning into 'CryptoLibrary'... ... $ git commit -am 'adding crypto library' [add-crypto 4445836] adding crypto library 2 files changed, 4 insertions(+) create mode 160000 CryptoLibrary $ git checkout master warning: unable to rmdir CryptoLibrary: Directory not empty Switched to branch 'master' Your branch is up-to-date with 'origin/master'. $ git status On branch master Your branch is up-to-date with 'origin/master'. Untracked files: (use \"git add ...\" to include in what will be committed) CryptoLibrary/ nothing added to commit but untracked files present (use \"git add\" to track) ​ 移除那个目录并不困难，但是有一个目录在那儿会让人有一点困惑。 如果你移除它然后切换回有那个子模块的分支，需要运行 submodule update --init 来重新建立和填充。 $ git clean -fdx Removing CryptoLibrary/ $ git checkout add-crypto Switched to branch 'add-crypto' $ ls CryptoLibrary/ $ git submodule update --init Submodule path 'CryptoLibrary': checked out 'b8dda6aa182ea4464f3f3264b11e0268545172af' $ ls CryptoLibrary/ Makefile includes scripts src ​ 再说一遍，这真的不难，只是会让人有点儿困惑。 ​ 另一个主要的告诫是许多人遇到了将子目录转换为子模块的问题。 如果你在项目中已经跟踪了一些文件，然后想要将它们移动到一个子模块中，那么请务必小心，否则 Git 会对你发脾气。 假设项目内有一些文件在子目录中，你想要将其转换为一个子模块。 如果删除子目录然后运行 submodule add，Git 会朝你大喊： $ rm -Rf CryptoLibrary/ $ git submodule add https://github.com/chaconinc/CryptoLibrary 'CryptoLibrary' already exists in the index ​ 你必须要先取消暂存 CryptoLibrary 目录。 然后才可以添加子模块： $ git rm -r CryptoLibrary $ git submodule add https://github.com/chaconinc/CryptoLibrary Cloning into 'CryptoLibrary'... remote: Counting objects: 11, done. remote: Compressing objects: 100% (10/10), done. remote: Total 11 (delta 0), reused 11 (delta 0) Unpacking objects: 100% (11/11), done. Checking connectivity... done. ​ 现在假设你在一个分支下做了这样的工作。 如果尝试切换回的分支中那些文件还在子目录而非子模块中时——你会得到这个错误： $ git checkout master error: The following untracked working tree files would be overwritten by checkout: CryptoLibrary/Makefile CryptoLibrary/includes/crypto.h ... Please move or remove them before you can switch branches. Aborting ​ 你可以通过 checkout -f 来强制切换，但是要小心，如果其中还有未保存的修改，这个命令会把它们覆盖掉。 $ git checkout -f master warning: unable to rmdir CryptoLibrary: Directory not empty Switched to branch 'master' ​ 当你切换回来之后，因为某些原因你得到了一个空的 CryptoLibrary 目录，并且 git submodule update 也无法修复它。 你需要进入到子模块目录中运行 git checkout . 来找回所有的文件。 你也可以通过 submodule foreach 脚本来为多个子模块运行它。 ​ 要特别注意的是，近来子模块会将它们的所有 Git 数据保存在顶级项目的 .git 目录中，所以不像旧版本的 Git，摧毁一个子模块目录并不会丢失任何提交或分支。 ​ 拥有了这些工具，使用子模块会成为可以在几个相关但却分离的项目上同时开发的相当简单有效的方法。 12. 打包 ​ 虽然我们已经了解了网络传输 Git 数据的常用方法（如 HTTP，SSH 等），但还有另外一种不太常见却又十分有用的方式。 ​ Git 可以将它的数据“打包”到一个文件中。 这在许多场景中都很有用。 有可能你的网络中断了，但你又希望将你的提交传给你的合作者们。 可能你不在办公网中并且出于安全考虑没有给你接入内网的权限。 可能你的无线、有线网卡坏掉了。 可能你现在没有共享服务器的权限，你又希望通过邮件将更新发送给别人，却不希望通过 format-patch 的方式传输 40 个提交。 ​ 这些情况下 git bundle 就会很有用。 bundle 命令会将 git push 命令所传输的所有内容打包成一个二进制文件，你可以将这个文件通过邮件或者闪存传给其他人，然后解包到其他的仓库中。 ​ 来看看一个简单的例子。 假设你有一个包含两个提交的仓库： $ git log commit 9a466c572fe88b195efd356c3f2bbeccdb504102 Author: Scott Chacon Date: Wed Mar 10 07:34:10 2010 -0800 second commit commit b1ec3248f39900d2a406049d762aa68e9641be25 Author: Scott Chacon Date: Wed Mar 10 07:34:01 2010 -0800 first commit ​ 如果你想把这个仓库发送给其他人但你没有其他仓库的权限，或者就是懒得新建一个仓库，你就可以用 git bundle create 命令来打包。 $ git bundle create repo.bundle HEAD master Counting objects: 6, done. Delta compression using up to 2 threads. Compressing objects: 100% (2/2), done. Writing objects: 100% (6/6), 441 bytes, done. Total 6 (delta 0), reused 0 (delta 0) ​ 然后你就会有一个名为 repo.bundle 的文件，该文件包含了所有重建该仓库 master 分支所需的数据。 在使用 bundle 命令时，你需要列出所有你希望打包的引用或者提交的区间。 如果你希望这个仓库可以在别处被克隆，你应该像例子中那样增加一个 HEAD 引用。 ​ 你可以将这个 repo.bundle 文件通过邮件或者U盘传给别人。 ​ 另一方面，假设别人传给你一个 repo.bundle 文件并希望你在这个项目上工作。 你可以从这个二进制文件中克隆出一个目录，就像从一个 URL 克隆一样。 $ git clone repo.bundle repo Initialized empty Git repository in /private/tmp/bundle/repo/.git/ $ cd repo $ git log --oneline 9a466c5 second commit b1ec324 first commit ​ 如果你在打包时没有包含 HEAD 引用，你还需要在命令后指定一个 -b master 或者其他被引入的分支，否则 Git 不知道应该检出哪一个分支。 ​ 现在假设你提交了 3 个修订，并且要用邮件或者U盘将新的提交放在一个包里传回去。 $ git log --oneline 71b84da last commit - second repo c99cf5b fourth commit - second repo 7011d3d third commit - second repo 9a466c5 second commit b1ec324 first commit ​ 首先我们需要确认我们希望被打包的提交区间。 和网络协议不太一样，网络协议会自动计算出所需传输的最小数据集，而我们需要手动计算。 当然你可以像上面那样将整个仓库打包，但最好仅仅打包变更的部分 —— 就是我们刚刚在本地做的 3 个提交。 ​ 为了实现这个目标，你需要计算出差别。 就像我们在 [提交区间]介绍的，你有很多种方式去指明一个提交区间。 我们可以使用 origin/master..master 或者 master ^origin/master 之类的方法来获取那 3 个在我们的 master 分支而不在原始仓库中的提交。 你可以用 log 命令来测试。 $ git log --oneline master ^origin/master 71b84da last commit - second repo c99cf5b fourth commit - second repo 7011d3d third commit - second repo ​ 这样就获取到我们希望被打包的提交列表，让我们将这些提交打包。 我们可以用 git bundle create 命令，加上我们想用的文件名，以及要打包的提交区间。 $ git bundle create commits.bundle master ^9a466c5 Counting objects: 11, done. Delta compression using up to 2 threads. Compressing objects: 100% (3/3), done. Writing objects: 100% (9/9), 775 bytes, done. Total 9 (delta 0), reused 0 (delta 0) ​ 现在在我们的目录下会有一个 commits.bundle 文件。 如果我们把这个文件发送给我们的合作者，她可以将这个文件导入到原始的仓库中，即使在这期间已经有其他的工作提交到这个仓库中。 ​ 当她拿到这个包时，她可以在导入到仓库之前查看这个包里包含了什么内容。 bundle verify 命令可以检查这个文件是否是一个合法的 Git 包，是否拥有共同的祖先来导入。 $ git bundle verify ../commits.bundle The bundle contains 1 ref 71b84daaf49abed142a373b6e5c59a22dc6560dc refs/heads/master The bundle requires these 1 ref 9a466c572fe88b195efd356c3f2bbeccdb504102 second commit ../commits.bundle is okay ​ 如果打包工具仅仅把最后两个提交打包，而不是三个，原始的仓库是无法导入这个包的，因为这个包缺失了必要的提交记录。这时候 verify 的输出类似： $ git bundle verify ../commits-bad.bundle error: Repository lacks these prerequisite commits: error: 7011d3d8fc200abe0ad561c011c3852a4b7bbe95 third commit - second repo ​ 而我们的第一个包是合法的，所以我们可以从这个包里提取出提交。 如果你想查看这边包里可以导入哪些分支，同样有一个命令可以列出这些顶端： $ git bundle list-heads ../commits.bundle 71b84daaf49abed142a373b6e5c59a22dc6560dc refs/heads/master ​ verify 子命令同样可以告诉你有哪些顶端。 该功能的目的是查看哪些是可以被拉入的，所以你可以使用 fetch 或者 pull 命令从包中导入提交。 这里我们要从包中取出 master 分支到我们仓库中的 other-master 分支： $ git fetch ../commits.bundle master:other-master From ../commits.bundle * [new branch] master -> other-master ​ 可以看到我们已经将提交导入到 other-master 分支，以及在这期间我们自己在 master 分支上的提交。 $ git log --oneline --decorate --graph --all * 8255d41 (HEAD, master) third commit - first repo | * 71b84da (other-master) last commit - second repo | * c99cf5b fourth commit - second repo | * 7011d3d third commit - second repo |/ * 9a466c5 second commit * b1ec324 first commit ​ 因此，当你在没有合适的网络或者可共享仓库的情况下，git bundle 很适合用于共享或者网络类型的操作。 13. 替换 ​ Git 对象是不可改变的，但它提供一种有趣的方式来用其他对象假装替换数据库中的 Git 对象。 ​ replace 命令可以让你在 Git 中指定一个对象并可以声称“每次你遇到这个 Git 对象时，假装它是其他的东西”。 在你用一个不同的提交替换历史中的一个提交时，这会非常有用。 ​ 例如，你有一个大型的代码历史并想把自己的仓库分成一个短的历史和一个更大更长久的历史，短历史供新的开发者使用，后者给喜欢数据挖掘的人使用。 你可以通过用新仓库中最早的提交 replace 老仓库中最新的提交来连接历史，这种方式可以把一条历史移植到其他历史上。 这意味着你不用在新历史中真正替换每一个提交（因为历史来源会影响 SHA 的值），你可以加入他们。 ​ 让我们来试试吧。 首先获取一个已经存在的仓库，并将其分成两个仓库，一个是最近的仓库，一个是历史版本的仓库，然后我们将看到如何在不更改仓库 SHA 值的情况下通过 replace 命令来合并他们。 ​ 我们将使用一个拥有 5 个提交的简单仓库： $ git log --oneline ef989d8 fifth commit c6e1e95 fourth commit 9c68fdc third commit 945704c second commit c1822cf first commit ​ 我们想将其分成拆分成两条历史。 第一个到第四个提交的作为第一个历史版本。 第四、第五个提交的作为最近的第二个历史版本。 ​ 创建历史版本的历史很容易，我们可以只将一个历史中的分支推送到一个新的远程仓库的 master 分支。 $ git branch history c6e1e95 $ git log --oneline --decorate ef989d8 (HEAD, master) fifth commit c6e1e95 (history) fourth commit 9c68fdc third commit 945704c second commit c1822cf first commit ​ 现在我们可以把这个新的 history 分支推送到我们新仓库的 master 分支： $ git remote add project-history https://github.com/schacon/project-history $ git push project-history history:master Counting objects: 12, done. Delta compression using up to 2 threads. Compressing objects: 100% (4/4), done. Writing objects: 100% (12/12), 907 bytes, done. Total 12 (delta 0), reused 0 (delta 0) Unpacking objects: 100% (12/12), done. To git@github.com:schacon/project-history.git * [new branch] history -> master ​ 这样一来，我们的历史版本就发布了。 稍难的部分则是删减我们最近的历史来让它变得更小。 我们需要一个重叠以便于用一个相等的提交来替换另一个提交，这样一来，我们将截断到第四、五个提交。 $ git log --oneline --decorate ef989d8 (HEAD, master) fifth commit c6e1e95 (history) fourth commit 9c68fdc third commit 945704c second commit c1822cf first commit ​ 在这种情况下，创建一个能够指导扩展历史的基础提交是很有用的。 这样一来，如果其他的开发者想要修改第一次提交或者其他操作时就知道要做些什么，因此，接下来我们要做的是用命令创建一个最初的提交对象，然后将剩下的提交（第四、第五个提交）变基到它的上面。 ​ 为了这么做，我们需要选择一个点去拆分，对于我们而言是第三个提交（SHA 是 9c68fdc）。因此我们的提交将基于此提交树。我们可以使用 commit-tree 命令来创建基础提交，这样我们就有了一个树，并返回一个全新的、无父节点的 SHA 提交对象。 $ echo 'get history from blah blah blah' | git commit-tree 9c68fdc^{tree} 622e88e9cbfbacfb75b5279245b9fb38dfea10cf Notes:commit-tree 命令属于底层指令。有许多指令并非直接使用，而是被 其他的 Git 命令用来做更小一些的工作。有时当我们做一些像这样的奇怪事情时，它们允许我们做一些不适用于日常使用但真正底层的东西。更多关于底层命令的内容请参见 [底层命令和高层命令] ​ 现在我们已经有一个基础提交了，我们可以通过 git rebase --onto 命令来将剩余的历史变基到基础提交之上。--onto 参数是刚才 commit-tree 命令返回的 SHA 值，变基点会成为第三个提交（我们想留下的第一个提交的父提交，9c68fdc）： $ git rebase --onto 622e88 9c68fdc First, rewinding head to replay your work on top of it... Applying: fourth commit Applying: fifth commit ​ 我们已经用基础提交重写了最近的历史，基础提交包括如何重新组成整个历史的说明。 我们可以将新历史推送到新项目中，当其他人克隆这个仓库时，他们仅能看到最近两次提交以及一个包含上述说明的基础提交。 ​ 现在我们将以想获得整个历史的人的身份来初次克隆这个项目。 在克隆这个截断后的仓库后为了得到历史数据，需要添加第二个远程的历史版本库并对其做获取操作： $ git clone https://github.com/schacon/project $ cd project $ git log --oneline master e146b5f fifth commit 81a708d fourth commit 622e88e get history from blah blah blah $ git remote add project-history https://github.com/schacon/project-history $ git fetch project-history From https://github.com/schacon/project-history * [new branch] master -> project-history/master ​ 现在，协作者在 master 分支中拥有他们最近的提交并且在 project-history/master 分支中拥有过去的提交。 $ git log --oneline master e146b5f fifth commit 81a708d fourth commit 622e88e get history from blah blah blah $ git log --oneline project-history/master c6e1e95 fourth commit 9c68fdc third commit 945704c second commit c1822cf first commit ​ 为了合并它们，你可以使用 git replace 命令加上你想替换的提交信息来进行替换。 这样一来，我们就可以将 master 分支中的第四个提交替换为 project-history/master 分支中的“第四个”提交。 $ git replace 81a708d c6e1e95 ​ 现在，查看 master 分支中的历史信息，显示如下： $ git log --oneline master e146b5f fifth commit 81a708d fourth commit 9c68fdc third commit 945704c second commit c1822cf first commit ​ 很酷，是不是？不用改变上游的 SHA-1 我们就能用一个提交来替换历史中的所有不同的提交，并且所有的工具（bisect，blame 等）也都奏效。 ​ 有趣的是，即使是使用了 c6e1e95 提交数据来进行替换，它的 SHA-1 仍显示为 81a708d。 即使你运行了 cat-file 命令，它仍会显示你替换的数据： $ git cat-file -p 81a708d tree 7bc544cf438903b65ca9104a1e30345eee6c083d parent 9c68fdceee073230f19ebb8b5e7fc71b479c0252 author Scott Chacon 1268712581 -0700 committer Scott Chacon 1268712581 -0700 fourth commit ​ 请记住，81a708d 真正的父提交是 622e882 占位提交，而非呈现的 9c68fdce 提交。 ​ 另一个有趣的事情是数据将会以以下引用显示： $ git for-each-ref e146b5f14e79d4935160c0e83fb9ebe526b8da0d commit refs/heads/master c6e1e95051d41771a649f3145423f8809d1a74d4 commit refs/remotes/history/master e146b5f14e79d4935160c0e83fb9ebe526b8da0d commit refs/remotes/origin/HEAD e146b5f14e79d4935160c0e83fb9ebe526b8da0d commit refs/remotes/origin/master c6e1e95051d41771a649f3145423f8809d1a74d4 commit refs/replace/81a708dd0e167a3f691541c7a6463343bc457040 ​ 这意味着我们可以轻而易举的和其他人分享替换，因为我们可以将替换推送到服务器中并且其他人可以轻松地下载。 也许在历史移植情况下不是很有用（既然每个人都乐意下载最新版本和历史版本，为何还要拆分他们呢？），但在其他情况下仍然很有用。 14. 凭证存储 ​ 如果你使用的是 SSH 方式连接远端，并且设置了一个没有口令的密钥，这样就可以在不输入用户名和密码的情况下安全地传输数据。 然而，这对 HTTP 协议来说是不可能的 —— 每一个连接都是需要用户名和密码的。 这在使用双重认证的情况下会更麻烦，因为你需要输入一个随机生成并且毫无规律的 token 作为密码。 ​ 幸运的是，Git 拥有一个凭证系统来处理这个事情。 下面有一些 Git 的选项： 默认所有都不缓存。 每一次连接都会询问你的用户名和密码。 “cache” 模式会将凭证存放在内存中一段时间。 密码永远不会被存储在磁盘中，并且在15分钟后从内存中清除。 “store” 模式会将凭证用明文的形式存放在磁盘中，并且永不过期。 这意味着除非你修改了你在 Git 服务器上的密码，否则你永远不需要再次输入你的凭证信息。 这种方式的缺点是你的密码是用明文的方式存放在你的 home 目录下。 如果你使用的是 Mac，Git 还有一种 “osxkeychain” 模式，它会将凭证缓存到你系统用户的钥匙串中。 这种方式将凭证存放在磁盘中，并且永不过期，但是是被加密的，这种加密方式与存放 HTTPS 凭证以及 Safari 的自动填写是相同的。 如果你使用的是 Windows，你可以安装一个叫做 “winstore” 的辅助工具。 这和上面说的 “osxkeychain” 十分类似，但是是使用 Windows Credential Store 来控制敏感信息。 可以在 https://gitcredentialstore.codeplex.com 下载。 ​ 你可以设置 Git 的配置来选择上述的一种方式 $ git config --global credential.helper cache ​ 部分辅助工具有一些选项。 “store” 模式可以接受一个 --file 参数，可以自定义存放密码的文件路径（默认是 ~/.git-credentials ）。 “cache” 模式有 --timeout 参数，可以设置后台进程的存活时间（默认是 “900”，也就是 15 分钟）。 下面是一个配置 “store” 模式自定义路径的例子： $ git config --global credential.helper store --file ~/.my-credentials ​ Git 甚至允许你配置多个辅助工具。 当查找特定服务器的凭证时，Git 会按顺序查询，并且在找到第一个回答时停止查询。 当保存凭证时，Git 会将用户名和密码发送给 所有 配置列表中的辅助工具，它们会按自己的方式处理用户名和密码。 如果你在闪存上有一个凭证文件，但又希望在该闪存被拔出的情况下使用内存缓存来保存用户名密码，.gitconfig 配置文件如下： [credential] helper = store --file /mnt/thumbdrive/.git-credentials helper = cache --timeout 30000 14.1 底层实现 ​ 这些是如何实现的呢？ Git 凭证辅助工具系统的命令是 git credential，这个命令接收一个参数，并通过标准输入获取更多的参数。 ​ 举一个例子更容易理解。 我们假设已经配置好一个凭证辅助工具，这个辅助工具保存了 mygithost 的凭证信息。 下面是一个使用 “fill” 命令的会话，当 Git 尝试寻找一个服务器的凭证时就会被调用。 $ git credential fill (1) protocol=https (2) host=mygithost (3) protocol=https (4) host=mygithost username=bob password=s3cre7 $ git credential fill (5) protocol=https host=unknownhost Username for 'https://unknownhost': bob Password for 'https://bob@unknownhost': protocol=https host=unknownhost username=bob password=s3cre7 这是开始交互的命令。 Git-credential 接下来会等待标准输入。 我们提供我们所知道的信息：协议和主机名。 一个空行代表输入已经完成，凭证系统应该输出它所知道的信息。 接下来由 Git-credential 接管，并且将找到的信息打印到标准输出。 如果没有找到对应的凭证，Git 会询问用户的用户名和密码，我们将这些信息输入到在标准输出的地方（这个例子中是同一个控制台）。 ​ 凭证系统实际调用的程序和 Git 本身是分开的；具体是哪一个以及如何调用与 credential.helper 配置的值有关。 这个配置有多种格式： 配置值 行为 foo 执行 git-credential-foo foo -a --opt=bcd 执行 git-credential-foo -a --opt=bcd /absolute/path/foo -xyz 执行 /absolute/path/foo -xyz !f() { echo \"password=s3cre7\"; }; f ! 后面的代码会在 shell 执行 ​ 上面描述的辅助工具可以被称做 git-credential-cache、git-credential-store 之类，我们可以配置它们来接受命令行参数。 通常的格式是 “git-credential-foo [args] ” 标准输入/输出协议和 git-credential 一样，但它们使用的是一套稍微不太一样的行为： get 是请求输入一对用户名和密码。 store 是请求保存一个凭证到辅助工具的内存。 erase 会将给定的证书从辅助工具内存中清除。 ​ 对于 store 和 erase 两个行为是不需要返回数据的（Git 也会忽略掉）。 然而对于 get，Git 对辅助工具的返回信息十分感兴趣。 ​ 如果辅助工具没有任何有用的信息，它可以直接退出而不需要输出任何东西，但如果它有这些信息，它在提供的信息后面增加它所拥有的信息。 这些输出会被视为一系列的赋值语句；每一个提供的数据都会将 Git 已有的数据替换掉。 ​ 这有一个和上面一样的例子，但是跳过了 git-credential 这一步，直接到 git-credential-store: $ git credential-store --file ~/git.store store (1) protocol=https host=mygithost username=bob password=s3cre7 $ git credential-store --file ~/git.store get (2) protocol=https host=mygithost username=bob (3) password=s3cre7 我们告诉 git-credential-store 去保存凭证：当访问 https://mygithost 时使用用户名 “bob”，密码是 “s3cre7”。 现在我们取出这个凭证。 我们提供连接这部分的信息（https://mygithost）以及一个空行。 git-credential-store 输出我们之前保存的用户名和密码。 ~/git.store 文件的内容类似： https://bob:s3cre7@mygithost ​ 仅仅是一系列包含凭证信息 URL 组成的行。 osxkeychain 和 winstore 辅助工具使用它们后端存储的原生格式，而 cache 使用它的内存格式（其他进程无法读取）。 14.2 自定义凭证缓存 ​ 已经知道 git-credential-store 之类的是和 Git 是相互独立的程序，就不难理解 Git 凭证辅助工具可以是 任意 程序。 虽然 Git 提供的辅助工具覆盖了大多数常见的使用场景，但并不能满足所有情况。 比如，假设你的整个团队共享一些凭证，也许是在部署时使用。 这些凭证是保存在一个共享目录里，由于这些凭证经常变更，所以你不想把它们复制到你自己的凭证仓库中。 现有的辅助工具无法满足这种情况；来看看我们如何自己实现一个。 这个程序应该拥有几个核心功能： 我们唯一需要关注的行为是 get；store 和 erase 是写操作，所以当接受到这两个请求时我们直接退出即可。 共享的凭证文件格式和 git-credential-store 使用的格式相同。 凭证文件的路径一般是固定的，但我们应该允许用户传入一个自定义路径以防万一。 ​ 我们再一次使用 Ruby 来编写这个扩展，但只要 Git 能够执行最终的程序，任何语言都是可以的。 这是我们的凭证辅助工具的完整代码： #!/usr/bin/env ruby require 'optparse' path = File.expand_path '~/.git-credentials' (1) OptionParser.new do |opts| opts.banner = 'USAGE: git-credential-read-only [options] ' opts.on('-f', '--file PATH', 'Specify path for backing store') do |argpath| path = File.expand_path argpath end end.parse! exit(0) unless ARGV[0].downcase == 'get' (2) exit(0) unless File.exists? path known = {} (3) while line = STDIN.gets break if line.strip == '' k,v = line.strip.split '=', 2 known[k] = v end File.readlines(path).each do |fileline| (4) prot,user,pass,host = fileline.scan(/^(.*?):\\/\\/(.*?):(.*?)@(.*)$/).first if prot == known['protocol'] and host == known['host'] then puts \"protocol=#{prot}\" puts \"host=#{host}\" puts \"username=#{user}\" puts \"password=#{pass}\" exit(0) end end 我们在这里解析命令行参数，允许用户指定输入文件，默认是 ~/.git-credentials. 这个程序只有在接受到 get 行为的请求并且后端存储的文件存在时才会有输出。 这个循环从标准输入读取数据，直到读取到第一个空行。 输入的数据被保存到 known 哈希表中，之后需要用到。 这个循环读取存储文件中的内容，寻找匹配的行。 如果 known 中的协议和主机名与该行相匹配，这个程序输出结果并退出。 ​ 我们把这个辅助工具保存为 git-credential-read-only，放到我们的 PATH 路径下并且给予执行权限。 一个交互式会话类似： $ git credential-read-only --file=/mnt/shared/creds get protocol=https host=mygithost protocol=https host=mygithost username=bob password=s3cre7 ​ 由于这个的名字是 “git-” 开头，所以我们可以在配置值中使用简便的语法： $ git config --global credential.helper read-only --file /mnt/shared/creds ​ 正如你看到的，扩展这个系统是相当简单的，并且可以为你和你的团队解决一些常见问题。 15. 总结 ​ 你已经接触了很多能够精确地操控提交和暂存区的高级工具。 当你碰到问题时，你应该可以很容易找出是哪个分支在什么时候由谁引入了它们。 如果你想在项目中使用子项目，你也已经知道如何来满足这些需求。 到此，你应该能毫无压力地在命令行中使用 Git 来完成日常中的大部分事情。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Git/Chapter9.html":{"url":"Git/Chapter9.html","title":"第九章：自定义Git","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 配置 Git 1.1 客户端基本配置 1.1.1 core.editor 1.1.2 commit.template modified: lib/test.rb ~ 1.1.3 core.pager 1.1.4 user.signingkey 1.1.5 core.excludesfile 1.1.6 help.autocorrect 1.2 Git 中的着色 1.2.1 color.ui 1.2.2 color.* 1.3 外部的合并与比较工具 1.4 格式化与多余的空白字符 1.4.1 core.autocrlf 1.4.2 core.whitespace 1.5 服务器端配置 1.5.1 receive.fsckObjects 1.5.2 receive.denyNonFastForwards 1.5.3 receive.denyDeletes 2. Git 属性 2.1 二进制文件 2.1.1 识别二进制文件 2.1.2 比较二进制文件 2.2 关键字展开 2.3 导出版本库 2.3.1 export-ignore 2.3.2 export-subst 2.4 合并策略 3. Git 钩子 3.1 安装一个钩子 3.2 客户端钩子 3.2.1 提交工作流钩子 3.2.2 电子邮件工作流钩子 3.2.3 其它客户端钩子 3.3 服务器端钩子 3.3.1 pre-receive 3.3.2 update 3.3.3 post-receive 4. 使用强制策略的一个例子 4.1 服务器端钩子 4.1.1 指定特殊的提交信息格式 4.1.2 指定基于用户的访问权限控制列表（ACL）系统 4.1.3 测试一下 4.2 客户端钩子 5. 总结 第九章：自定义Git ​ 到目前为止，我们已经阐述了 Git 基本的运作机制和使用方式，介绍了许多 Git 提供的工具来帮助你简单且有效地使用它。 在本章，我们将演示如何借助 Git 的一些重要的配置方法和钩子机制，来满足自定义的需求。 通过这些工具，它会和你、你的公司或你的团队配合得天衣无缝。 1. 配置 Git ​ 由前置内容可知，可以用 git config 配置 Git。 首先要做的事情就是设置你的名字和邮件地址： $ git config --global user.name \"John Doe\" $ git config --global user.email johndoe@example.com ​ 现在，你会了解到许多更有趣的选项，并用类似的方式来定制 Git。 ​ 首先，快速回忆下：Git 使用一系列配置文件来保存你自定义的行为。 它首先会查找 /etc/gitconfig 文件，该文件含有系统里每位用户及他们所拥有的仓库的配置值。 如果你传递 --system 选项给 git config，它就会读写该文件。 ​ 接下来 Git 会查找每个用户的 ~/.gitconfig 文件（或者 ~/.config/git/config 文件）。 你可以传递 --global 选项让 Git 读写该文件。 ​ 最后 Git 会查找你正在操作的版本库所对应的 Git 目录下的配置文件（.git/config）。 这个文件中的值只对该版本库有效。 ​ 以上三个层次中每层的配置（系统、全局、本地）都会覆盖掉上一层次的配置，所以 .git/config 中的值会覆盖掉 /etc/gitconfig 中所对应的值。 Notes:Git 的配置文件是纯文本的，所以你可以直接手动编辑这些配置文件，输入合乎语法的值。 但是运行 git config 命令会更简单些。 | 1.1 客户端基本配置 ​ Git 能够识别的配置项分为两大类：客户端和服务器端。 其中大部分属于客户端配置 —— 可以依你个人的工作偏好进行配置。 尽管 Git 支持的选项 繁多，但其中大部分仅仅在某些罕见的情况下有意义。 我们只讲述最平常和最有用的选项。 如果想得到你当前版本的 Git 支持的选项列表，请运行 $ man git-config ​ 这个命令列出了所有可用的选项，以及与之相关的介绍。 你也可以在 http://git-scm.com/docs/git-config.html 找到同样的内容。 1.1.1 core.editor ​ 默认情况下，Git 会调用环境变量（$VISUAL 或 $EDITOR）设置的任意文本编辑器，如果没有设置，会调用 vi 来创建和编辑你的提交以及标签信息。 你可以使用 core.editor 选项来修改默认的编辑器： $ git config --global core.editor emacs ​ 现在，无论你定义了什么终端编辑器，Git 都会调用 Emacs 编辑信息。 1.1.2 commit.template ​ 如果把此项指定为你的系统上某个文件的路径，当你提交的时候， Git 会使用该文件的内容作为提交的默认信息。 例如：假设你创建了一个叫 ~/.gitmessage.txt 的模板文件，类似这样： subject line what happened [ticket: X] ​ 要想让 Git 把它作为运行 git commit 时显示在你的编辑器中的默认信息， 如下设置 commit.template： $ git config --global commit.template ~/.gitmessage.txt $ git commit ​ 然后当你提交时，编辑器中就会显示如下的提交信息占位符： subject line what happened [ticket: X] # Please enter the commit message for your changes. Lines starting # with '#' will be ignored, and an empty message aborts the commit. # On branch master # Changes to be committed: # (use \"git reset HEAD ...\" to unstage) # # modified: lib/test.rb # ~ ~ \".git/COMMIT_EDITMSG\" 14L, 297C ​ 如果你的团队对提交信息有格式要求，可以在系统上创建一个文件，并配置 Git 把它作为默认的模板，这样可以更加容易地使提交信息遵循格式。 1.1.3 core.pager ​ 该配置项指定 Git 运行诸如 log 和 diff 等命令所使用的分页器。 你可以把它设置成用 more 或者任何你喜欢的分页器（默认用的是 less），当然也可以设置成空字符串，关闭该选项： $ git config --global core.pager '' ​ 这样不管命令的输出量多少，Git 都会在一页显示所有内容。 1.1.4 user.signingkey ​ 如果你要创建经签署的含附注的标签（正如 [签署工作] 所述），那么把你的 GPG 签署密钥设置为配置项会更好。 如下设置你的密钥 ID： $ git config --global user.signingkey ​ 现在，你每次运行 git tag 命令时，即可直接签署标签，而无需定义密钥： $ git tag -s 1.1.5 core.excludesfile ​ 正如 [忽略文件] 所述，你可以在你的项目的 .gitignore 文件里面规定无需纳入 Git 管理的文件的模板，这样它们既不会出现在未跟踪列表，也不会在你运行 git add 后被暂存。 ​ 不过有些时候，你想要在你所有的版本库中忽略掉某一类文件。 如果你的操作系统是 OS X，很可能就是指 .DS_Store。 如果你把 Emacs 或 Vim 作为首选的编辑器，你肯定知道以 ~ 结尾的临时文件。 ​ 这个配置允许你设置类似于全局生效的 .gitignore 文件。 如果你按照下面的内容创建一个 ~/.gitignore_global 文件： *~ .DS_Store ​ ……然后运行 git config --global core.excludesfile ~/.gitignore_global，Git 将把那些文件永远地拒之门外。 1.1.6 help.autocorrect ​ 假如你打错了一条命令，会显示： $ git chekcout master git：'chekcout' 不是一个 git 命令。参见 'git --help'。 您指的是这个么？ checkout ​ Git 会尝试猜测你的意图，但是它不会越俎代庖。 如果你把 help.autocorrect 设置成 1，那么只要有一个命令被模糊匹配到了，Git 会自动运行该命令。 $ git chekcout master 警告：您运行一个不存在的 Git 命令 'chekcout'。继续执行假定您要要运行的 是 'checkout' 在 0.1 秒钟后自动运行... ​ 注意提示信息中的“0.1 秒”。help.autocorrect 接受一个代表十分之一秒的整数。 所以如果你把它设置为 50, Git 将在自动执行命令前给你 5 秒的时间改变主意。 1.2 Git 中的着色 ​ Git 充分支持对终端内容着色，对你凭肉眼简单、快速分析命令输出有很大帮助。 你可以设置许多的相关选项来满足自己的偏好。 1.2.1 color.ui ​ Git 会自动着色大部分输出内容，但如果你不喜欢花花绿绿，也可以关掉。 要想关掉 Git 的终端颜色输出，试一下这个： $ git config --global color.ui false ​ 这个设置的默认值是 auto，它会着色直接输出到终端的内容；而当内容被重定向到一个管道或文件时，则忽略着色功能。 ​ 你也可以设置成 always，来忽略掉管道和终端的不同，即在任何情况下着色输出。 你很少会这么设置，在大多数场合下，如果你想在被重定向的输出中插入颜色码，可以传递 --color 标志给 Git 命令来强制它这么做。 默认设置就已经能满足大多数情况下的需求了。 1.2.2 color.* ​ 要想具体到哪些命令输出需要被着色以及怎样着色，你需要用到和具体命令有关的颜色配置选项。 它们都能被置为 true、false 或 always： color.branch color.diff color.interactive color.status ​ 另外，以上每个配置项都有子选项，它们可以被用来覆盖其父设置，以达到为输出的各个部分着色的目的。 例如，为了让 diff 的输出信息以蓝色前景、黑色背景和粗体显示，你可以运行 $ git config --global color.diff.meta \"blue black bold\" ​ 你能设置的颜色有：normal、black、red、green、yellow、blue、magenta、cyan 或 white。 正如以上例子设置的粗体属性，想要设置字体属性的话，可以选择包括：bold、dim、ul（下划线）、blink、reverse（交换前景色和背景色）。 1.3 外部的合并与比较工具 ​ 虽然 Git 自己内置了一个 diff 实现，而且到目前为止我们一直在使用它，但你能够用一个外部的工具替代它。 除此以外，你还能设置一个图形化的工具来合并和解决冲突，从而不必自己手动解决。 这里我们以一个不错且免费的工具 —— Perforce 图形化合并工具（P4Merge） —— 来展示如何用一个外部的工具来合并和解决冲突。 ​ P4Merge 可以在所有主流平台上运行，所以安装上应该没有什么困难。 在这个例子中，我们使用的路径名可以直接应用在 Mac 和 Linux 上；在 Windows 上，/usr/local/bin 需要被改为你的环境中可执行文件所在的目录路径。 ​ 首先， 从 http://www.perforce.com/downloads/Perforce/ 下载 P4Merge。 接下来，你要编写一个全局包装脚本来运行你的命令。 我们会使用 Mac 上的路径来指定该脚本的位置，在其他系统上，它将是 p4merge 二进制文件所在的目录。 创建一个名为 extMerge 的脚本包装 merge 命令，让它把参数转发给 p4merge 二进制文件： $ cat /usr/local/bin/extMerge #!/bin/sh /Applications/p4merge.app/Contents/MacOS/p4merge $* ​ 包装 diff 命令的脚本首先确保传递了七个参数过来，随后把其中两个转发给包装了 merge 的脚本。 默认情况下， Git 传递以下参数给 diff： path old-file old-hex old-mode new-file new-hex new-mode ​ 由于你仅仅需要 old-file 和 new-file 参数，由包装 diff 的脚本来转发它们吧。 $ cat /usr/local/bin/extDiff #!/bin/sh [ $# -eq 7 ] && /usr/local/bin/extMerge \"$2\" \"$5\" ​ 你也需要确保这些脚本具有可执行权限： $ sudo chmod +x /usr/local/bin/extMerge $ sudo chmod +x /usr/local/bin/extDiff ​ 现在你可以修改配置文件来使用你自定义的合并和比较工具了。 这将涉及许多自定义设置：merge.tool 通知 Git 该使用哪个合并工具， mergetool..cmd 规定命令运行的方式，mergetool..trustExitCode 会通知 Git 程序的返回值是否表示合并操作成功，diff.external 通知 Git 该用什么命令做比较。 因此，你可以运行以下四条配置命令： $ git config --global merge.tool extMerge $ git config --global mergetool.extMerge.cmd \\ 'extMerge \\\"$BASE\\\" \\\"$LOCAL\\\" \\\"$REMOTE\\\" \\\"$MERGED\\\"' $ git config --global mergetool.extMerge.trustExitCode false $ git config --global diff.external extDiff ​ 或编辑你的 ~/.gitconfig 文件，添加以下各行： [merge] tool = extMerge [mergetool \"extMerge\"] cmd = extMerge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\" trustExitCode = false [diff] external = extDiff ​ 待一切设置妥当后，如果你像这样运行 diff 命令： $ git diff 32d1776b1^ 32d1776b1 ​ Git 将启动 P4Merge，而不是在命令行输出比较的结果，就像这样： P4Merge. ​ 如果你尝试合并两个分支，随后遇到了合并冲突，运行 git mergetool，Git 会调用 P4Merge 让你通过图形界面来解决冲突。 ​ 设置包装脚本的好处在于大大降低了改变 diff 和 merge 工具的工作量。 举个例子，想把 extDiff 和 extMerge 的工具改成 KDiff3，你要做的仅仅是编辑 extMerge 脚本文件： $ cat /usr/local/bin/extMerge #!/bin/sh /Applications/kdiff3.app/Contents/MacOS/kdiff3 $* ​ 现在，Git 将使用 KDiff3 作为查看比较和解决合并冲突的工具。 ​ Git 预设了许多其他的合并和解决冲突的工具，无需特别的设置你就能用上它们。 要想看到它支持的工具列表，试一下这个： $ git mergetool --tool-help 'git mergetool --tool=' may be set to one of the following: emerge gvimdiff gvimdiff2 opendiff p4merge vimdiff vimdiff2 The following tools are valid, but not currently available: araxis bc3 codecompare deltawalker diffmerge diffuse ecmerge kdiff3 meld tkdiff tortoisemerge xxdiff Some of the tools listed above only work in a windowed environment. If run in a terminal-only session, they will fail. ​ 如果你不想用到 KDiff3 的所有功能，只是想用它来合并，那么 kdiff3 正符合你的要求，运行： $ git config --global merge.tool kdiff3 ​ 如果运行了以上命令，而没有设置 extMerge 和 extDiff 文件，Git 会用 KDiff3 做合并，让内置的 diff 来做比较。 1.4 格式化与多余的空白字符 ​ 格式化与多余的空白字符是许多开发人员在协作时，特别是在跨平台情况下，不时会遇到的令人头疼的琐碎的问题。 由于编辑器的不同或者文件行尾的换行符在 Windows 下被替换了，一些细微的空格变化会不经意地混入提交的补丁或其它协作成果中。 不用怕，Git 提供了一些配置项来帮助你解决这些问题。 1.4.1 core.autocrlf ​ 假如你正在 Windows 上写程序，而你的同伴用的是其他系统（或相反），你可能会遇到 CRLF 问题。 这是因为 Windows 使用回车（CR）和换行（LF）两个字符来结束一行，而 Mac 和 Linux 只使用换行（LF）一个字符。 虽然这是小问题，但它会极大地扰乱跨平台协作。许多 Windows 上的编辑器会悄悄把行尾的换行字符转换成回车和换行，或在用户按下 Enter 键时，插入回车和换行两个字符。 ​ Git 可以在你提交时自动地把回车和换行转换成换行，而在检出代码时把换行转换成回车和换行。 你可以用 core.autocrlf 来打开此项功能。 如果是在 Windows 系统上，把它设置成 true，这样在检出代码时，换行会被转换成回车和换行： $ git config --global core.autocrlf true ​ 如果使用以换行作为行结束符的 Linux 或 Mac，你不需要 Git 在检出文件时进行自动的转换；然而当一个以回车加换行作为行结束符的文件不小心被引入时，你肯定想让 Git 修正。 你可以把 core.autocrlf 设置成 input 来告诉 Git 在提交时把回车和换行转换成换行，检出时不转换： $ git config --global core.autocrlf input ​ 这样在 Windows 上的检出文件中会保留回车和换行，而在 Mac 和 Linux 上，以及版本库中会保留换行。 ​ 如果你是 Windows 程序员，且正在开发仅运行在 Windows 上的项目，可以设置 false 取消此功能，把回车保留在版本库中： $ git config --global core.autocrlf false 1.4.2 core.whitespace ​ Git 预先设置了一些选项来探测和修正多余空白字符问题。 它提供了六种处理多余空白字符的主要选项 —— 其中三个默认开启，另外三个默认关闭，不过你可以自由地设置它们。 ​ 默认被打开的三个选项是：blank-at-eol，查找行尾的空格；blank-at-eof，盯住文件底部的空行；space-before-tab，警惕行头 tab 前面的空格。 ​ 默认被关闭的三个选项是：indent-with-non-tab，揪出以空格而非 tab 开头的行（你可以用 tabwidth 选项控制它）；tab-in-indent，监视在行头表示缩进的 tab；cr-at-eol，告诉 Git 忽略行尾的回车。 ​ 通过设置 core.whitespace，你可以让 Git 按照你的意图来打开或关闭以逗号分割的选项。 要想关闭某个选项，你可以在输入设置选项时不指定它或在它前面加个 -。 例如，如果你想要打开除 cr-at-eol 之外的所有选项： $ git config --global core.whitespace \\ trailing-space,space-before-tab,indent-with-non-tab ​ 当你运行 git diff 命令并尝试给输出着色时，Git 将探测到这些问题，因此你在提交前就能修复它们。 用 git apply 打补丁时你也会从中受益。 如果正准备应用的补丁存有特定的空白问题，你可以让 Git 在应用补丁时发出警告： $ git apply --whitespace=warn ​ 或者让 Git 在打上补丁前自动修正此问题： $ git apply --whitespace=fix ​ 这些选项也能运用于 git rebase。 如果提交了有空白问题的文件，但还没推送到上游，你可以运行 git rebase --whitespace=fix 来让 Git 在重写补丁时自动修正它们。 1.5 服务器端配置 ​ Git 服务器端的配置项相对来说并不多，但仍有一些饶有生趣的选项值得你一看。 1.5.1 receive.fsckObjects ​ Git 能够确认每个对象的有效性以及 SHA-1 检验和是否保持一致。 但 Git 不会在每次推送时都这么做。这个操作很耗时间，很有可能会拖慢提交的过程，特别是当库或推送的文件很大的情况下。 如果想在每次推送时都要求 Git 检查一致性，设置 receive.fsckObjects 为 true 来强迫它这么做： $ git config --system receive.fsckObjects true ​ 现在 Git 会在每次推送生效前检查库的完整性，确保没有被有问题的客户端引入破坏性数据。 1.5.2 receive.denyNonFastForwards ​ 如果你变基已经被推送的提交，继而再推送，又或者推送一个提交到远程分支，而这个远程分支当前指向的提交不在该提交的历史中，这样的推送会被拒绝。 这通常是个很好的策略，但有时在变基的过程中，你确信自己需要更新远程分支，可以在 push 命令后加 -f 标志来强制更新（force-update）。 ​ 要禁用这样的强制更新推送（force-pushes），可以设置 receive.denyNonFastForwards： $ git config --system receive.denyNonFastForwards true ​ 稍后我们会提到，用服务器端的接收钩子也能达到同样的目的。 那种方法可以做到更细致的控制，例如禁止某一类用户做非快进（non-fast-forwards）推送。 1.5.3 receive.denyDeletes ​ 有一些方法可以绕过 denyNonFastForwards 策略。其中一种是先删除某个分支，再连同新的引用一起推送回该分支。 把 receive.denyDeletes 设置为 true 可以把这个漏洞补上： $ git config --system receive.denyDeletes true ​ 这样会禁止通过推送删除分支和标签 — 没有用户可以这么做。 要删除远程分支，必须从服务器手动删除引用文件。 通过用户访问控制列表（ACL）也能够在用户级的粒度上实现同样的功能，你将在 [使用强制策略的一个例子]一节学到具体的做法。 2. Git 属性 ​ 你也可以针对特定的路径配置某些设置项，这样 Git 就只对特定的子目录或子文件集运用它们。 这些基于路径的设置项被称为 Git 属性，可以在你的目录下的 .gitattributes 文件内进行设置（通常是你的项目的根目录）。如果不想让这些属性文件与其它文件一同提交，你也可以在 .git/info/attributes 文件中进行设置。 ​ 通过使用属性，你可以对项目中的文件或目录单独定义不同的合并策略，让 Git 知道怎样比较非文本文件，或者让 Git 在提交或检出前过滤内容。 在本节，你将学习到一些能在自己的项目中用到的属性，并看到几个实际的例子。 2.1 二进制文件 ​ 你可以用 Git 属性让 Git 知道哪些是二进制文件（以防它没有识别出来），并指示其如何处理这些文件。 例如，一些文本文件是由机器产生的，没有办法进行比较，但是一些二进制文件可以比较。 你将了解到怎样让 Git 区分这些文件。 2.1.1 识别二进制文件 ​ 有些文件表面上是文本文件，实质上应被作为二进制文件处理。 例如，Mac 平台上的 Xcode 项目会包含一个以 .pbxproj 结尾的文件，它通常是一个记录项目构建配置等信息的 JSON（纯文本 Javascript 数据类型）数据集，由 IDE 写入磁盘。 虽然技术上看它是由 UTF-8 编码的文本文件，但你并不会希望将它当作文本文件来处理，因为它其实是一个轻量级数据库——如果有两个人修改了它，你通常无法合并内容，diff 的输出也帮不上什么忙。 它本应被机器处理。 因此，你想把它当成二进制文件。 ​ 要让 Git 把所有 pbxproj 文件当成二进制文件，在 .gitattributes 文件中如下设置： *.pbxproj binary ​ 现在，Git 不会尝试转换或修正回车换行（CRLF）问题，当你在项目中运行 git show 或 git diff 时，Git 也不会比较或打印该文件的变化。 2.1.2 比较二进制文件 ​ 你也可以使用 Git 属性来有效地比较两个二进制文件。 秘诀在于，告诉 Git 怎么把你的二进制文件转化为文本格式，从而能够使用普通的 diff 方式进行对比。 ​ 首先，让我们尝试用这个技术解决世人最头疼的问题之一：对 Microsoft Word 文档进行版本控制。 大家都知道，Microsoft Word 几乎是世上最难缠的编辑器，尽管如此，大家还是在用它。 如果想对 Word 文档进行版本控制，你可以把文件加入到 Git 库中，每次修改后提交即可。但这样做有什么实际意义呢？ 毕竟运行 git diff 命令后，你只能得到如下的结果： $ git diff diff --git a/chapter1.docx b/chapter1.docx index 88839c4..4afcb7c 100644 Binary files a/chapter1.docx and b/chapter1.docx differ ​ 除了检出之后睁大眼睛逐行扫描，就真的没有办法直接比较两个不同版本的 Word 文档吗？ Git 属性能很好地解决此问题。 把下面这行文本加到你的 .gitattributes 文件中： *.docx diff=word ​ 这告诉 Git 当你尝试查看包含变更的比较结果时，所有匹配 .docx 模式的文件都应该使用“word”过滤器。 “word”过滤器是什么？ 我们现在就来设置它。 我们会对 Git 进行配置，令其能够借助 docx2txt 程序将 Word 文档转为可读文本文件，这样不同的文件间就能够正确比较了。 ​ 首先，你需要安装 docx2txt；它可以从 http://docx2txt.sourceforge.net 下载。 按照 INSTALL 文件的说明，把它放到你的可执行路径下。 接下来，你还需要写一个脚本把输出结果包装成 Git 支持的格式。 在你的可执行路径下创建一个叫 docx2txt 文件，添加这些内容： #!/bin/bash docx2txt.pl $1 - ​ 别忘了用 chmod a+x 给这个文件加上可执行权限。 最后，你需要配置 Git 来使用这个脚本： $ git config diff.word.textconv docx2txt ​ 现在如果在两个快照之间进行比较，Git 就会对那些以 .docx 结尾的文件应用“word”过滤器，即 docx2txt。 这样你的 Word 文件就能被高效地转换成文本文件并进行比较了。 ​ 作为例子，我把本书的第一章另存为 Word 文件，并提交到 Git 版本库。 接着，往其中加入一个新的段落。 运行 git diff，输出如下： $ git diff diff --git a/chapter1.docx b/chapter1.docx index 0b013ca..ba25db5 100644 --- a/chapter1.docx +++ b/chapter1.docx @@ -2,6 +2,7 @@ This chapter will be about getting started with Git. We will begin at the beginning by explaining some background on version control tools, then move on to how to get Git running on your system and finally how to get it setup to start working with. At the end of this chapter you should understand why Git is around, why you should use it and you should be all setup to do so. 1.1. About Version Control What is \"version control\", and why should you care? Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later. For the examples in this book you will use software source code as the files being version controlled, though in reality you can do this with nearly any type of file on a computer. +Testing: 1, 2, 3. If you are a graphic or web designer and want to keep every version of an image or layout (which you would most certainly want to), a Version Control System (VCS) is a very wise thing to use. It allows you to revert files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more. Using a VCS also generally means that if you screw things up or lose files, you can easily recover. In addition, you get all this for very little overhead. 1.1.1. Local Version Control Systems Many people's version-control method of choice is to copy files into another directory (perhaps a time-stamped directory, if they're clever). This approach is very common because it is so simple, but it is also incredibly error prone. It is easy to forget which directory you're in and accidentally write to the wrong file or copy over files you don't mean to. ​ Git 成功地挑出了我们添加的那句话“Testing: 1, 2, 3.”，一字不差。 还算不上完美——格式上的变动显示不出来——但已经足够了。 ​ 你还能用这个方法比较图像文件。 其中一个办法是，在比较时对图像文件运用一个过滤器，提炼出 EXIF 信息——这是在大部分图像格式中都有记录的一种元数据。 如果你下载并安装了 exiftool 程序，可以利用它将图像转换为关于元数据的文本信息，这样比较时至少能以文本的形式显示发生过的变动： $ echo '*.png diff=exif' >> .gitattributes $ git config diff.exif.textconv exiftool ​ 如果在项目中替换了一个图像文件，运行 git diff 命令的结果如下： diff --git a/image.png b/image.png index 88839c4..4afcb7c 100644 --- a/image.png +++ b/image.png @@ -1,12 +1,12 @@ ExifTool Version Number : 7.74 -File Size : 70 kB -File Modification Date/Time : 2009:04:21 07:02:45-07:00 +File Size : 94 kB +File Modification Date/Time : 2009:04:21 07:02:43-07:00 File Type : PNG MIME Type : image/png -Image Width : 1058 -Image Height : 889 +Image Width : 1056 +Image Height : 827 Bit Depth : 8 Color Type : RGB with Alpha ​ 你一眼就能看出文件大小和图像尺寸发生了变化。 2.2 关键字展开 ​ SVN 或 CVS 风格的关键字展开（keyword expansion）功能经常会被习惯于上述系统的开发者使用到。 在 Git 中，这项功能有一个主要问题，就是你无法利用它往文件中加入其关联提交的相关信息，因为 Git 总是先对文件做校验和运算（译者注：Git 中提交对象的校验依赖于文件的校验和，而 Git 属性针对特定文件或路径，因此基于 Git 属性的关键字展开无法仅根据文件反推出对应的提交）。 不过，我们可以在检出某个文件后对其注入文本，并在再次提交前删除这些文本。 Git 属性提供了两种方法来达到这一目的。 ​ 一种方法是，你可以把文件所对应数据对象的 SHA-1 校验和自动注入到文件中的 $Id$ 字段。 如果在一个或多个文件上设置了该属性，下次当你检出相关分支的时候，Git 会用相应数据对象的 SHA-1 值替换上述字段。 注意，这不是提交对象的 SHA-1 校验和，而是数据对象本身的校验和： $ echo '*.txt ident' >> .gitattributes $ echo '$Id$' > test.txt ​ 当你下次检出文件时，Git 将注入数据对象的 SHA-1 校验和： $ rm test.txt $ git checkout -- test.txt $ cat test.txt $Id: 42812b7653c7b88933f8a9d6cad0ca16714b9bb3 $ ​ 然而，这个结果的用途比较有限。 如果用过 CVS 或 Subversion 的关键字替换功能，我们会想加上一个时间戳信息——光有 SHA-1 校验和用途不大，它仅仅是个随机字符串，你无法凭字面值来区分不同 SHA-1 时间上的先后。 ​ 因此 Git 属性提供了另一种方法：我们可以编写自己的过滤器来实现文件提交或检出时的关键字替换。 一个过滤器由“clean”和“smudge”两个子过滤器组成。 在 .gitattributes 文件中，你能对特定的路径设置一个过滤器，然后设置文件检出前的处理脚本（“smudge”，见 [“smudge”过滤器会在文件被检出时触发]）和文件暂存前的处理脚本（“clean”，见 [“clean”过滤器会在文件被暂存时触发]）。 这两个过滤器能够被用来做各种有趣的事。 “smudge”过滤器会在文件被检出时触发 “clean”过滤器会在文件被暂存时触发 ​ 在（Git 源码中）实现这个特性的原始提交信息里给出了一个简单的例子：在提交前，用 indent 程序过滤所有 C 源码。 你可以在 .gitattributes 文件中对 filter 属性设置“indent”过滤器来过滤 *.c 文件 *.c filter=indent ​ 然后，通过以下配置，让 Git 知道“indent”过滤器在 smudge 和 clean 时分别该做什么： $ git config --global filter.indent.clean indent $ git config --global filter.indent.smudge cat ​ 在这个例子中，当你暂存 *.c 文件时，indent 程序会先被触发；在把它们检出回硬盘时，cat 程序会先被触发。 cat 在这里没什么实际作用：它仅仅把输入的数据重新输出。 这样的组合可以有效地在暂存前用 indent 过滤所有的 C 源码。 ​ 另一个有趣的例子是实现 RCS 风格的 $Date$ 关键字展开。 要想演示这个例子，我们需要实现这样的一个小脚本：接受文件名参数，得到项目的最新提交日期，并把日期写入该文件。 下面是一个实现了该功能的 Ruby 小脚本： #! /usr/bin/env ruby data = STDIN.read last_date = `git log --pretty=format:\"%ad\" -1` puts data.gsub('$Date$', '$Date: ' + last_date.to_s + '$') ​ 这个脚本从 git log 中得到最新提交日期，将其注入所有输入文件的 $Date$ 字段，并输出结果——你可以使用最顺手的语言轻松实现一个类似的脚本。 把该脚本命名为 expand_date，放到你的可执行路径中。 现在，你需要在 Git 中设置一个过滤器（就叫它 dater 吧），让它在检出文件时调用你的 expand_date 来注入时间戳，完成 smudge 操作。 暂存文件时的 clean 操作则是用一行 Perl 表达式清除注入的内容： $ git config filter.dater.smudge expand_date $ git config filter.dater.clean 'perl -pe \"s/\\\\\\$Date[^\\\\\\$]*\\\\\\$/\\\\\\$Date\\\\\\$/\"' ​ 这段 Perl 代码会删除 $Date$ 后面注入的内容，恢复它的原貌。 过滤器终于准备完成了，是时候测试一下。创建一个带有 $Date$ 关键字的文件，然后给它设置一个 Git 属性，关联我们的新过滤器： $ echo '# $Date$' > date_test.txt $ echo 'date*.txt filter=dater' >> .gitattributes ​ 提交该文件，并再次检出，你会发现关键字如期被替换了： $ git add date_test.txt .gitattributes $ git commit -m \"Testing date expansion in Git\" $ rm date_test.txt $ git checkout date_test.txt $ cat date_test.txt # $Date: Tue Apr 21 07:26:52 2009 -0700$ ​ 自定义过滤器真的很强大。 不过你需要注意的是，因为 .gitattributes 文件会随着项目一起提交，而过滤器（例如这里的 dater）不会，所以过滤器有可能会失效。 当你在设计这些过滤器时，要注重容错性——它们在出错时应该能优雅地退出，从而不至于影响项目的正常运行。 2.3 导出版本库 Git 属性在导出项目归档（archive）时也能发挥作用。 2.3.1 export-ignore ​ 当归档的时候，可以设置 Git 不导出某些文件和目录。 如果你不想在归档中包含某个子目录或文件，但想把它们纳入项目的版本管理中，你可以在 export-ignore 属性中指定它们。 ​ 例如，假设你在 test/ 子目录下有一些测试文件，不希望它们被包含在项目导出的压缩包（tarball）中。 你可以增加下面这行到 Git 属性文件中： test/ export-ignore ​ 现在，当你运行 git archive 来创建项目的压缩包时，那个目录不会被包括在归档中。 2.3.2 export-subst ​ 在导出文件进行部署的时候，你可以将 git log 的格式化和关键字展开处理应用于被 export-subst 属性标记的部分文件。 ​ 举个例子，如果你想在项目中包含一个叫做 LAST_COMMIT 的文件，并在运行 git archive 的时候自动向它注入最新提交的元数据，可以像这样设置该文件： $ echo 'Last commit date: $Format:%cd by %aN$' > LAST_COMMIT $ echo \"LAST_COMMIT export-subst\" >> .gitattributes $ git add LAST_COMMIT .gitattributes $ git commit -am 'adding LAST_COMMIT file for archives' ​ 运行 git archive 之后，该文件被归档后的内容会被替换成这样： $ git archive HEAD | tar xCf ../deployment-testing - $ cat ../deployment-testing/LAST_COMMIT Last commit date: Tue Apr 21 08:38:48 2009 -0700 by Scott Chacon ​ 你也可以用诸如提交信息或者任意的 git 注解进行替换，并且 git log 还能做简单的字词包装： $ echo '$Format:Last commit: %h by %aN at %cd%n%+w(76,6,9)%B$' > LAST_COMMIT $ git commit -am 'export-subst 使用 git log 的自定义格式化工具 git archive 直接使用 git log 的 `pretty=format:` 处理器，并在输出中移除两侧的 `$Format:` 和 `$` 标记。 ' $ git archive @ | tar xfO - LAST_COMMIT Last commit: 312ccc8 by Jim Hill at Fri May 8 09:14:04 2015 -0700 export-subst 使用 git log 的自定义格式化工具 git archive 直接使用 git log 的 `pretty=format:` 处理器，并 在输出中移除两侧的 `$Format:` 和 `$` 标记。 ​ 由此得到的归档适用于（当前的）部署工作。然而和其他的导出归档一样，它并不适用于后继的部署工作。 2.4 合并策略 ​ 通过 Git 属性，你还能对项目中的特定文件指定不同的合并策略。 一个非常有用的选项就是，告诉 Git 当特定文件发生冲突时不要尝试合并它们，而是直接使用你这边的内容。 ​ 考虑如下场景：项目中有一个分叉的或者定制过的特性分支，你希望该分支上的更改能合并回你的主干分支，同时需要忽略其中某些文件。此时这个合并策略就能派上用场。 假设你有一个数据库设置文件 database.xml，在两个分支中它是不同的，而你想合并另一个分支到你的分支上，又不想弄乱该数据库文件。 你可以设置属性如下： database.xml merge=ours ​ 然后定义一个虚拟的合并策略，叫做 ours： $ git config --global merge.ours.driver true ​ 如果你合并了另一个分支，database.xml 文件不会有合并冲突，相反会显示如下信息： $ git merge topic Auto-merging database.xml Merge made by recursive. ​ 这里，database.xml 保持了主干分支中的原始版本。 3. Git 钩子 ​ 和其它版本控制系统一样，Git 能在特定的重要动作发生时触发自定义脚本。 有两组这样的钩子：客户端的和服务器端的。 客户端钩子由诸如提交和合并这样的操作所调用，而服务器端钩子作用于诸如接收被推送的提交这样的联网操作。 你可以随心所欲地运用这些钩子。 3.1 安装一个钩子 ​ 钩子都被存储在 Git 目录下的 hooks 子目录中。 也即绝大部分项目中的 .git/hooks 。 当你用 git init 初始化一个新版本库时，Git 默认会在这个目录中放置一些示例脚本。这些脚本除了本身可以被调用外，它们还透露了被触发时所传入的参数。 所有的示例都是 shell 脚本，其中一些还混杂了 Perl 代码，不过，任何正确命名的可执行脚本都可以正常使用 —— 你可以用 Ruby 或 Python，或其它语言编写它们。 这些示例的名字都是以 .sample 结尾，如果你想启用它们，得先移除这个后缀。 把一个正确命名且可执行的文件放入 Git 目录下的 hooks 子目录中，即可激活该钩子脚本。 这样一来，它就能被 Git 调用。 接下来，我们会讲解常用的钩子脚本类型。 3.2 客户端钩子 客户端钩子分为很多种。 下面把它们分为：提交工作流钩子、电子邮件工作流钩子和其它钩子。 Notes:需要注意的是，克隆某个版本库时，它的客户端钩子 并不 随同复制。 如果需要靠这些脚本来强制维持某种策略，建议你在服务器端实现这一功能。（请参照 [使用强制策略的一个例子] 中的例子。） 3.2.1 提交工作流钩子 前四个钩子涉及提交的过程。 ​ pre-commit 钩子在键入提交信息前运行。 它用于检查即将提交的快照，例如，检查是否有所遗漏，确保测试运行，以及核查代码。 如果该钩子以非零值退出，Git 将放弃此次提交，不过你可以用 git commit --no-verify 来绕过这个环节。 你可以利用该钩子，来检查代码风格是否一致（运行类似 lint 的程序）、尾随空白字符是否存在（自带的钩子就是这么做的），或新方法的文档是否适当。 ​ prepare-commit-msg 钩子在启动提交信息编辑器之前，默认信息被创建之后运行。 它允许你编辑提交者所看到的默认信息。 该钩子接收一些选项：存有当前提交信息的文件的路径、提交类型和修补提交的提交的 SHA-1 校验。 它对一般的提交来说并没有什么用；然而对那些会自动产生默认信息的提交，如提交信息模板、合并提交、压缩提交和修订提交等非常实用。 你可以结合提交模板来使用它，动态地插入信息。 ​ commit-msg 钩子接收一个参数，此参数即上文提到的，存有当前提交信息的临时文件的路径。 如果该钩子脚本以非零值退出，Git 将放弃提交，因此，可以用来在提交通过前验证项目状态或提交信息。 在本章的最后一节，我们将展示如何使用该钩子来核对提交信息是否遵循指定的模板。 ​ post-commit 钩子在整个提交过程完成后运行。 它不接收任何参数，但你可以很容易地通过运行 git log -1 HEAD 来获得最后一次的提交信息。 该钩子一般用于通知之类的事情。 3.2.2 电子邮件工作流钩子 ​ 你可以给电子邮件工作流设置三个客户端钩子。 它们都是由 git am 命令调用的，因此如果你没有在你的工作流中用到这个命令，可以跳到下一节。 如果你需要通过电子邮件接收由 git format-patch 产生的补丁，这些钩子也许用得上。 ​ 第一个运行的钩子是 applypatch-msg 。 它接收单个参数：包含请求合并信息的临时文件的名字。 如果脚本返回非零值，Git 将放弃该补丁。 你可以用该脚本来确保提交信息符合格式，或直接用脚本修正格式错误。 ​ 下一个在 git am 运行期间被调用的是 pre-applypatch 。 有些难以理解的是，它正好运行于应用补丁 之后，产生提交之前，所以你可以用它在提交前检查快照。 你可以用这个脚本运行测试或检查工作区。 如果有什么遗漏，或测试未能通过，脚本会以非零值退出，中断 git am 的运行，这样补丁就不会被提交。 ​ post-applypatch 运行于提交产生之后，是在 git am 运行期间最后被调用的钩子。 你可以用它把结果通知给一个小组或所拉取的补丁的作者。 但你没办法用它停止打补丁的过程。 3.2.3 其它客户端钩子 ​ pre-rebase 钩子运行于变基之前，以非零值退出可以中止变基的过程。 你可以使用这个钩子来禁止对已经推送的提交变基。 Git 自带的 pre-rebase 钩子示例就是这么做的，不过它所做的一些假设可能与你的工作流程不匹配。 ​ post-rewrite 钩子被那些会替换提交记录的命令调用，比如 git commit --amend 和 git rebase（不过不包括 git filter-branch）。 它唯一的参数是触发重写的命令名，同时从标准输入中接受一系列重写的提交记录。 这个钩子的用途很大程度上跟 post-checkout 和 post-merge 差不多。 ​ 在 git checkout 成功运行后，post-checkout 钩子会被调用。你可以根据你的项目环境用它调整你的工作目录。 其中包括放入大的二进制文件、自动生成文档或进行其他类似这样的操作。 ​ 在 git merge 成功运行后，post-merge 钩子会被调用。 你可以用它恢复 Git 无法跟踪的工作区数据，比如权限数据。 这个钩子也可以用来验证某些在 Git 控制之外的文件是否存在，这样你就能在工作区改变时，把这些文件复制进来。 ​ pre-push 钩子会在 git push 运行期间， 更新了远程引用但尚未传送对象时被调用。 它接受远程分支的名字和位置作为参数，同时从标准输入中读取一系列待更新的引用。 你可以在推送开始之前，用它验证对引用的更新操作（一个非零的退出码将终止推送过程）。 ​ Git 的一些日常操作在运行时，偶尔会调用 git gc --auto 进行垃圾回收。 pre-auto-gc 钩子会在垃圾回收开始之前被调用，可以用它来提醒你现在要回收垃圾了，或者依情形判断是否要中断回收。 3.3 服务器端钩子 ​ 除了客户端钩子，作为系统管理员，你还可以使用若干服务器端的钩子对项目强制执行各种类型的策略。 这些钩子脚本在推送到服务器之前和之后运行。 推送到服务器前运行的钩子可以在任何时候以非零值退出，拒绝推送并给客户端返回错误消息，还可以依你所想设置足够复杂的推送策略。 3.3.1 pre-receive ​ 处理来自客户端的推送操作时，最先被调用的脚本是 pre-receive。 它从标准输入获取一系列被推送的引用。如果它以非零值退出，所有的推送内容都不会被接受。 你可以用这个钩子阻止对引用进行非快进（non-fast-forward）的更新，或者对该推送所修改的所有引用和文件进行访问控制。 3.3.2 update ​ update 脚本和 pre-receive 脚本十分类似，不同之处在于它会为每一个准备更新的分支各运行一次。 假如推送者同时向多个分支推送内容，pre-receive 只运行一次，相比之下 update 则会为每一个被推送的分支各运行一次。 它不会从标准输入读取内容，而是接受三个参数：引用的名字（分支），推送前的引用指向的内容的 SHA-1 值，以及用户准备推送的内容的 SHA-1 值。 如果 update 脚本以非零值退出，只有相应的那一个引用会被拒绝；其余的依然会被更新。 3.3.3 post-receive ​ post-receive 挂钩在整个过程完结以后运行，可以用来更新其他系统服务或者通知用户。 它接受与 pre-receive 相同的标准输入数据。 它的用途包括给某个邮件列表发信，通知持续集成（continous integration）的服务器，或者更新问题追踪系统（ticket-tracking system） —— 甚至可以通过分析提交信息来决定某个问题（ticket）是否应该被开启，修改或者关闭。 该脚本无法终止推送进程，不过客户端在它结束运行之前将保持连接状态，所以如果你想做其他操作需谨慎使用它，因为它将耗费你很长的一段时间。 4. 使用强制策略的一个例子 ​ 在本节中，你将应用前面学到的知识建立这样一个 Git 工作流程：检查提交信息的格式，并且指定只能由特定用户修改项目中特定的子目录。 你将编写一个客户端脚本来提示开发人员他们的推送是否会被拒绝，以及一个服务器端脚本来实际执行这些策略。 ​ 我们待会展示的脚本是用 Ruby 写的，部分是由于我习惯用它写脚本，另外也因为 Ruby 简单易懂，即便你没写过它也能看明白。 不过任何其他语言也一样适用。所有 Git 自带的示例钩子脚本都是用 Perl 或 Bash 写的，所以你能从它们中找到相当多的这两种语言的钩子示例。 4.1 服务器端钩子 ​ 所有服务器端的工作都将在你的 hooks 目录下的 update 脚本中完成。 update 脚本会为每一个提交的分支各运行一次，它接受三个参数： 被推送的引用的名字 推送前分支的修订版本（revision） 用户准备推送的修订版本（revision） ​ 如果推送是通过 SSH 进行的，还可以获知进行此次推送的用户的信息。 如果你允许所有操作都通过公匙授权的单一帐号（比如“git”）进行，就有必要通过一个 shell 包装脚本依据公匙来判断用户的身份，并且相应地设定环境变量来表示该用户的身份。 下面就假设 $USER 环境变量里存储了当前连接的用户的身份，你的 update 脚本首先搜集一切需要的信息： #!/usr/bin/env ruby $refname = ARGV[0] $oldrev = ARGV[1] $newrev = ARGV[2] $user = ENV['USER'] puts \"Enforcing Policies...\" puts \"(#{$refname}) (#{$oldrev[0,6]}) (#{$newrev[0,6]})\" ​ 是的，我们这里用的都是全局变量。 请勿在此吐槽——这样做只是为了方便展示而已。 4.1.1 指定特殊的提交信息格式 ​ 你的第一项任务是要求每一条提交信息都必须遵循某种特殊的格式。 作为目标，假定每一条信息必须包含一条形似“ref: 1234”的字符串，因为你想把每一次提交对应到问题追踪系统（ticketing system）中的某个事项。 你要逐一检查每一条推送上来的提交内容，看看提交信息是否包含这么一个字符串，然后，如果某个提交里不包含这个字符串，以非零返回值退出从而拒绝此次推送。 ​ 把 $newrev 和 $oldrev 变量的值传给一个叫做 git rev-list 的 Git 底层命令，你可以获取所有提交的 SHA-1 值列表。 git rev-list 基本类似 git log 命令，但它默认只输出 SHA-1 值而已，没有其他信息。 所以要获取由一次提交到另一次提交之间的所有 SHA-1 值，可以像这样运行： $ git rev-list 538c33..d14fc7 d14fc7c847ab946ec39590d87783c69b031bdfb7 9f585da4401b0a3999e84113824d15245c13f0be 234071a1be950e2a8d078e6141f5cd20c1e61ad3 dfa04c9ef3d5197182f13fb5b9b1fb7717d2222a 17716ec0f1ff5c77eff40b7fe912f9f6cfd0e475 ​ 你可以截取这些输出内容，循环遍历其中每一个 SHA-1 值，找出与之对应的提交信息，然后用正则表达式来测试该信息包含的内容。 ​ 下一步要实现从每个提交中提取出提交信息。 使用另一个叫做 git cat-file 的底层命令来获得原始的提交数据。 我们将在 [Git 内部原理]了解到这些底层命令的细节；现在暂时先看一下这条命令的输出： $ git cat-file commit ca82a6 tree cfda3bf379e4f8dba8717dee55aab78aef7f4daf parent 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 author Scott Chacon 1205815931 -0700 committer Scott Chacon 1240030591 -0700 changed the version number ​ 通过 SHA-1 值获得提交中的提交信息的一个简单办法是找到提交的第一个空行，然后取从它往后的所有内容。 可以使用 Unix 系统的 sed 命令来实现该效果： $ git cat-file commit ca82a6 | sed '1,/^$/d' changed the version number ​ 你可以用这条咒语从每一个待推送的提交里提取提交信息，然后在提取的内容不符合要求时退出。 为了退出脚本和拒绝此次推送，返回非零值。 整个脚本大致如下： $regex = /\\[ref: (\\d+)\\]/ # 指定自定义的提交信息格式 def check_message_format missed_revs = `git rev-list #{$oldrev}..#{$newrev}`.split(\"\\n\") missed_revs.each do |rev| message = `git cat-file commit #{rev} | sed '1,/^$/d'` if !$regex.match(message) puts \"[POLICY] Your message is not formatted correctly\" exit 1 end end end check_message_format ​ 把这一段放在 update 脚本里，所有包含不符合指定规则的提交都会遭到拒绝。 4.1.2 指定基于用户的访问权限控制列表（ACL）系统 ​ 假设你需要添加一个使用访问权限控制列表的机制，来指定哪些用户对项目的哪些部分有推送权限。 某些用户具有全部的访问权，其他人只对某些子目录或者特定的文件具有推送权限。 为了实现这一点，你要把相关的规则写入位于服务器原始 Git 仓库的 acl 文件中。 你还需要让 update 钩子检阅这些规则，审视推送的提交内容中被修改的所有文件，然后决定执行推送的用户是否对所有这些文件都有权限。 ​ 先从写一个 ACL 文件开始吧。 这里使用的格式和 CVS 的 ACL 机制十分类似：它由若干行构成，第一项内容是 avail 或者 unavail，接着是逗号分隔的适用该规则的用户列表，最后一项是适用该规则的路径（该项空缺表示没有路径限制）。 各项由管道符 | 隔开。 ​ 在本例中，你会有几个管理员，一些对 doc 目录具有权限的文档作者，以及一位仅对 lib 和 tests 目录具有权限的开发人员，相应的 ACL 文件如下： avail|nickh,pjhyett,defunkt,tpw avail|usinclair,cdickens,ebronte|doc avail|schacon|lib avail|schacon|tests ​ 首先把这些数据读入你要用到的数据结构里。 在本例中，为保持简洁，我们暂时只实现 avail 的规则。 下面这个方法生成一个关联数组，它的键是用户名，值是一个由该用户有写权限的所有目录组成的数组： def get_acl_access_data(acl_file) # 读取 ACL 数据 acl_file = File.read(acl_file).split(\"\\n\").reject { |line| line == '' } access = {} acl_file.each do |line| avail, users, path = line.split('|') next unless avail == 'avail' users.split(',').each do |user| access[user] ||= [] access[user] ​ 对于之前给出的 ACL 规则文件，这个 get_acl_access_data 方法返回的数据结构如下： {\"defunkt\"=>[nil], \"tpw\"=>[nil], \"nickh\"=>[nil], \"pjhyett\"=>[nil], \"schacon\"=>[\"lib\", \"tests\"], \"cdickens\"=>[\"doc\"], \"usinclair\"=>[\"doc\"], \"ebronte\"=>[\"doc\"]} ​ 既然拿到了用户权限的数据，接下来你需要找出提交都修改了哪些路径，从而才能保证推送者对所有这些路径都有权限。 ​ 使用 git log 的 --name-only 选项（在第二章里简单地提过），我们可以轻而易举的找出一次提交里修改的文件： $ git log -1 --name-only --pretty=format:'' 9f585d README lib/test.rb ​ 使用 get_acl_access_data 返回的 ACL 结构来一一核对每次提交修改的文件列表，就能找出该用户是否有权限推送所有的提交内容： # 仅允许特定用户修改项目中的特定子目录 def check_directory_perms access = get_acl_access_data('acl') # 检查是否有人在向他没有权限的地方推送内容 new_commits = `git rev-list #{$oldrev}..#{$newrev}`.split(\"\\n\") new_commits.each do |rev| files_modified = `git log -1 --name-only --pretty=format:'' #{rev}`.split(\"\\n\") files_modified.each do |path| next if path.size == 0 has_file_access = false access[$user].each do |access_path| if !access_path # 用户拥有完全访问权限 || (path.start_with? access_path) # 或者对此路径有访问权限 has_file_access = true end end if !has_file_access puts \"[POLICY] You do not have access to push to #{path}\" exit 1 end end end end check_directory_perms ​ 通过 git rev-list 获取推送到服务器的所有提交。 接着，对于每一个提交，找出它修改的文件，然后确保推送者具有这些文件的推送权限。 ​ 现在你的用户没法推送带有不正确的提交信息的内容，也不能在准许他们访问范围之外的位置做出修改。 4.1.3 测试一下 ​ 如果已经把上面的代码放到 .git/hooks/update 文件里了，运行 chmod u+x .git/hooks/update，然后尝试推送一个不符合格式的提交，你会得到以下的提示： $ git push -f origin master Counting objects: 5, done. Compressing objects: 100% (3/3), done. Writing objects: 100% (3/3), 323 bytes, done. Total 3 (delta 1), reused 0 (delta 0) Unpacking objects: 100% (3/3), done. Enforcing Policies... (refs/heads/master) (8338c5) (c5b616) [POLICY] Your message is not formatted correctly error: hooks/update exited with error code 1 error: hook declined to update refs/heads/master To git@gitserver:project.git ! [remote rejected] master -> master (hook declined) error: failed to push some refs to 'git@gitserver:project.git' ​ 这里有几个有趣的信息。 首先，我们可以看到钩子运行的起点。 Enforcing Policies... (refs/heads/master) (fb8c72) (c56860) ​ 注意这是从 update 脚本开头输出到标准输出的。 所有从脚本输出到标准输出的内容都会转发给客户端。 下一个值得注意的部分是错误信息。 [POLICY] Your message is not formatted correctly error: hooks/update exited with error code 1 error: hook declined to update refs/heads/master ​ 第一行是我们的脚本输出的，剩下两行是 Git 在告诉我们 update 脚本退出时返回了非零值因而推送遭到了拒绝。 最后一点： To git@gitserver:project.git ! [remote rejected] master -> master (hook declined) error: failed to push some refs to 'git@gitserver:project.git' ​ 你会看到每个被你的钩子拒之门外的引用都收到了一个 remote rejected 信息，它告诉你正是钩子无法成功运行导致了推送的拒绝。 ​ 又或者某人想修改一个自己不具备权限的文件然后推送了一个包含它的提交，他将看到类似的提示。 比如，一个文档作者尝试推送一个修改到 lib 目录的提交，他会看到 [POLICY] You do not have access to push to lib/test.rb ​ 从今以后，只要 update 脚本存在并且可执行，我们的版本库中永远都不会包含不符合格式的提交信息，并且用户都会待在沙箱里面。 4.2 客户端钩子 ​ 这种方法的缺点在于，用户推送的提交遭到拒绝后无法避免的抱怨。 辛辛苦苦写成的代码在最后时刻惨遭拒绝是十分让人沮丧且具有迷惑性的；更可怜的是他们不得不修改提交历史来解决问题，这个方法并不能让每一个人满意。 ​ 逃离这种两难境地的法宝是给用户一些客户端的钩子，在他们犯错的时候给以警告。 然后呢，用户们就能趁问题尚未变得更难修复，在提交前消除这个隐患。 由于钩子本身不跟随克隆的项目副本分发，所以你必须通过其他途径把这些钩子分发到用户的 .git/hooks 目录并设为可执行文件。 虽然你可以在相同或单独的项目里加入并分发这些钩子，但是 Git 不会自动替你设置它。 ​ 首先，你应该在每次提交前核查你的提交信息，这样才能确保服务器不会因为不合条件的提交信息而拒绝你的更改。 为了达到这个目的，你可以增加 commit-msg 钩子。 如果你使用该钩子来读取作为第一个参数传递的提交信息，然后与规定的格式作比较，你就可以使 Git 在提交信息格式不对的情况下拒绝提交。 #!/usr/bin/env ruby message_file = ARGV[0] message = File.read(message_file) $regex = /\\[ref: (\\d+)\\]/ if !$regex.match(message) puts \"[POLICY] Your message is not formatted correctly\" exit 1 end ​ 如果这个脚本位于正确的位置（ .git/hooks/commit-msg ）并且是可执行的，你提交信息的格式又是不正确的，你会看到： $ git commit -am 'test' [POLICY] Your message is not formatted correctly ​ 在这个示例中，提交没有成功。 然而如果你的提交注释信息是符合要求的，Git 会允许你提交： $ git commit -am 'test [ref: 132]' [master e05c914] test [ref: 132] 1 file changed, 1 insertions(+), 0 deletions(-) ​ 接下来我们要保证没有修改到 ACL 允许范围之外的文件。 假如你的 .git 目录下有前面使用过的那份 ACL 文件，那么以下的 pre-commit 脚本将把里面的规定执行起来： #!/usr/bin/env ruby $user = ENV['USER'] # [ 插入上文中的 get_acl_access_data 方法 ] # 仅允许特定用户修改项目中的特定子目录 def check_directory_perms access = get_acl_access_data('.git/acl') files_modified = `git diff-index --cached --name-only HEAD`.split(\"\\n\") files_modified.each do |path| next if path.size == 0 has_file_access = false access[$user].each do |access_path| if !access_path || (path.index(access_path) == 0) has_file_access = true end if !has_file_access puts \"[POLICY] You do not have access to push to #{path}\" exit 1 end end end check_directory_perms ​ 这和服务器端的脚本几乎一样，除了两个重要区别。 第一，ACL 文件的位置不同，因为这个脚本在当前工作目录运行，而非 .git 目录。 ACL 文件的路径必须从 access = get_acl_access_data('acl') ​ 修改成： access = get_acl_access_data('.git/acl') ​ 另一个重要区别是获取被修改文件列表的方式。 在服务器端的时候使用了查看提交纪录的方式，可是目前的提交都还没被记录下来呢，所以这个列表只能从暂存区域获取。 和原来的 files_modified = `git log -1 --name-only --pretty=format:'' #{ref}` ​ 不同，现在要用 files_modified = `git diff-index --cached --name-only HEAD` ​ 不同的就只有这两个——除此之外，该脚本完全相同。 有一点要注意的是，它假定在本地运行的用户和推送到远程服务器端的相同。 如果这二者不一样，则需要手动设置一下 $user 变量。 ​ 在这里，我们还可以确保推送内容中不包含非快进（non-fast-forward）的引用。 出现一个不是快进（fast-forward）的引用有两种情形，要么是在某个已经推送过的提交上作变基，要么是从本地推送一个错误的分支到远程分支上。 ​ 假定为了执行这个策略，你已经在服务器上配置好了 receive.denyDeletes 和 receive.denyNonFastForwards，因而唯一还需要避免的是在某个已经推送过的提交上作变基。 ​ 下面是一个检查这个问题的 pre-rebase 脚本示例。 它获取所有待重写的提交的列表，然后检查它们是否存在于远程引用中。 一旦发现其中一个提交是在某个远程引用中可达的（reachable），它就终止此次变基： #!/usr/bin/env ruby base_branch = ARGV[0] if ARGV[1] topic_branch = ARGV[1] else topic_branch = \"HEAD\" end target_shas = `git rev-list #{base_branch}..#{topic_branch}`.split(\"\\n\") remote_refs = `git branch -r`.split(\"\\n\").map { |r| r.strip } target_shas.each do |sha| remote_refs.each do |remote_ref| shas_pushed = `git rev-list ^#{sha}^@ refs/remotes/#{remote_ref}` if shas_pushed.split(\"\\n\").include?(sha) puts \"[POLICY] Commit #{sha} has already been pushed to #{remote_ref}\" exit 1 end end end ​ 这个脚本利用了一个第六章“修订版本选择”一节中不曾提到的语法。通过运行这个命令可以获得一系列之前推送过的提交： `git rev-list ^#{sha}^@ refs/remotes/#{remote_ref}` ​ SHA^@ 语法会被解析成该提交的所有父提交。 该命令会列出在远程分支最新的提交中可达的，却在所有我们尝试推送的提交的 SHA-1 值的所有父提交中不可达的提交——也就是快进的提交。 ​ 这个解决方案主要的问题在于它有可能很慢而且常常没有必要——只要你不用 -f 来强制推送，服务器就会自动给出警告并且拒绝接受推送。 然而，这是个不错的练习，而且理论上能帮助你避免一次以后可能不得不回头修补的变基。 5. 总结 ​ 我们已经阐述了大部分通过自定义 Git 客户端和服务端来适应自己工作流程和项目内容的方式。 你已经学到各种各样的设置项、基于文件的选项和事件钩子，还建立了一个示例用的强制策略服务器。 无论创造出了什么样的工作流程，你都能使 Git 与它珠联璧合。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Git/Chapter10.html":{"url":"Git/Chapter10.html","title":"第十章：Git与其他系统","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 作为客户端的 Git 1.1 Git 与 Subversion 1.1.1 git svn 1.1.2 设置 1.1.3 开始 1.1.4 提交回 Subversion 1.1.5 拉取新改动 1.1.6 Git 分支问题 1.1.7 Subversion 分支 1.1.8 创建一个新的 SVN 分支 1.1.9 切换活动分支 1.1.10 Subversion 命令 SVN 风格历史 SVN 注解 SVN 服务器信息 忽略 SUBVERSION 所忽略的 1.1.11 Git-Svn 总结 2. Git 与 Mercurial 2.1 git-remote-hg 2.2 开始 2.3 工作流程 2.4 分支与书签 2.5 Mercurial 总结 3. Git 与 Perforce 3.1 Git Fusion 3.1.1 设置 3.1.2 FUSION 配置 工作流程 GIT-FUSION 总结 4. Git-p4 4.1 设置 4.2 开始 工作流程 Change: The change number. 'new' on a new changelist. 分支 5. Git 与 Perforce 总结 4. Git 与 TFS 4.1 选择哪个工具 4.1.2 使用：git-tf 4.1.3 使用：git-tfs 4.1.4 Git-tf[s] 工作流程 4.1.5 工作流程：git-tf 4.1.6 工作流程：git-tfs 4.1.7 Git 与 TFS 总结 5. 迁移到 Git 5.1 Subversion 5.2 Mercurial 5.3 Perforce 5.3.1 Perforce Git Fusion 5.3.2 Git-p4 5.4 TFS 5.5 一个自定义的导入器 6. 总结 第十章：Git与其他系统 ​ 现实并不总是尽如人意。 通常，你不能立刻就把接触到的每一个项目都切换到 Git。 有时候你被困在使用其他 VCS 的项目中，却希望使用 Git。 在本章的第一部分我们将会了解到，怎样在你的那些托管在不同系统的项目上使用 Git 客户端。 ​ 在某些时候，你可能想要将已有项目转换到 Git。 本章的第二部分涵盖了从几个特定系统将你的项目迁移至 Git 的方法，即使没有预先构建好的导入工具，我们也有办法手动导入。 1. 作为客户端的 Git ​ Git 为开发者提供了如此优秀的体验，许多人已经找到了在他们的工作站上使用 Git 的方法，即使他们团队其余的人使用的是完全不同的 VCS。 有许多这种可用的适配器，它们被叫做“桥接”。 下面我们将要介绍几个很可能会在实际中用到的桥接。 1.1 Git 与 Subversion ​ 很大一部分开源项目与相当多的企业项目使用 Subversion 来管理它们的源代码。 而且在大多数时间里，它已经是开源项目 VCS 选择的 事实标准。 它在很多方面都与曾经是源代码管理世界的大人物的 CVS 相似。 ​ Git 中最棒的特性就是有一个与 Subversion 的双向桥接，它被称作 git svn。 这个工具允许你使用 Git 作为连接到 Subversion 有效的客户端，这样你可以使用 Git 所有本地的功能然后如同正在本地使用 Subversion 一样推送到 Subversion 服务器。 这意味着你可以在本地做新建分支与合并分支、使用暂存区、使用变基与拣选等等的事情，同时协作者还在继续使用他们黑暗又古老的方式。 当你试图游说公司将基础设施修改为完全支持 Git 的过程中，一个好方法是将 Git 偷偷带入到公司环境，并帮助周围的开发者提升效率。 Subversion 桥接就是进入 DVCS 世界的诱饵。 1.1.1 git svn ​ 在 Git 中所有 Subversion 桥接命令的基础命令是 git svn。 它可以跟很多命令，所以我们会通过几个简单的工作流程来为你演示最常用的命令。 ​ 需要特别注意的是当你使用 git svn 时，就是在与 Subversion 打交道，一个与 Git 完全不同的系统。 尽管 可以 在本地新建分支与合并分支，但是你最好还是通过变基你的工作来保证你的历史尽可能是直线，并且避免做类似同时与 Git 远程服务器交互的事情。 ​ 不要重写你的历史然后尝试再次推送，同时也不要推送到一个平行的 Git 仓库来与其他使用 Git 的开发者协作。 Subversion 只能有一个线性的历史，弄乱它很容易。 如果你在一个团队中工作，其中有一些人使用 SVN 而另一些人使用 Git，你需要确保每个人都使用 SVN 服务器来协作——这样做会省去很多麻烦。 1.1.2 设置 ​ 为了演示这个功能，需要一个有写入权限的典型 SVN 仓库。 如果想要拷贝这些例子，你必须获得一份我的测试仓库的可写拷贝。 为了轻松地拷贝，可以使用 Subversion 自带的一个名为 svnsync 的工具。 为了这些测试，我们在 Google Code 上创建了一个 protobuf 项目部分拷贝的新 Subversion 仓库。protobuf 是一个将结构性数据编码用于网络传输的工具。 ​ 接下来，你需要先创建一个新的本地 Subversion 仓库： $ mkdir /tmp/test-svn $ svnadmin create /tmp/test-svn ​ 然后，允许所有用户改变版本属性——最容易的方式是添加一个返回值为 0 的 pre-revprop-change 脚本。 $ cat /tmp/test-svn/hooks/pre-revprop-change #!/bin/sh exit 0; $ chmod +x /tmp/test-svn/hooks/pre-revprop-change ​ 现在可以调用加入目标与来源仓库参数的 svnsync init 命令同步这个项目到本地的机器。 $ svnsync init file:///tmp/test-svn \\ http://progit-example.googlecode.com/svn/ ​ 这样就设置好了同步所使用的属性。 可以通过运行下面的命令来克隆代码： $ svnsync sync file:///tmp/test-svn Committed revision 1. Copied properties for revision 1. Transmitting file data .............................[...] Committed revision 2. Copied properties for revision 2. […] ​ 虽然这个操作可能只会花费几分钟，但如果你尝试拷贝原始的仓库到另一个非本地的远程仓库时，即使只有不到 100 个的提交，这个过程也可能会花费将近一个小时。 Subversion 必须一次复制一个版本然后推送回另一个仓库——这低效得可笑，但却是做这件事唯一简单的方式。 1.1.3 开始 ​ 既然已经有了一个有写入权限的 Subversion 仓库，那么你可以开始一个典型的工作流程。 可以从 git svn clone 命令开始，它会将整个 Subversion 仓库导入到一个本地 Git 仓库。 需要牢记的一点是如果是从一个真正托管的 Subversion 仓库中导入，需要将 file:///tmp/test-svn 替换为你的 Subversion 仓库的 URL： $ git svn clone file:///tmp/test-svn -T trunk -b branches -t tags Initialized empty Git repository in /private/tmp/progit/test-svn/.git/ r1 = dcbfb5891860124cc2e8cc616cded42624897125 (refs/remotes/origin/trunk) A m4/acx_pthread.m4 A m4/stl_hash.m4 A java/src/test/java/com/google/protobuf/UnknownFieldSetTest.java A java/src/test/java/com/google/protobuf/WireFormatTest.java … r75 = 556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae (refs/remotes/origin/trunk) Found possible branch point: file:///tmp/test-svn/trunk => file:///tmp/test-svn/branches/my-calc-branch, 75 Found branch parent: (refs/remotes/origin/my-calc-branch) 556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae Following parent with do_switch Successfully followed parent r76 = 0fb585761df569eaecd8146c71e58d70147460a2 (refs/remotes/origin/my-calc-branch) Checked out HEAD: file:///tmp/test-svn/trunk r75 ​ 这相当于运行了两个命令—— git svn init 以及紧接着的 git svn fetch ——你提供的 URL 。 这会花费一些时间。 测试项目只有 75 个左右的提交并且代码库并不是很大，但是 Git 必须一次一个地检出一个版本同时单独地提交它。 对于有成百上千个提交的项目，这真的可能会花费几小时甚至几天来完成。 ​ -T trunk -b branches -t tags 部分告诉 Git Subversion 仓库遵循基本的分支与标签惯例。 如果你命名了不同的主干、分支或标签，可以修改这些参数。 因为这是如此地常见，所以能用 -s 来替代整个这部分，这表示标准布局并且指代所有那些选项。 下面的命令是相同的： $ git svn clone file:///tmp/test-svn -s ​ 至此，应该得到了一个已经导入了分支与标签的有效的 Git 仓库： $ git branch -a * master remotes/origin/my-calc-branch remotes/origin/tags/2.0.2 remotes/origin/tags/release-2.0.1 remotes/origin/tags/release-2.0.2 remotes/origin/tags/release-2.0.2rc1 remotes/origin/trunk ​ 注意这个工具是如何将 Subversion 标签作为远程引用来管理的。 让我们近距离看一下 Git 的底层命令 show-ref： $ git show-ref 556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae refs/heads/master 0fb585761df569eaecd8146c71e58d70147460a2 refs/remotes/origin/my-calc-branch bfd2d79303166789fc73af4046651a4b35c12f0b refs/remotes/origin/tags/2.0.2 285c2b2e36e467dd4d91c8e3c0c0e1750b3fe8ca refs/remotes/origin/tags/release-2.0.1 cbda99cb45d9abcb9793db1d4f70ae562a969f1e refs/remotes/origin/tags/release-2.0.2 a9f074aa89e826d6f9d30808ce5ae3ffe711feda refs/remotes/origin/tags/release-2.0.2rc1 556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae refs/remotes/origin/trunk ​ Git 在从 Git 服务器克隆时并不这样做；下面是在刚刚克隆完成的有标签的仓库的样子： $ git show-ref c3dcbe8488c6240392e8a5d7553bbffcb0f94ef0 refs/remotes/origin/master 32ef1d1c7cc8c603ab78416262cc421b80a8c2df refs/remotes/origin/branch-1 75f703a3580a9b81ead89fe1138e6da858c5ba18 refs/remotes/origin/branch-2 23f8588dde934e8f33c263c6d8359b2ae095f863 refs/tags/v0.1.0 7064938bd5e7ef47bfd79a685a62c1e2649e2ce7 refs/tags/v0.2.0 6dcb09b5b57875f334f61aebed695e2e4193db5e refs/tags/v1.0.0 ​ Git 直接将标签抓取至 refs/tags，而不是将它们看作分支。 1.1.4 提交回 Subversion ​ 现在你有了一个工作仓库，你可以在项目上做一些改动，然后高效地使用 Git 作为 SVN 客户端将你的提交推送到上游。 一旦编辑了一个文件并提交它，你就有了一个存在于本地 Git 仓库的提交，这提交在 Subversion 服务器上并不存在： $ git commit -am 'Adding git-svn instructions to the README' [master 4af61fd] Adding git-svn instructions to the README 1 file changed, 5 insertions(+) ​ 接下来，你需要将改动推送到上游。 注意这会怎样改变你使用 Subversion 的方式——你可以离线做几次提交然后一次性将它们推送到 Subversion 服务器。 要推送到一个 Subversion 服务器，运行 git svn dcommit 命令： $ git svn dcommit Committing to file:///tmp/test-svn/trunk ... M README.txt Committed r77 M README.txt r77 = 95e0222ba6399739834380eb10afcd73e0670bc5 (refs/remotes/origin/trunk) No changes between 4af61fd05045e07598c553167e0f31c84fd6ffe1 and refs/remotes/origin/trunk Resetting to the latest refs/remotes/origin/trunk ​ 这会拿走你在 Subversion 服务器代码之上所做的所有提交，针对每一个做一个 Subversion 提交，然后重写你本地的 Git 提交来包含一个唯一的标识符。 这很重要因为这意味着所有你的提交的 SHA-1 校验和都改变了。 部分由于这个原因，同时使用一个基于 Git 的项目远程版本和一个 Subversion 服务器并不是一个好主意。 如果你查看最后一次提交，有新的 git-svn-id 被添加： $ git log -1 commit 95e0222ba6399739834380eb10afcd73e0670bc5 Author: ben Date: Thu Jul 24 03:08:36 2014 +0000 Adding git-svn instructions to the README git-svn-id: file:///tmp/test-svn/trunk@77 0b684db3-b064-4277-89d1-21af03df0a68 ​ 注意你原来提交的 SHA-1 校验和原来是以 4af61fd 开头，而现在是以 95e0222 开头。 如果想要既推送到一个 Git 服务器又推送到一个 Subversion 服务器，必须先推送（dcommit）到 Subversion 服务器，因为这个操作会改变你的提交数据。 1.1.5 拉取新改动 ​ 如果你和其他开发者一起工作，当在某一时刻你们其中之一推送时，另一人尝试推送修改会导致冲突。 那次修改会被拒绝直到你合并他们的工作。 在 git svn 中，它看起来是这样的： $ git svn dcommit Committing to file:///tmp/test-svn/trunk ... ERROR from SVN: Transaction is out of date: File '/trunk/README.txt' is out of date W: d5837c4b461b7c0e018b49d12398769d2bfc240a and refs/remotes/origin/trunk differ, using rebase: :100644 100644 f414c433af0fd6734428cf9d2a9fd8ba00ada145 c80b6127dd04f5fcda218730ddf3a2da4eb39138 M README.txt Current branch master is up to date. ERROR: Not all changes have been committed into SVN, however the committed ones (if any) seem to be successfully integrated into the working tree. Please see the above messages for details. ​ 为了解决这种情况，可以运行 git svn rebase，它会从服务器拉取任何你本地还没有的改动，并将你所有的工作变基到服务器的内容之上： $ git svn rebase Committing to file:///tmp/test-svn/trunk ... ERROR from SVN: Transaction is out of date: File '/trunk/README.txt' is out of date W: eaa029d99f87c5c822c5c29039d19111ff32ef46 and refs/remotes/origin/trunk differ, using rebase: :100644 100644 65536c6e30d263495c17d781962cfff12422693a b34372b25ccf4945fe5658fa381b075045e7702a M README.txt First, rewinding head to replay your work on top of it... Applying: update foo Using index info to reconstruct a base tree... M README.txt Falling back to patching base and 3-way merge... Auto-merging README.txt ERROR: Not all changes have been committed into SVN, however the committed ones (if any) seem to be successfully integrated into the working tree. Please see the above messages for details. ​ 现在，所有你的工作都已经在 Subversion 服务器的内容之上了，你就可以顺利地 dcommit： $ git svn dcommit Committing to file:///tmp/test-svn/trunk ... M README.txt Committed r85 M README.txt r85 = 9c29704cc0bbbed7bd58160cfb66cb9191835cd8 (refs/remotes/origin/trunk) No changes between 5762f56732a958d6cfda681b661d2a239cc53ef5 and refs/remotes/origin/trunk Resetting to the latest refs/remotes/origin/trunk ​ 注意，和 Git 需要你在推送前合并本地还没有的上游工作不同的是，git svn 只会在修改发生冲突时要求你那样做（更像是 Subversion 工作的行为）。 如果其他人推送一个文件的修改然后你推送了另一个文件的修改，你的 dcommit 命令会正常工作： $ git svn dcommit Committing to file:///tmp/test-svn/trunk ... M configure.ac Committed r87 M autogen.sh r86 = d8450bab8a77228a644b7dc0e95977ffc61adff7 (refs/remotes/origin/trunk) M configure.ac r87 = f3653ea40cb4e26b6281cec102e35dcba1fe17c4 (refs/remotes/origin/trunk) W: a0253d06732169107aa020390d9fefd2b1d92806 and refs/remotes/origin/trunk differ, using rebase: :100755 100755 efa5a59965fbbb5b2b0a12890f1b351bb5493c18 e757b59a9439312d80d5d43bb65d4a7d0389ed6d M autogen.sh First, rewinding head to replay your work on top of it... ​ 记住这一点很重要，因为结果是当你推送后项目的状态并不存在于你的电脑中。 如果修改并未冲突但却是不兼容的，可能会引起一些难以诊断的问题。 这与使用 Git 服务器并不同——在 Git 中，可以在发布前完全测试客户端系统的状态，然而在 SVN 中，你甚至不能立即确定在提交前与提交后的状态是相同的。 ​ 你也应该运行这个命令从 Subversion 服务器上拉取修改，即使你自己并不准备提交。 可以运行 git svn fetch 来抓取新数据，但是 git svn rebase 会抓取并更新你本地的提交。 $ git svn rebase M autogen.sh r88 = c9c5f83c64bd755368784b444bc7a0216cc1e17b (refs/remotes/origin/trunk) First, rewinding head to replay your work on top of it... Fast-forwarded master to refs/remotes/origin/trunk. ​ 每隔一会儿运行 git svn rebase 确保你的代码始终是最新的。 虽然需要保证当运行这个命令时工作目录是干净的。 如果有本地的修改，在运行 git svn rebase 之前要么储藏你的工作要么做一次临时的提交，不然，当变基会导致合并冲突时，命令会终止。 1.1.6 Git 分支问题 ​ 当适应了 Git 的工作流程，你大概会想要创建特性分支，在上面做一些工作，然后将它们合并入主分支。 如果你正通过 git svn 推送到一个 Subversion 服务器，你可能想要把你的工作变基到一个单独的分支上，而不是将分支合并到一起。 比较喜欢变基的原因是因为 Subversion 有一个线性的历史并且无法像 Git 一样处理合并，所以 git svn 在将快照转换成 Subversion 提交时，只会保留第一父提交。 ​ 假设你的历史像下面这样：创建了一个 experiment 分支，做了两次提交，然后将它们合并回 master。 当 dcommit 时，你看到输出是这样的： $ git svn dcommit Committing to file:///tmp/test-svn/trunk ... M CHANGES.txt Committed r89 M CHANGES.txt r89 = 89d492c884ea7c834353563d5d913c6adf933981 (refs/remotes/origin/trunk) M COPYING.txt M INSTALL.txt Committed r90 M INSTALL.txt M COPYING.txt r90 = cb522197870e61467473391799148f6721bcf9a0 (refs/remotes/origin/trunk) No changes between 71af502c214ba13123992338569f4669877f55fd and refs/remotes/origin/trunk Resetting to the latest refs/remotes/origin/trunk ​ 在一个合并过历史提交的分支上 dcommit 命令工作得很好，除了当你查看你的 Git 项目历史时，它并没有重写所有你在 experiment 分支上所做的任意提交——相反，所有这些修改显示一个单独合并提交的 SVN 版本中。 ​ 当其他人克隆那些工作时，他们只会看到一个被塞入了所有改动的合并提交，就像运行了 git merge --squash；他们无法看到修改从哪来或何时提交的信息。 1.1.7 Subversion 分支 ​ 在 Subversion 中新建分支与在 Git 中新建分支并不相同；如果你能不用它，那最好就不要用。 然而，你可以使用 git svn 在 Subversion 中创建分支并在分支上做提交。 1.1.8 创建一个新的 SVN 分支 ​ 要在 Subversion 中创建一个新分支，运行 git svn branch [branchname]： $ git svn branch opera Copying file:///tmp/test-svn/trunk at r90 to file:///tmp/test-svn/branches/opera... Found possible branch point: file:///tmp/test-svn/trunk => file:///tmp/test-svn/branches/opera, 90 Found branch parent: (refs/remotes/origin/opera) cb522197870e61467473391799148f6721bcf9a0 Following parent with do_switch Successfully followed parent r91 = f1b64a3855d3c8dd84ee0ef10fa89d27f1584302 (refs/remotes/origin/opera) ​ 这与 Subversion 中的 svn copy trunk branches/opera 命令作用相同并且是在 Subversion 服务器中操作。 需要重点注意的是它并不会检出到那个分支；如果你在这时提交，提交会进入服务器的 trunk 分支，而不是 opera 分支。 1.1.9 切换活动分支 ​ Git 通过查找在历史中 Subversion 分支的头部来指出你的提交将会到哪一个分支——应该只有一个，并且它应该是在当前分支历史中最后一个有 git-svn-id 的。 ​ 如果想要同时在不止一个分支上工作，可以通过在导入的那个分支的 Subversion 提交开始来设置本地分支 dcommit 到特定的 Subversion 分支。 如果想要一个可以单独在上面工作的 opera 分支，可以运行 $ git branch opera remotes/origin/opera ​ 现在，如果想要将你的 opera 分支合并入 trunk（你的 master 分支），可以用一个正常的 git merge 来这样做。 但是你需要通过 -m 来提供一个描述性的提交信息，否则合并信息会是没有用的 “Merge branch opera”。 ​ 记住尽管使用的是 git merge 来做这个操作，而且合并可能会比在 Subversion 中更容易一些（因为 Git 会为你自动地检测合适的合并基础），但这并不是一个普通的 Git 合并提交。 你不得不将这个数据推送回一个 Subversion 服务器，Subversion 服务器不支持那些跟踪多个父结点的提交；所以，当推送完成后，它看起来会是一个将其他分支的所有提交压缩在一起的单独提交。 在合并一个分支到另一个分支后，你并不能像 Git 中那样轻松地回到原来的分支继续工作。 你运行的 dcommit 命令会将哪个分支被合并进来的信息抹掉，所以后续的合并基础计算会是错的—— dcommit 会使你的 git merge 结果看起来像是运行了 git merge --squash。 不幸的是，没有一个好的方式来避免这种情形—— Subversion 无法存储这个信息，所以当使用它做为服务器时你总是会被它的限制打垮。 为了避免这些问题，应该在合并到主干后删除本地分支（本例中是 opera）。 1.1.10 Subversion 命令 ​ git svn 工具集通过提供很多功能与 Subversion 中那些相似的命令来帮助简化转移到 Git 的过程。 下面是一些提供了 Subversion 中常用功能的命令。 SVN 风格历史 ​ 如果你习惯于使用 Subversion 并且想要看 SVN 输出风格的提交历史，可以运行 git svn log 来查看 SVN 格式的提交历史： $ git svn log ------------------------------------------------------------------------ r87 | schacon | 2014-05-02 16:07:37 -0700 (Sat, 02 May 2014) | 2 lines autogen change ------------------------------------------------------------------------ r86 | schacon | 2014-05-02 16:00:21 -0700 (Sat, 02 May 2014) | 2 lines Merge branch 'experiment' ------------------------------------------------------------------------ r85 | schacon | 2014-05-02 16:00:09 -0700 (Sat, 02 May 2014) | 2 lines updated the changelog ​ 关于 git svn log，有两件重要的事你应该知道。 首先，它是离线工作的，并不像真正的 svn log 命令，会向 Subversion 服务器询问数据。 其次，它只会显示已经提交到 Subversion 服务器上的提交。 还未 dcommit 的本地 Git 提交并不会显示；同样也不会显示这段时间中其他人推送到 Subversion 服务器上的提交。 它更像是最后获取到的 Subversion 服务器上的提交状态。 SVN 注解 ​ 类似 git svn log 命令离线模拟了 svn log 命令，你可以认为 git svn blame [FILE] 离线模拟了 svn annotate。 输出看起来像这样： $ git svn blame README.txt 2 temporal Protocol Buffers - Google's data interchange format 2 temporal Copyright 2008 Google Inc. 2 temporal http://code.google.com/apis/protocolbuffers/ 2 temporal 22 temporal C++ Installation - Unix 22 temporal ======================= 2 temporal 79 schacon Committing in git-svn. 78 schacon 2 temporal To build and install the C++ Protocol Buffer runtime and the Protocol 2 temporal Buffer compiler (protoc) execute the following: 2 temporal ​ 重复一次，它并不显示你在 Git 中的本地提交，也不显示同一时间被推送到 Subversion 的其他提交。 SVN 服务器信息 ​ 可以通过运行 git svn info 得到与 svn info 相同种类的信息。 $ git svn info Path: . URL: https://schacon-test.googlecode.com/svn/trunk Repository Root: https://schacon-test.googlecode.com/svn Repository UUID: 4c93b258-373f-11de-be05-5f7a86268029 Revision: 87 Node Kind: directory Schedule: normal Last Changed Author: schacon Last Changed Rev: 87 Last Changed Date: 2009-05-02 16:07:37 -0700 (Sat, 02 May 2009) ​ 这就像是在你上一次和 Subversion 服务器通讯时同步了之后，离线运行的 blame 与 log 命令。 忽略 SUBVERSION 所忽略的 ​ 如果克隆一个在任意一处设置 svn:ignore 属性的 Subversion 仓库时，你也许会想要设置对应的 .gitignore 文件，这样就不会意外的提交那些不该提交的文件。 git svn 有两个命令来帮助解决这个问题。 第一个是 git svn create-ignore，它会为你自动地创建对应的 .gitignore 文件，这样你的下次提交就能包含它们。 ​ 第二个命令是 git svn show-ignore，它会将你需要放在 .gitignore 文件中的每行内容打印到标准输出，这样就可以将输出内容重定向到项目的例外文件中： $ git svn show-ignore > .git/info/exclude ​ 这样，你就不会由于 .gitignore 文件而把项目弄乱。 当你是 Subversion 团队中唯一的 Git 用户时这是一个好的选项，并且你的队友并不想要项目内存在 .gitignore 文件。 1.1.11 Git-Svn 总结 ​ 当你不得不使用 Subversion 服务器或者其他必须运行一个 Subversion 服务器的开发环境时，git svn 工具很有用。 你应该把它当做一个不完全的 Git，然而，你要是不用它的话，就会在做转换的过程中遇到很多麻烦的问题。 为了不惹麻烦，尽量遵守这些准则： 保持一个线性的 Git 历史，其中不能有 git merge 生成的合并提交。 把你在主线分支外开发的全部工作变基到主线分支；而不要合并入主线分支。 不要建立一个单独的 Git 服务器，也不要在 Git 服务器上协作。 可以用一台 Git 服务器来帮助新来的开发者加速克隆，但是不要推送任何不包含 git-svn-id 条目的东西。 你可能会需要增加一个 pre-receive 钩子来检查每一个提交信息是否包含 git-svn-id 并且拒绝任何未包含的提交。 ​ 如果你遵守了那些准则，忍受用一个 Subversion 服务器来工作可以更容易些。 然而，如果有可能迁移到一个真正的 Git 服务器，那么迁移过去能使你的团队获得更多好处。 2. Git 与 Mercurial ​ DVCS 的宇宙里不只有 Git。 实际上，在这个空间里有许多其他的系统。对于如何正确地进行分布式版本管理，每一个系统都有自己的视角。 除了 Git，最流行的就是 Mercurial，并且它们两个在很多方面都很相似。 ​ 好消息是，如果你更喜欢 Git 的客户端行为但是工作在源代码由 Mercurial 控制的项目中，有一种使用 Git 作为 Mercurial 托管仓库的客户端的方法。 由于 Git 与服务器仓库是使用远程交互的，那么由远程助手实现的桥接方法就不会让人很惊讶。 这个项目的名字是 git-remote-hg，可以在 https://github.com/felipec/git-remote-hg 找到。 2.1 git-remote-hg ​ 首先，需要安装 git-remote-hg。 实际上需要将它的文件放在 PATH 变量的某个目录中，像这样： $ curl -o ~/bin/git-remote-hg \\ https://raw.githubusercontent.com/felipec/git-remote-hg/master/git-remote-hg $ chmod +x ~/bin/git-remote-hg ​ 假定 ~/bin 在 $PATH 变量中。 Git-remote-hg 有一个其他的依赖：mercurial Python 库。 如果已经安装了 Python，安装它就像这样简单： $ pip install mercurial （如果未安装 Python，访问 https://www.python.org/ 来获取它。） ​ 需要做的最后一件事是安装 Mercurial 客户端。 如果还没有安装的话请访问 http://mercurial.selenic.com/ 来安装。 ​ 现在已经准备好摇滚了。 你所需要的一切就是一个你可以推送的 Mercurial 仓库。 很幸运，每一个 Mercurial 仓库都可以这样做，所以我们只需要使用大家用来学习 Mercurial 的“hello world”仓库就可以了： $ hg clone http://selenic.com/repo/hello /tmp/hello 2.2 开始 ​ 既然有一个可用的 “server-side” 仓库，我们可以通过一个典型的工作流来了解。 你将会看到，这两种系统非常相似，没有太多的出入。 ​ 和 Git 一样，首先我们克隆： $ git clone hg::/tmp/hello /tmp/hello-git $ cd /tmp/hello-git $ git log --oneline --graph --decorate * ac7955c (HEAD, origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master, master) Create a makefile * 65bb417 Create a standard \"hello, world\" program ​ 你会注意到与 Mercurial 仓库工作时使用了标准的 git clone 命令。 那是因为 git-remote-hg 工作在相当低的底层，使用类似于 Git HTTP/S 协议的机制实现的（远程助手）。 由于 Git 与 Mercurial 都设计为每一个客户端有一个仓库的完整历史，所以这个命令做了一次完整的克隆，包括所有的项目历史，并且相当快地完成。 ​ log 命令显示了两次提交，最后一次提交指向了一大堆引用。 那说明这其中的一部分实际上并没有在那儿。 让我们看看 .git 目录中实际上有什么： $ tree .git/refs .git/refs ├── heads │ └── master ├── hg │ └── origin │ ├── bookmarks │ │ └── master │ └── branches │ └── default ├── notes │ └── hg ├── remotes │ └── origin │ └── HEAD └── tags 9 directories, 5 files ​ Git-remote-hg 尝试让结构更有 Git 风格，但是在隐藏在下面的是它管理两个轻微不同系统之间概念的映射。 refs/hg 目录中存储了实际的远程引用。 例如，refs/hg/origin/branches/default 是一个包含以 “ac7955c” 开始的 SHA-1 值的 Git 引用文件，是 master 所指向的提交。 所以 refs/hg 目录是一种类似 refs/remotes/origin 的替代品，但是它引入了书签与分支的区别。 ​ notes/hg 文件是 git-remote-hg 如何在 Git 的提交散列与 Mercurial 变更集 ID 之间建立映射的起点。 让我们来探索一下： $ cat notes/hg d4c10386... $ git cat-file -p d4c10386... tree 1781c96... author remote-hg <> 1408066400 -0800 committer remote-hg <> 1408066400 -0800 Notes for master $ git ls-tree 1781c96... 100644 blob ac9117f... 65bb417... 100644 blob 485e178... ac7955c... $ git cat-file -p ac9117f 0a04b987be5ae354b710cefeba0e2d9de7ad41a9 ​ 所以 refs/notes/hg 指向了一个树，即在 Git 对象数据库中的一个有其他对象名字的列表。 git ls-tree 输出 tree 对象中所有项目的模式、类型、对象哈希与文件名。 如果深入挖掘 tree 对象中的一个项目，我们会发现在其中是一个名字为 “ac9117f” 的 blob 对象（master 所指向提交的 SHA-1 散列值），包含内容 “0a04b98” （是 default 分支指向的 Mercurial 变更集的 ID）。 ​ 好消息是大多数情况下我们不需要关心以上这些。 典型的工作流程与使用 Git 远程仓库并没有什么不同。 ​ 在我们继续之前，这里还有一件需要注意的事情：忽略。 Mercurial 与 Git 使用非常类似的机制实现这个功能，但是一般来说你不会想要把一个 .gitignore 文件提交到 Mercurial 仓库中。 幸运的是，Git 有一种方式可以忽略本地磁盘仓库的文件，而且 Mercurial 格式是与 Git 兼容的，所以你只需将这个文件拷贝过去： $ cp .hgignore .git/info/exclude ​ .git/info/exclude 文件的作用像是一个 .gitignore，但是它不包含在提交中。 2.3 工作流程 ​ 假设我们已经做了一些工作并且在 master 分支做了几次提交，而且已经准备将它们推送到远程仓库。 这是我们仓库现在的样子： $ git log --oneline --graph --decorate * ba04a2a (HEAD, master) Update makefile * d25d16f Goodbye * ac7955c (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Create a makefile * 65bb417 Create a standard \"hello, world\" program ​ 我们的 master 分支领先 origin/master 分支两个提交，但是那两个提交只存在于我们的本地机器中。 让我们看看在同一时间有没有其他人做过什么重要的工作： $ git fetch From hg::/tmp/hello ac7955c..df85e87 master -> origin/master ac7955c..df85e87 branches/default -> origin/branches/default $ git log --oneline --graph --decorate --all * 7b07969 (refs/notes/hg) Notes for default * d4c1038 Notes for master * df85e87 (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Add some documentation | * ba04a2a (HEAD, master) Update makefile | * d25d16f Goodbye |/ * ac7955c Create a makefile * 65bb417 Create a standard \"hello, world\" program ​ 因为使用了 --all 标记，我们看到被 git-remote-hg 内部使用的 “notes” 引用，但是可以忽略它们。 剩下的部分是我们期望的；origin/master 已经前进了一次提交，同时我们的历史现在分叉了。 Mercurial 和我们本章中讨论的其他系统不一样，它能够处理合并，所以我们不需要做任何其他事情。 $ git merge origin/master Auto-merging hello.c Merge made by the 'recursive' strategy. hello.c | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-) $ git log --oneline --graph --decorate * 0c64627 (HEAD, master) Merge remote-tracking branch 'origin/master' |\\ | * df85e87 (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Add some documentation * | ba04a2a Update makefile * | d25d16f Goodbye |/ * ac7955c Create a makefile * 65bb417 Create a standard \"hello, world\" program ​ 完美。 运行测试然后所有测试都通过了，所以我们准备将工作共享给团队的其他成员。 $ git push To hg::/tmp/hello df85e87..0c64627 master -> master ​ 就是这样！ 如果你现在查看一下 Mercurial 仓库，你会发现这样实现了我们所期望的： $ hg log -G --style compact o 5[tip]:4,2 dc8fa4f932b8 2014-08-14 19:33 -0700 ben |\\ Merge remote-tracking branch 'origin/master' | | | o 4 64f27bcefc35 2014-08-14 19:27 -0700 ben | | Update makefile | | | o 3:1 4256fc29598f 2014-08-14 19:27 -0700 ben | | Goodbye | | @ | 2 7db0b4848b3c 2014-08-14 19:30 -0700 ben |/ Add some documentation | o 1 82e55d328c8c 2005-08-26 01:21 -0700 mpm | Create a makefile | o 0 0a04b987be5a 2005-08-26 01:20 -0700 mpm Create a standard \"hello, world\" program ​ 序号 2 的变更集是由 Mercurial 生成的，序号 3 与序号 4 的变更集是由 git-remote-hg 生成的，通过 Git 推送上来的提交。 2.4 分支与书签 ​ Git 只有一种类型的分支：当提交生成时移动的一个引用。 在 Mercurial 中，这种类型的引用叫作 “bookmark”，它的行为非常类似于 Git 分支。 ​ Mercurial 的 “branch” 概念则更重量级一些。 变更集生成时的分支会记录 在变更集中，意味着它会永远地存在于仓库历史中。 这个例子描述了一个在 develop 分支上的提交： $ hg log -l 1 changeset: 6:8f65e5e02793 branch: develop tag: tip user: Ben Straub date: Thu Aug 14 20:06:38 2014 -0700 summary: More documentation ​ 注意开头为 “branch” 的那行。 Git 无法真正地模拟这种行为（并且也不需要这样做；两种类型的分支都可以表达为 Git 的一个引用），但是 git-remote-hg 需要了解其中的区别，因为 Mercurial 关心。 ​ 创建 Mercurial 书签与创建 Git 分支一样容易。 在 Git 这边： $ git checkout -b featureA Switched to a new branch 'featureA' $ git push origin featureA To hg::/tmp/hello * [new branch] featureA -> featureA ​ 这就是所要做的全部。 在 Mercurial 这边，它看起来像这样： $ hg bookmarks featureA 5:bd5ac26f11f9 $ hg log --style compact -G @ 6[tip] 8f65e5e02793 2014-08-14 20:06 -0700 ben | More documentation | o 5[featureA]:4,2 bd5ac26f11f9 2014-08-14 20:02 -0700 ben |\\ Merge remote-tracking branch 'origin/master' | | | o 4 0434aaa6b91f 2014-08-14 20:01 -0700 ben | | update makefile | | | o 3:1 318914536c86 2014-08-14 20:00 -0700 ben | | goodbye | | o | 2 f098c7f45c4f 2014-08-14 20:01 -0700 ben |/ Add some documentation | o 1 82e55d328c8c 2005-08-26 01:21 -0700 mpm | Create a makefile | o 0 0a04b987be5a 2005-08-26 01:20 -0700 mpm Create a standard \"hello, world\" program ​ 注意在修订版本 5 上的新 [featureA] 标签。 在 Git 这边这些看起来像是 Git 分支，除了一点：不能从 Git 这边删除书签（这是远程助手的一个限制）。 ​ 你也可以工作在一个 “重量级” 的 Mercurial branch：只需要在 branches 命名空间内创建一个分支： $ git checkout -b branches/permanent Switched to a new branch 'branches/permanent' $ vi Makefile $ git commit -am 'A permanent change' $ git push origin branches/permanent To hg::/tmp/hello * [new branch] branches/permanent -> branches/permanent ​ 下面是 Mercurial 这边的样子： $ hg branches permanent 7:a4529d07aad4 develop 6:8f65e5e02793 default 5:bd5ac26f11f9 (inactive) $ hg log -G o changeset: 7:a4529d07aad4 | branch: permanent | tag: tip | parent: 5:bd5ac26f11f9 | user: Ben Straub | date: Thu Aug 14 20:21:09 2014 -0700 | summary: A permanent change | | @ changeset: 6:8f65e5e02793 |/ branch: develop | user: Ben Straub | date: Thu Aug 14 20:06:38 2014 -0700 | summary: More documentation | o changeset: 5:bd5ac26f11f9 |\\ bookmark: featureA | | parent: 4:0434aaa6b91f | | parent: 2:f098c7f45c4f | | user: Ben Straub | | date: Thu Aug 14 20:02:21 2014 -0700 | | summary: Merge remote-tracking branch 'origin/master' [...] ​ 分支名字 “permanent” 记录在序号 7 的变更集中。 ​ 在 Git 这边，对于其中任何一种风格的分支的工作都是相同的：仅仅是正常做的检出、提交、抓取、合并、拉取与推送。 还有需要知道的一件事情是 Mercurial 不支持重写历史，只允许添加历史。 下面是我们的 Mercurial 仓库在交互式的变基与强制推送后的样子： $ hg log --style compact -G o 10[tip] 99611176cbc9 2014-08-14 20:21 -0700 ben | A permanent change | o 9 f23e12f939c3 2014-08-14 20:01 -0700 ben | Add some documentation | o 8:1 c16971d33922 2014-08-14 20:00 -0700 ben | goodbye | | o 7:5 a4529d07aad4 2014-08-14 20:21 -0700 ben | | A permanent change | | | | @ 6 8f65e5e02793 2014-08-14 20:06 -0700 ben | |/ More documentation | | | o 5[featureA]:4,2 bd5ac26f11f9 2014-08-14 20:02 -0700 ben | |\\ Merge remote-tracking branch 'origin/master' | | | | | o 4 0434aaa6b91f 2014-08-14 20:01 -0700 ben | | | update makefile | | | +---o 3:1 318914536c86 2014-08-14 20:00 -0700 ben | | goodbye | | | o 2 f098c7f45c4f 2014-08-14 20:01 -0700 ben |/ Add some documentation | o 1 82e55d328c8c 2005-08-26 01:21 -0700 mpm | Create a makefile | o 0 0a04b987be5a 2005-08-26 01:20 -0700 mpm Create a standard \"hello, world\" program ​ 变更集 8、9 与 10 已经被创建出来并且属于 permanent 分支，但是旧的变更集依然在那里。 这会让使用 Mercurial 的团队成员非常困惑，所以要避免这种行为。 2.5 Mercurial 总结 ​ Git 与 Mercurial 如此相似，以至于跨这两个系统进行工作十分流畅。 如果能注意避免改变在你机器上的历史（就像通常建议的那样），你甚至并不会察觉到另一端是 Mercurial。 3. Git 与 Perforce ​ 在企业环境中 Perforce 是非常流行的版本管理系统。 它大概起始于 1995 年，这使它成为了本章中介绍的最古老的系统。 就其本身而言，它设计时带有当时时代的局限性；它假定你始终连接到一个单独的中央服务器，本地磁盘只保存一个版本。 诚然，它的功能与限制适合几个特定的问题，但实际上，在很多情况下，将使用 Perforce 的项目换做使用 Git 会更好。 ​ 如果你决定混合使用 Perforce 与 Git 这里有两种选择。 第一个我们要介绍的是 Perforce 官方制作的 “Git Fusion” 桥接，它可以将 Perforce 仓库中的子树表示为一个可读写的 Git 仓库。 第二个是 git-p4，一个客户端桥接允许你将 Git 作为 Perforce 的客户端使用，而不用在 Perforce 服务器上做任何重新的配置。 3.1 Git Fusion ​ Perforce 提供了一个叫作 Git Fusion 的产品（可在 http://www.perforce.com/git-fusion 获得），它将会在服务器这边同步 Perforce 服务器与 Git 仓库。 3.1.1 设置 ​ 针对我们的例子，我们将会使用最简单的方式安装 Git Fusion：下载一个虚拟机来运行 Perforce 守护进程与 Git Fusion。 可以从 http://www.perforce.com/downloads/Perforce/20-User 获得虚拟机镜像，下载完成后将它导入到你最爱的虚拟机软件中（我们将会使用 VirtualBox）。 ​ 在第一次启动机器后，它会询问你自定义三个 Linux 用户（root、perforce 与 git）的密码，并且提供一个实例名字来区分在同一网络下不同的安装。 当那些都完成后，将会看到这样： Git Fusion 虚拟机启动屏幕。 ​ 应当注意显示在这儿的 IP 地址，我们将会在后面用到。 接下来，我们将会创建一个 Perforce 用户。 选择底部的 “Login” 选项并按下回车（或者用 SSH 连接到这台机器），然后登录为 root。 然后使用这些命令创建一个用户： $ p4 -p localhost:1666 -u super user -f john $ p4 -p localhost:1666 -u john passwd $ exit ​ 第一个命令将会打开一个 VI 编辑器来自定义用户，但是可以通过输入 :wq 并回车来接受默认选项。 第二个命令将会提示输入密码两次。 这就是所有我们要通过终端提示符做的事情，所以现在可以退出当前会话了。 ​ 接下来要做的事就是告诉 Git 不要验证 SSL 证书。 Git Fusion 镜像内置一个证书，但是域名并不匹配你的虚拟主机的 IP 地址，所以 Git 会拒绝 HTTPS 连接。 如果要进行永久安装，查阅 Perforce Git Fusion 手册来安装一个不同的证书；然而，对于我们这个例子来说，这已经足够了。 $ export GIT_SSL_NO_VERIFY=true ​ 现在我们可以测试所有东西是不是正常工作。 $ git clone https://10.0.1.254/Talkhouse Cloning into 'Talkhouse'... Username for 'https://10.0.1.254': john Password for 'https://john@10.0.1.254': remote: Counting objects: 630, done. remote: Compressing objects: 100% (581/581), done. remote: Total 630 (delta 172), reused 0 (delta 0) Receiving objects: 100% (630/630), 1.22 MiB | 0 bytes/s, done. Resolving deltas: 100% (172/172), done. Checking connectivity... done. ​ 虚拟机镜像自带一个可以克隆的样例项目。 这里我们会使用之前创建的 john 用户，通过 HTTPS 进行克隆；Git 询问此次连接的凭证，但是凭证缓存会允许我们跳过这步之后的任意后续请求。 3.1.2 FUSION 配置 ​ 一旦安装了 Git Fusion，你会想要调整配置。 使用你最爱的 Perforce 客户端做这件事实际上相当容易；只需要映射 Perforce 服务器上的 //.git-fusion 目录到你的工作空间。 文件结构看起来像这样： $ tree . ├── objects │ ├── repos │ │ └── [...] │ └── trees │ └── [...] │ ├── p4gf_config ├── repos │ └── Talkhouse │ └── p4gf_config └── users └── p4gf_usermap 498 directories, 287 files ​ objects 目录被 Git Fusion 内部用来双向映射 Perforce 对象与 Git 对象，你不必弄乱那儿的任何东西。 在这个目录中有一个全局的 p4gf_config 文件，每个仓库中也会有一份——这些配置文件决定了 Git Fusion 的行为。 让我们看一下根目录下的文件： [repo-creation] charset = utf8 [git-to-perforce] change-owner = author enable-git-branch-creation = yes enable-swarm-reviews = yes enable-git-merge-commits = yes enable-git-submodules = yes preflight-commit = none ignore-author-permissions = no read-permission-check = none git-merge-avoidance-after-change-num = 12107 [perforce-to-git] http-url = none ssh-url = none [@features] imports = False chunked-push = False matrix2 = False parallel-push = False [authentication] email-case-sensitivity = no ​ 这里我们并不会深入介绍这些选项的含义，但是要注意这是一个 INI 格式的文本文件，就像 Git 的配置。 这个文件指定了全局选项，但它可以被仓库特定的配置文件覆盖，像是 repos/Talkhouse/p4gf_config。 如果打开这个文件，你会看到有一些与全局默认不同设置的 [@repo] 区块。 你也会看到像下面这样的区块： [Talkhouse-master] git-branch-name = master view = //depot/Talkhouse/main-dev/... ... ​ 这是一个 Perforce 分支与一个 Git 分支的映射。 这个区块可以被命名成你喜欢的名字，只要保证名字是唯一的即可。 git-branch-name 允许你将在 Git 下显得笨重的仓库路径转换为更友好的名字。 view 选项使用标准视图映射语法控制 Perforce 文件如何映射到 Git 仓库。 可以指定一个以上的映射，就像下面的例子： [multi-project-mapping] git-branch-name = master view = //depot/project1/main/... project1/... //depot/project2/mainline/... project2/... ​ 通过这种方式，如果正常工作空间映射包含对目录结构的修改，可以将其复制为一个 Git 仓库。 ​ 最后一个我们讨论的文件是 users/p4gf_usermap，它将 Perforce 用户映射到 Git 用户，但你可能不会需要它。 当从一个 Perforce 变更集转换为一个 Git 提交时，Git Fusion 的默认行为是去查找 Perforce 用户，然后把邮箱地址与全名存储在 Git 的 author/commiter 字段中。 当反过来转换时，默认的行为是根据存储在 Git 提交中 author 字段中的邮箱地址来查找 Perforce 用户，然后以该用户提交变更集（以及权限的应用）。 大多数情况下，这个行为工作得很好，但是考虑下面的映射文件： john john@example.com \"John Doe\" john johnny@appleseed.net \"John Doe\" bob employeeX@example.com \"Anon X. Mouse\" joe employeeY@example.com \"Anon Y. Mouse\" ​ 每一行的格式都是 \"\"，创建了一个单独的用户映射。 前两行映射不同的邮箱地址到同一个 Perforce 用户账户。 当使用几个不同的邮箱地址（或改变邮箱地址）生成 Git 提交并且想要让他们映射到同一个 Perforce 用户时这会很有用。 当从一个 Perforce 变更集创建一个 Git 提交时，第一个匹配 Perforce 用户的行会被用作 Git 作者信息。 ​ 最后两行从创建的 Git 提交中掩盖了 Bob 与 Joe 的真实名字与邮箱地址。 当你想要将一个内部项目开源，但不想将你的雇员目录公布到全世界时这很不错。 注意邮箱地址与全名需要是唯一的，除非想要所有的 Git 提交都属于一个虚构的作者。 工作流程 ​ Perforce Git Fusion 是在 Perforce 与 Git 版本控制间双向的桥接。 让我们看一下在 Git 这边工作是什么样的感觉。 假定我们在 “Jam” 项目中使用上述的配置文件映射了，可以这样克隆： $ git clone https://10.0.1.254/Jam Cloning into 'Jam'... Username for 'https://10.0.1.254': john Password for 'https://ben@10.0.1.254': remote: Counting objects: 2070, done. remote: Compressing objects: 100% (1704/1704), done. Receiving objects: 100% (2070/2070), 1.21 MiB | 0 bytes/s, done. remote: Total 2070 (delta 1242), reused 0 (delta 0) Resolving deltas: 100% (1242/1242), done. Checking connectivity... done. $ git branch -a * master remotes/origin/HEAD -> origin/master remotes/origin/master remotes/origin/rel2.1 $ git log --oneline --decorate --graph --all * 0a38c33 (origin/rel2.1) Create Jam 2.1 release branch. | * d254865 (HEAD, origin/master, origin/HEAD, master) Upgrade to latest metrowerks on Beos -- the Intel one. | * bd2f54a Put in fix for jam's NT handle leak. | * c0f29e7 Fix URL in a jam doc | * cc644ac Radstone's lynx port. [...] ​ 当首次这样做时，会花费一些时间。 这里发生的是 Git Fusion 会将在 Perforce 历史中所有合适的变更集转换为 Git 提交。 这发生在服务器端本地，所以会相当快，但是如果有很多历史，那么它还是会花费一些时间。 后来的抓取会做增量转换，所以会感觉更像 Git 的本地速度。 ​ 如你所见，我们的仓库看起来像之前使用过的任何一个 Git 仓库了。 这里有三个分支，Git 已经帮助创建了一个跟踪 origin/master 的本地 master 分支。 让我们做一些工作，创建几个新提交： # ... $ git log --oneline --decorate --graph --all * cfd46ab (HEAD, master) Add documentation for new feature * a730d77 Whitespace * d254865 (origin/master, origin/HEAD) Upgrade to latest metrowerks on Beos -- the Intel one. * bd2f54a Put in fix for jam's NT handle leak. [...] ​ 我们有两个新提交。 现在我们检查下是否有其他人在工作： $ git fetch remote: Counting objects: 5, done. remote: Compressing objects: 100% (3/3), done. remote: Total 3 (delta 2), reused 0 (delta 0) Unpacking objects: 100% (3/3), done. From https://10.0.1.254/Jam d254865..6afeb15 master -> origin/master $ git log --oneline --decorate --graph --all * 6afeb15 (origin/master, origin/HEAD) Update copyright | * cfd46ab (HEAD, master) Add documentation for new feature | * a730d77 Whitespace |/ * d254865 Upgrade to latest metrowerks on Beos -- the Intel one. * bd2f54a Put in fix for jam's NT handle leak. [...] ​ 看起来有人在工作！ 从这个视图来看你并不知道这点，但是 6afeb15 提交确实是使用 Perforce 客户端创建的。 从 Git 的视角看它仅仅只是另一个提交，准确地说是一个点。 让我们看看 Perforce 服务器如何处理一个合并提交： $ git merge origin/master Auto-merging README Merge made by the 'recursive' strategy. README | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-) $ git push Counting objects: 9, done. Delta compression using up to 8 threads. Compressing objects: 100% (9/9), done. Writing objects: 100% (9/9), 917 bytes | 0 bytes/s, done. Total 9 (delta 6), reused 0 (delta 0) remote: Perforce: 100% (3/3) Loading commit tree into memory... remote: Perforce: 100% (5/5) Finding child commits... remote: Perforce: Running git fast-export... remote: Perforce: 100% (3/3) Checking commits... remote: Processing will continue even if connection is closed. remote: Perforce: 100% (3/3) Copying changelists... remote: Perforce: Submitting new Git commit objects to Perforce: 4 To https://10.0.1.254/Jam 6afeb15..89cba2b master -> master ​ Git 认为它成功了。 让我们从 Perforce 的视角看一下 README 文件的历史，使用 p4v 的版本图功能。 Git 推送后的 Perforce 版本图 ​ 如果你在之前从未看过这个视图，它似乎让人困惑，但是它显示出了作为 Git 历史图形化查看器相同的概念。 我们正在查看 README 文件的历史，所以左上角的目录树只显示那个文件在不同分支的样子。 右上方，我们有不同版本文件关系的可视图，这个可视图的全局视图在右下方。 视图中剩余的部分显示出选择版本的详细信息（在这个例子中是 2） ​ 还要注意的一件事是这个图看起来很像 Git 历史中的图。 Perforce 没有存储 1 和 2 提交的命名分支，所以它在 .git-fusion 目录中生成了一个 “anonymous” 分支来保存它。 这也会在 Git 命名分支不对应 Perforce 命名分支时发生（稍后你可以使用配置文件来映射它们到 Perforce 分支）。 ​ 这些大多数发生在后台，但是最终结果是团队中的一个人可以使用 Git，另一个可以使用 Perforce，而所有人都不知道其他人的选择。 GIT-FUSION 总结 ​ 如果你有（或者能获得）接触你的 Perforce 服务器的权限，那么 Git Fusion 是使 Git 与 Perforce 互相交流的很好的方法。 这里包含了一点配置，但是学习曲线并不是很陡峭。 这是本章中其中一个不会出现无法使用 Git 全部能力的警告的章节。 这并不是说扔给 Perforce 任何东西都会高兴——如果你尝试重写已经推送的历史，Git Fusion 会拒绝它——虽然 Git Fusion 尽力让你感觉是原生的。 你甚至可以使用 Git 子模块（尽管它们对 Perforce 用户看起来很奇怪），合并分支（在 Perforce 这边会被记录了一次整合）。 ​ 如果不能说服你的服务器管理员设置 Git Fusion，依然有一种方式来一起使用这两个工具。 4. Git-p4 ​ Git-p4 是 Git 与 Perforce 之间的双向桥接。 它完全运行在你的 Git 仓库内，所以你不需要任何访问 Perforce 服务器的权限（当然除了用户验证）。 Git-p4 并不像 Git Fusion 一样灵活或完整，但是它允许你在无需修改服务器环境的情况下，做大部分想做的事情。 Notes:为了与 git-p4 一起工作需要在你的 PATH 环境变量中的某个目录中有 p4 工具。 在写这篇文章的时候，它可以在 http://www.perforce.com/downloads/Perforce/20-User 免费获得。 4.1 设置 ​ 出于演示的目的，我们将会从上面演示的 Git Fusion OVA 运行 Perforce 服务器，但是我们会绕过 Git Fusion 服务器然后直接进行 Perforce 版本管理。 ​ 为了使用 p4 命令行客户端（git-p4 依赖项），你需要设置两个环境变量： $ export P4PORT=10.0.1.254:1666 $ export P4USER=john 4.2 开始 ​ 像在 Git 中的任何事情一样，第一个命令就是克隆： $ git p4 clone //depot/www/live www-shallow Importing from //depot/www/live into www-shallow Initialized empty Git repository in /private/tmp/www-shallow/.git/ Doing initial import of //depot/www/live/ from revision #head into refs/remotes/p4/master ​ 这样会创建出一种在 Git 中名为 “shallow” 的克隆；只有最新版本的 Perforce 被导入至 Git；记住，Perforce 并未被设计成给每一个用户一个版本。 使用 Git 作为 Perforce 客户端这样就足够了，但是为了其他目的的话这样可能不够。 ​ 完成之后，我们就有一个全功能的 Git 仓库： $ cd myproject $ git log --oneline --all --graph --decorate * 70eaf78 (HEAD, p4/master, p4/HEAD, master) Initial import of //depot/www/live/ from the state at revision #head ​ 注意有一个 “p4” 远程代表 Perforce 服务器，但是其他东西看起来就像是标准的克隆。 实际上，这有一点误导：其实远程仓库并不存在。 $ git remote -v ​ 在当前仓库中并不存在任何远程仓库。 Git-p4 创建了一些引用来代表服务器的状态，它们看起来类似 git log 显示的远程引用，但是它们并不被 Git 本身管理，并且你无法推送它们。 工作流程 ​ 好了，让我们开始一些工作。 假设你已经在一个非常重要的功能上做了一些工作，然后准备好将它展示给团队中的其他人。 $ git log --oneline --all --graph --decorate * 018467c (HEAD, master) Change page title * c0fb617 Update link * 70eaf78 (p4/master, p4/HEAD) Initial import of //depot/www/live/ from the state at revision #head ​ 我们已经生成了两次新提交并已准备好推送它们到 Perforce 服务器。 让我们检查一下今天其他人是否做了一些工作： $ git p4 sync git p4 sync Performing incremental import into refs/remotes/p4/master git branch Depot paths: //depot/www/live/ Import destination: refs/remotes/p4/master Importing revision 12142 (100%) $ git log --oneline --all --graph --decorate * 75cd059 (p4/master, p4/HEAD) Update copyright | * 018467c (HEAD, master) Change page title | * c0fb617 Update link |/ * 70eaf78 Initial import of //depot/www/live/ from the state at revision #head ​ 看起来他们做了，master 与 p4/master 已经分叉了。 Perforce 的分支系统一点也 不 像 Git 的，所以提交合并提交没有任何意义。 Git-p4 建议变基你的提交，它甚至提供了一个快捷方式来这样做： $ git p4 rebase Performing incremental import into refs/remotes/p4/master git branch Depot paths: //depot/www/live/ No changes to import! Rebasing the current branch onto remotes/p4/master First, rewinding head to replay your work on top of it... Applying: Update link Applying: Change page title index.html | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-) ​ 从输出中可能大概得知，git p4 rebase 是 git p4 sync 接着 git rebase p4/master 的快捷方式。 它比那更聪明一些，特别是工作在多个分支时，但这是一个进步。 ​ 现在我们的历史再次是线性的，我们准备好我们的改动贡献回 Perforce。 git p4 submit 命令会尝试在 p4/master 与 master 之间的每一个 Git 提交创建一个新的 Perforce 修订版本。 运行它会带我们到最爱的编辑器，文件内容看起来像是这样： # A Perforce Change Specification. # # Change: The change number. 'new' on a new changelist. # Date: The date this specification was last modified. # Client: The client on which the changelist was created. Read-only. # User: The user who created the changelist. # Status: Either 'pending' or 'submitted'. Read-only. # Type: Either 'public' or 'restricted'. Default is 'public'. # Description: Comments about the changelist. Required. # Jobs: What opened jobs are to be closed by this changelist. # You may delete jobs from this list. (New changelists only.) # Files: What opened files from the default changelist are to be added # to this changelist. You may delete files from this list. # (New changelists only.) Change: new Client: john_bens-mbp_8487 User: john Status: new Description: Update link Files: //depot/www/live/index.html # edit ######## git author ben@straub.cc does not match your p4 account. ######## Use option --preserve-user to modify authorship. ######## Variable git-p4.skipUserNameCheck hides this message. ######## everything below this line is just the diff ####### --- //depot/www/live/index.html 2014-08-31 18:26:05.000000000 0000 +++ /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/index.html 2014-08-31 18:26:05.000000000 0000 @@ -60,7 +60,7 @@ Source and documentation for - + Jam/MR, a software build tool. ​ 除了结尾 git-p4 给我们的帮助性的提示，其它的与你运行 p4 submit 后看到的内容大多相同。 当提交或变更集需要一个名字时 git-p4 会分别尝试使用你的 Git 与 Perforce 设置，但是有些情况下你会想要覆盖默认行为。 例如，如果你正导入的提交是由没有 Perforce 用户账户的贡献者编写的，你还是会想要最终的变更集看起来像是他们写的（而不是你）。 ​ Git-p4 帮助性地将 Git 的提交注释导入到 Perforce 变更集的内容，这样所有我们必须做的就是保存并退出，两次（每次一个提交）。 这会使 shell 输出看起来像这样： $ git p4 submit Perforce checkout for depot path //depot/www/live/ located at /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/ Synchronizing p4 checkout... ... - file(s) up-to-date. Applying dbac45b Update link //depot/www/live/index.html#4 - opened for edit Change 12143 created with 1 open file(s). Submitting change 12143. Locking 1 files ... edit //depot/www/live/index.html#5 Change 12143 submitted. Applying 905ec6a Change page title //depot/www/live/index.html#5 - opened for edit Change 12144 created with 1 open file(s). Submitting change 12144. Locking 1 files ... edit //depot/www/live/index.html#6 Change 12144 submitted. All commits applied! Performing incremental import into refs/remotes/p4/master git branch Depot paths: //depot/www/live/ Import destination: refs/remotes/p4/master Importing revision 12144 (100%) Rebasing the current branch onto remotes/p4/master First, rewinding head to replay your work on top of it... $ git log --oneline --all --graph --decorate * 775a46f (HEAD, p4/master, p4/HEAD, master) Change page title * 05f1ade Update link * 75cd059 Update copyright * 70eaf78 Initial import of //depot/www/live/ from the state at revision #head ​ 结果恰如我们只是做了一次 git push，就像是应当实际发生的最接近的类比。 ​ 注意在这个过程中每一个 Git 提交都会被转化为一个 Perforce 变更集；如果想要将它们压缩成为一个单独的提交，可以在运行 git p4 submit 前进行一次交互式变基。 同样注意的是所有被转化为变更集的提交的 SHA-1 校验和都改变了；这是因为 git-p4 在每一个转化的提交增加一行到提交注释结尾： $ git log -1 commit 775a46f630d8b46535fc9983cf3ebe6b9aa53145 Author: John Doe Date: Sun Aug 31 10:31:44 2014 -0800 Change page title [git-p4: depot-paths = \"//depot/www/live/\": change = 12144] ​ 当尝试提交一次合并提交时会发生什么？ 让我们尝试一下。 这是我们可能会遇到的一种情形： $ git log --oneline --all --graph --decorate * 3be6fd8 (HEAD, master) Correct email address * 1dcbf21 Merge remote-tracking branch 'p4/master' |\\ | * c4689fc (p4/master, p4/HEAD) Grammar fix * | cbacd0a Table borders: yes please * | b4959b6 Trademark |/ * 775a46f Change page title * 05f1ade Update link * 75cd059 Update copyright * 70eaf78 Initial import of //depot/www/live/ from the state at revision #head ​ Git 与 Perforce 历史在 775a46f 后分叉了。 Git 这边有两次提交，然后一次与 Perforce 头部的合并提交，还有另一个提交。 我们将会尝试提交这些到 Perforce 那边单独的变更集之上。 让我们看看如果尝试这样提交会发生什么： $ git p4 submit -n Perforce checkout for depot path //depot/www/live/ located at /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/ Would synchronize p4 checkout in /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/ Would apply b4959b6 Trademark cbacd0a Table borders: yes please 3be6fd8 Correct email address ​ -n 标记是 --dry-run 的缩写，将会报告如果提交命令真的运行会发生什么。 这本例中，它看起来像是我们会创建三个 Perforce 变更集，对应着不在 Perforce 服务器端的三次非合并提交。 那听起来像是我们想要的，让我们看看它会如何做： $ git p4 submit […] $ git log --oneline --all --graph --decorate * dadbd89 (HEAD, p4/master, p4/HEAD, master) Correct email address * 1b79a80 Table borders: yes please * 0097235 Trademark * c4689fc Grammar fix * 775a46f Change page title * 05f1ade Update link * 75cd059 Update copyright * 70eaf78 Initial import of //depot/www/live/ from the state at revision #head ​ 我们的历史变成线性了，就像在提交前刚刚变基过（实际上也是这样）。 这意味着你可以在 Git 这边自由地创建、工作、扔掉与合并分支而不用害怕你的历史会变得与 Perforce 不兼容。 如果你可以变基它，你就可以将它贡献到 Perforce 服务器。 分支 ​ 如果你的 Perforce 项目有多个分支，你并不会不走运；git-p4 可以以一种类似 Git 的方式来处理那种情况。 假定你的 Perforce 仓库平铺的时候像这样： //depot └── project ├── main └── dev ​ 并且假定你有一个 dev 分支，有一个视图规格像下面这样： //depot/project/main/... //depot/project/dev/... ​ Git-p4 可以自动地检测到这种情形并做正确的事情： $ git p4 clone --detect-branches //depot/project@all Importing from //depot/project@all into project Initialized empty Git repository in /private/tmp/project/.git/ Importing revision 20 (50%) Importing new branch project/dev Resuming with change 20 Importing revision 22 (100%) Updated branches: main dev $ cd project; git log --oneline --all --graph --decorate * eae77ae (HEAD, p4/master, p4/HEAD, master) main | * 10d55fb (p4/project/dev) dev | * a43cfae Populate //depot/project/main/... //depot/project/dev/.... |/ * 2b83451 Project init ​ 注意在仓库路径中的 “@all” 说明符；那会告诉 git-p4 不仅仅只是克隆那个子树最新的变更集，更包括那些路径未接触的所有变更集。 这有点类似于 Git 的克隆概念，但是如果你工作在一个具有很长历史的项目，那么它会花费一段时间。 ​ --detect-branches 标记告诉 git-p4 使用 Perforce 的分支规范来映射到 Git 的引用中。 如果这些映射不在 Perforce 服务器中（使用 Perforce 的一种完美有效的方式），你可以告诉 git-p4 分支映射是什么，然后你会得到同样的结果： $ git init project Initialized empty Git repository in /tmp/project/.git/ $ cd project $ git config git-p4.branchList main:dev $ git clone --detect-branches //depot/project@all . ​ 设置 git-p4.branchList 配置选项为 main:dev 告诉 git-p4 那个 “main” 与 “dev” 都是分支，第二个是第一个的子分支。 ​ 如果我们现在运行 git checkout -b dev p4/project/dev 并且做一些提交，在运行 git p4 submit 时 git-p4 会聪明地选择正确的分支。 不幸的是，git-p4 不能混用 shallow 克隆与多个分支；如果你有一个巨型项目并且想要同时工作在不止一个分支上，可能不得不针对每一个你想要提交的分支运行一次 git p4 clone。 ​ 为了创建与整合分支，你不得不使用一个 Perforce 客户端。 Git-p4 只能同步或提交已有分支，并且它一次只能做一个线性的变更集。 如果你在 Git 中合并两个分支并尝试提交新的变更集，所有这些会被记录为一串文件修改；关于哪个分支参与的元数据在整合中会丢失。 5. Git 与 Perforce 总结 ​ Git-p4 将与 Perforce 服务器工作时使用 Git 工作流成为可能，并且它非常擅长这点。 然而，需要记住的重要一点是 Perforce 负责源头，而你只是在本地使用 Git。 在共享 Git 提交时要相当小心：如果你有一个其他人使用的远程仓库，不要在提交到 Perforce 服务器前推送任何提交。 ​ 如果想要为源码管理自由地混合使用 Perforce 与 Git 作为客户端，可以说服服务器管理员安装 Git Fusion，Git Fusion 使 Git 作为 Perforce 服务器的首级版本管理客户端。 4. Git 与 TFS ​ Git 在 Windows 开发者当中变得流行起来，如果你正在 Windows 上编写代码并且正在使用 Microsoft 的 Team Foundation Server （TFS），这会是个好机会。 TFS 是一个包含工作项目检测与跟踪、支持 Scrum 与其他流程管理方法、代码审核、版本控制的协作套件。 这里有一点困惑：TFS 是服务器，它支持通过 Git 与它们自定义的 VCS 来管理源代码，这被他们称为 TFVC（Team Foundation Version Control）。 Git 支持 TFS（自 2013 版本起）的部分新功能，所以在那之前所有工具都将版本控制部分称为 “TFS”，即使实际上他们大部分时间都在与 TFVC 工作。 ​ 如果发现你的团队在使用 TFVC 但是你更愿意使用 Git 作为版本控制客户端，这里为你准备了一个项目。 4.1 选择哪个工具 ​ 实际上，这里有两个工具：git-tf 与 git-tfs。 ​ Git-tfs （可以在 https://github.com/git-tfs/git-tfs 找到）是一个 .NET 项目，它只能运行在 Windows 上（截至文章完成时）。 为了操作 Git 仓库，它使用了 libgit2 的 .NET 绑定，一个可靠的面向库的 Git 实现，十分灵活且性能优越。 Libgit2 并不是一个完整的 Git 实现，为了弥补差距 git-tfs 实际上会调用 Git 命令行客户端来执行某些操作，因此在操作 Git 仓库时并没有任何功能限制。 因为它使用 Visual Studio 程序集对服务器进行操作，所以它对 TFVC 的支持非常成熟。 这并不意味着你需要接触那些程序集，但是意味着你需要安装 Visual Studio 的一个最近版本（2010 之后的任何版本，包括 2012 之后的 Express 版本），或者 Visual Studio SDK。 ​ Git-tf（主页在 https://gittf.codeplex.com）是一个 Java 项目，因此它可以运行在任何一个有 Java 运行时环境的电脑上。 它通过 JGit（一个 Git 的 JVM 实现）来与 Git 仓库交互，这意味着事实上它没有 Git 功能上的限制。 然而，相对于 git-tfs 它对 TFVC 的支持是有限的——例如，它不支持分支。 所以每个工具都有优点和缺点，每个工具都有它适用的情况。 我们在本书中将会介绍它们两个的基本用法。 Notes: 你需要有一个基于 TFVC 的仓库来执行后续的指令。 现实中它们并没有 Git 或 Subversion 仓库那样多，所以你可能需要创建一个你自己的仓库。 Codeplex（https://www.codeplex.com[]）或 Visual Studio Online（http://www.visualstudio.com[]）都是非常好的选择。 4.1.2 使用：git-tf ​ 和其它任何 Git 项目一样，你要做的第一件事是克隆。 使用 git-tf 克隆看起来像这样： $ git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main project_git ​ 第一个参数是一个 TFVC 集的 URL，第二个参数类似于 $/project/branch 的形式，第三个参数是将要创建的本地 Git 仓库路径（最后一项可以省略）。 Git-tf 同一时间只能工作在一个分支上；如果你想要检入一个不同的 TFVC 分支，你需要从那个分支克隆一份新的。 ​ 这会创建一个完整功能的 Git 仓库： $ cd project_git $ git log --all --oneline --decorate 512e75a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Checkin message ​ 这叫做 浅 克隆，意味着只下载了最新的变更集。 TFVC 并未设计成为每一个客户端提供一份全部历史记录的拷贝，所以 git-tf 默认行为是获得最新的版本，这样更快一些。 ​ 如果愿意多花一些时间，使用 --deep 选项克隆整个项目历史可能更有价值。 $ git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main \\ project_git --deep Username: domain\\user Password: Connecting to TFS... Cloning $/myproject into /tmp/project_git: 100%, done. Cloned 4 changesets. Cloned last changeset 35190 as d44b17a $ cd project_git $ git log --all --oneline --decorate d44b17a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Goodbye 126aa7b (tag: TFS_C35189) 8f77431 (tag: TFS_C35178) FIRST 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \\ Team Project Creation Wizard ​ 注意名字类似 TFS_C35189 的标签；这是一个帮助你知道 Git 提交与 TFVC 变更集关联的功能。 这是一种优雅的表示方式，因为通过一个简单的 log 命令就可以看到你的提交是如何与 TFVC 中已存在快照关联起来的。 它们并不是必须的（并且实际上可以使用 git config git-tf.tag false 来关闭它们）- git-tf 会在 .git/git-tf 文件中保存真正的提交与变更集的映射。 4.1.3 使用：git-tfs ​ Git-tfs 克隆行为略为不同。 观察： PS> git tfs clone --with-branches \\ https://username.visualstudio.com/DefaultCollection \\ $/project/Trunk project_git Initialized empty Git repository in C:/Users/ben/project_git/.git/ C15 = b75da1aba1ffb359d00e85c52acb261e4586b0c9 C16 = c403405f4989d73a2c3c119e79021cb2104ce44a Tfs branches found: - $/tfvc-test/featureA The name of the local branch will be : featureA C17 = d202b53f67bde32171d5078968c644e562f1c439 C18 = 44cd729d8df868a8be20438fdeeefb961958b674 ​ 注意 --with-branches 选项。 Git-tfs 能够映射 TFVC 分支到 Git 分支，这个标记告诉它为每一个 TFVC 分支建立一个本地的 Git 分支。 强烈推荐曾经在 TFS 中新建过分支或合并过分支的仓库使用这个标记，但是如果使用的服务器的版本比 TFS 2010 更老——在那个版本前，“分支”只是文件夹，所以 git-tfs 无法将它们与普通文件夹区分开。 ​ 让我们看一下最终的 Git 仓库： PS> git log --oneline --graph --decorate --all * 44cd729 (tfs/featureA, featureA) Goodbye * d202b53 Branched from $/tfvc-test/Trunk * c403405 (HEAD, tfs/default, master) Hello * b75da1a New project PS> git log -1 commit c403405f4989d73a2c3c119e79021cb2104ce44a Author: Ben Straub Date: Fri Aug 1 03:41:59 2014 +0000 Hello git-tfs-id: [https://username.visualstudio.com/DefaultCollection]$/myproject/Trunk;C16 ​ 有两个本地分支，master 与 featureA，分别代表着克隆（TFVC 中的 Trunk）与子分支（TFVC 中的 featureA）的初始状态。 也可以看到 tfs “remote” 也有一对引用：default 与 featureA，代表 TFVC 分支。 Git-tfs 映射从 tfs/default 克隆的分支，其他的会有它们自己的名字。 ​ 另一件需要注意的事情是在提交信息中的 git-tfs-id: 行。 Git-tfs 使用这些标记而不是标签来关联 TFVC 变更集与 Git 提交。 有一个潜在的问题是 Git 提交在推送到 TFVC 前后会有不同的 SHA-1 校验和。 4.1.4 Git-tf[s] 工作流程 Notes:无论你使用哪个工具，都需要先设置几个 Git 配置选项来避免一些问题。$ git config set --local core.ignorecase=true $ git config set --local core.autocrlf=false ​ 显然，接下来要做的事情就是要在项目中做一些工作。 TFVC 与 TFS 有几个功能可能会增加你的工作流程的复杂性： TFVC 无法表示特性分支，这会增加一点复杂度。 这会导致需要以 非常 不同的方式使用 TFVC 与 Git 表示的分支。 要意识到 TFVC 允许用户从服务器上“检出”文件并锁定它们，这样其他人就无法编辑了。 显然它不会阻止你在本地仓库中编辑它们，但是当推送你的修改到 TFVC 服务器时会出现问题。 TFS 有一个“封闭”检入的概念，TFS 构建-测试循环必须在检入被允许前成功完成。 这使用了 TFVC 的“shelve”功能，我们不会在这里详述。 可以通过 git-tf 手动地模拟这个功能，并且 git-tfs 提供了封闭敏感的 checkintool 命令。 ​ 出于简洁性的原因，我们这里介绍的是一种轻松的方式，回避并避免了大部分问题。 4.1.5 工作流程：git-tf ​ 假定你完成了一些工作，在 master 中做了几次 Git 提交，然后准备将你的进度共享到服务器。 这是我们的 Git 仓库： $ git log --oneline --graph --decorate --all * 4178a82 (HEAD, master) update code * 9df2ae3 update readme * d44b17a (tag: TFS_C35190, origin_tfs/tfs) Goodbye * 126aa7b (tag: TFS_C35189) * 8f77431 (tag: TFS_C35178) FIRST * 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \\ Team Project Creation Wizard ​ 我们想要拿到在 4178a82 提交的快照并将其推送到 TFVC 服务器。 先说重要的：让我们看看自从上次连接后我们的队友是否进行过改动： $ git tf fetch Username: domain\\user Password: Connecting to TFS... Fetching $/myproject at latest changeset: 100%, done. Downloaded changeset 35320 as commit 8ef06a8. Updated FETCH_HEAD. $ git log --oneline --graph --decorate --all * 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text | * 4178a82 (HEAD, master) update code | * 9df2ae3 update readme |/ * d44b17a (tag: TFS_C35190) Goodbye * 126aa7b (tag: TFS_C35189) * 8f77431 (tag: TFS_C35178) FIRST * 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \\ Team Project Creation Wizard ​ 看起来其他人也做了一些改动，现在我们有一个分叉的历史。 这就是 Git 的优势，但是我们现在有两种处理的方式： 像一名 Git 用户一样自然的生成一个合并提交（毕竟，那也是 git pull 做的），git-tf 可以通过一个简单的 git tf pull 来帮你完成。 然而，我们要注意的是，TFVC 却并不这样想，如果你推送合并提交那么你的历史在两边看起来都不一样，这会造成困惑。 其次，如果你计划将所有你的改动提交为一次变更集，这可能是最简单的选择。 变基使我们的提交历史变成直线，这意味着我们有个选项可以将我们的每一个 Git 提交转换为一个 TFVC 变更集。 因为这种方式为其他选项留下了可能，所以我们推荐你这样做；git-tf 可以很简单地通过 git tf pull --rebase 帮你达成目标。 ​ 这是你的选择。 在本例中，我们会进行变基： $ git rebase FETCH_HEAD First, rewinding head to replay your work on top of it... Applying: update readme Applying: update code $ git log --oneline --graph --decorate --all * 5a0e25e (HEAD, master) update code * 6eb3eb5 update readme * 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text * d44b17a (tag: TFS_C35190) Goodbye * 126aa7b (tag: TFS_C35189) * 8f77431 (tag: TFS_C35178) FIRST * 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \\ Team Project Creation Wizard ​ 现在我们准备好生成一个检入来推送到 TFVC 服务器上了。 Git-tf 给你一个将自上次修改（即 --shallow 选项，默认启用）以来所有的修改生成的一个单独的变更集以及为每一个 Git 提交（--deep）生成的一个新的变更集。 在本例中，我们将会创建一个变更集： $ git tf checkin -m 'Updating readme and code' Username: domain\\user Password: Connecting to TFS... Checking in to $/myproject: 100%, done. Checked commit 5a0e25e in as changeset 35348 $ git log --oneline --graph --decorate --all * 5a0e25e (HEAD, tag: TFS_C35348, origin_tfs/tfs, master) update code * 6eb3eb5 update readme * 8ef06a8 (tag: TFS_C35320) just some text * d44b17a (tag: TFS_C35190) Goodbye * 126aa7b (tag: TFS_C35189) * 8f77431 (tag: TFS_C35178) FIRST * 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \\ Team Project Creation Wizard ​ 那有一个新标签 TFS_C35348，表明 TFVC 已经存储了一个相当于 5a0e25e 提交的快照。 要重点注意的是，不是每一个 Git 提交都需要在 TFVC 中存在一个相同的副本；例如 6eb3eb5 提交，在服务器上并不存在。 ​ 这就是主要的工作流程。 有一些你需要考虑的其他注意事项： 没有分支。 Git-tf 同一时间只能从一个 TFVC 分支创建一个 Git 仓库。 协作时使用 TFVC 或 Git，而不是两者同时使用。 同一个 TFVC 仓库的不同 git-tf 克隆会有不同的 SHA-1 校验和，这会导致无尽的头痛问题。 如果你的团队的工作流程包括在 Git 中协作并定期与 TFVC 同步，只能使用其中的一个 Git 仓库连接到 TFVC。 4.1.6 工作流程：git-tfs ​ 让我们使用 git-tfs 来走一遍同样的情景。 这是我们在 Git 仓库中 master 分支上生成的几个新提交： PS> git log --oneline --graph --all --decorate * c3bd3ae (HEAD, master) update code * d85e5a2 update readme | * 44cd729 (tfs/featureA, featureA) Goodbye | * d202b53 Branched from $/tfvc-test/Trunk |/ * c403405 (tfs/default) Hello * b75da1a New project ​ 让我们看一下在我们工作时有没有人完成一些其它的工作： PS> git tfs fetch C19 = aea74a0313de0a391940c999e51c5c15c381d91d PS> git log --all --oneline --graph --decorate * aea74a0 (tfs/default) update documentation | * c3bd3ae (HEAD, master) update code | * d85e5a2 update readme |/ | * 44cd729 (tfs/featureA, featureA) Goodbye | * d202b53 Branched from $/tfvc-test/Trunk |/ * c403405 Hello * b75da1a New project ​ 是的，那说明我们的同事增加了一个新的 TFVC 变更集，显示为新的 aea74a0 提交，而 tfs/default 远程分支已经被移除了。 ​ 与 git-tf 相同，我们有两种基础选项来解决这个分叉历史问题： 通过变基来保持历史是线性的。 通过合并来保留改动。 在本例中，我们将要做一个“深”检入，也就是说每一个 Git 提交会变成一个 TFVC 变更集，所以我们想要变基。 PS> git rebase tfs/default First, rewinding head to replay your work on top of it... Applying: update readme Applying: update code PS> git log --all --oneline --graph --decorate * 10a75ac (HEAD, master) update code * 5cec4ab update readme * aea74a0 (tfs/default) update documentation | * 44cd729 (tfs/featureA, featureA) Goodbye | * d202b53 Branched from $/tfvc-test/Trunk |/ * c403405 Hello * b75da1a New project ​ 现在已经准备好通过检入我们的代码到 TFVC 服务器来完成贡献。 我们这里将会使用 rcheckin 命令将 HEAD 到第一个 tfs 远程分支间的每一个 Git 提交转换为一个 TFVC 变更集（checkin 命令只会创建一个变更集，有些类似于压缩 Git 提交）。 PS> git tfs rcheckin Working with tfs remote: default Fetching changes from TFS to minimize possibility of late conflict... Starting checkin of 5cec4ab4 'update readme' add README.md C20 = 71a5ddce274c19f8fdc322b4f165d93d89121017 Done with 5cec4ab4b213c354341f66c80cd650ab98dcf1ed, rebasing tail onto new TFS-commit... Rebase done successfully. Starting checkin of b1bf0f99 'update code' edit .git\\tfs\\default\\workspace\\ConsoleApplication1/ConsoleApplication1/Program.cs C21 = ff04e7c35dfbe6a8f94e782bf5e0031cee8d103b Done with b1bf0f9977b2d48bad611ed4a03d3738df05ea5d, rebasing tail onto new TFS-commit... Rebase done successfully. No more to rcheckin. PS> git log --all --oneline --graph --decorate * ff04e7c (HEAD, tfs/default, master) update code * 71a5ddc update readme * aea74a0 update documentation | * 44cd729 (tfs/featureA, featureA) Goodbye | * d202b53 Branched from $/tfvc-test/Trunk |/ * c403405 Hello * b75da1a New project ​ 注意在每次成功检入到 TFVC 服务器后，git-tfs 是如何将剩余的工作变基到服务器上。 这是因为它将 git-tfs-id 属性加入到提交信息的底部，这将会改变 SHA-1 校验和。 这恰恰是有意设计的，没有什么事情可以担心了，但是你应该意识到发生了什么，特别是当你想要与其他人共享 Git 提交时。 ​ TFS 有许多与它的版本管理系统整合的功能，比如工作项目、指定审核者、封闭检入等等。 仅仅通过命令行工具使用这些功能来工作是很笨重的，但是幸运的是 git-tfs 允许你轻松地运行一个图形化的检入工具： PS> git tfs checkintool PS> git tfs ct ​ 它看起来有点像这样： git-tfs 检入工具。 ​ 对 TFS 用户来说这看起来很熟悉，因为它就是从 Visual Studio 中运行的同一个窗口。 ​ Git-tfs 同样允许你从你的 Git 仓库控制 TFVC 分支。 如同这个例子，让我们创建一个： PS> git tfs branch $/tfvc-test/featureBee The name of the local branch will be : featureBee C26 = 1d54865c397608c004a2cadce7296f5edc22a7e5 PS> git log --oneline --graph --decorate --all * 1d54865 (tfs/featureBee) Creation branch $/myproject/featureBee * ff04e7c (HEAD, tfs/default, master) update code * 71a5ddc update readme * aea74a0 update documentation | * 44cd729 (tfs/featureA, featureA) Goodbye | * d202b53 Branched from $/tfvc-test/Trunk |/ * c403405 Hello * b75da1a New project ​ 在 TFVC 中创建一个分支意味着增加一个使分支存在的变更集，这会映射为一个 Git 提交。 也要注意的是 git-tfs 创建 了 tfs/featureBee 远程分支，但是 HEAD 始终指向 master。 如果你想要在新生成的分支上工作，那你也许应该通过从那次提交创建一个特性分支的方式使你新的提交基于 1d54865 提交。 4.1.7 Git 与 TFS 总结 ​ Git-tf 与 Git-tfs 都是与 TFVC 服务器交互的很好的工具。 它们允许你在本地使用 Git 的能力，避免与中央 TFVC 服务器频繁交流，使你做为一个开发者的生活更轻松，而不用强制整个团队迁移到 Git。 如果你在 Windows 上工作（那很有可能你的团队正在使用 TFS），你可能会想要使用 git-tfs，因为它的功能更完整，但是如果你在其他平台工作，你只能使用略有限制的 git-tf。 像本章中大多数工具一样，你应当使用其中的一个版本系统作为主要的，而使用另一个做为次要的——不管是 Git 还是 TFVC 都可以做为协作中心，但不是两者都用。 5. 迁移到 Git ​ 如果你现在有一个正在使用其他 VCS 的代码库，但是你已经决定开始使用 Git，必须通过某种方式将你的项目迁移至 Git。 这一部分会介绍一些通用系统的导入器，然后演示如何开发你自己定制的导入器。 你将会学习如何从几个大型专业应用的 SCM 系统中导入数据，不仅因为它们是大多数想要转换的用户正在使用的系统，也因为获取针对它们的高质量工具很容易。 5.1 Subversion ​ 如果你阅读过前面关于 git svn 的章节，可以轻松地使用那些指令来 git svn clone 一个仓库，停止使用 Subversion 服务器，推送到一个新的 Git 服务器，然后就可以开始使用了。 如果你想要历史，可以从 Subversion 服务器上尽可能快地拉取数据来完成这件事（这可能会花费一些时间）。 ​ 然而，导入并不完美；因为花费太长时间了，你可能早已用其他方法完成导入操作。 导入产生的第一个问题就是作者信息。 在 Subversion 中，每一个人提交时都需要在系统中有一个用户，它会被记录在提交信息内。 在之前章节的例子中几个地方显示了 schacon，比如 blame 输出与 git svn log。 如果想要将上面的 Subversion 用户映射到一个更好的 Git 作者数据中，你需要一个 Subversion 用户到 Git 用户的映射。 创建一个 users.txt 的文件包含像下面这种格式的映射： schacon = Scott Chacon selse = Someo Nelse ​ 为了获得 SVN 使用的作者名字列表，可以运行这个： $ svn log --xml | grep author | sort -u | \\ perl -pe 's/.*>(.*?) ​ 这会将日志输出为 XML 格式，然后保留作者信息行、去除重复、去除 XML 标记。 （很显然这只会在安装了 grep、sort 与 perl 的机器上运行。） 然后，将输出重定向到你的 users.txt 文件中，这样就可以在每一个记录后面加入对应的 Git 用户数据。 ​ 你可以将此文件提供给 git svn 来帮助它更加精确地映射作者数据。 也可以通过传递 --no-metadata 给 clone 与 init 命令，告诉 git svn 不要包括 Subversion 通常会导入的元数据。 这会使你的 import 命令看起来像这样： $ git svn clone http://my-project.googlecode.com/svn/ \\ --authors-file=users.txt --no-metadata -s my_project ​ 现在在 my_project 目录中应当有了一个更好的 Subversion 导入。 并不像是下面这样的提交： commit 37efa680e8473b615de980fa935944215428a35a Author: schacon Date: Sun May 3 00:12:22 2009 +0000 fixed install - go to trunk git-svn-id: https://my-project.googlecode.com/svn/trunk@94 4c93b258-373f-11de- be05-5f7a86268029 ​ 反而它们看起来像是这样： commit 03a8785f44c8ea5cdb0e8834b7c8e6c469be2ff2 Author: Scott Chacon Date: Sun May 3 00:12:22 2009 +0000 fixed install - go to trunk ​ 不仅是 Author 字段更好看了，git-svn-id 也不在了。 ​ 之后，你应当做一些导入后的清理工作。 第一步，你应当清理 git svn 设置的奇怪的引用。 首先移动标签，这样它们就是标签而不是奇怪的远程引用，然后你会移动剩余的分支这样它们就是本地的了。 ​ 为了将标签变为合适的 Git 标签，运行 $ cp -Rf .git/refs/remotes/origin/tags/* .git/refs/tags/ $ rm -Rf .git/refs/remotes/origin/tags ​ 这会使原来在 remotes/origin/tags/ 里的远程分支引用变成真正的（轻量）标签。 ​ 接下来，将 refs/remotes 下剩余的引用移动为本地分支： $ cp -Rf .git/refs/remotes/* .git/refs/heads/ $ rm -Rf .git/refs/remotes ​ 现在所有的旧分支都是真正的 Git 分支，并且所有的旧标签都是真正的 Git 标签。 最后一件要做的事情是，将你的新 Git 服务器添加为远程仓库并推送到上面。 下面是一个将你的服务器添加为远程仓库的例子： $ git remote add origin git@my-git-server:myrepository.git ​ 因为想要上传所有分支与标签，你现在可以运行： $ git push origin --all ​ 通过以上漂亮、干净地导入操作，你的所有分支与标签都应该在新 Git 服务器上。 5.2 Mercurial ​ 因为 Mercurial 与 Git 在表示版本时有着非常相似的模型，也因为 Git 拥有更加强大的灵活性，将一个仓库从 Mercurial 转换到 Git 是相当直接的，使用一个叫作“hg-fast-export”的工具，需要从这里拷贝一份： $ git clone http://repo.or.cz/r/fast-export.git /tmp/fast-export ​ 转换的第一步就是要先得到想要转换的 Mercurial 仓库的完整克隆： $ hg clone /tmp/hg-repo ​ 下一步就是创建一个作者映射文件。 Mercurial 对放入到变更集作者字段的内容比 Git 更宽容一些，所以这是一个清理的好机会。 只需要用到 bash 终端下的一行命令： $ cd /tmp/hg-repo $ hg log | grep user: | sort | uniq | sed 's/user: *//' > ../authors ​ 这会花费几秒钟，具体要看项目提交历史有多少，最终 /tmp/authors 文件看起来会像这样： bob bob@localhost bob bob jones company com> Bob Jones Joe Smith ​ 在这个例子中，同一个人（Bob）使用不同的名字创建变更集，其中一个实际上是正确的，另一个完全不符合 Git 提交的规范。 Hg-fast-export 通过向我们想要修改的行尾添加 ={new name and email address} 来修正这个问题，移除任何我们想要保留的用户名所在的行。 如果所有的用户名看起来都是正确的，那我们根本就不需要这个文件。 在本例中，我们会使文件看起来像这样： bob=Bob Jones bob@localhost=Bob Jones bob jones company com>=Bob Jones bob =Bob Jones ​ 下一步是创建一个新的 Git 仓库，然后运行导出脚本： $ git init /tmp/converted $ cd /tmp/converted $ /tmp/fast-export/hg-fast-export.sh -r /tmp/hg-repo -A /tmp/authors ​ -r 选项告诉 hg-fast-export 去哪里寻找我们想要转换的 Mercurial 仓库，-A 标记告诉它在哪找到作者映射文件。 这个脚本会分析 Mercurial 变更集然后将它们转换成 Git“fast-import”功能（我们将在之后详细讨论）需要的脚本。 这会花一点时间（尽管它比通过网格 更 快），输出相当的冗长： $ /tmp/fast-export/hg-fast-export.sh -r /tmp/hg-repo -A /tmp/authors Loaded 4 authors master: Exporting full revision 1/22208 with 13/0/0 added/changed/removed files master: Exporting simple delta revision 2/22208 with 1/1/0 added/changed/removed files master: Exporting simple delta revision 3/22208 with 0/1/0 added/changed/removed files […] master: Exporting simple delta revision 22206/22208 with 0/4/0 added/changed/removed files master: Exporting simple delta revision 22207/22208 with 0/2/0 added/changed/removed files master: Exporting thorough delta revision 22208/22208 with 3/213/0 added/changed/removed files Exporting tag [0.4c] at [hg r9] [git :10] Exporting tag [0.4d] at [hg r16] [git :17] […] Exporting tag [3.1-rc] at [hg r21926] [git :21927] Exporting tag [3.1] at [hg r21973] [git :21974] Issued 22315 commands git-fast-import statistics: --------------------------------------------------------------------- Alloc'd objects: 120000 Total objects: 115032 ( 208171 duplicates ) blobs : 40504 ( 205320 duplicates 26117 deltas of 39602 attempts) trees : 52320 ( 2851 duplicates 47467 deltas of 47599 attempts) commits: 22208 ( 0 duplicates 0 deltas of 0 attempts) tags : 0 ( 0 duplicates 0 deltas of 0 attempts) Total branches: 109 ( 2 loads ) marks: 1048576 ( 22208 unique ) atoms: 1952 Memory total: 7860 KiB pools: 2235 KiB objects: 5625 KiB --------------------------------------------------------------------- pack_report: getpagesize() = 4096 pack_report: core.packedGitWindowSize = 1073741824 pack_report: core.packedGitLimit = 8589934592 pack_report: pack_used_ctr = 90430 pack_report: pack_mmap_calls = 46771 pack_report: pack_open_windows = 1 / 1 pack_report: pack_mapped = 340852700 / 340852700 --------------------------------------------------------------------- $ git shortlog -sn 369 Bob Jones 365 Joe Smith ​ 那看起来非常好。 所有 Mercurial 标签都已被转换成 Git 标签，Mercurial 分支与书签都被转换成 Git 分支。 现在已经准备好将仓库推送到新的服务器那边： $ git remote add origin git@my-git-server:myrepository.git $ git push origin --all 5.3 Perforce ​ 下一个将要看到导入的系统是 Perforce。 就像我们之前讨论过的，有两种方式让 Git 与 Perforce 互相通信：git-p4 与 Perforce Git Fusion。 5.3.1 Perforce Git Fusion ​ Git Fusion 使这个过程毫无痛苦。 只需要使用在 [Git Fusion]中讨论过的配置文件来配置你的项目设置、用户映射与分支，然后克隆整个仓库。 Git Fusion 让你处在一个看起来像是原生 Git 仓库的环境中，如果愿意的话你可以随时将它推送到一个原生 Git 托管中。 如果你喜欢的话甚至可以使用 Perforce 作为你的 Git 托管。 5.3.2 Git-p4 ​ Git-p4 也可以作为一个导入工具。 作为例子，我们将从 Perforce 公开仓库中导入 Jam 项目。 为了设置客户端，必须导出 P4PORT 环境变量指向 Perforce 仓库： $ export P4PORT=public.perforce.com:1666 Notes:为了继续后续步骤，需要连接到 Perforce 仓库。 在我们的例子中将会使用在 public.perforce.com 的公开仓库，但是你可以使用任何你有权限的仓库。 ​ 运行 git p4 clone 命令从 Perforce 服务器导入 Jam 项目，提供仓库、项目路径与你想要存放导入项目的路径： $ git-p4 clone //guest/perforce_software/jam@all p4import Importing from //guest/perforce_software/jam@all into p4import Initialized empty Git repository in /private/tmp/p4import/.git/ Import destination: refs/remotes/p4/master Importing revision 9957 (100%) ​ 这个特定的项目只有一个分支，但是如果你在分支视图（或者说一些目录）中配置了一些分支，你可以将 --detect-branches 选项传递给 git p4 clone 来导入项目的所有分支。 查看 分支 来了解关于这点的更多信息。 ​ 此时你几乎已经完成了。 如果进入 p4import 目录中并运行 git log，可以看到你的导入工作： $ git log -2 commit e5da1c909e5db3036475419f6379f2c73710c4e6 Author: giles Date: Wed Feb 8 03:13:27 2012 -0800 Correction to line 355; change to . [git-p4: depot-paths = \"//public/jam/src/\": change = 8068] commit aa21359a0a135dda85c50a7f7cf249e4f7b8fd98 Author: kwirth Date: Tue Jul 7 01:35:51 2009 -0800 Fix spelling error on Jam doc page (cummulative -> cumulative). [git-p4: depot-paths = \"//public/jam/src/\": change = 7304] ​ 你可以看到 git-p4 在每一个提交里都留下了一个标识符。 如果之后想要引用 Perforce 的修改序号的话，标识符保留在那里也是可以的。 然而，如果想要移除标识符，现在正是这么做的时候——在你开始在新仓库中工作之前。 可以使用 git filter-branch 将全部标识符移除。 $ git filter-branch --msg-filter 'sed -e \"/^\\[git-p4:/d\"' Rewrite e5da1c909e5db3036475419f6379f2c73710c4e6 (125/125) Ref 'refs/heads/master' was rewritten ​ 如果运行 git log，你会看到所有提交的 SHA-1 校验和都改变了，但是提交信息中不再有 git-p4 字符串了： $ git log -2 commit b17341801ed838d97f7800a54a6f9b95750839b7 Author: giles Date: Wed Feb 8 03:13:27 2012 -0800 Correction to line 355; change to . commit 3e68c2e26cd89cb983eb52c024ecdfba1d6b3fff Author: kwirth Date: Tue Jul 7 01:35:51 2009 -0800 Fix spelling error on Jam doc page (cummulative -> cumulative). ​ 现在导入已经准备好推送到你的新 Git 服务器上了。 5.4 TFS ​ 如果你的团队正在将他们的源代码管理从 TFVC 转换为 Git，你们会想要最高程度的无损转换。 这意味着，虽然我们在之前的交互章节介绍了 git-tfs 与 git-tf 两种工具，但是我们在本部分只能介绍 git-tfs，因为 git-tfs 支持分支，而使用 git-tf 代价太大。 Notes:这是一个单向转换。 这意味着 Git 仓库无法连接到原始的 TFVC 项目。 ​ 第一件事是映射用户名。 TFVC 对待变更集作者字段的内容相当宽容，但是 Git 需要人类可读的名字与邮箱地址。 可以通过 tf 命令行客户端来获取这个信息，像这样： PS> tf history $/myproject -recursive > AUTHORS_TMP ​ 这会将历史中的所有变更集抓取下来并放到 AUTHORS_TMP 文件中，然后我们将会将 User 列（第二个）取出来。 打开文件找到列开始与结束的字符并替换，在下面的命令行中，cut 命令的参数 11-20 就是我们找到的： PS> cat AUTHORS_TMP | cut -b 11-20 | tail -n+3 | uniq | sort > AUTHORS ​ cut 命令只会保留每行中第 11 个到第 22 个字符。 tail 命令会跳过前两行，就是字段表头与 ASCII 风格的下划线。 所有这些的结果通过管道送到 uniq 来去除重复，然后保存到 AUTOHRS 文件中。 下一步是手动的；为了让 git-tfs 有效地使用这个文件，每一行必须是这种格式： DOMAIN\\username = User Name ​ 左边的部分是 TFVC 中的 “User” 字段，等号右边的部分是将被用作 Git 提交的用户名。 ​ 一旦有了这个文件，下一件事就是生成一个你需要的 TFVC 项目的完整克隆： PS> git tfs clone --with-branches --authors=AUTHORS https://username.visualstudio.com/DefaultCollection $/project/Trunk project_git ​ 接下来要从提交信息底部清理 git-tfs-id 区块。 下面的命令会完成这个任务： PS> git filter-branch -f --msg-filter 'sed \"s/^git-tfs-id:.*$//g\"' -- --all ​ 那会使用 Git 终端环境中的 sed 命令来将所有以 “git-tfs-id:” 开头的行替换为 Git 会忽略的空白。 ​ 全部完成后，你就已经准备好去增加一个新的远程仓库，推送你所有的分支上去，然后你的团队就可以开始用 Git 工作了。 5.5 一个自定义的导入器 ​ 如果你的系统不是上述中的任何一个，你需要在线查找一个导入器——针对许多其他系统有很多高质量的导入器，包括 CVS、Clear Case、Visual Source Safe，甚至是一个档案目录。 如果没有一个工具适合你，需要一个不知名的工具，或者需要更大自由度的自定义导入过程，应当使用 git fast-import。 这个命令从标准输入中读取简单指令来写入特定的 Git 数据。 通过这种方式创建 Git 对象比运行原始 Git 命令或直接写入原始对象（查看 [Git 内部原理]了解更多内容）更容易些。 通过这种方式你可以编写导入脚本，从你要导入的系统中读取必要数据，然后直接打印指令到标准输出。 然后可以运行这个程序并通过 git fast-import 重定向管道输出。 ​ 为了快速演示，我们会写一个简单的导入器。 假设你在 current 工作，有时候会备份你的项目到时间标签 back_YYYY_MM_DD 备份目录中，你想要将这些导入到 Git 中。 目录结构看起来是这样： $ ls /opt/import_from back_2014_01_02 back_2014_01_04 back_2014_01_14 back_2014_02_03 current ​ 为了导入一个 Git 目录，需要了解 Git 如何存储它的数据。 你可能记得，Git 在底层存储指向内容快照的提交对象的链表。 所有要做的就是告诉 fast-import 哪些内容是快照，哪个提交数据指向它们，以及它们进入的顺序。 你的策略是一次访问一个快照，然后用每个目录中的内容创建提交，并且将每一个提交与前一个连接起来。 ​ 如同我们在 [使用强制策略的一个例子] 里做的，我们将会使用 Ruby 写这个，因为它是我们平常工作中使用的并且它很容易读懂。 可以使用任何你熟悉的东西来非常轻松地写这个例子——它只需要将合适的信息打印到 标准输出。 然而，如果你在 Windows 上，这意味着需要特别注意不要引入回车符到行尾—— git fast-import 非常特别地只接受换行符（LF）而不是 Windows 使用的回车换行符（CRLF）。 ​ 现在开始，需要进入目标目录中并识别每一个子目录，每一个都是你要导入为提交的快照。 要进入到每个子目录中并为导出它打印必要的命令。 基本主循环像这个样子： last_mark = nil # loop through the directories Dir.chdir(ARGV[0]) do Dir.glob(\"*\").each do |dir| next if File.file?(dir) # move into the target directory Dir.chdir(dir) do last_mark = print_export(dir, last_mark) end end end ​ 在每个目录内运行 print_export，将会拿到清单并标记之前的快照，然后返回清单并标记现在的快照；通过这种方式，可以将它们合适地连接在一起。 “标记”是一个给提交标识符的 fast-import 术语；当你创建提交，为每一个提交赋予一个标记来将它与其他提交连接在一起。 这样，在你的 print_export 方法中第一件要做的事就是从目录名字生成一个标记： mark = convert_dir_to_mark(dir) ​ 可以创建一个目录的数组并使用索引做为标记，因为标记必须是一个整数。 方法类似这样： $marks = [] def convert_dir_to_mark(dir) if !$marks.include?(dir) $marks ​ 既然有一个整数代表你的提交，那还要给提交元数据一个日期。 因为目录名字表达了日期，所以你将会从中解析出日期。 你的 print_export 文件的下一行是 date = convert_dir_to_date(dir) ​ convert_dir_to_date 定义为 def convert_dir_to_date(dir) if dir == 'current' return Time.now().to_i else dir = dir.gsub('back_', '') (year, month, day) = dir.split('_') return Time.local(year, month, day).to_i end end ​ 那会返回每一个目录日期的整数。 最后一项每个提交需要的元数据是提交者信息，它将会被硬编码在全局变量中： $author = 'John Doe ' ​ 现在准备开始为你的导入器打印出提交数据。 初始信息声明定义了一个提交对象与它所在的分支，紧接着一个你生成的标记、提交者信息与提交信息、然后是一个之前的提交，如果它存在的话。 代码看起来像这样： # print the import information puts 'commit refs/heads/master' puts 'mark :' + mark puts \"committer #{$author} #{date} -0700\" export_data('imported from ' + dir) puts 'from :' + last_mark if last_mark ​ 我们将硬编码时区信息（-0700），因为这样很容易。 如果从其他系统导入，必须指定为一个偏移的时区。 提交信息必须指定为特殊的格式： data (size)\\n(contents) ​ 这个格式包括文本数据、将要读取数据的大小、一个换行符、最终的数据。 因为之后还需要为文件内容指定相同的数据格式，你需要创建一个帮助函数，export_data： def export_data(string) print \"data #{string.size}\\n#{string}\" end ​ 剩下的工作就是指定每一个快照的文件内容。 这很轻松，因为每一个目录都是一个快照——可以在目录中的每一个文件内容后打印 deleteall 命令。 Git 将会适当地记录每一个快照： puts 'deleteall' Dir.glob(\"**/*\").each do |file| next if !File.file?(file) inline_data(file) end 注意：因为大多数系统认为他们的版本是从一个提交变化到另一个提交，fast-import 也可以为每一个提交执行命令来指定哪些文件是添加的、删除的或修改的与新内容是哪些。 可以计算快照间的不同并只提供这些数据，但是这样做会很复杂——也可以把所有数据给 Git 然后让它为你指出来。 如果这更适合你的数据，查阅 fast-import man 帮助页来了解如何以这种方式提供你的数据。 ​ 这种列出新文件内容或用新内容指定修改文件的格式如同下面的内容： M 644 inline path/to/file data (size) (file contents) ​ 这里，644 是模式（如果你有可执行文件，反而你需要检测并指定 755），inline 表示将会立即把内容放在本行之后。 你的 inline_data 方法看起来像这样： def inline_data(file, code = 'M', mode = '644') content = File.read(file) puts \"#{code} #{mode} inline #{file}\" export_data(content) end ​ 可以重用之前定义的 export_data 方法，因为它与你定义的提交信息数据的方法一样。 最后一件你需要做的是返回当前的标记以便它可以传给下一个迭代： return mark Notes:如果在 Windows 上还需要确保增加一个额外步骤。 正如之前提到的，Windows 使用 CRLF 作为换行符而 git fast-import 只接受 LF。 为了修正这个问题使 git fast-import 正常工作，你需要告诉 ruby 使用 LF 代替 CRLF：$stdout.binmode ​ 就是这样。 这是全部的脚本： #!/usr/bin/env ruby $stdout.binmode $author = \"John Doe \" $marks = [] def convert_dir_to_mark(dir) if !$marks.include?(dir) $marks ​ 如果运行这个脚本，你会得到类似下面的内容： $ ruby import.rb /opt/import_from commit refs/heads/master mark :1 committer John Doe 1388649600 -0700 data 29 imported from back_2014_01_02deleteall M 644 inline README.md data 28 # Hello This is my readme. commit refs/heads/master mark :2 committer John Doe 1388822400 -0700 data 29 imported from back_2014_01_04from :1 deleteall M 644 inline main.rb data 34 #!/bin/env ruby puts \"Hey there\" M 644 inline README.md (...) ​ 为了运行导入器，将这些输出用管道重定向到你想要导入的 Git 目录中的 git fast-import。 可以创建一个新的目录并在其中运行 git init 作为开始，然后运行你的脚本： $ git init Initialized empty Git repository in /opt/import_to/.git/ $ ruby import.rb /opt/import_from | git fast-import git-fast-import statistics: --------------------------------------------------------------------- Alloc'd objects: 5000 Total objects: 13 ( 6 duplicates ) blobs : 5 ( 4 duplicates 3 deltas of 5 attempts) trees : 4 ( 1 duplicates 0 deltas of 4 attempts) commits: 4 ( 1 duplicates 0 deltas of 0 attempts) tags : 0 ( 0 duplicates 0 deltas of 0 attempts) Total branches: 1 ( 1 loads ) marks: 1024 ( 5 unique ) atoms: 2 Memory total: 2344 KiB pools: 2110 KiB objects: 234 KiB --------------------------------------------------------------------- pack_report: getpagesize() = 4096 pack_report: core.packedGitWindowSize = 1073741824 pack_report: core.packedGitLimit = 8589934592 pack_report: pack_used_ctr = 10 pack_report: pack_mmap_calls = 5 pack_report: pack_open_windows = 2 / 2 pack_report: pack_mapped = 1457 / 1457 --------------------------------------------------------------------- ​ 正如你所看到的，当它成功完成时，它会给你一串关于它完成内容的统计。 这本例中，一共导入了 13 个对象、4 次提交到 1 个分支。 现在，可以运行 git log 来看一下你的新历史： $ git log -2 commit 3caa046d4aac682a55867132ccdfbe0d3fdee498 Author: John Doe Date: Tue Jul 29 19:39:04 2014 -0700 imported from current commit 4afc2b945d0d3c8cd00556fbe2e8224569dc9def Author: John Doe Date: Mon Feb 3 01:00:00 2014 -0700 imported from back_2014_02_03 ​ 做得很好——一个漂亮、干净的 Git 仓库。 要注意的一点是并没有检出任何东西——一开始你的工作目录内并没有任何文件。 为了得到他们，你必须将分支重置到 master 所在的地方： $ ls $ git reset --hard master HEAD is now at 3caa046 imported from current $ ls README.md main.rb ​ 可以通过 fast-import 工具做很多事情——处理不同模式、二进制数据、多个分支与合并、标签、进度指示等等。 一些更复杂情形下的例子可以在 Git 源代码目录中的 contrib/fast-import 目录中找到。 6. 总结 ​ 你会觉得将 Git 作为其他版本控制系统的客户端，或者在数据无损的情况下将几乎任何一个现有的仓库导入到 Git，都是一件很惬意的事。 在下一章，我们将要讲解 Git 的原始内部数据，如果需要的话你就可以加工每一个字节。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Git/Chapter11.html":{"url":"Git/Chapter11.html","title":"第十一章：Git内部原理","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 底层命令和高层命令 2. Git 对象 2.1 树对象 2.2 提交对象 2.3 对象存储 3. Git 引用 3.1 HEAD 引用 3.2 标签引用 3.3 远程引用 4. 包文件 5. 引用规格 5.1 引用规格推送 5.2 删除引用 6. 传输协议 6.1 哑协议 6.2 智能协议 6.2.1 上传数据 SSH HTTP(S) 6.2.2 下载数据 SSH HTTP(S) 6.3 协议总结 7. 维护与数据恢复 7.1 维护 7.2 数据恢复 7.3 移除对象 8. 环境变量 8.1 全局行为 8.2 版本库位置 8.3 路径规则 8.4 提交 8.5 网络 8.6 比较和合并 8.7 调试 8.8 其它 9. 总结 第十一章：Git内部原理 ​ 无论是从之前的章节直接跳到本章，还是读完了其余章节一直到这——你都将在本章见识到 Git 的内部工作原理和实现方式。 我们发现学习这部分内容对于理解 Git 的用途和强大至关重要。不过也有人认为这些内容对于初学者而言可能难以理解且过于复杂。 因此我们把这部分内容放在最后一章，在学习过程中可以先阅读这部分，也可以晚点阅读这部分，这取决于你自己。 ​ 无论如何，既然已经读到了这里，就让我们开始吧。 首先要弄明白一点，从根本上来讲 Git 是一个内容寻址（content-addressable）文件系统，并在此之上提供了一个版本控制系统的用户界面。 马上你就会学到这意味着什么。 ​ 早期的 Git（主要是 1.5 之前的版本）的用户界面要比现在复杂的多，因为它更侧重于作为一个文件系统，而不是一个打磨过的版本控制系统。 不时会有一些陈词滥调抱怨早期那个晦涩复杂的 Git 用户界面；不过最近几年来，它已经被改进到不输于任何其他版本控制系统地清晰易用了。 ​ 内容寻址文件系统层是一套相当酷的东西，所以在本章我们会先讲解这部分内容。随后我们会学习传输机制和版本库管理任务——你迟早会和它们打交道。 1. 底层命令和高层命令 ​ 本书旨在讨论如何通过 checkout、branch、remote 等大约 30 个诸如此类动词形式的命令来玩转 Git。 然而，由于 Git 最初是一套面向版本控制系统的工具集，而不是一个完整的、用户友好的版本控制系统，所以它还包含了一部分用于完成底层工作的命令。 这些命令被设计成能以 UNIX 命令行的风格连接在一起，抑或藉由脚本调用，来完成工作。 这部分命令一般被称作“底层（plumbing）”命令，而那些更友好的命令则被称作“高层（porcelain）”命令。 ​ 本书前几章专注于探讨高层命令。 然而在本章，我们将主要面对底层命令。 因为，底层命令得以让你窥探 Git 内部的工作机制，也有助于说明 Git 是如何完成工作的，以及它为何如此运作。 多数底层命令并不面向最终用户：它们更适合作为新命令和自定义脚本的组成部分。 ​ 当在一个新目录或已有目录执行 git init 时，Git 会创建一个 .git 目录。 这个目录包含了几乎所有 Git 存储和操作的对象。 如若想备份或复制一个版本库，只需把这个目录拷贝至另一处即可。 本章探讨的所有内容，均位于这个目录内。 该目录的结构如下所示： $ ls -F1 HEAD config* description hooks/ info/ objects/ refs/ ​ 该目录下可能还会包含其他文件，不过对于一个全新的 git init 版本库，这将是你看到的默认结构。 description 文件仅供 GitWeb 程序使用，我们无需关心。 config 文件包含项目特有的配置选项。 info 目录包含一个全局性排除（global exclude）文件，用以放置那些不希望被记录在 .gitignore 文件中的忽略模式（ignored patterns）。 hooks 目录包含客户端或服务端的钩子脚本（hook scripts），在 [Git 钩子] 中这部分话题已被详细探讨过。 ​ 剩下的四个条目很重要：HEAD 文件、（尚待创建的）index 文件，和 objects 目录、refs 目录。 这些条目是 Git 的核心组成部分。 objects 目录存储所有数据内容；refs 目录存储指向数据（分支）的提交对象的指针；HEAD 文件指示目前被检出的分支；index 文件保存暂存区信息。 我们将详细地逐一检视这四部分，以期理解 Git 是如何运转的。 2. Git 对象 ​ Git 是一个内容寻址文件系统。 看起来很酷， 但这是什么意思呢？ 这意味着，Git 的核心部分是一个简单的键值对数据库（key-value data store）。 你可以向该数据库插入任意类型的内容，它会返回一个键值，通过该键值可以在任意时刻再次检索（retrieve）该内容。 可以通过底层命令 hash-object 来演示上述效果——该命令可将任意数据保存于 .git 目录，并返回相应的键值。 首先，我们需要初始化一个新的 Git 版本库，并确认 objects 目录为空： $ git init test Initialized empty Git repository in /tmp/test/.git/ $ cd test $ find .git/objects .git/objects .git/objects/info .git/objects/pack $ find .git/objects -type f ​ 可以看到 Git 对 objects 目录进行了初始化，并创建了 pack 和 info 子目录，但均为空。 接着，往 Git 数据库存入一些文本： $ echo 'test content' | git hash-object -w --stdin d670460b4b4aece5915caf5c68d12f560a9fe3e4 ​ -w 选项指示 hash-object 命令存储数据对象；若不指定此选项，则该命令仅返回对应的键值。 --stdin 选项则指示该命令从标准输入读取内容；若不指定此选项，则须在命令尾部给出待存储文件的路径。 该命令输出一个长度为 40 个字符的校验和。 这是一个 SHA-1 哈希值——一个将待存储的数据外加一个头部信息（header）一起做 SHA-1 校验运算而得的校验和。后文会简要讨论该头部信息。 现在我们可以查看 Git 是如何存储数据的： $ find .git/objects -type f .git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 ​ 可以在 objects 目录下看到一个文件。 这就是开始时 Git 存储内容的方式——一个文件对应一条内容，以该内容加上特定头部信息一起的 SHA-1 校验和为文件命名。 校验和的前两个字符用于命名子目录，余下的 38 个字符则用作文件名。 ​ 可以通过 cat-file 命令从 Git 那里取回数据。 这个命令简直就是一把剖析 Git 对象的瑞士军刀。 为 cat-file 指定 -p 选项可指示该命令自动判断内容的类型，并为我们显示格式友好的内容： $ git cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4 test content ​ 至此，你已经掌握了如何向 Git 中存入内容，以及如何将它们取出。 我们同样可以将这些操作应用于文件中的内容。 例如，可以对一个文件进行简单的版本控制。 首先，创建一个新文件并将其内容存入数据库： $ echo 'version 1' > test.txt $ git hash-object -w test.txt 83baae61804e65cc73a7201a7252750c76066a30 ​ 接着，向文件里写入新内容，并再次将其存入数据库： $ echo 'version 2' > test.txt $ git hash-object -w test.txt 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a ​ 数据库记录下了该文件的两个不同版本，当然之前我们存入的第一条内容也还在： $ find .git/objects -type f .git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a .git/objects/83/baae61804e65cc73a7201a7252750c76066a30 .git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 ​ 现在可以把文件内容恢复到第一个版本： $ git cat-file -p 83baae61804e65cc73a7201a7252750c76066a30 > test.txt $ cat test.txt version 1 ​ 或者第二个版本： $ git cat-file -p 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a > test.txt $ cat test.txt version 2 ​ 然而，记住文件的每一个版本所对应的 SHA-1 值并不现实；另一个问题是，在这个（简单的版本控制）系统中，文件名并没有被保存——我们仅保存了文件的内容。 上述类型的对象我们称之为数据对象（blob object）。 利用 cat-file -t 命令，可以让 Git 告诉我们其内部存储的任何对象类型，只要给定该对象的 SHA-1 值： $ git cat-file -t 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a blob 2.1 树对象 ​ 接下来要探讨的对象类型是树对象（tree object），它能解决文件名保存的问题，也允许我们将多个文件组织到一起。 Git 以一种类似于 UNIX 文件系统的方式存储内容，但作了些许简化。 所有内容均以树对象和数据对象的形式存储，其中树对象对应了 UNIX 中的目录项，数据对象则大致上对应了 inodes 或文件内容。 一个树对象包含了一条或多条树对象记录（tree entry），每条记录含有一个指向数据对象或者子树对象的 SHA-1 指针，以及相应的模式、类型、文件名信息。 例如，某项目当前对应的最新树对象可能是这样的： $ git cat-file -p master^{tree} 100644 blob a906cb2a4a904a152e80877d4088654daad0c859 README 100644 blob 8f94139338f9404f26296befa88755fc2598c289 Rakefile 040000 tree 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0 lib ​ master^{tree} 语法表示 master 分支上最新的提交所指向的树对象。 请注意，lib 子目录（所对应的那条树对象记录）并不是一个数据对象，而是一个指针，其指向的是另一个树对象： $ git cat-file -p 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0 100644 blob 47c6340d6459e05787f644c2447d2595f5d3a54b simplegit.rb ​ 从概念上讲，Git 内部存储的数据有点像这样： 简化版的 Git 数据模型。 ​ 你可以轻松创建自己的树对象。 通常，Git 根据某一时刻暂存区（即 index 区域，下同）所表示的状态创建并记录一个对应的树对象，如此重复便可依次记录（某个时间段内）一系列的树对象。 因此，为创建一个树对象，首先需要通过暂存一些文件来创建一个暂存区。 可以通过底层命令 update-index 为一个单独文件——我们的 test.txt 文件的首个版本——创建一个暂存区。 利用该命令，可以把 test.txt 文件的首个版本人为地加入一个新的暂存区。 必须为上述命令指定 --add 选项，因为此前该文件并不在暂存区中（我们甚至都还没来得及创建一个暂存区呢）；同样必需的还有 --cacheinfo 选项，因为将要添加的文件位于 Git 数据库中，而不是位于当前目录下。 同时，需要指定文件模式、SHA-1 与文件名： $ git update-index --add --cacheinfo 100644 \\ 83baae61804e65cc73a7201a7252750c76066a30 test.txt ​ 本例中，我们指定的文件模式为 100644，表明这是一个普通文件。 其他选择包括：100755，表示一个可执行文件；120000，表示一个符号链接。 这里的文件模式参考了常见的 UNIX 文件模式，但远没那么灵活——上述三种模式即是 Git 文件（即数据对象）的所有合法模式（当然，还有其他一些模式，但用于目录项和子模块）。 ​ 现在，可以通过 write-tree 命令将暂存区内容写入一个树对象。 此处无需指定 -w 选项——如果某个树对象此前并不存在的话，当调用 write-tree 命令时，它会根据当前暂存区状态自动创建一个新的树对象： $ git write-tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579 $ git cat-file -p d8329fc1cc938780ffdd9f94e0d364e0ea74f579 100644 blob 83baae61804e65cc73a7201a7252750c76066a30 test.txt ​ 不妨验证一下它确实是一个树对象： $ git cat-file -t d8329fc1cc938780ffdd9f94e0d364e0ea74f579 tree ​ 接着我们来创建一个新的树对象，它包括 test.txt 文件的第二个版本，以及一个新的文件： $ echo 'new file' > new.txt $ git update-index --cacheinfo 100644 \\ 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a test.txt $ git update-index --add new.txt ​ 暂存区现在包含了 test.txt 文件的新版本，和一个新文件：new.txt。 记录下这个目录树（将当前暂存区的状态记录为一个树对象），然后观察它的结构： $ git write-tree 0155eb4229851634a0f03eb265b69f5a2d56f341 $ git cat-file -p 0155eb4229851634a0f03eb265b69f5a2d56f341 100644 blob fa49b077972391ad58037050f2a75f74e3671e92 new.txt 100644 blob 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a test.txt ​ 我们注意到，新的树对象包含两条文件记录，同时 test.txt 的 SHA-1 值（1f7a7a）是先前值的“第二版”。 只是为了好玩：你可以将第一个树对象加入第二个树对象，使其成为新的树对象的一个子目录。 通过调用 read-tree 命令，可以把树对象读入暂存区。 本例中，可以通过对 read-tree 指定 --prefix 选项，将一个已有的树对象作为子树读入暂存区： $ git read-tree --prefix=bak d8329fc1cc938780ffdd9f94e0d364e0ea74f579 $ git write-tree 3c4e9cd789d88d8d89c1073707c3585e41b0e614 $ git cat-file -p 3c4e9cd789d88d8d89c1073707c3585e41b0e614 040000 tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579 bak 100644 blob fa49b077972391ad58037050f2a75f74e3671e92 new.txt 100644 blob 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a test.txt ​ 如果基于这个新的树对象创建一个工作目录，你会发现工作目录的根目录包含两个文件以及一个名为 bak 的子目录，该子目录包含 test.txt 文件的第一个版本。 可以认为 Git 内部存储着的用于表示上述结构的数据是这样的： 当前 Git 的数据内容结构。 2.2 提交对象 ​ 现在有三个树对象，分别代表了我们想要跟踪的不同项目快照。然而问题依旧：若想重用这些快照，你必须记住所有三个 SHA-1 哈希值。 并且，你也完全不知道是谁保存了这些快照，在什么时刻保存的，以及为什么保存这些快照。 而以上这些，正是提交对象（commit object）能为你保存的基本信息。 ​ 可以通过调用 commit-tree 命令创建一个提交对象，为此需要指定一个树对象的 SHA-1 值，以及该提交的父提交对象（如果有的话）。 我们从之前创建的第一个树对象开始： $ echo 'first commit' | git commit-tree d8329f fdf4fc3344e67ab068f836878b6c4951e3b15f3d ​ 现在可以通过 cat-file 命令查看这个新提交对象： $ git cat-file -p fdf4fc3 tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579 author Scott Chacon 1243040974 -0700 committer Scott Chacon 1243040974 -0700 first commit ​ 提交对象的格式很简单：它先指定一个顶层树对象，代表当前项目快照；然后是作者/提交者信息（依据你的 user.name 和 user.email 配置来设定，外加一个时间戳）；留空一行，最后是提交注释。 ​ 接着，我们将创建另两个提交对象，它们分别引用各自的上一个提交（作为其父提交对象）： $ echo 'second commit' | git commit-tree 0155eb -p fdf4fc3 cac0cab538b970a37ea1e769cbbde608743bc96d $ echo 'third commit' | git commit-tree 3c4e9c -p cac0cab 1a410efbd13591db07496601ebc7a059dd55cfe9 ​ 这三个提交对象分别指向之前创建的三个树对象快照中的一个。 现在，如果对最后一个提交的 SHA-1 值运行 git log 命令，会出乎意料的发现，你已有一个货真价实的、可由 git log 查看的 Git 提交历史了： $ git log --stat 1a410e commit 1a410efbd13591db07496601ebc7a059dd55cfe9 Author: Scott Chacon Date: Fri May 22 18:15:24 2009 -0700 third commit bak/test.txt | 1 + 1 file changed, 1 insertion(+) commit cac0cab538b970a37ea1e769cbbde608743bc96d Author: Scott Chacon Date: Fri May 22 18:14:29 2009 -0700 second commit new.txt | 1 + test.txt | 2 +- 2 files changed, 2 insertions(+), 1 deletion(-) commit fdf4fc3344e67ab068f836878b6c4951e3b15f3d Author: Scott Chacon Date: Fri May 22 18:09:34 2009 -0700 first commit test.txt | 1 + 1 file changed, 1 insertion(+) ​ 太神奇了： 就在刚才，你没有借助任何上层命令，仅凭几个底层操作便完成了一个 Git 提交历史的创建。 这就是每次我们运行 git add 和 git commit 命令时， Git 所做的实质工作——将被改写的文件保存为数据对象，更新暂存区，记录树对象，最后创建一个指明了顶层树对象和父提交的提交对象。 这三种主要的 Git 对象——数据对象、树对象、提交对象——最初均以单独文件的形式保存在 .git/objects 目录下。 下面列出了目前示例目录内的所有对象，辅以各自所保存内容的注释： $ find .git/objects -type f .git/objects/01/55eb4229851634a0f03eb265b69f5a2d56f341 # tree 2 .git/objects/1a/410efbd13591db07496601ebc7a059dd55cfe9 # commit 3 .git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a # test.txt v2 .git/objects/3c/4e9cd789d88d8d89c1073707c3585e41b0e614 # tree 3 .git/objects/83/baae61804e65cc73a7201a7252750c76066a30 # test.txt v1 .git/objects/ca/c0cab538b970a37ea1e769cbbde608743bc96d # commit 2 .git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 # 'test content' .git/objects/d8/329fc1cc938780ffdd9f94e0d364e0ea74f579 # tree 1 .git/objects/fa/49b077972391ad58037050f2a75f74e3671e92 # new.txt .git/objects/fd/f4fc3344e67ab068f836878b6c4951e3b15f3d # commit 1 ​ 如果跟踪所有的内部指针，将得到一个类似下面的对象关系图： 你的 Git 目录下的所有对象。 2.3 对象存储 ​ 前文曾提及，在存储内容时，会有个头部信息一并被保存。 让我们略花些时间来看看 Git 是如何存储其对象的。 通过在 Ruby 脚本语言中交互式地演示，你将看到一个数据对象——本例中是字符串“what is up, doc?”——是如何被存储的。 可以通过 irb 命令启动 Ruby 的交互模式： $ irb >> content = \"what is up, doc?\" => \"what is up, doc?\" ​ Git 以对象类型作为开头来构造一个头部信息，本例中是一个“blob”字符串。 接着 Git 会添加一个空格，随后是数据内容的长度，最后是一个空字节（null byte）： >> header = \"blob #{content.length}\\0\" => \"blob 16\\u0000\" ​ Git 会将上述头部信息和原始数据拼接起来，并计算出这条新内容的 SHA-1 校验和。 在 Ruby 中可以这样计算 SHA-1 值——先通过 require 命令导入 SHA-1 digest 库，然后对目标字符串调用 Digest::SHA1.hexdigest()： >> store = header + content => \"blob 16\\u0000what is up, doc?\" >> require 'digest/sha1' => true >> sha1 = Digest::SHA1.hexdigest(store) => \"bd9dbf5aae1a3862dd1526723246b20206e5fc37\" ​ Git 会通过 zlib 压缩这条新内容。在 Ruby 中可以借助 zlib 库做到这一点。 先导入相应的库，然后对目标内容调用 Zlib::Deflate.deflate()： >> require 'zlib' => true >> zlib_content = Zlib::Deflate.deflate(store) => \"x\\x9CK\\xCA\\xC9OR04c(\\xCFH,Q\\xC8,V(-\\xD0QH\\xC9O\\xB6\\a\\x00_\\x1C\\a\\x9D\" ​ 最后，需要将这条经由 zlib 压缩的内容写入磁盘上的某个对象。 要先确定待写入对象的路径（SHA-1 值的前两个字符作为子目录名称，后 38 个字符则作为子目录内文件的名称）。 如果该子目录不存在，可以通过 Ruby 中的 FileUtils.mkdir_p() 函数来创建它。 接着，通过 File.open() 打开这个文件。最后，对上一步中得到的文件句柄调用 write() 函数，以向目标文件写入之前那条 zlib 压缩过的内容： >> path = '.git/objects/' + sha1[0,2] + '/' + sha1[2,38] => \".git/objects/bd/9dbf5aae1a3862dd1526723246b20206e5fc37\" >> require 'fileutils' => true >> FileUtils.mkdir_p(File.dirname(path)) => \".git/objects/bd\" >> File.open(path, 'w') { |f| f.write zlib_content } => 32 ​ 就是这样——你已创建了一个有效的 Git 数据对象。 所有的 Git 对象均以这种方式存储，区别仅在于类型标识——另两种对象类型的头部信息以字符串“commit”或“tree”开头，而不是“blob”。 另外，虽然数据对象的内容几乎可以是任何东西，但提交对象和树对象的内容却有各自固定的格式。 3. Git 引用 ​ 我们可以借助类似于 git log 1a410e 这样的命令来浏览完整的提交历史，但为了能遍历那段历史从而找到所有相关对象，你仍须记住 1a410e 是最后一个提交。 我们需要一个文件来保存 SHA-1 值，并给文件起一个简单的名字，然后用这个名字指针来替代原始的 SHA-1 值。 ​ 在 Git 里，这样的文件被称为“引用（references，或缩写为 refs）”；你可以在 .git/refs 目录下找到这类含有 SHA-1 值的文件。 在目前的项目中，这个目录没有包含任何文件，但它包含了一个简单的目录结构： $ find .git/refs .git/refs .git/refs/heads .git/refs/tags $ find .git/refs -type f ​ 若要创建一个新引用来帮助记忆最新提交所在的位置，从技术上讲我们只需简单地做如下操作： $ echo \"1a410efbd13591db07496601ebc7a059dd55cfe9\" > .git/refs/heads/master ​ 现在，你就可以在 Git 命令中使用这个刚创建的新引用来代替 SHA-1 值了： $ git log --pretty=oneline master 1a410efbd13591db07496601ebc7a059dd55cfe9 third commit cac0cab538b970a37ea1e769cbbde608743bc96d second commit fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit ​ 我们不提倡直接编辑引用文件。 如果想更新某个引用，Git 提供了一个更加安全的命令 update-ref 来完成此事： $ git update-ref refs/heads/master 1a410efbd13591db07496601ebc7a059dd55cfe9 ​ 这基本就是 Git 分支的本质：一个指向某一系列提交之首的指针或引用。 若想在第二个提交上创建一个分支，可以这么做： $ git update-ref refs/heads/test cac0ca ​ 这个分支将只包含从第二个提交开始往前追溯的记录： $ git log --pretty=oneline test cac0cab538b970a37ea1e769cbbde608743bc96d second commit fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit ​ 至此，我们的 Git 数据库从概念上看起来像这样： 包含分支引用的 Git 目录对象。 ​ 当运行类似于 git branch (branchname) 这样的命令时，Git 实际上会运行 update-ref 命令，取得当前所在分支最新提交对应的 SHA-1 值，并将其加入你想要创建的任何新引用中。 3.1 HEAD 引用 ​ 现在的问题是，当你执行 git branch (branchname) 时，Git 如何知道最新提交的 SHA-1 值呢？ 答案是 HEAD 文件。 ​ HEAD 文件是一个符号引用（symbolic reference），指向目前所在的分支。 所谓符号引用，意味着它并不像普通引用那样包含一个 SHA-1 值——它是一个指向其他引用的指针。 如果查看 HEAD 文件的内容，一般而言我们看到的类似这样： $ cat .git/HEAD ref: refs/heads/master ​ 如果执行 git checkout test，Git 会像这样更新 HEAD 文件： $ cat .git/HEAD ref: refs/heads/test ​ 当我们执行 git commit 时，该命令会创建一个提交对象，并用 HEAD 文件中那个引用所指向的 SHA-1 值设置其父提交字段。 ​ 你也可以手动编辑该文件，然而同样存在一个更安全的命令来完成此事：symbolic-ref。 可以借助此命令来查看 HEAD 引用对应的值： $ git symbolic-ref HEAD refs/heads/master ​ 同样可以设置 HEAD 引用的值： $ git symbolic-ref HEAD refs/heads/test $ cat .git/HEAD ref: refs/heads/test ​ 不能把符号引用设置为一个不符合引用格式的值： $ git symbolic-ref HEAD test fatal: Refusing to point HEAD outside of refs/ 3.2 标签引用 ​ 前文我们刚讨论过 Git 的三种主要对象类型，事实上还有第四种。 标签对象（tag object）非常类似于一个提交对象——它包含一个标签创建者信息、一个日期、一段注释信息，以及一个指针。 主要的区别在于，标签对象通常指向一个提交对象，而不是一个树对象。 它像是一个永不移动的分支引用——永远指向同一个提交对象，只不过给这个提交对象加上一个更友好的名字罢了。 ​ 正如 [Git 基础]中所讨论的那样，存在两种类型的标签：附注标签和轻量标签。 可以像这样创建一个轻量标签： $ git update-ref refs/tags/v1.0 cac0cab538b970a37ea1e769cbbde608743bc96d ​ 这就是轻量标签的全部内容——一个固定的引用。 然而，一个附注标签则更复杂一些。 若要创建一个附注标签，Git 会创建一个标签对象，并记录一个引用来指向该标签对象，而不是直接指向提交对象。 可以通过创建一个附注标签来验证这个过程（-a 选项指定了要创建的是一个附注标签）： $ git tag -a v1.1 1a410efbd13591db07496601ebc7a059dd55cfe9 -m 'test tag' ​ 下面是上述过程所建标签对象的 SHA-1 值： $ cat .git/refs/tags/v1.1 9585191f37f7b0fb9444f35a9bf50de191beadc2 ​ 现在对该 SHA-1 值运行 cat-file 命令： $ git cat-file -p 9585191f37f7b0fb9444f35a9bf50de191beadc2 object 1a410efbd13591db07496601ebc7a059dd55cfe9 type commit tag v1.1 tagger Scott Chacon Sat May 23 16:48:58 2009 -0700 test tag ​ 我们注意到，object 条目指向我们打了标签的那个提交对象的 SHA-1 值。 另外要注意的是，标签对象并非必须指向某个提交对象；你可以对任意类型的 Git 对象打标签。 例如，在 Git 源码中，项目维护者将他们的 GPG 公钥添加为一个数据对象，然后对这个对象打了一个标签。 可以克隆一个 Git 版本库，然后通过执行下面的命令来在这个版本库中查看上述公钥： $ git cat-file blob junio-gpg-pub ​ Linux 内核版本库同样有一个不指向提交对象的标签对象——首个被创建的标签对象所指向的是最初被引入版本库的那份内核源码所对应的树对象。 3.3 远程引用 ​ 我们将看到的第三种引用类型是远程引用（remote reference）。 如果你添加了一个远程版本库并对其执行过推送操作，Git 会记录下最近一次推送操作时每一个分支所对应的值，并保存在 refs/remotes 目录下。 例如，你可以添加一个叫做 origin 的远程版本库，然后把 master 分支推送上去： $ git remote add origin git@github.com:schacon/simplegit-progit.git $ git push origin master Counting objects: 11, done. Compressing objects: 100% (5/5), done. Writing objects: 100% (7/7), 716 bytes, done. Total 7 (delta 2), reused 4 (delta 1) To git@github.com:schacon/simplegit-progit.git a11bef0..ca82a6d master -> master ​ 此时，如果查看 refs/remotes/origin/master 文件，可以发现 origin 远程版本库的 master 分支所对应的 SHA-1 值，就是最近一次与服务器通信时本地 master 分支所对应的 SHA-1 值： $ cat .git/refs/remotes/origin/master ca82a6dff817ec66f44342007202690a93763949 ​ 远程引用和分支（位于 refs/heads 目录下的引用）之间最主要的区别在于，远程引用是只读的。 虽然可以 git checkout 到某个远程引用，但是 Git 并不会将 HEAD 引用指向该远程引用。因此，你永远不能通过 commit 命令来更新远程引用。 Git 将这些远程引用作为记录远程服务器上各分支最后已知位置状态的书签来管理。 4. 包文件 ​ 让我们重新回到示例 Git 版本库的对象数据库。 目前为止，可以看到有 11 个对象——4 个数据对象、3 个树对象、3 个提交对象和 1 个标签对象： $ find .git/objects -type f .git/objects/01/55eb4229851634a0f03eb265b69f5a2d56f341 # tree 2 .git/objects/1a/410efbd13591db07496601ebc7a059dd55cfe9 # commit 3 .git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a # test.txt v2 .git/objects/3c/4e9cd789d88d8d89c1073707c3585e41b0e614 # tree 3 .git/objects/83/baae61804e65cc73a7201a7252750c76066a30 # test.txt v1 .git/objects/95/85191f37f7b0fb9444f35a9bf50de191beadc2 # tag .git/objects/ca/c0cab538b970a37ea1e769cbbde608743bc96d # commit 2 .git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 # 'test content' .git/objects/d8/329fc1cc938780ffdd9f94e0d364e0ea74f579 # tree 1 .git/objects/fa/49b077972391ad58037050f2a75f74e3671e92 # new.txt .git/objects/fd/f4fc3344e67ab068f836878b6c4951e3b15f3d # commit 1 ​ Git 使用 zlib 压缩这些文件的内容，而且我们并没有存储太多东西，所以上文中的文件一共只占用了 925 字节。 接下来，我们会指引你添加一些大文件到版本库中，以此展示 Git 的一个很有趣的功能。 为了便于展示，我们要把之前在 Grit 库中用到过的 repo.rb 文件添加进来——这是一个大小约为 22K 的源代码文件： $ curl https://raw.githubusercontent.com/mojombo/grit/master/lib/grit/repo.rb > repo.rb $ git add repo.rb $ git commit -m 'added repo.rb' [master 484a592] added repo.rb 3 files changed, 709 insertions(+), 2 deletions(-) delete mode 100644 bak/test.txt create mode 100644 repo.rb rewrite test.txt (100%) ​ 如果你查看生成的树对象，可以看到 repo.rb 文件对应的数据对象的 SHA-1 值： $ git cat-file -p master^{tree} 100644 blob fa49b077972391ad58037050f2a75f74e3671e92 new.txt 100644 blob 033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5 repo.rb 100644 blob e3f094f522629ae358806b17daf78246c27c007b test.txt ​ 接下来你可以使用 git cat-file 命令查看这个对象有多大： $ git cat-file -s 033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5 22044 ​ 现在，稍微修改这个文件，然后看看会发生什么： $ echo '# testing' >> repo.rb $ git commit -am 'modified repo a bit' [master 2431da6] modified repo.rb a bit 1 file changed, 1 insertion(+) ​ 查看这个提交生成的树对象，你会看到一些有趣的东西： $ git cat-file -p master^{tree} 100644 blob fa49b077972391ad58037050f2a75f74e3671e92 new.txt 100644 blob b042a60ef7dff760008df33cee372b945b6e884e repo.rb 100644 blob e3f094f522629ae358806b17daf78246c27c007b test.txt ​ repo.rb 对应一个与之前完全不同的数据对象，这意味着，虽然你只是在一个 400 行的文件后面加入一行新内容，Git 也会用一个全新的对象来存储新的文件内容： $ git cat-file -s b042a60ef7dff760008df33cee372b945b6e884e 22054 ​ 你的磁盘上现在有两个几乎完全相同、大小均为 22K 的对象。 如果 Git 只完整保存其中一个，再保存另一个对象与之前版本的差异内容，岂不更好？ ​ 事实上 Git 可以那样做。 Git 最初向磁盘中存储对象时所使用的格式被称为“松散（loose）”对象格式。 但是，Git 会时不时地将多个这些对象打包成一个称为“包文件（packfile）”的二进制文件，以节省空间和提高效率。 当版本库中有太多的松散对象，或者你手动执行 git gc 命令，或者你向远程服务器执行推送时，Git 都会这样做。 要看到打包过程，你可以手动执行 git gc 命令让 Git 对对象进行打包： $ git gc Counting objects: 18, done. Delta compression using up to 8 threads. Compressing objects: 100% (14/14), done. Writing objects: 100% (18/18), done. Total 18 (delta 3), reused 0 (delta 0) ​ 这个时候再查看 objects 目录，你会发现大部分的对象都不见了，与此同时出现了一对新文件： $ find .git/objects -type f .git/objects/bd/9dbf5aae1a3862dd1526723246b20206e5fc37 .git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 .git/objects/info/packs .git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.idx .git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.pack ​ 仍保留着的几个对象是未被任何提交记录引用的数据对象——在此例中是你之前创建的 “what is up, doc?” 和 “test content” 这两个示例数据对象。 因为你从没将它们添加至任何提交记录中，所以 Git 认为它们是悬空（dangling）的，不会将它们打包进新生成的包文件中。 ​ 剩下的文件是新创建的包文件和一个索引。 包文件包含了刚才从文件系统中移除的所有对象的内容。 索引文件包含了包文件的偏移信息，我们通过索引文件就可以快速定位任意一个指定对象。 有意思的是运行 gc 命令前磁盘上的对象大小约为 22K，而这个新生成的包文件大小仅有 7K。 通过打包对象减少了2/3的磁盘占用空间。 ​ Git 是如何做到这点的？ Git 打包对象时，会查找命名及大小相近的文件，并只保存文件不同版本之间的差异内容。 你可以查看包文件，观察它是如何节省空间的。 git verify-pack 这个底层命令可以让你查看已打包的内容： $ git verify-pack -v .git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.idx 2431da676938450a4d72e260db3bf7b0f587bbc1 commit 223 155 12 69bcdaff5328278ab1c0812ce0e07fa7d26a96d7 commit 214 152 167 80d02664cb23ed55b226516648c7ad5d0a3deb90 commit 214 145 319 43168a18b7613d1281e5560855a83eb8fde3d687 commit 213 146 464 092917823486a802e94d727c820a9024e14a1fc2 commit 214 146 610 702470739ce72005e2edff522fde85d52a65df9b commit 165 118 756 d368d0ac0678cbe6cce505be58126d3526706e54 tag 130 122 874 fe879577cb8cffcdf25441725141e310dd7d239b tree 136 136 996 d8329fc1cc938780ffdd9f94e0d364e0ea74f579 tree 36 46 1132 deef2e1b793907545e50a2ea2ddb5ba6c58c4506 tree 136 136 1178 d982c7cb2c2a972ee391a85da481fc1f9127a01d tree 6 17 1314 1 \\ deef2e1b793907545e50a2ea2ddb5ba6c58c4506 3c4e9cd789d88d8d89c1073707c3585e41b0e614 tree 8 19 1331 1 \\ deef2e1b793907545e50a2ea2ddb5ba6c58c4506 0155eb4229851634a0f03eb265b69f5a2d56f341 tree 71 76 1350 83baae61804e65cc73a7201a7252750c76066a30 blob 10 19 1426 fa49b077972391ad58037050f2a75f74e3671e92 blob 9 18 1445 b042a60ef7dff760008df33cee372b945b6e884e blob 22054 5799 1463 033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5 blob 9 20 7262 1 \\ b042a60ef7dff760008df33cee372b945b6e884e 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a blob 10 19 7282 non delta: 15 objects chain length = 1: 3 objects .git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.pack: ok ​ 此处，033b4 这个数据对象（即 repo.rb 文件的第一个版本，如果你还记得的话）引用了数据对象 b042a，即该文件的第二个版本。 命令输出内容的第三列显示的是各个对象在包文件中的大小，可以看到 b042a 占用了 22K 空间，而 033b4 仅占用 9 字节。 同样有趣的地方在于，第二个版本完整保存了文件内容，而原始的版本反而是以差异方式保存的——这是因为大部分情况下需要快速访问文件的最新版本。 ​ 最妙之处是你可以随时重新打包。 Git 时常会自动对仓库进行重新打包以节省空间。当然你也可以随时手动执行 git gc 命令来这么做。 5. 引用规格 ​ 纵观全书，我们已经使用过一些诸如远程分支到本地引用的简单映射方式，但这种映射可以更复杂。 假设你添加了这样一个远程版本库： $ git remote add origin https://github.com/schacon/simplegit-progit ​ 上述命令会在你的 .git/config 文件中添加一个小节，并在其中指定远程版本库的名称（origin）、URL 和一个用于获取操作的引用规格（refspec）： [remote \"origin\"] url = https://github.com/schacon/simplegit-progit fetch = +refs/heads/*:refs/remotes/origin/* ​ 引用规格的格式由一个可选的 + 号和紧随其后的 : 组成，其中 是一个模式（pattern），代表远程版本库中的引用； 是那些远程引用在本地所对应的位置。 + 号告诉 Git 即使在不能快进的情况下也要（强制）更新引用。 ​ 默认情况下，引用规格由 git remote add 命令自动生成， Git 获取服务器中 refs/heads/ 下面的所有引用，并将它写入到本地的 refs/remotes/origin/ 中。 所以，如果服务器上有一个 master 分支，我们可以在本地通过下面这种方式来访问该分支上的提交记录： $ git log origin/master $ git log remotes/origin/master $ git log refs/remotes/origin/master ​ 上面的三个命令作用相同，因为 Git 会把它们都扩展成 refs/remotes/origin/master。 ​ 如果想让 Git 每次只拉取远程的 master 分支，而不是所有分支，可以把（引用规格的）获取那一行修改为： fetch = +refs/heads/master:refs/remotes/origin/master ​ 这仅是针对该远程版本库的 git fetch 操作的默认引用规格。 如果有某些只希望被执行一次的操作，我们也可以在命令行指定引用规格。 若要将远程的 master 分支拉到本地的 origin/mymaster 分支，可以运行： $ git fetch origin master:refs/remotes/origin/mymaster ​ 你也可以指定多个引用规格。 在命令行中，你可以按照如下的方式拉取多个分支： $ git fetch origin master:refs/remotes/origin/mymaster \\ topic:refs/remotes/origin/topic From git@github.com:schacon/simplegit ! [rejected] master -> origin/mymaster (non fast forward) * [new branch] topic -> origin/topic ​ 在这个例子中，对 master 分支的拉取操作被拒绝，因为它不是一个可以快进的引用。 我们可以通过在引用规格之前指定 + 号来覆盖该规则。 ​ 你也可以在配置文件中指定多个用于获取操作的引用规格。 如果想在每次获取时都包括 master 和 experiment 分支，添加如下两行： [remote \"origin\"] url = https://github.com/schacon/simplegit-progit fetch = +refs/heads/master:refs/remotes/origin/master fetch = +refs/heads/experiment:refs/remotes/origin/experiment 我们不能在模式中使用部分通配符，所以像下面这样的引用规格是不合法的： fetch = +refs/heads/qa*:refs/remotes/origin/qa* ​ 但我们可以使用命名空间（或目录）来达到类似目的。 假设你有一个 QA 团队，他们推送了一系列分支，同时你只想要获取 master 和 QA 团队的所有分支而不关心其他任何分支，那么可以使用如下配置： [remote \"origin\"] url = https://github.com/schacon/simplegit-progit fetch = +refs/heads/master:refs/remotes/origin/master fetch = +refs/heads/qa/*:refs/remotes/origin/qa/* ​ 如果项目的工作流很复杂，有 QA 团队推送分支、开发人员推送分支、集成团队推送并且在远程分支上展开协作，你就可以像这样（在本地）为这些分支创建各自的命名空间，非常方便。 5.1 引用规格推送 ​ 像上面这样从远程版本库获取已在命名空间中的引用当然很棒，但 QA 团队最初应该如何将他们的分支放入远程的 qa/ 命名空间呢？ 我们可以通过引用规格推送来完成这个任务。 ​ 如果 QA 团队想把他们的 master 分支推送到远程服务器的 qa/master 分支上，可以运行： $ git push origin master:refs/heads/qa/master ​ 如果他们希望 Git 每次运行 git push origin 时都像上面这样推送，可以在他们的配置文件中添加一条 push 值： [remote \"origin\"] url = https://github.com/schacon/simplegit-progit fetch = +refs/heads/*:refs/remotes/origin/* push = refs/heads/master:refs/heads/qa/master ​ 正如刚才所指出的，这会让 git push origin 默认把本地 master 分支推送到远程 qa/master 分支。 5.2 删除引用 ​ 你还可以借助类似下面的命令通过引用规格从远程服务器上删除引用： $ git push origin :topic ​ 因为引用规格（的格式）是 :，所以上述命令把 留空，意味着把远程版本库的 topic 分支定义为空值，也就是删除它。 ​ 或者你可以使用更新的语法（自 Git v1.7.0以后可用）： $ git push origin --delete topic 6. 传输协议 ​ Git 可以通过两种主要的方式在版本库之间传输数据：“哑（dumb）”协议和“智能（smart）”协议。 本节将会带你快速浏览这两种协议的运作方式。 6.1 哑协议 ​ 如果你正在架设一个基于 HTTP 协议的只读版本库，一般而言这种情况下使用的就是哑协议。 这个协议之所以被称为“哑”协议，是因为在传输过程中，服务端不需要有针对 Git 特有的代码；抓取过程是一系列 HTTP 的 GET 请求，这种情况下，客户端可以推断出服务端 Git 仓库的布局。 Notes:现在已经很少使用哑协议了。 使用哑协议的版本库很难保证安全性和私有化，所以大多数 Git 服务器宿主（包括云端和本地）都会拒绝使用它。 一般情况下都建议使用智能协议，我们会在后面进行介绍。 ​ 让我们通过 simplegit 版本库来看看 http-fetch 的过程： $ git clone http://server/simplegit-progit.git ​ 它做的第一件事就是拉取 info/refs 文件。 这个文件是通过 update-server-info 命令生成的，这也解释了在使用 HTTP 传输时，必须把它设置为 post-receive 钩子的原因： => GET info/refs ca82a6dff817ec66f44342007202690a93763949 refs/heads/master ​ 现在，你得到了一个远程引用和 SHA-1 值的列表。 接下来，你要确定 HEAD 引用是什么，这样你就知道在完成后应该被检出到工作目录的内容： => GET HEAD ref: refs/heads/master ​ 这说明在完成抓取后，你需要检出 master 分支。 这时，你就可以开始遍历处理了。 因为你是从 info/refs 文件中所提到的 ca82a6 提交对象开始的，所以你的首要操作是获取它： => GET objects/ca/82a6dff817ec66f44342007202690a93763949 (179 bytes of binary data) ​ 你取回了一个对象——这是一个在服务端以松散格式保存的对象，是你通过使用静态 HTTP GET 请求获取的。 你可以使用 zlib 解压缩它，去除其头部，查看提交记录的内容： $ git cat-file -p ca82a6dff817ec66f44342007202690a93763949 tree cfda3bf379e4f8dba8717dee55aab78aef7f4daf parent 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 author Scott Chacon 1205815931 -0700 committer Scott Chacon 1240030591 -0700 changed the version number ​ 接下来，你还要再获取两个对象，一个是树对象 cfda3b，它包含有我们刚刚获取的提交对象所指向的内容，另一个是它的父提交 085bb3： => GET objects/08/5bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 (179 bytes of data) ​ 这样就取得了你的下一个提交对象。 再抓取树对象： => GET objects/cf/da3bf379e4f8dba8717dee55aab78aef7f4daf (404 - Not Found) ​ 噢——看起来这个树对象在服务端并不以松散格式对象存在，所以你得到了一个 404 响应，代表在 HTTP 服务端没有找到该对象。 这有好几个可能的原因——这个对象可能在替代版本库里面，或者在包文件里面。 Git 会首先检查所有列出的替代版本库： => GET objects/info/http-alternates (empty file) ​ 如果这返回了一个包含替代版本库 URL 的列表，那么 Git 就会去那些地址检查松散格式对象和文件——这是一种能让派生项目共享对象以节省磁盘的好方法。 然而，在这个例子中，没有列出可用的替代版本库。所以你所需要的对象肯定在某个包文件中。 要检查服务端有哪些可用的包文件，你需要获取 objects/info/packs 文件，这里面有一个包文件列表（它也是通过执行 update-server-info 所生成的）： => GET objects/info/packs P pack-816a9b2334da9953e530f27bcac22082a9f5b835.pack ​ 服务端只有一个包文件，所以你要的对象显然就在里面。但是你要先检查它的索引文件以确认。 即使服务端有多个包文件，这也是很有用的，因为这样你就可以知道你所需要的对象是在哪一个包文件里面： => GET objects/pack/pack-816a9b2334da9953e530f27bcac22082a9f5b835.idx (4k of binary data) ​ 现在你有这个包文件的索引，你可以查看你要的对象是否在里面——因为索引文件列出了这个包文件所包含的所有对象的 SHA-1 值，和该对象存在于包文件中的偏移量。 你的对象就在这里，接下来就是获取整个包文件： => GET objects/pack/pack-816a9b2334da9953e530f27bcac22082a9f5b835.pack (13k of binary data) ​ 现在你也有了你的树对象，你可以继续在提交记录上漫游。 它们全部都在这个你刚下载的包文件里面，所以你不用继续向服务端请求更多下载了。 Git 会将开始时下载的 HEAD 引用所指向的 master 分支检出到工作目录。 6.2 智能协议 ​ 哑协议虽然很简单但效率略低，且它不能从客户端向服务端发送数据。 智能协议是更常用的传送数据的方法，但它需要在服务端运行一个进程，而这也是 Git 的智能之处——它可以读取本地数据，理解客户端有什么和需要什么，并为它生成合适的包文件。 总共有两组进程用于传输数据，它们分别负责上传和下载数据。 6.2.1 上传数据 ​ 为了上传数据至远端，Git 使用 send-pack 和 receive-pack 进程。 运行在客户端上的 send-pack 进程连接到远端运行的 receive-pack 进程。 SSH ​ 举例来说，在项目中使用命令 git push origin master 时, origin 是由基于 SSH 协议的 URL 所定义的。 Git 会运行 send-pack 进程，它会通过 SSH 连接你的服务器。 它会尝试通过 SSH 在服务端执行命令，就像这样： $ ssh -x git@server \"git-receive-pack 'simplegit-progit.git'\" 00a5ca82a6dff817ec66f4437202690a93763949 refs/heads/master report-status \\ delete-refs side-band-64k quiet ofs-delta \\ agent=git/2:2.1.1+github-607-gfba4028 delete-refs 0000 ​ git-receive-pack 命令会立即为它所拥有的每一个引用发送一行响应——在这个例子中，就只有 master 分支和它的 SHA-1 值。 第一行响应中也包含了一个服务端能力的列表（这里是 report-status、delete-refs 和一些其它的，包括客户端的识别码）。 ​ 每一行以一个四位的十六进制值开始，用于指明本行的长度。 你看到第一行以 005b 开始，这在十六进制中表示 91，意味着第一行有 91 字节。 下一行以 003e 起始，也就是 62，所以下面需要读取 62 字节。 再下一行是 0000，表示服务端已完成了发送引用列表过程。 ​ 现在它知道了服务端的状态，你的 send-pack 进程会判断哪些提交记录是它所拥有但服务端没有的。 send-pack 会告知 receive-pack 这次推送将会更新的各个引用。 举个例子，如果你正在更新 master 分支，并且增加 experiment 分支，这个 send-pack 的响应将会是像这样： 0076ca82a6dff817ec66f44342007202690a93763949 15027957951b64cf874c3557a0f3547bd83b3ff6 \\ refs/heads/master report-status 006c0000000000000000000000000000000000000000 cdfdb42577e2506715f8cfeacdbabc092bf63e8d \\ refs/heads/experiment 0000 ​ Git 会为每一个将要更新的引用发送一行数据，包括该行长度，旧 SHA-1 值，新 SHA-1 值和将要更新的引用。 第一行也包括了客户端的能力。 这里的全为 0 的 SHA-1 值表示之前没有过这个引用——因为你正要添加新的 experiment 引用。 删除引用时，将会看到相反的情况：右边的 SHA-1 值全为 0。 ​ 接下来，客户端会发送一个包文件，它包含了所有服务端还没有的对象。 最后，服务端会以成功（或失败）响应： 000eunpack ok HTTP(S) ​ HTTPS 与 HTTP 相比较，除了在“握手”过程略有不同外，其他基本相似。 连接是从下面这个请求开始的： => GET http://server/simplegit-progit.git/info/refs?service=git-receive-pack 001f# service=git-receive-pack 00ab6c5f0e45abd7832bf23074a333f739977c9e8188 refs/heads/master report-status \\ delete-refs side-band-64k quiet ofs-delta \\ agent=git/2:2.1.1~vmg-bitmaps-bugaloo-608-g116744e 0000 ​ 这完成了客户端和服务端的第一次数据交换。 接下来客户端发起另一个请求，这次是一个 POST 请求，这个请求中包含了 git-upload-pack 提供的数据。 => POST http://server/simplegit-progit.git/git-receive-pack ​ 这个 POST 请求的内容是 send-pack 的输出和相应的包文件。 服务端在收到请求后相应地作出成功或失败的 HTTP 响应。 6.2.2 下载数据 ​ 当你在下载数据时， fetch-pack 和 upload-pack 进程就起作用了。 客户端启动 fetch-pack 进程，连接至远端的 upload-pack 进程，以协商后续传输的数据。 SSH ​ 如果你通过 SSH 使用抓取功能，fetch-pack 会像这样运行： $ ssh -x git@server \"git-upload-pack 'simplegit-progit.git'\" ​ 在 fetch-pack 连接后，upload-pack 会返回类似下面的内容： 00dfca82a6dff817ec66f44342007202690a93763949 HEAD multi_ack thin-pack \\ side-band side-band-64k ofs-delta shallow no-progress include-tag \\ multi_ack_detailed symref=HEAD:refs/heads/master \\ agent=git/2:2.1.1+github-607-gfba4028 003fe2409a098dc3e53539a9028a94b6224db9d6a6b6 refs/heads/master 0000 ​ 这与 receive-pack 的响应很相似，但是这里所包含的能力是不同的。 而且它还包含 HEAD 引用所指向内容（symref=HEAD:refs/heads/master），这样如果客户端执行的是克隆，它就会知道要检出什么。 ​ 这时候，fetch-pack 进程查看它自己所拥有的对象，并响应 “want” 和它需要的对象的 SHA-1 值。 它还会发送“have”和所有它已拥有的对象的 SHA-1 值。 在列表的最后，它还会发送“done”以通知 upload-pack 进程可以开始发送它所需对象的包文件： 003cwant ca82a6dff817ec66f44342007202690a93763949 ofs-delta 0032have 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 0009done 0000 HTTP(S) ​ 抓取操作的握手需要两个 HTTP 请求。 第一个是向和哑协议中相同的端点发送 GET 请求： => GET $GIT_URL/info/refs?service=git-upload-pack 001e# service=git-upload-pack 00e7ca82a6dff817ec66f44342007202690a93763949 HEAD multi_ack thin-pack \\ side-band side-band-64k ofs-delta shallow no-progress include-tag \\ multi_ack_detailed no-done symref=HEAD:refs/heads/master \\ agent=git/2:2.1.1+github-607-gfba4028 003fca82a6dff817ec66f44342007202690a93763949 refs/heads/master 0000 ​ 这和通过 SSH 使用 git-upload-pack 是非常相似的，但是第二个数据交换则是一个单独的请求： => POST $GIT_URL/git-upload-pack HTTP/1.0 0032want 0a53e9ddeaddad63ad106860237bbf53411d11a7 0032have 441b40d833fdfa93eb2908e52742248faf0ee993 0000 ​ 这个输出格式还是和前面一样的。 这个请求的响应包含了所需要的包文件，并指明成功或失败。 6.3 协议总结 这一章节是传输协议的一个概貌。 传输协议还有很多其它的特性，像是 multi_ack 或 side-band，但是这些内容已经超出了本书的范围。 我们希望能给你展示客户端和服务端之间的基本交互过程；如果你需要更多的相关知识，你可以参阅 Git 的源代码。 7. 维护与数据恢复 ​ 有的时候，你需要对仓库进行清理——使它的结构变得更紧凑，或是对导入的仓库进行清理，或是恢复丢失的内容。 这个小节将会介绍这些情况中的一部分。 7.1 维护 ​ Git 会不定时地自动运行一个叫做 “auto gc” 的命令。 大多数时候，这个命令并不会产生效果。 然而，如果有太多松散对象（不在包文件中的对象）或者太多包文件，Git 会运行一个完整的 git gc 命令。 “gc” 代表垃圾回收，这个命令会做以下事情：收集所有松散对象并将它们放置到包文件中，将多个包文件合并为一个大的包文件，移除与任何提交都不相关的陈旧对象。 ​ 可以像下面一样手动执行自动垃圾回收： $ git gc --auto ​ 就像上面提到的，这个命令通常并不会产生效果。 大约需要 7000 个以上的松散对象或超过 50 个的包文件才能让 Git 启动一次真正的 gc 命令。 你可以通过修改 gc.auto 与 gc.autopacklimit 的设置来改动这些数值。 ​ gc 将会做的另一件事是打包你的引用到一个单独的文件。 假设你的仓库包含以下分支与标签： $ find .git/refs -type f .git/refs/heads/experiment .git/refs/heads/master .git/refs/tags/v1.0 .git/refs/tags/v1.1 ​ 如果你执行了 git gc 命令，refs 目录中将不会再有这些文件。 为了保证效率 Git 会将它们移动到名为 .git/packed-refs 的文件中，就像这样： $ cat .git/packed-refs # pack-refs with: peeled fully-peeled cac0cab538b970a37ea1e769cbbde608743bc96d refs/heads/experiment ab1afef80fac8e34258ff41fc1b867c702daa24b refs/heads/master cac0cab538b970a37ea1e769cbbde608743bc96d refs/tags/v1.0 9585191f37f7b0fb9444f35a9bf50de191beadc2 refs/tags/v1.1 ^1a410efbd13591db07496601ebc7a059dd55cfe9 ​ 如果你更新了引用，Git 并不会修改这个文件，而是向 refs/heads 创建一个新的文件。 为了获得指定引用的正确 SHA-1 值，Git 会首先在 refs 目录中查找指定的引用，然后再到 packed-refs 文件中查找。 所以，如果你在 refs 目录中找不到一个引用，那么它或许在 packed-refs 文件中。 ​ 注意这个文件的最后一行，它会以 ^ 开头。 这个符号表示它上一行的标签是附注标签，^ 所在的那一行是附注标签指向的那个提交。 7.2 数据恢复 ​ 在你使用 Git 的时候，你可能会意外丢失一次提交。 通常这是因为你强制删除了正在工作的分支，但是最后却发现你还需要这个分支；亦或者硬重置了一个分支，放弃了你想要的提交。 如果这些事情已经发生，该如何找回你的提交呢？ ​ 下面的例子将硬重置你的测试仓库中的 master 分支到一个旧的提交，以此来恢复丢失的提交。 首先，让我们看看你的仓库现在在什么地方： $ git log --pretty=oneline ab1afef80fac8e34258ff41fc1b867c702daa24b modified repo a bit 484a59275031909e19aadb7c92262719cfcdf19a added repo.rb 1a410efbd13591db07496601ebc7a059dd55cfe9 third commit cac0cab538b970a37ea1e769cbbde608743bc96d second commit fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit ​ 现在，我们将 master 分支硬重置到第三次提交： $ git reset --hard 1a410efbd13591db07496601ebc7a059dd55cfe9 HEAD is now at 1a410ef third commit $ git log --pretty=oneline 1a410efbd13591db07496601ebc7a059dd55cfe9 third commit cac0cab538b970a37ea1e769cbbde608743bc96d second commit fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit ​ 现在顶部的两个提交已经丢失了——没有分支指向这些提交。 你需要找出最后一次提交的 SHA-1 然后增加一个指向它的分支。 窍门就是找到最后一次的提交的 SHA-1 ——但是估计你记不起来了，对吗？ ​ 最方便，也是最常用的方法，是使用一个名叫 git reflog 的工具。 当你正在工作时，Git 会默默地记录每一次你改变 HEAD 时它的值。 每一次你提交或改变分支，引用日志都会被更新。 引用日志（reflog）也可以通过 git update-ref 命令更新，我们在 [Git 引用] 有提到使用这个命令而不是是直接将 SHA-1 的值写入引用文件中的原因。 你可以在任何时候通过执行 git reflog 命令来了解你曾经做过什么： $ git reflog 1a410ef HEAD@{0}: reset: moving to 1a410ef ab1afef HEAD@{1}: commit: modified repo.rb a bit 484a592 HEAD@{2}: commit: added repo.rb ​ 这里可以看到我们已经检出的两次提交，然而并没有足够多的信息。 为了使显示的信息更加有用，我们可以执行 git log -g，这个命令会以标准日志的格式输出引用日志。 $ git log -g commit 1a410efbd13591db07496601ebc7a059dd55cfe9 Reflog: HEAD@{0} (Scott Chacon ) Reflog message: updating HEAD Author: Scott Chacon Date: Fri May 22 18:22:37 2009 -0700 third commit commit ab1afef80fac8e34258ff41fc1b867c702daa24b Reflog: HEAD@{1} (Scott Chacon ) Reflog message: updating HEAD Author: Scott Chacon Date: Fri May 22 18:15:24 2009 -0700 modified repo.rb a bit ​ 看起来下面的那个就是你丢失的提交，你可以通过创建一个新的分支指向这个提交来恢复它。 例如，你可以创建一个名为 recover-branch 的分支指向这个提交（ab1afef）： $ git branch recover-branch ab1afef $ git log --pretty=oneline recover-branch ab1afef80fac8e34258ff41fc1b867c702daa24b modified repo a bit 484a59275031909e19aadb7c92262719cfcdf19a added repo.rb 1a410efbd13591db07496601ebc7a059dd55cfe9 third commit cac0cab538b970a37ea1e769cbbde608743bc96d second commit fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit ​ 不错，现在有一个名为 recover-branch 的分支是你的 master 分支曾经指向的地方，再一次使得前两次提交可到达了。 接下来，假设你丢失的提交因为某些原因不在引用日志中——我们可以通过移除 recover-branch 分支并删除引用日志来模拟这种情况。 现在前两次提交又不被任何分支指向了： $ git branch -D recover-branch $ rm -Rf .git/logs/ ​ 由于引用日志数据存放在 .git/logs/ 目录中，现在你已经没有引用日志了。 这时该如何恢复那次提交？ 一种方式是使用 git fsck 实用工具，将会检查数据库的完整性。 如果使用一个 --full 选项运行它，它会向你显示出所有没有被其他对象指向的对象： $ git fsck --full Checking object directories: 100% (256/256), done. Checking objects: 100% (18/18), done. dangling blob d670460b4b4aece5915caf5c68d12f560a9fe3e4 dangling commit ab1afef80fac8e34258ff41fc1b867c702daa24b dangling tree aea790b9a58f6cf6f2804eeac9f0abbe9631e4c9 dangling blob 7108f7ecb345ee9d0084193f147cdad4d2998293 ​ 在这个例子中，你可以在 “dangling commit” 后看到你丢失的提交。 现在你可以用和之前相同的方法恢复这个提交，也就是添加一个指向这个提交的分支。 7.3 移除对象 ​ Git 有很多很棒的功能，但是其中一个特性会导致问题，git clone 会下载整个项目的历史，包括每一个文件的每一个版本。 如果所有的东西都是源代码那么这很好，因为 Git 被高度优化来有效地存储这种数据。 然而，如果某个人在之前向项目添加了一个大小特别大的文件，即使你将这个文件从项目中移除了，每次克隆还是都要强制的下载这个大文件。 之所以会产生这个问题，是因为这个文件在历史中是存在的，它会永远在那里。 ​ 当你迁移 Subversion 或 Perforce 仓库到 Git 的时候，这会是一个严重的问题。 因为这些版本控制系统并不下载所有的历史文件，所以这种文件所带来的问题比较少。 如果你从其他的版本控制系统迁移到 Git 时发现仓库比预期的大得多，那么你就需要找到并移除这些大文件。 警告：这个操作对提交历史的修改是破坏性的。 它会从你必须修改或移除一个大文件引用最早的树对象开始重写每一次提交。 如果你在导入仓库后，在任何人开始基于这些提交工作前执行这个操作，那么将不会有任何问题——否则，你必须通知所有的贡献者他们需要将他们的成果变基到你的新提交上。 ​ 为了演示，我们将添加一个大文件到测试仓库中，并在下一次提交中删除它，现在我们需要找到它，并将它从仓库中永久删除。 首先，添加一个大文件到仓库中： $ curl https://www.kernel.org/pub/software/scm/git/git-2.1.0.tar.gz > git.tgz $ git add git.tgz $ git commit -m 'add git tarball' [master 7b30847] add git tarball 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 git.tgz ​ 哎呀——其实这个项目并不需要这个巨大的压缩文件。 现在我们将它移除： $ git rm git.tgz rm 'git.tgz' $ git commit -m 'oops - removed large tarball' [master dadf725] oops - removed large tarball 1 file changed, 0 insertions(+), 0 deletions(-) delete mode 100644 git.tgz ​ 现在，我们执行 gc 来查看数据库占用了多少空间： $ git gc Counting objects: 17, done. Delta compression using up to 8 threads. Compressing objects: 100% (13/13), done. Writing objects: 100% (17/17), done. Total 17 (delta 1), reused 10 (delta 0) ​ 你也可以执行 count-objects 命令来快速的查看占用空间大小： $ git count-objects -v count: 7 size: 32 in-pack: 17 packs: 1 size-pack: 4868 prune-packable: 0 garbage: 0 size-garbage: 0 ​ size-pack 的数值指的是你的包文件以 KB 为单位计算的大小，所以你大约占用了 5MB 的空间。 在最后一次提交前，使用了不到 2KB ——显然，从之前的提交中移除文件并不能从历史中移除它。 每一次有人克隆这个仓库时，他们将必须克隆所有的 5MB 来获得这个微型项目，只因为你意外地添加了一个大文件。 现在来让我们彻底的移除这个文件。 ​ 首先你必须找到它。 在本例中，你已经知道是哪个文件了。 但是假设你不知道；该如何找出哪个文件或哪些文件占用了如此多的空间？ 如果你执行 git gc 命令，所有的对象将被放入一个包文件中，你可以通过运行 git verify-pack 命令，然后对输出内容的第三列（即文件大小）进行排序，从而找出这个大文件。 你也可以将这个命令的执行结果通过管道传送给 tail 命令，因为你只需要找到列在最后的几个大对象。 $ git verify-pack -v .git/objects/pack/pack-29…69.idx \\ | sort -k 3 -n \\ | tail -3 dadf7258d699da2c8d89b09ef6670edb7d5f91b4 commit 229 159 12 033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5 blob 22044 5792 4977696 82c99a3e86bb1267b236a4b6eff7868d97489af1 blob 4975916 4976258 1438 ​ 你可以看到这个大对象出现在返回结果的最底部：占用 5MB 空间。 为了找出具体是哪个文件，可以使用 rev-list 命令，我们在 [指定特殊的提交信息格式]中曾提到过。 如果你传递 --objects 参数给 rev-list 命令，它就会列出所有提交的 SHA-1、数据对象的 SHA-1 和与它们相关联的文件路径。 可以使用以下命令来找出你的数据对象的名字： $ git rev-list --objects --all | grep 82c99a3 82c99a3e86bb1267b236a4b6eff7868d97489af1 git.tgz ​ 现在，你只需要从过去所有的树中移除这个文件。 使用以下命令可以轻松地查看哪些提交对这个文件产生改动： $ git log --oneline --branches -- git.tgz dadf725 oops - removed large tarball 7b30847 add git tarball ​ 现在，你必须重写 7b30847 提交之后的所有提交来从 Git 历史中完全移除这个文件。 为了执行这个操作，我们要使用 filter-branch 命令，这个命令在 [重写历史]中也使用过： $ git filter-branch --index-filter \\ 'git rm --ignore-unmatch --cached git.tgz' -- 7b30847^.. Rewrite 7b30847d080183a1ab7d18fb202473b3096e9f34 (1/2)rm 'git.tgz' Rewrite dadf7258d699da2c8d89b09ef6670edb7d5f91b4 (2/2) Ref 'refs/heads/master' was rewritten ​ --index-filter 选项类似于在 [重写历史]中提到的的 --tree-filter 选项，不过这个选项并不会让命令将修改在硬盘上检出的文件，而只是修改在暂存区或索引中的文件。 ​ 你必须使用 git rm --cached 命令来移除文件，而不是通过类似 rm file 的命令——因为你需要从索引中移除它，而不是磁盘中。 还有一个原因是速度—— Git 在运行过滤器时，并不会检出每个修订版本到磁盘中，所以这个过程会非常快。 如果愿意的话，你也可以通过 --tree-filter 选项来完成同样的任务。 git rm 命令的 --ignore-unmatch 选项告诉命令：如果尝试删除的模式不存在时，不提示错误。 最后，使用 filter-branch 选项来重写自 7b30847 提交以来的历史，也就是这个问题产生的地方。 否则，这个命令会从最旧的提交开始，这将会花费许多不必要的时间。 ​ 你的历史中将不再包含对那个文件的引用。 不过，你的引用日志和你在 .git/refs/original 通过 filter-branch 选项添加的新引用中还存有对这个文件的引用，所以你必须移除它们然后重新打包数据库。 在重新打包前需要移除任何包含指向那些旧提交的指针的文件： $ rm -Rf .git/refs/original $ rm -Rf .git/logs/ $ git gc Counting objects: 15, done. Delta compression using up to 8 threads. Compressing objects: 100% (11/11), done. Writing objects: 100% (15/15), done. Total 15 (delta 1), reused 12 (delta 0) ​ 让我们看看你省了多少空间。 $ git count-objects -v count: 11 size: 4904 in-pack: 15 packs: 1 size-pack: 8 prune-packable: 0 garbage: 0 size-garbage: 0 ​ 打包的仓库大小下降到了 8K，比 5MB 好很多。 可以从 size 的值看出，这个大文件还在你的松散对象中，并没有消失；但是它不会在推送或接下来的克隆中出现，这才是最重要的。 如果真的想要删除它，可以通过有 --expire 选项的 git prune 命令来完全地移除那个对象： $ git prune --expire now $ git count-objects -v count: 0 size: 0 in-pack: 15 packs: 1 size-pack: 8 prune-packable: 0 garbage: 0 size-garbage: 0 8. 环境变量 ​ Git 总是在一个 bash shell 中运行，并借助一些 shell 环境变量来决定它的运行方式。 有时候，知道它们是什么以及它们如何让 Git 按照你想要的方式去运行会很有用。 这里不会列出所有的 Git 环境变量，但我们会涉及最有的那部分。 8.1 全局行为 ​ 像通常的程序一样，Git 的常规行为依赖于环境变量。 ​ GIT_EXEC_PATH 决定 Git 到哪找它的子程序 （像 git-commit, git-diff 等等）。 你可以用 git --exec-path 来查看当前设置。 ​ 通常不会考虑修改 HOME 这个变量（太多其它东西都依赖它），这是 Git 查找全局配置文件的地方。 如果你想要一个包括全局配置的真正的便携版 Git， 你可以在便携版 Git 的 shell 配置中覆盖 HOME 设置。 ​ PREFIX 也类似，除了用于系统级别的配置。 Git 在 $PREFIX/etc/gitconfig 查找此文件。 ​ 如果设置了 GIT_CONFIG_NOSYSTEM，就禁用系统级别的配置文件。 这在系统配置影响了你的命令，而你又无权限修改的时候很有用。 ​ GIT_PAGER 控制在命令行上显示多页输出的程序。 如果这个没有设置，就会用 PAGER 。 ​ GIT_EDITOR 当用户需要编辑一些文本（比如提交信息）时， Git 会启动这个编辑器。 如果没设置，就会用 EDITOR 。 8.2 版本库位置 ​ Git 用了几个变量来确定它如何与当前版本库交互。 GIT_DIR 是 .git 目录的位置。 如果这个没有设置， Git 会按照目录树逐层向上查找 .git 目录，直到到达 ~ 或 /。 GIT_CEILING_DIRECTORIES 控制查找 .git 目录的行为。 如果你访问加载很慢的目录（如那些磁带机上的或通过网络连接访问的），你可能会想让 Git 早点停止尝试，尤其是 shell 构建时调用了 Git 。 GIT_WORK_TREE 是非空版本库的工作目录的根路径。 如果没指定，就使用 $GIT_DIR 的父目录。 GIT_INDEX_FILE 是索引文件的路径（只有非空版本库有）。 GIT_OBJECT_DIRECTORY 用来指定 .git/objects 目录的位置。 GIT_ALTERNATE_OBJECT_DIRECTORIES 一个冒号分割的列表（格式类似 /dir/one:/dir/two:…）用来告诉 Git 到哪里去找不在 GIT_OBJECT_DIRECTORY 目录中的对象。 如果你有很多项目有相同内容的大文件，这个可以用来避免存储过多备份。 8.3 路径规则 ​ 所谓 “pathspec” 是指你在 Git 中如何指定路径，包括通配符的使用。 它们会在 .gitignore 文件中用到，命令行里也会用到（git add *.c）。 GIT_GLOB_PATHSPECS and GIT_NOGLOB_PATHSPECS 控制通配符在路径规则中的默认行为。 如果 GIT_GLOB_PATHSPECS 设置为 1, 通配符表现为通配符（这是默认设置）; 如果 GIT_NOGLOB_PATHSPECS 设置为 1,通配符仅匹配字面。意思是 *.c 只会匹配 文件名是 “.c” 的文件，而不是以 .c 结尾的文件。 你可以在各个路径规格中用 :(glob) 或 :(literal) 开头来覆盖这个配置，如 `:(glob).c` 。 GIT_LITERAL_PATHSPECS 禁用上面的两种行为；通配符将不能用，前缀覆盖也不能用。 GIT_ICASE_PATHSPECS 让所有的路径规格忽略大小写。 8.4 提交 ​ Git 提交对象的创建通常最后是由 git-commit-tree 来完成， git-commit-tree 用这些环境变量作主要的信息源。 仅当这些值不存在才回退到预置的值。 GIT_AUTHOR_NAME 是 “author” 字段的可读名字。 GIT_AUTHOR_EMAIL 是 “author” 字段的邮件。 GIT_AUTHOR_DATE 是 “author” 字段的时间戳。 GIT_COMMITTER_NAME 是 “committer” 字段的可读名字。 GIT_COMMITTER_EMAIL 是 “committer” 字段的邮件。 GIT_COMMITTER_DATE 是 “committer” 字段的时间戳。 ​ 如果 user.email 没有配置， 就会用到 EMAIL 指定的邮件地址。 如果 这个 也没有设置， Git 继续回退使用系统用户和主机名。 8.5 网络 ​ Git 使用 curl 库通过 HTTP 来完成网络操作， 所以 GIT_CURL_VERBOSE 告诉 Git 显示所有由那个库产生的消息。 这跟在命令行执行 curl -v 差不多。 GIT_SSL_NO_VERIFY 告诉 Git 不用验证 SSL 证书。 这在有些时候是需要的， 例如你用一个自己签名的证书通过 HTTPS 来提供 Git 服务， 或者你正在搭建 Git 服务器，还没有安装完全的证书。 如果 Git 操作在网速低于 GIT_HTTP_LOW_SPEED_LIMIT 字节／秒，并且持续 GIT_HTTP_LOW_SPEED_TIME 秒以上的时间，Git 会终止那个操作。 这些值会覆盖 http.lowSpeedLimit 和 http.lowSpeedTime 配置的值。 GIT_HTTP_USER_AGENT 设置 Git 在通过 HTTP 通讯时用到的 user-agent。 默认值类似于 git/2.0.0 。 8.6 比较和合并 GIT_DIFF_OPTS 这个有点起错名字了。 有效值仅支持 -u 或 --unified=，用来控制在 git diff 命令中显示的内容行数。 GIT_EXTERNAL_DIFF 用来覆盖 diff.external 配置的值。 如果设置了这个值， 当执行 git diff 时，Git 会调用该程序。 GIT_DIFF_PATH_COUNTER 和 GIT_DIFF_PATH_TOTAL 对于 GIT_EXTERNAL_DIFF 或 diff.external 指定的程序有用。 前者表示在一系列文件中哪个是被比较的（从 1 开始），后者表示每批文件的总数。 GIT_MERGE_VERBOSITY 控制递归合并策略的输出。 允许的值有下面这些： 0 什么都不输出，除了可能会有一个错误信息。 1 只显示冲突。 2 还显示文件改变。 3 显示因为没有改变被跳过的文件。 4 显示处理的所有路径。 5 显示详细的调试信息。 默认值是 2。 8.7 调试 ​ 想 真正地 知道 Git 正在做什么? Git 内置了相当完整的跟踪信息，你需要做的就是把它们打开。 这些变量的可用值如下： “true”“1” 或 “2”——跟踪类别写到标准错误输出。 以 / 开头的绝对路径——跟踪输出会被写到那个文件。 GIT_TRACE 控制常规跟踪，它并不适用于特殊情况。 它跟踪的范围包括别名的展开和其他子程序的委托。 $ GIT_TRACE=true git lga 20:12:49.877982 git.c:554 trace: exec: 'git-lga' 20:12:49.878369 run-command.c:341 trace: run_command: 'git-lga' 20:12:49.879529 git.c:282 trace: alias expansion: lga => 'log' '--graph' '--pretty=oneline' '--abbrev-commit' '--decorate' '--all' 20:12:49.879885 git.c:349 trace: built-in: git 'log' '--graph' '--pretty=oneline' '--abbrev-commit' '--decorate' '--all' 20:12:49.899217 run-command.c:341 trace: run_command: 'less' 20:12:49.899675 run-command.c:192 trace: exec: 'less' GIT_TRACE_PACK_ACCESS 控制访问打包文件的跟踪信息。 第一个字段是被访问的打包文件，第二个是文件的偏移量： $ GIT_TRACE_PACK_ACCESS=true git status 20:10:12.081397 sha1_file.c:2088 .git/objects/pack/pack-c3fa...291e.pack 12 20:10:12.081886 sha1_file.c:2088 .git/objects/pack/pack-c3fa...291e.pack 34662 20:10:12.082115 sha1_file.c:2088 .git/objects/pack/pack-c3fa...291e.pack 35175 # […] 20:10:12.087398 sha1_file.c:2088 .git/objects/pack/pack-e80e...e3d2.pack 56914983 20:10:12.087419 sha1_file.c:2088 .git/objects/pack/pack-e80e...e3d2.pack 14303666 On branch master Your branch is up-to-date with 'origin/master'. nothing to commit, working directory clean GIT_TRACE_PACKET 打开网络操作包级别的跟踪信息。 $ GIT_TRACE_PACKET=true git ls-remote origin 20:15:14.867043 pkt-line.c:46 packet: git GIT_TRACE_PERFORMANCE 控制性能数据的日志打印。 输出显示了每个 Git 命令调用花费的时间。 $ GIT_TRACE_PERFORMANCE=true git gc 20:18:19.499676 trace.c:414 performance: 0.374835000 s: git command: 'git' 'pack-refs' '--all' '--prune' 20:18:19.845585 trace.c:414 performance: 0.343020000 s: git command: 'git' 'reflog' 'expire' '--all' Counting objects: 170994, done. Delta compression using up to 8 threads. Compressing objects: 100% (43413/43413), done. Writing objects: 100% (170994/170994), done. Total 170994 (delta 126176), reused 170524 (delta 125706) 20:18:23.567927 trace.c:414 performance: 3.715349000 s: git command: 'git' 'pack-objects' '--keep-true-parents' '--honor-pack-keep' '--non-empty' '--all' '--reflog' '--unpack-unreachable=2.weeks.ago' '--local' '--delta-base-offset' '.git/objects/pack/.tmp-49190-pack' 20:18:23.584728 trace.c:414 performance: 0.000910000 s: git command: 'git' 'prune-packed' 20:18:23.605218 trace.c:414 performance: 0.017972000 s: git command: 'git' 'update-server-info' 20:18:23.606342 trace.c:414 performance: 3.756312000 s: git command: 'git' 'repack' '-d' '-l' '-A' '--unpack-unreachable=2.weeks.ago' Checking connectivity: 170994, done. 20:18:25.225424 trace.c:414 performance: 1.616423000 s: git command: 'git' 'prune' '--expire' '2.weeks.ago' 20:18:25.232403 trace.c:414 performance: 0.001051000 s: git command: 'git' 'rerere' 'gc' 20:18:25.233159 trace.c:414 performance: 6.112217000 s: git command: 'git' 'gc' GIT_TRACE_SETUP 显示 Git 发现的关于版本库和交互环境的信息。 $ GIT_TRACE_SETUP=true git status 20:19:47.086765 trace.c:315 setup: git_dir: .git 20:19:47.087184 trace.c:316 setup: worktree: /Users/ben/src/git 20:19:47.087191 trace.c:317 setup: cwd: /Users/ben/src/git 20:19:47.087194 trace.c:318 setup: prefix: (null) On branch master Your branch is up-to-date with 'origin/master'. nothing to commit, working directory clean 8.8 其它 如果指定了 GIT_SSH， Git 连接 SSH 主机时会用指定的程序代替 ssh 。 它会被用 $GIT_SSH [username@]host [-p ] 的命令方式调用。 这不是配置定制 ssh 调用方式的最简单的方法; 它不支持额外的命令行参数， 所以你必须写一个封装脚本然后让 GIT_SSH 指向它。 可能用 ~/.ssh/config 会更简单。 GIT_ASKPASS 覆盖了 core.askpass 配置。 这是 Git 需要向用户请求验证时用到的程序，它接受一个文本提示作为命令行参数，并在 stdout 中返回应答。 （查看 凭证存储_ 访问更多相关内容） GIT_NAMESPACE 控制有命令空间的引用的访问，与 --namespace 标志是相同的。 这主要在服务器端有用， 如果你想在一个版本库中存储单个版本库的多个 fork, 只要保持引用是隔离的就可以。 GIT_FLUSH 强制 Git 在向标准输出增量写入时使用没有缓存的 I/O。 设置为 1 让 Git 刷新更多， 设置为 0 则使所有的输出被缓存。 默认值（若此变量未设置）是根据活动和输出模式的不同选择合适的缓存方案。 GIT_REFLOG_ACTION 让你可以指定描述性的文字写到 reflog 中。 这有个例子： $ GIT_REFLOG_ACTION=\"my action\" git commit --allow-empty -m 'my message' [master 9e3d55a] my message $ git reflog -1 9e3d55a HEAD@{0}: my action: my message 9. 总结 ​ 现在，你应该相当了解 Git 在背后都做了些什么工作，并且在一定程度上也知道了 Git 是如何实现的。 本章讨论了很多底层命令，这些命令比我们在本书其余部分学到的高层命令来得更原始，也更简洁。 从底层了解 Git 的工作原理有助于更好地理解 Git 在内部是如何运作的，也方便你能够针对特定的工作流写出自己的工具和脚本。 ​ 作为一套内容寻址文件系统，Git 不仅仅是一个版本控制系统，它同时是一个非常强大且易用的工具。 我们希望你可以借助新学到的 Git 内部原理相关知识来实现出自己的应用，并且以更高级、更得心应手的方式来驾驭 Git。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Git/AppendixA.html":{"url":"Git/AppendixA.html","title":"附录A：其他环境中的Git","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 图形界面 1.1 gitk 和 git-gui 1.2 Mac 和 Windows 上的 GitHub 客户端 1.2.1 安装 1.2.2 推荐的工作流程 1.2.3 小结 1.3 其它图形界面 2. Visual Studio 中的 Git 3. Eclipse 中的 Git 4. Bash 中的 Git 5. Zsh 中的 Git 6. Powershell 中的 Git 附录A：其他环境中的Git ​ 从头至尾读到了这里，你肯定已经掌握了不少使用 Git 命令行操作的知识。 你学会了操作本地文件，通过网络连接你的仓库，以及与他人进行有效率的合作。 但是故事并未就此结束；Git 通常只是更大的生态圈的一部分，在某些情况下使用终端并不是最合适的方式。 现在就让我们来了解一下如何在其它类型的环境中更好地使用 Git，以及别的应用（包括你的）如何与 Git 进行协作。 1. 图形界面 ​ Git 的原生环境是终端。 在那里，你可以体验到最新的功能，也只有在那里，你才能尽情发挥 Git 的全部能力。 但是对于某些任务而言，纯文本并不是最佳的选择；有时候你确实需要一个可视化的展示方式，而且有些用户更习惯那种能点击的界面。 有一点请注意，不同的界面是为不同的工作流程设计的。 一些客户端的作者为了支持某种他认为高效的工作流程，经过精心挑选，只显示了 Git 功能的一个子集。 每种工具都有其特定的目的和意义，从这个角度来看，不能说某种工具比其它的“更好”。 还有请注意，没有什么事情是图形界面客户端可以做而命令行客户端不能做的；命令行始终是你可以完全操控仓库并发挥出全部力量的地方。 1.1 gitk 和 git-gui ​ 在安装 Git 的同时，你也装好了它提供的可视化工具，gitk 和 git-gui。 ​ gitk 是一个历史记录的图形化查看器。 你可以把它当作是基于 git log 和 git grep 命令的一个强大的图形操作界面。 当你需要查找过去发生的某次记录，或是可视化查看项目历史的时候，你将会用到这个工具。 使用 Gitk 的最简单方法就是从命令行打开。 只需 cd 到一个 Git 仓库，然后键入： $ gitk [git log options] ​ Gitk 可以接受很多命令行选项，其中的大部分都直接传给底层的 git log 去执行了。 --all 可能是这其中最有用的一个, 它告诉 gitk 去尽可能地从 任何 引用查找提交并显示，而不仅仅是从 HEAD。 Gitk 的界面看起来长这样： gitk 历史查看器。 ​ 这张图看起来就和执行 git log --graph 命令的输出差不多；每个点代表一次提交，线代表父子关系，而彩色的方块则用来标示一个个引用。 黄点表示 HEAD，红点表示尚未提交的本地变动。 下方的窗口用来显示当前选中的提交的具体信息；评论和补丁显示在左侧，摘要显示在右侧。 中间则是一组用来搜索历史的控件。 ​ 与之相比，git-gui 则主要是一个用来制作提交的工具。 打开它的最简单方法也是从命令行启动： $ git gui ​ 它的界面长这个样子： git-gui 提交工具。 ​ 左侧是索引区；未暂存的修改显示在上方，已暂存的修改显示在下方。 你可以通过点击文件名左侧的图标来将该文件在暂存状态与未暂存状态之间切换，你也可以通过选中一个文件名来查看它的详情。 ​ 右侧窗口的上方以 diff 格式来显示当前选中文件发生了变动的地方。 你可以通过右击某一区块或行从而将这一区块或行放入暂存区。 ​ 右侧窗口的下方是写日志和执行操作的地方。 在文本框中键入日志然后点击“提交”就和执行 git commit 的效果差不多。 如果你想要修订上一次提交, 可以选中“修订”按钮，上次一提交的内容就会显示在“暂存区”。 然后你就可以简单的对修改进行暂存和取消暂存操作，更新提交日志，然后再次点击“提交”用这个新的提交来覆盖上一次提交。 ​ gitk 和 git-gui 就是针对某种任务设计的工具的两个例子。 它们分别为了不同的目的（即查看历史和制作提交）而进行了精简，略去了用不到的功能。 1.2 Mac 和 Windows 上的 GitHub 客户端 ​ GitHub 发布了两个面向工作流程的 Git 客户端：Windows 版，和 Mac 版。 它们很好的展示了一个面向工作流程的工具应该是什么样子——专注于提升那些常用的功能及其协作的可用性，而不是实现 Git 的 所有 功能. 它们看起来长这个样子： GitHub Mac 客户端。 GitHub Windows 客户端。 ​ 我们在设计的时候就努力将二者的外观和操作体验都保持一致，因此本章会把他们当做同一个产品来介绍。 我们并不会详细地介绍该工具的每一个功能（因为它们本身也有文档），但请快速了解一下“变更”窗口（你大部分时间都会花在使用该窗口上）的以下几点： 左侧是正在追踪的仓库的列表；通过点击左上方的 “+” 图标，你可以添加一个需要追踪的仓库（既可以是通过 clone，也可以从本地添加）。 中间是输入-提交区，你可以在这里输入提交日志，以及选择哪些文件需要被提交。 （在 Windows 上，提交历史就显示在这个区域的下方；在 Mac 上，提交历史有一个单独的窗口） 右侧是修改查看区，它会告诉你工作目录里哪些东西被修改了（译注：修改模式），或选中的提交里包括了哪些修改（译注：历史模式）。 最后需要熟悉的是右上角的 “Sync” 按钮，你主要通过这个按钮来进行网络上的交互。 Notes:你不需要注册 GitHub 账号也可以使用这些工具。 尽管它们是按照 GitHub 推荐的工作流程来设计的，并突出提升了一些 GitHub 的服务体验，但它们可以在任何 Git 仓库上工作良好，也可以通过网络连接到任意 Git 主机。 1.2.1 安装 ​ GitHub 的 Windows 客户端可以从 https://windows.github.com 下载，Mac 客户端可以从 https://mac.github.com下载。 第一次打开软件时，它会引导你进行一系列的首次使用设置，例如设置你的姓名和电子邮件，它还会智能地帮你调整一些常用的默认设置，例如凭证缓存和 CRLF 的处理方式。 ​ 它们都是“绿色软件”——如果软件打开发现有更新，下载和安装升级包都是在后台完成的。 为方便起见它们还打包了一份 Git，也就是说你一旦安装好就再也无需劳心升级的事情了。 Windows 的客户端还提供了快捷方式，可以启动装了 Posh-git 插件的 Powershell，在本章的后面一节我们会详细介绍这方面的内容。 ​ 接下来我们给它设置一些工作仓库。 客户端会显示你在 GitHub 上有权限操作的仓库的列表，你可以选择一个然后一键克隆。 如果你本地已经建立了仓库，只需要用鼠标把它从 Finder 或 Windows 资源管理器拖进 GitHub 客户端窗口，就可以把该仓库添加到左侧的仓库列表里面去了。 1.2.2 推荐的工作流程 安 装并配置好以后，你就可以使用 GitHub 客户端来执行一些常见的 Git 任务。 该工具所推荐的工作流程有时也被叫做 “GitHub 流”。 我们在 [GitHub 流程]一节中对此有详细的介绍，其要点是 (a) 你会提交到一个分支；(b) 你需要经常与远程仓库保持同步。 ​ 两个平台上的客户端在分支管理上有所不同。 在 Mac 上，创建分支的按钮在窗口的上方： Mac 上的“创建分支”按钮。 ​ 在 Windows 上，你可以通过在分支切换挂件中输入新分支的名称来完成创建： 在 Windows 上创建分支。 ​ 分支创建好以后，新建提交就变得非常简单直接了。 现在工作目录中做一些修改，然后切换到 GitHub 客户端窗口，你所做的修改就会显示在那里。 输入提交日志，选中那些需要被包含在本次提交中的文件，然后点击“提交”按钮（也可以在键盘上按 ctrl-enter 或 ⌘-enter）。 ​ “同步”功能是你在网络上和其它仓库交互的主要途径。 push，fetch，merge，和 rebase 在 Git 内部是一连串独立的操作, 而 GitHub 客户端将这些操作都合并成了单独一个功能。 你点击同步按钮时实际上会发生如下这些操作： git pull --rebase。 如果上述命令由于存在合并冲突而失败，则会退而执行 git pull --no-rebase。 git push。 ​ 如果你遵循推荐的工作流程，以上就是最常用的一系列命令，因此将它们合并为一个让事情简单了很多。 1.2.3 小结 ​ 这些工具是为其各自针对的工作流程所量身定做的。 开发者和非开发者可以轻松地在分分钟内就搭建起项目协作环境，它们还内置了其它辅助最佳实践的功能。 但是，如果你的工作流程有所不同，或者你需要在进行网络操作时有更多的控制，那么建议你考虑一下其它客户端或者使用命令行。 1.3 其它图形界面 ​ 除此之外，还有许许多多其它的图形化 Git 客户端，其中既有单一功能的定制工具，也有试图提供 Git 所有功能的复杂应用。 Git 的官方网站整理了一份时下最流行的客户端的清单 http://git-scm.com/downloads/guis。 在 Git 的维基站点还可以看到一份更全的清单 https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Graphical_Interfaces. 2. Visual Studio 中的 Git ​ 从 Visual Studio 2013 Update 1 版本开始，Visual Studio 用户可以在他们的 IDE 中直接使用内嵌的 Git 客户端。 Visual Studio 集成源代码版本控制特性已经有很长一段时间，但面向的是集中式、文件锁定方式的系统，Git 并不能很好地符合这种工作流程。 Visual Studio 2013 中已经支持 Git，并独立于原有版本管理系统，这使得 Visual Studio 和 Git 能更好地相互适应。 ​ 想要找到这个特性，在 Visual Studio 中打开一个已经用 Git 管理的项目（或者直接在项目目录中 git init ），选择菜单 View > Team Explorer。 你将看到 \"Connect\" 视图，大概如下图所示： 从 Team Explorer 中连接 Git 仓库。 ​ Visual Studio 能够记住所有你打开过的用 Git 管理的项目，它们都在下方的列表中。 如果没看到你想要的项目，点击 \"Add\" 按钮，添加项目工作目录的路径。 双击其中一个本地的 Git 仓库会将你带入 \"Home\" 视图，大概如 [Visual Studio 中的 Git 仓库的 “Home” 视图。]所示。 这是一个执行 Git 操作的操作中心；当你 正在编写 代码的时候，你可能主要关注 \"Changes\" 视图，当需要拉取同伴的改动时，你将使用 \"Unsynced Commits\" 和 \"Branches\" 视图。 Visual Studio 中的 Git 仓库的 “Home” 视图。 ​ Visual Studio 现在拥有一套着眼于任务的强大 Git 操作界面。 它包括线性的历史视图、diff 视图、远程仓库操作命令，以及其它很多功能。 这个特性的完整文档（放在这里并不合适）请参阅 http://msdn.microsoft.com/en-us/library/hh850437.aspx 。 3. Eclipse 中的 Git ​ Eclipse 附带了一个名为 Egit 的插件，它提供了一个非常完善的 Git 操作接口。 这个插件可以通过切换到 Git 视图来使用。（ Window > Open Perspective > Other…， 然后选择 “Git” ）。 Eclipse 中 EGit 的界面环境。 ​ EGit 提供了许多强大的帮助文档，你能通过下面的操作来访问它：单击菜单 Help > Help Contents，然后从内容列表中选择 “EGit Documentation” 节点。 4. Bash 中的 Git ​ 如果你是一名 Bash 用户，你可以从中发掘出一些 Shell 的特性，让你在使用 Git 时更加随心所欲。 实际上 Git 附带了几个 Shell 的插件，但是这些插件并不是默认打开的。 ​ 首先，你需要从 Git 源代码中获得一份 contrib/completion/git-completion.bash 文件的拷贝。 将这个文件复制到一个相对便捷的目录，例如你的 Home 目录，并且将它的路径添加到 .bashrc 中： . ~/git-completion.bash ​ 做完这些之后，请将你当前的目录切换到某一个 Git 仓库，并且输入： $ git chec ​ ……此时 Bash 将会把上面的命令自动补全为 git checkout。 在适当的情况下，这项功能适用于 Git 所有的子命令、命令行参数、以及远程仓库与引用名。 ​ 这项功能也可以用于你自己定义的提示符（prompt），显示当前目录下 Git 仓库的信息。 根据你的需要，这个信息可以简单或复杂，这里通常有大多数人想要的几个关键信息，比如当前分支信息和当前工作目录的状态信息。 要添加你自己的提示符（prompt），只需从 Git 源版本库复制 contrib/completion/git-prompt.sh 文件到你的 Home 目录（或其他便于你访问与管理的目录）， 并在 .bashrc 里添加这个文件路径，类似于下面这样： . ~/git-prompt.sh export GIT_PS1_SHOWDIRTYSTATE=1 export PS1='\\w$(__git_ps1 \" (%s)\")\\$ ' ​ \\w 表示打印当前工作目录，\\$ 打印 $ 部分的提示符（prompt），__git_ps1 \" (%s)\" 表示通过格式化参数符（%s）调用git-prompt.sh脚本中提供的函数。 因为有了这个自定义提示符，现在你的 Bash 提示符（prompt）在 Git 仓库的任何子目录中都将显示成这样： 自定义的 bash 提示符（prompt）. ​ 这两个脚本都提供了很有帮助的文档；浏览 git-completion.bash 和 git-prompt.sh 的内容以获得更多信息。 5. Zsh 中的 Git ​ Git 还为 Zsh 提供了一个 Tab 补全库。 复制 contrib/completion/git-completion.zsh 到你的 home 目录，然后在 .zshrc 中 source 即可。 相对于 Bash，Zsh 的接口更加强大： $ git che check-attr -- 显示 gitattributes 信息 check-ref-format -- 检查引用名称是否符合规范 checkout -- 从工作区中检出分支或路径 checkout-index -- 从暂存区拷贝文件至工作目录 cherry -- 查找没有被合并至上游的提交 cherry-pick -- 从一些已存在的提交中应用更改 ​ 意义不明的 Tab 补全并不仅仅会被列出；它们还会有帮助性的描述，你可以通过不断敲击 Tab 以图形方式浏览补全列表。 该功能可用于 Git 命令、它们的参数和在仓库中内容的名称（例如 refs 和 remotes），还有文件名和其他所有 Zsh 知道如何去补全的项目。 ​ 在提示符自定义方面，Zsh 很好地兼容了 Bash，并允许你同时使用一个右侧提示符。 把如下代码添加至你的 ~/.zshrc 文件中，就可以在右侧显示分支名称： setopt prompt_subst . ~/git-prompt.sh export RPROMPT=$'$(__git_ps1 \"%s\")' ​ 当你的命令行位于一个 Git 仓库目录时，在任何时候，都可以在命令行窗口右侧显示当前分支。 它看起来像这样： 自定义 zsh 提示符. ​ Zsh 本身已足够强大，但还有一些专门为它打造的完整框架，使它更加完善。 其中之一名为 \"oh-my-zsh\"，你可以在 https://github.com/robbyrussell/oh-my-zsh 找到它。 oh-my-zsh 的扩展系统包含强大的 Git Tab 补全功能，且许多提示符 \"主题\" 可以展示版本控制数据。 [一个 oh-my-zsh 主题的示例.]只是可以其中一个可以通过该系统实现的例子。 一个 oh-my-zsh 主题的示例. 6. Powershell 中的 Git ​ Windows 中的普通命令行终端（ cmd.exe ）无法自定义 Git 使用体验，但是如果你正在使用 Powershell，那么你就十分幸运了。 一个名为 Posh-Git（https://github.com/dahlbyk/posh-git[]） 的扩展包提供了强大的 tab 补全功能， 并针对提示符进行了增强，以帮助你聚焦于你的仓库状态。 它看起来像： 附带了 Posh-Git 扩展包的 Powershell。 ​ 如果你已经在 Windows 上安装了 GitHub，Posh-Git 也会被安装，你只需要添加以下两行到你的 profile.ps1 文件 (文件位于 C:\\Users\\\\Documents\\WindowsPowerShell): . (Resolve-Path \"$env:LOCALAPPDATA\\GitHub\\shell.ps1\") . $env:github_posh_git\\profile.example.ps1 ​ 如果你没有在 Windows 上安装 GitHub，只需要从 (https://github.com/dahlbyk/posh-git) 下载一份 Posh-Git 发行版，并且解压至 WindowsPowershell 目录。 然后以管理员权限打开 Powershell 提示符，并且执行下面的命令： > Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Confirm > cd ~\\Documents\\WindowsPowerShell\\posh-git > .\\install.ps1 ​ 它将会向你的 profile.ps1 文件添加适当的内容，Posh-Git 将会在下次打开提示符时被启用。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Git/AppendixB.html":{"url":"Git/AppendixB.html","title":"附录B：将Git嵌入你的系统","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 命令行 Git 方式 2. Libgit2 2.1 高级功能 2.2 其它绑定 2.2.1 LibGit2Sharp 2.2.2 objective-git 2.2.3 pygit2 2.3 扩展阅读 3. JGit 3.1 起步 3.2 底层命令 3.3 高层命令 3.4 拓展阅读 附录B：将Git嵌入你的系统 ​ 假设你的应用程序的目标人群是开发者，如果它能够被整合进一些源码控制的功能，那真真是极好的。 甚至对于一个例如文档编辑器之类的不是为开发者而设计的应用程序，它们也可能从版本控制系统中受益，并且 Git 的实现方式在很多情况下都表现得非常出色。 ​ 如果你想将 Git 整合进你的应用程序的话，一般来说你有三种可能的选择：启动一个 shell 来使用 Git 的命令行工具；使用 Libgit2；或者使用 JGit。 1. 命令行 Git 方式 ​ 一种方式就是启动一个 shell 进程并在里面使用 Git 的命令行工具来完成任务。 这种方式看起来很循规蹈矩，但是它的优点也因此而来，就是支持所有的 Git 的特性。 它也碰巧相当简单，因为几乎所有运行时环境都有一个相对简单的方式来调用一个带有命令行参数的进程。 然而，这种方式也有一些固有的缺点。 ​ 一个就是所有的输出都是纯文本格式。 这意味着你将被迫解析 Git 的有时会改变的输出格式，以随时了解它工作的进度和结果。更糟糕的是，这可能是无效率并且容易出错的。 ​ 另外一个就是令人捉急的错误修复能力。 如果一个版本库被莫名其妙地损毁，或者用户使用了一个奇奇怪怪的配置， Git 只会简单地拒绝表现自己的强大能力。 ​ 还有一个就是进程的管理。 Git 会要求你在一个独立的进程中维护一个 shell 环境，这可能会无谓地增加复杂性。 试图协调许许多多的类似的进程（尤其是在某些情况下，当不同的进程在访问相同的版本库时）是对你的能力的极大挑战。 2. Libgit2 ​ © 另外一种可以供你使用的是 Libgit2。 Libgit2 是一个 Git 的非依赖性的工具，它致力于为其他程序使用 Git 提供更好的 API。 你可以在 http://libgit2.github.com 找到它。 ​ 首先，让我们来看一下 C API 长啥样。 这是一个旋风式旅行。 // 打开一个版本库 git_repository *repo; int error = git_repository_open(&repo, \"/path/to/repository\"); // 逆向引用 HEAD 到一个提交 git_object *head_commit; error = git_revparse_single(&head_commit, repo, \"HEAD^{commit}\"); git_commit *commit = (git_commit*)head_commit; // 显示这个提交的一些详情 printf(\"%s\", git_commit_message(commit)); const git_signature *author = git_commit_author(commit); printf(\"%s \\n\", author->name, author->email); const git_oid *tree_id = git_commit_tree_id(commit); // 清理现场 git_commit_free(commit); git_repository_free(repo); ​ 前两行打开一个 Git 版本库。 这个 git_repository 类型代表了一个在内存中带有缓存的指向一个版本库的句柄。 这是最简单的方法，只是你必须知道一个版本库的工作目录或者一个 .git 文件夹的精确路径。 另外还有 git_repository_open_ext ，它包括了带选项的搜索， git_clone 及其同类可以用来做远程版本库的本地克隆， git_repository_init 则可以创建一个全新的版本库。 ​ 第二段代码使用了一种 rev-parse 语法（要了解更多，请看 [分支引用]）来得到 HEAD 真正指向的提交。 返回类型是一个 git_object 指针，它指代位于版本库里的 Git 对象数据库中的某个东西。 git_object 实际上是几种不同的对象的“父”类型，每个“子”类型的内存布局和 git_object 是一样的，所以你能安全地把它们转换为正确的类型。 在上面的例子中， git_object_type(commit) 会返回 GIT_OBJ_COMMIT ，所以转换成 git_commit 指针是安全的。 ​ 下一段展示了如何访问一个提交的详情。 最后一行使用了 git_oid 类型，这是 Libgit2 用来表示一个 SHA-1 哈希的方法。 从这个例子中，我们可以看到一些模式： 如果你声明了一个指针，并在一个 Libgit2 调用中传递一个引用，那么这个调用可能返回一个 int 类型的错误码。 值 0 表示成功，比它小的则是一个错误。 如果 Libgit2 为你填入一个指针，那么你有责任释放它。 如果 Libgit2 在一个调用中返回一个 const 指针，你不需要释放它，但是当它所指向的对象被释放时它将不可用。 用 C 来写有点蛋疼。 ​ 最后一点意味着你应该不会在使用 Libgit2 时编写 C 语言程序。 但幸运的是，有许多可用的各种语言的绑定，能让你在特定的语言和环境中更加容易的操作 Git 版本库。 我们来看一下下面这个用 Libgit2 的 Ruby 绑定写成的例子，它叫 Rugged，你可以在 https://github.com/libgit2/rugged 找到它。 repo = Rugged::Repository.new('path/to/repository') commit = repo.head.target puts commit.message puts \"#{commit.author[:name]} \" tree = commit.tree ​ 你可以发现，代码看起来更加清晰了。 首先， Rugged 使用异常机制，它可以抛出类似于 ConfigError 或者 ObjectError 之类的东西来告知错误的情况。 其次，不需要明确资源释放，因为 Ruby 是支持垃圾回收的。 我们来看一个稍微复杂一点的例子：从头开始制作一个提交。 blob_id = repo.write(\"Blob contents\", :blob) (1) index = repo.index index.read_tree(repo.head.target.tree) index.add(:path => 'newfile.txt', :oid => blob_id) (2) sig = { :email => \"bob@example.com\", :name => \"Bob User\", :time => Time.now, } commit_id = Rugged::Commit.create(repo, :tree => index.write_tree(repo), (3) :author => sig, :committer => sig, (4) :message => \"Add newfile.txt\", (5) :parents => repo.empty? ? [] : [ repo.head.target ].compact, (6) :update_ref => 'HEAD', (7) ) commit = repo.lookup(commit_id) (8) 创建一个新的 blob ，它包含了一个新文件的内容。 将 HEAD 提交树填入索引，并在路径 newfile.txt 增加新文件。 这就在 ODB 中创建了一个新的树，并在一个新的提交中使用它。 我们在 author 栏和 committer 栏使用相同的签名。 提交的信息。 当创建一个提交时，你必须指定这个新提交的父提交。 这里使用了 HEAD 的末尾作为单一的父提交。 在做一个提交的过程中， Rugged （和 Libgit2 ）能在需要时更新引用。 返回值是一个新提交对象的 SHA-1 哈希，你可以用它来获得一个 Commit 对象。 ​ Ruby 的代码很好很简洁，另一方面因为 Libgit2 做了大量工作，所以代码运行起来其实速度也不赖。 如果你不是一个 Ruby 程序员，我们在 [其它绑定]有提到其它的一些绑定。 2.1 高级功能 ​ Libgit2 有几个超过核心 Git 的能力。 例如它的可定制性：Libgit2 允许你为一些不同类型的操作自定义的“后端”，让你得以使用与原生 Git 不同的方式存储东西。 Libgit2 允许为自定义后端指定配置、引用的存储以及对象数据库， ​ 我们来看一下它究竟是怎么工作的。 下面的例子借用自 Libgit2 团队提供的后端样本集 （可以在 https://github.com/libgit2/libgit2-backends 上找到）。 一个对象数据库的自定义后端是这样建立的： git_odb *odb; int error = git_odb_new(&odb); (1) git_odb_backend *my_backend; error = git_odb_backend_mine(&my_backend, /*…*/); (2) error = git_odb_add_backend(odb, my_backend, 1); (3) git_repository *repo; error = git_repository_open(&repo, \"some-path\"); error = git_repository_set_odb(odb); (4) （注意：这个错误被捕获了，但是没有被处理。我们希望你的代码比我们的更好。） 初始化一个空的对象数据库（ ODB ）“前端”，它将被作为一个用来做真正的工作的“后端”的容器。 初始化一个自定义 ODB 后端。 为这个前端增加一个后端。 打开一个版本库，并让它使用我们的 ODB 来寻找对象。 ​ 但是 git_odb_backend_mine 是个什么东西呢？ 嗯，那是一个你自己的 ODB 实现的构造器，并且你能在那里做任何你想做的事，前提是你能正确地填写 git_odb_backend 结构。 它看起来应该是这样的： typedef struct { git_odb_backend parent; // 其它的一些东西 void *custom_context; } my_backend_struct; int git_odb_backend_mine(git_odb_backend **backend_out, /*…*/) { my_backend_struct *backend; backend = calloc(1, sizeof (my_backend_struct)); backend->custom_context = …; backend->parent.read = &my_backend__read; backend->parent.read_prefix = &my_backend__read_prefix; backend->parent.read_header = &my_backend__read_header; // …… *backend_out = (git_odb_backend *) backend; return GIT_SUCCESS; } ​ my_backend_struct 的第一个成员必须是一个 git_odb_backend 结构，这是一个微妙的限制：这样就能确保内存布局是 Libgit2 的代码所期望的样子。 其余都是随意的，这个结构的大小可以随心所欲。 ​ 这个初始化函数为该结构分配内存，设置自定义的上下文，然后填写它支持的 parent 结构的成员。 阅读 Libgit2 的 include/git2/sys/odb_backend.h 源码以了解全部调用签名，你特定的使用环境会帮你决定使用哪一种调用签名。 2.2 其它绑定 ​ Libgit2 有很多种语言的绑定。 在这篇文章中，我们展现了一个使用了几个更加完整的绑定包的小例子，这些库存在于许多种语言中，包括 C++、Go、Node.js、Erlang 以及 JVM ，它们的成熟度各不相同。 官方的绑定集合可以通过浏览这个版本库得到：https://github.com/libgit2[] 。 我们写的代码将返回当前 HEAD 指向的提交的提交信息（就像 git log -1 那样）。 2.2.1 LibGit2Sharp ​ 如果你在编写一个 .NET 或者 Mono 应用，那么 LibGit2Sharp（https://github.com/libgit2/libgit2sharp[]） 就是你所需要的。 这个绑定是用 C# 写成的，并且已经采取许多措施来用令人感到自然的 CLR API 包装原始的 Libgit2 的调用。 我们的例子看起来就像这样： new Repository(@\"C:\\path\\to\\repo\").Head.Tip.Message; ​ 对于 Windows 桌面应用，一个叫做 NuGet 的包会让你快速上手。 2.2.2 objective-git ​ 如果你的应用运行在一个 Apple 平台上，你很有可能使用 Objective-C 作为实现语言。 Objective-Git (https://github.com/libgit2/objective-git) 是这个环境下的 Libgit2 绑定。 一个例子看起来类似这样： GTRepository *repo = [[GTRepository alloc] initWithURL:[NSURL fileURLWithPath: @\"/path/to/repo\"] error:NULL]; NSString *msg = [[[repo headReferenceWithError:NULL] resolvedTarget] message]; ​ Objective-git 与 Swift 完美兼容，所以你把 Objective-C 落在一边的时候不用恐惧。 2.2.3 pygit2 ​ Python 的 Libgit2 绑定叫做 Pygit2 ，你可以在 http://www.pygit2.org/ 找到它。 我们的示例程序： pygit2.Repository(\"/path/to/repo\") # 打开版本库 .head # get the current branch .peel(pygit2.Commit) # walk down to the commit .message # read the message 2.3 扩展阅读 ​ 当然，完全阐述 Libgit2 的能力已超出本书范围。 如果你想了解更多关于 Libgit2 的信息，可以浏览它的 API 文档： https://libgit2.github.com/libgit2, 以及一系列的指南： https://libgit2.github.com/docs. 对于其它的绑定，检查附带的 README 和测试文件，那里通常有简易教程，以及指向拓展阅读的链接。 3. JGit ​ 如果你想在一个 Java 程序中使用 Git ，有一个功能齐全的 Git 库，那就是 JGit 。 JGit 是一个用 Java 写成的功能相对健全的 Git 的实现，它在 Java 社区中被广泛使用。 JGit 项目由 Eclipse 维护，它的主页在 http://www.eclipse.org/jgit 。 3.1 起步 ​ 有很多种方式可以让 JGit 连接你的项目，并依靠它去写代码。 最简单的方式也许就是使用 Maven 。你可以通过在你的 pom.xml 文件里的 标签中增加像下面这样的片段来完成这个整合。 org.eclipse.jgit org.eclipse.jgit 3.5.0.201409260305-r ​ 在你读到这段文字时 version 很可能已经更新了，所以请浏览 http://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit 以获取最新的仓库信息。 当这一步完成之后， Maven 就会自动获取并使用你所需要的 JGit 库。 ​ 如果你想自己管理二进制的依赖包，那么你可以从 http://www.eclipse.org/jgit/download 获得预构建的 JGit 二进制文件。 你可以像下面这样执行一个命令来将它们构建进你的项目。 javac -cp .:org.eclipse.jgit-3.5.0.201409260305-r.jar App.java java -cp .:org.eclipse.jgit-3.5.0.201409260305-r.jar App 3.2 底层命令 ​ JGit 的 API 有两种基本的层次：底层命令和高层命令。 这个两个术语都来自 Git ，并且 JGit 也被按照相同的方式粗略地划分：高层 API 是一个面向普通用户级别功能的友好的前端（一系列普通用户使用 Git 命令行工具时可能用到的东西），底层 API 则直接作用于低级的仓库对象。 ​ 大多数 JGit 会话会以 Repository 类作为起点，你首先要做的事就是创建一个它的实例。 对于一个基于文件系统的仓库来说（嗯， JGit 允许其它的存储模型），用 FileRepositoryBuilder 完成它。 // 创建一个新仓库 Repository newlyCreatedRepo = FileRepositoryBuilder.create( new File(\"/tmp/new_repo/.git\")); newlyCreatedRepo.create(); // 打开一个存在的仓库 Repository existingRepo = new FileRepositoryBuilder() .setGitDir(new File(\"my_repo/.git\")) .build(); ​ 无论你的程序是否知道仓库的确切位置，builder 中的那个流畅的 API 都可以提供给它寻找仓库所需所有信息。 它可以使用环境变量 （.readEnvironment()） ，从工作目录的某处开始并搜索 （.setWorkTree(…).findGitDir()） , 或者仅仅只是像上面那样打开一个已知的 .git 目录。 ​ 当你拥有一个 Repository 实例后，你就能对它做各种各样的事。 下面是一个速览： // 获取引用 Ref master = repo.getRef(\"master\"); // 获取该引用所指向的对象 ObjectId masterTip = master.getObjectId(); // Rev-parse ObjectId obj = repo.resolve(\"HEAD^{tree}\"); // 装载对象原始内容 ObjectLoader loader = repo.open(masterTip); loader.copyTo(System.out); // 创建分支 RefUpdate createBranch1 = repo.updateRef(\"refs/heads/branch1\"); createBranch1.setNewObjectId(masterTip); createBranch1.update(); // 删除分支 RefUpdate deleteBranch1 = repo.updateRef(\"refs/heads/branch1\"); deleteBranch1.setForceUpdate(true); deleteBranch1.delete(); // 配置 Config cfg = repo.getConfig(); String name = cfg.getString(\"user\", null, \"name\"); ​ 这里完成了一大堆事情，所以我们还是一次理解一段的好。 ​ 第一行获取一个指向 master 引用的指针。 JGit 自动抓取位于 refs/heads/master 的 真正的 master 引用，并返回一个允许你获取该引用的信息的对象。 你可以获取它的名字 （.getName()） ，或者一个直接引用的目标对象 （.getObjectId()） ，或者一个指向该引用的符号指针 （.getTarget()） 。 引用对象也经常被用来表示标签的引用和对象，所以你可以询问某个标签是否被“削除”了，或者说它指向一个标签对象的（也许很长的）字符串的最终目标。 ​ 第二行获得以 master 引用的目标，它返回一个 ObjectId 实例。 不管是否存在于一个 Git 对象的数据库，ObjectId 都会代表一个对象的 SHA-1 哈希。 第三行与此相似，但是它展示了 JGit 如何处理 rev-parse 语法（要了解更多，请看 [分支引用]），你可以传入任何 Git 了解的对象说明符，然后 JGit 会返回该对象的一个有效的 ObjectId ，或者 null 。 ​ 接下来两行展示了如何装载一个对象的原始内容。 在这个例子中，我们调用 ObjectLoader.copyTo() 直接向标准输出流输出对象的内容，除此之外 ObjectLoader 还带有读取对象的类型和长度并将它以字节数组返回的方法。 对于一个（ .isLarge() 返回 true 的）大的对象，你可以调用 .openStream() 来获得一个类似 InputStream 的对象，它可以在没有一次性将所有数据拉到内存的前提下读取对象的原始数据。 ​ 接下来几行展现了如何创建一个新的分支。 我们创建一个 RefUpdate 实例，配置一些参数，然后调用 .update() 来确认这个更改。 删除相同分支的代码就在这行下面。 记住必须先 .setForceUpdate(true) 才能让它工作，否则调用 .delete() 只会返回 REJECTED ，然后什么都没有发生。 ​ 最后一个例子展示了如何从 Git 配置文件中获取 user.name 的值。 这个 Config 实例使用我们先前打开的仓库做本地配置，但是它也会自动地检测并读取全局和系统的配置文件。 ​ 这只是底层 API 的冰山一角，另外还有许多可以使用的方法和类。 还有一个没有放在这里说明的，就是 JGit 是用异常机制来处理错误的。 JGit API 有时使用标准的 Java 异常（例如 IOException ），但是它也提供了大量 JGit 自己定义的异常类型（例如 NoRemoteRepositoryException、 CorruptObjectException 和 NoMergeBaseException）。 3.3 高层命令 ​ 底层 API 更加完善，但是有时将它们串起来以实现普通的目的非常困难，例如将一个文件添加到索引，或者创建一个新的提交。 为了解决这个问题， JGit 提供了一系列高层 API ，使用这些 API 的入口点就是 Git 类： Repository repo; // 构建仓库。。。 Git git = new Git(repo); ​ Git 类有一系列非常好的 构建器 风格的高层方法，它可以用来构造一些复杂的行为。 我们来看一个例子——做一件类似 git ls-remote 的事。 CredentialsProvider cp = new UsernamePasswordCredentialsProvider(\"username\", \"p4ssw0rd\"); Collection remoteRefs = git.lsRemote() .setCredentialsProvider(cp) .setRemote(\"origin\") .setTags(true) .setHeads(false) .call(); for (Ref ref : remoteRefs) { System.out.println(ref.getName() + \" -> \" + ref.getObjectId().name()); } ​ 这是一个 Git 类的公共样式，这个方法返回一个可以让你串连若干方法调用来设置参数的命令对象，当你调用 .call() 时它们就会被执行。 在这情况下，我们只是请求了 origin 远程的标签，而不是头部。 还要注意用于验证的 CredentialsProvider 对象的使用。 ​ 在 Git 类中还可以使用许多其它的命令，包括但不限于 add、blame、commit、clean、push、rebase、revert 和 reset。 3.4 拓展阅读 ​ 这只是 JGit 的全部能力的冰山一角。 如果你对这有兴趣并且想深入学习，在下面可以找到一些信息和灵感。 JGit API 在线官方文档： http://download.eclipse.org/jgit/docs/latest/apidocs 。 这是基本的 Javadoc ，所以你也可以在你最喜欢的 JVM IDE 上将它们安装它们到本地。 JGit Cookbook ： https://github.com/centic9/jgit-cookbook 拥有许多如何利用 JGit 实现特定任务的例子。 http://stackoverflow.com/questions/6861881 指出了几个好的资源。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Git/AppendixC.html":{"url":"Git/AppendixC.html","title":"附录C：Git命令","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 设置与配置 1.1 git config 1.2 git config core.editor 命令 1.3 git help 2. 获取与创建项目 2.1 git init 2.2 git clone 3. 快照基础 3.1 git add 3.2 git status 3.3 git diff 3.4 git difftool 3.5 git commit 3.6 git reset 3.7 git rm 3.8 git mv 3.9 git clean 4. 分支与合并 4.1 git branch 4.2 git checkout 4.3 git merge 4.4 git mergetool 4.5 git log 4.6 git stash 4.7 git tag 5. 项目分享与更新 5.1 git fetch 5.2 git pull 5.3 git push 5.4 git remote 5.5 git archive 5.6 git submodule 6. 检查与比较 6.1 git show 6.2 git shortlog 6.3 git describe 7. 调试 7.1 git bisect 7.2 git blame 7.3 git grep 8. 补丁 8.1 git cherry-pick 8.2 git rebase 8.3 git revert 9. 邮件 9.1 git apply 9.2 git am 9.3 git format-patch 9.4 git imap-send 9.5 git send-email 9.6 git request-pull 10. 外部系统 10.1 git svn 10.2 git fast-import 11. 管理 11.1 git gc 11.1 git fsck 11.2 git reflog 11.3 git filter-branch 12. 底层命令 附录C：Git命令 ​ 在这一整本书里我们介绍了大量的 Git 命令，并尽可能的通过讲故事的的方式来介绍它们，慢慢的介绍了越来越多的命令。 但是这导致这些命令的示例用法都散落在在全书的各处。 在此附录中，我们会将本书中所提到过的命令都过一遍，并根据其用途大致的分类。 我们会大致地讨论每个命的作用，指出其在本书中哪些章节使用过。 1. 设置与配置 ​ 有两个命令使用得最多了，从第一次调用 Git 到每天的日常微调及参考，这个两个命令就是： config 和 help 命令。 1.1 git config ​ Git 做的很多工作都有一个默认方式。 对于绝大多数工作而言，你可以改变 Git 的默认方式，或者根据你的偏好来设置。 这些设置涵盖了所有的事，从告诉 Git 你的名字，到指定偏好的终端颜色，以及你使用的编辑器。 此命令会从几个特定的配置文件中读取和写入配置值，以便你可以从全局或者针对特定的仓库来进行设置。 本书的所有章节几乎都有用到 git config 命令。 在 [初次运行 Git 前的配置] 一节中，在开始使用 Git 之前，我们用它来指定我们的名字，邮箱地址和编辑器偏好。 在 [Git 别名] 一节中我们展示了如何创建可以展开为长选项序列的短命令，以便你不用每次都输入它们。 在 [变基] 一节中，执行 git pull 命令时，使用此命令来将 --rebase 作为默认选项。 在 [凭证存储] 一节中，我们使用它来为你的 HTTP 密码设置一个默认的存储区域。 在 [关键字展开]一节中我们展示了如何设置在 Git 的内容添加和减少时使用的 smudge 过滤器 和 clean 过滤器。 最后，基本上 [配置 Git]整个章节都是针对此命令的。 1.2 git config core.editor 命令 ​ 就像 [初次运行 Git 前的配置] 里的设置指示，很多编辑器可以如下设置： 编辑器 设置命令 Atom git config --global core.editor \"atom --wait\" BBEdit (Mac, with command line tools) git config --global core.editor \"bbedit -w\" Emacs git config --global core.editor emacs Gedit (Linux) git config --global core.editor \"gedit --wait --new-window\" Gvim (Windows 64-bit) git config --global core.editor \"'C:/Program Files/Vim/vim72/gvim.exe' --nofork '%*'\" (Also see note below) Kate (Linux) git config --global core.editor \"kate\" nano git config --global core.editor \"nano -w\" Notepad (Windows 64-bit) git config core.editor notepad Notepad++ (Windows 64-bit) git config --global core.editor \"C:/Program Files/Notepad/notepad.exe -multiInst -notabbar -nosession -noPlugin\" (Also see note below) Scratch (Linux) git config --global core.editor \"scratch-text-editor\" Sublime Text (macOS) git config --global core.editor \"/Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl --new-window --wait\" Sublime Text (Windows 64-bit) git config --global core.editor \"'C:/Program Files/Sublime Text 3/sublime_text.exe' -w\" (Also see note below) Textmate git config --global core.editor \"mate -w\" Textpad (Windows 64-bit) git config --global core.editor \"'C:/Program Files/TextPad 5/TextPad.exe' -m (Also see note below) Vim git config --global core.editor \"vim\" VS Code git config --global core.editor \"code --wait\" WordPad git config --global core.editor '\"C:\\Program Files\\Windows NT\\Accessories\\wordpad.exe\"'\" Xi git config --global core.editor \"xi --wait\" Notes:如果你在 64 位 Windows 系统上安装了 32 位的文本编辑器，它会被安装在 C:\\Program Files (x86)\\ 而不是上面表格所写的 C:\\Program Files\\ 。 1.3 git help ​ git help 命令用来显示任何命令的 Git 自带文档。 但是我们仅会在此附录中提到大部分最常用的命令，对于每一个命令的完整的可选项及标志列表，你可以随时运行 git help 命令来了解。 ​ 我们在 [获取帮助]一节中介绍了 git help 命令，同时在 [配置服务器]一节中给你展示了如何使用它来查找更多关于 git shell 的信息。 2. 获取与创建项目 ​ 有几种方式获取一个 Git 仓库。 一种是从网络上或者其他地方拷贝一个现有的仓库，另一种就是在一个目录中创建一个新的仓库。 2.1 git init 你只需要简单地运行 git init 就可以将一个目录转变成一个 Git 仓库，这样你就可以开始对它进行版本管理了。 我们一开始在 [获取 Git 仓库] 一节中介绍了如何创建一个新的仓库来开始工作。 在 [远程分支] 一节中我们简单的讨论了如何改变默认分支。 在 [把裸仓库放到服务器上] 一节中我们使用此命令来为一个服务器创建一个空的祼仓库。 最后，我们在 [底层命令和高层命令]一节中介绍了此命令背后工作的原理的一些细节。 2.2 git clone git clone 实际上是一个封装了其他几个命令的命令。 它创建了一个新目录，切换到新的目录，然后 git init 来初始化一个空的 Git 仓库， 然后为你指定的 URL 添加一个（默认名称为 origin 的）远程仓库（git remote add），再针对远程仓库执行 git fetch，最后通过 git checkout 将远程仓库的最新提交检出到本地的工作目录。 git clone 命令在本书中多次用到，这里只列举几个有意思的地方。 在 [克隆现有的仓库]一节中我们通过几个示例详细介绍了此命令。 在 [在服务器上搭建 Git]一节中，我们使用了 --bare 选项来创建一个没有任何工作目录的 Git 仓库副本。 在 [打包]一节中我们使用它来解包一个打包好的 Git 仓库。 最后，在 [克隆含有子模块的项目]一节中我们学习了使用 --recursive 选项来让克隆一个带有子模块的仓库变得简单。 虽然在本书的其他地方都有用到此命令，但是上面这些用法是特例，或者使用方式有点特别。 3. 快照基础 ​ 对于基本的暂存内容及提交到你的历史记录中的工作流，只有少数基本的命令。 3.1 git add ​ git add 命令将内容从工作目录添加到暂存区（或称为索引（index）区），以备下次提交。 当 git commit 命令执行时，默认情况下它只会检查暂存区域，因此 git add 是用来确定下一次提交时快照的样子的。 ​ 这个命令对于 Git 来说特别的重要，所以在本书中被无数次的提及和使用。 我们将快速的过一遍一些可以看到的独特的用法。 我们在 [跟踪新文件] 一节中介绍并详细解释了 git add 命令。 然后，我们在 [遇到冲突时的分支合并] 一节中提到了如何使用它来解决合并冲突。 接下来，我们在 [交互式暂存] 一章中使用它来交互式的暂存一个已修改文件的特定部分。 最后，在 [树对象] 一节中我们在一个低层次中模拟了它的用法，以便你可以了解在这背后发生了什么。 3.2 git status git status 命令将为你展示工作区及暂存区域中不同状态的文件。 这其中包含了已修改但未暂存，或已经暂存但没有提交的文件。 一般在它显示形式中，会给你展示一些关于如何在这些暂存区域之间移动文件的提示。 首先，我们在 [检查当前文件状态] 一节中介绍了 status 的基本及简单的形式。 虽然我们在全书中都有用到它，但是绝大部分的你能用 git status 做的事情都在这一章讲到了。 3.3 git diff 当需要查看任意两棵树的差异时你可以使用 git diff 命令。 此命令可以查看你工作环境与你的暂存区的差异（git diff 默认的做法），你暂存区域与你最后提交之间的差异（git diff --staged），或者比较两个提交记录的差异（git diff master branchB）。 首先，我们在 [查看已暂存和未暂存的修改] 一章中研究了 git diff 的基本用法，在此节中我们展示了如何查看哪些变化已经暂存了，哪些没有。 在 [提交准则]一节中,我们在提交前使用 --check 选项来检查可能存在的空白字符问题。 在 [确定引入了哪些东西] 一节中,了解了使用 git diff A...B 语法来更有效地比较不同分支之间的差异。 在 [高级合并]一节中我们使用 -b 选项来过滤掉空白字符的差异，及通过 --theirs、--ours 和 --base 选项来比较不同暂存区冲突文件的差异。 最后，在 [开始使用子模块]一节中,我们使用此命令合 --submodule 选项来有效地比较子模块的变化。 3.4 git difftool 当你不想使用内置的 git diff 命令时。git difftool 可以用来简单地启动一个外部工具来为你展示两棵树之间的差异。 我们只在 [查看已暂存和未暂存的修改] 一节中简单的提到了此命令。 3.5 git commit git commit 命令将所有通过 git add 暂存的文件内容在数据库中创建一个持久的快照，然后将当前分支上的分支指针移到其之上。 首先，我们在 [提交更新]一节中涉及了此命令的基本用法。 我们演示了如何在日常的工作流程中通过使用 -a 标志来跳过 git add 这一步，及如何使用 -m 标志通过命令行而不启动一个编辑器来传递提交信息。 在 [撤消操作] 一节中我们介绍了使用 --amend 选项来重做最后的提交。 在 [分支简介]，我们探讨了 git commit 的更多细节，及工作原理。 在 [签署提交]一节中我们探讨了如何使用 -S 标志来为提交签名加密。 最后，在 [提交对象]一节中，我们了解了 git commit 在背后做了什么，及它是如何实现的。 3.6 git reset git reset 命令主要用来根据你传递给动作的参数来执行撤销操作。 它可以移动 HEAD 指针并且可选的改变 index 或者暂存区，如果你使用 --hard 参数的话你甚至可以改变工作区。 如果错误地为这个命令附加后面的参数，你可能会丢失你的工作，所以在使用前你要确定你已经完全理解了它。 首先，我们在 [取消暂存的文件] 一节中介绍了 git reset 简单高效的用法，用来对执行过 git add 命令的文件取消暂存。 在 [重置揭密] 一节中我们详细介绍了此命令，几乎整节都在解释此命令。 在 [中断一次合并]一节中，我们使用 git reset --hard 来取消一个合并，同时我们也使用了 git merge --abort 命令，它是 git reset 的一个简单的封装。 3.7 git rm git rm 是 Git 用来从工作区，或者暂存区移除文件的命令。 在为下一次提交暂存一个移除操作上，它与 git add 有一点类似。 我们在 [移除文件]一节中提到了 git rm 的一些细节，包括递归地移除文件，和使用 --cached 选项来只移除暂存区域的文件但是保留工作区的文件。 在本书的 [移除对象] 一节中，介绍了 git rm 仅有的几种不同用法，如在执行 git filter-branch 中使用和解释了 --ignore-unmatch 选项。 这对脚本来说很有用。 3.8 git mv git mv 命令是一个便利命令，用于移到一个文件并且在新文件上执行git add命令及在老文件上执行git rm命令。 我们只是在 [移动文件]一节中简单地提到了此命令。 3.9 git clean git clean 是一个用来从工作区中移除不想要的文件的命令。 可以是编译的临时文件或者合并冲突的文件。 在 [清理工作目录]一节中我们介绍了你可能会使用 clean 命令的大量选项及场景。 4. 分支与合并 ​ Git 有几个实现大部的分支及合并功能的实用命令。 4.1 git branch ​ git branch 命令实际上是某种程度上的分支管理工具。 它可以列出你所有的分支、创建新分支、删除分支及重命名分支。 ​ [Git 分支]一节主要是为 branch 命令来设计的，它贯穿了整个章节。 首先，我们在 [分支创建] 一节中介绍了它，然后我们在 [分支管理]一节中介绍了它的其它大部分特性（列举及删除）。 ​ 在 [跟踪分支]一节中，我们使用 git branch -u 选项来设置一个跟踪分支。 ​ 最后，我们在 [Git 引用]一节中讲到了它在背后做一什么。 4.2 git checkout ​ git checkout 命令用来切换分支，或者检出内容到工作目录。 ​ 我们是在 [分支切换] 一节中第一次认识了命令及 git branch 命令。 ​ 在 [跟踪分支]一节中我们了解了如何使用 --track 标志来开始跟踪分支。 ​ 在 [检出冲突]一节中，我们用此命令和 --conflict=diff3 来重新介绍文件冲突。 ​ 在 [重置揭密]一节中，我们进一步了解了其细节及与 git reset 的关系。 ​ 最后，我们在 [HEAD 引用]一节中介绍了此命令的一些实现细节。 4.3 git merge ​ git merge 工具用来合并一个或者多个分支到你已经检出的分支中。 然后它将当前分支指针移动到合并结果上。 ​ 我们首先在 [新建分支]一节中介绍了 git merge 命令。 虽然它在本书的各种地方都有用到，但是 merge 命令只有几个变种，一般只是 git merge 带上一个你想合并进来的一个分支名称。 ​ 我们在 [派生的公开项目]的后面介绍了如何做一个 squashed merge （指 Git 合并时将其当作一个新的提交而不是记录你合并时的分支的历史记录。） ​ 在 [高级合并]一节中，我们介绍了合并的过程及命令，包含 -Xignore-space-change 命令及 --abort 选项来中止一个有问题的提交。 ​ 在 [签署提交] 一节中我们学习了如何在合并前验证签名，如果你项目正在使用 GPG 签名的话。 ​ 最后，我们在 [子树合并]一节中学习了子树合并。 4.4 git mergetool ​ 当你在 Git 的合并中遇到问题时，可以使用 git mergetool 来启动一个外部的合并帮助工具。 ​ 我们在 [遇到冲突时的分支合并] 中快速介绍了一下它，然后在 [外部的合并与比较工具] 一节中介绍了如何实现你自己的外部合并工具的细节。 4.5 git log ​ git log 命令用来展示一个项目的可达历史记录，从最近的提交快照起。 默认情况下，它只显示你当前所在分支的历史记录，但是可以显示不同的甚至多个头记录或分支以供遍历。 此命令通常也用来在提交记录级别显示两个或多个分支之间的差异。 ​ 在本书的每一章几乎都有用到此命令来描述一个项目的历史。 ​ 在 [查看提交历史]一节中我们介绍了此命令，并深入做了研究。 研究了包括 -p 和 --stat 选项来了解每一个提交引入的变更，及使用--pretty 和 --online 选项来查看简洁的历史记录。 ​ 在 [分支创建] 一节中我们使用它加 --decorate 选项来简单的可视化我们分支的指针所在，同时我们使用 --graph 选项来查看分叉的历史记录是怎么样的。 ​ 在 [私有小型团队]和 [提交区间]章节中，我们介绍了在使用 git log 命令时用 branchA..branchB 的语法来查看一个分支相对于另一个分支, 哪一些提交是唯一的。 在 [提交区间]一节中我们作了更多介绍。 ​ 在 > 和 [三点] 章节中，我们介绍了 branchA...branchB 格式和 --left-right 语法来查看哪些仅其中一个分支。 在 [合并日志] 一节中我们还研究了如何使用 --merge 选项来帮助合并冲突调试，同样也使用 --cc 选项来查看在你历史记录中的合并提交的冲突。 ​ 在 [引用日志] 一节中我们使用此工具和 -g 选项 而不是遍历分支来查看 Git 的 reflog。 ​ 在 [搜索]一节中我们研究了-S 及 -L 选项来进行来在代码的历史变更中进行相当优雅地搜索，如一个函数的历史。 ​ 在 [签署提交] 一节中，我们了解了如何使用 --show-signature 来为每一个提交的 git log 输出中，添加一个判断是否已经合法的签名的一个验证。 4.6 git stash ​ git stash 命令用来临时地保存一些还没有提交的工作，以便在分支上不需要提交未完成工作就可以清理工作目录。 ​ [储藏与清理] 一整个章节基本就是在讲这个命令。 4.7 git tag ​ git tag 命令用来为代码历史记录中的某一个点指定一个永久的书签。 一般来说它用于发布相关事项。 ​ 我们在 [打标签] 一节中介绍了此命令及相关细节，并在 [为发布打标签] 一节实践了此命令。 ​ 我也在 [签署工作]一节中介绍了如何使用 -s 标志创建一个 GPG 签名的标签，然后使用 -v 选项来验证。 5. 项目分享与更新 ​ 在 Git 中没有多少访问网络的命令，几乎所以的命令都是在操作本地的数据库。 当你想要分享你的工作，或者从其他地方拉取变更时，这有几个处理远程仓库的命令。 5.1 git fetch git fetch 命令与一个远程的仓库交互，并且将远程仓库中有但是在当前仓库的没有的所有信息拉取下来然后存储在你本地数据库中。 我们开始在 [从远程仓库中抓取与拉取] 一节中介绍了此命令，然后我们在 [远程分支]中看到了几个使用示例。 我们在 [向一个项目贡献]一节中有几个示例中也都有使用此命令。 在 [合并请求引用]我们用它来抓取一个在默认空间之外指定的引用，在 [打包]中，我们了解了怎么从一个包中获取内容。 在 [引用规格] 章节中我们设置了高度自定义的 refspec 以便 git fetch 可以做一些跟默认不同的事情。 5.2 git pull git pull 命令基本上就是 git fetch 和 git merge 命令的组合体，Git 从你指定的远程仓库中抓取内容，然后马上尝试将其合并进你所在的分支中。 我们在 [从远程仓库中抓取与拉取] 一节中快速介绍了此命令，然后在 [查看某个远程仓库]一节中了解了如果你运行此命令的话，什么将会合并。 我们也在 [用变基解决变基]一节中了解了如何使用此命令来来处理变基的难题。 在 [检出冲突]一节中我们展示了使用此命令如何通过一个 URL 来一次性的拉取变更。 最后，我们在 [签署提交]一节中我们快速的介绍了你可以使用 --verify-signatures 选项来验证你正在拉取下来的经过 GPG 签名的提交。 5.3 git push git push 命令用来与另一个仓库通信，计算你本地数据库与远程仓库的差异，然后将差异推送到另一个仓库中。 它需要有另一个仓库的写权限，因此这通常是需要验证的。 我们开始在 [推送到远程仓库]一节中介绍了 git push 命令。 在这一节中主要介绍了推送一个分支到远程仓库的基本用法。 在 [推送]一节中，我们深入了解了如何推送指定分支，在 [跟踪分支]一节中我们了解了如何设置一个默认的推送的跟踪分支。 在 [删除远程分支]一节中我们使用 --delete 标志和 git push 命令来在删除一个在服务器上的分支。 在 [向一个项目贡献]一整节中，我们看到了几个使用 git push 在多个远程仓库分享分支中的工作的示例。 在 [共享标签]一节中，我们知道了如何使用此命令加 --tags 选项来分享你打的标签。 在 [发布子模块改动] 一节中，我们使用 --recurse-submodules 选项来检查是否我们所有的子模块的工作都已经在推送子项目之前已经推送出去了，当使用子模块时这真的很有帮助。 在 [其它客户端钩子] 中我们简单的提到了 pre-push 挂钩（hook），它是一个可以用来设置成在一个推送完成之前运行的脚本，以检查推送是否被允许。 最后，在 [引用规格推送] 一节中，我们知道了使用完整的 refspec 来推送，而不是通常使用的简写形式。 这对我们精确的指定要分享出去的工作很有帮助。 5.4 git remote git remote 命令是一个是你远程仓库记录的管理工具。 它允许你将一个长的 URL 保存成一个简写的句柄，例如 origin ，这样你就可以不用每次都输入他们了。 你可以有多个这样的句柄，git remote 可以用来添加，修改，及删除它们。 此命令在 [远程仓库的使用] 一节中做了详细的介绍，包括列举、添加、移除、重命名功能。 几乎在此书的后续章节中都有使用此命令，但是一般是以 git remote add 这样的标准格式。 5.5 git archive git archive 命令用来创建项目一个指定快照的归档文件。 我们在 [准备一次发布] 一节中，使用 git archive 命令来创建一个项目的归档文件用于分享。 5.6 git submodule git submodule 命令用来管理一个仓库的其他外部仓库。 它可以被用在库或者其他类型的共享资源上。 submodule 命令有几个子命令, 如（add、update、sync 等等）用来管理这些资源。 只在 [子模块]章节中提到和详细介绍了此命令。 6. 检查与比较 6.1 git show git show 命令可以以一种简单的人类可读的方式来显示一个 Git 对象。 你一般使用此命令来显示一个标签或一个提交的信息。 我们在 [附注标签] 一节中使用此命令来显示带注解标签的信息。 然后，我们在 [选择修订版本] 一节中，用了很多次来显示不同的版本选择将解析出来的提交。 我们使用 git show 做的最有意思的事情是在 [手动文件再合并] 一节中用来在合并冲突的多个暂存区域中提取指定文件的内容。 6.2 git shortlog git shortlog 是一个用来归纳 git log 的输出的命令。 它可以接受很多与 git log 相同的选项，但是此命令并不会列出所有的提交，而是展示一个根据作者分组的提交记录的概括性信息 我们在 [制作提交简报]一节中展示了如何使用此命令来创建一个漂亮的 changelog 文件。 6.3 git describe git describe 命令用来接受任何可以解析成一个提交的东西，然后生成一个人类可读的字符串且不可变。 这是一种获得一个提交的描述的方式，它跟一个提交的 SHA-1 值一样是无歧义，但是更具可读性。 我们在 [生成一个构建号] 及 [准备一次发布]章节中使用 git describe 命令来获得一个字符串来命名我们发布的文件。 7. 调试 Git 有一些命令可以用来帮你调试你代码中的问题。 包括找出是什么时候，是谁引入的变更。 7.1 git bisect git bisect 工具是一个非常有用的调试工具，它通过自动进行一个二分查找来找到哪一个特定的提交是导致 bug 或者问题的第一个提交。 仅在 [二分查找]一节中完整的介绍了此命令。 7.2 git blame git blame 命令标注任何文件的行，指出文件的每一行的最后的变更的提交及谁是那一个提交的作者。 当你要找那个人去询问关于这块特殊代码的信息时这会很有用。 只有 [文件标注]一节有中提到此命令。 7.3 git grep git grep 命令可以帮助在源代码中，甚至是你项目的老版本中的任意文件中查找任何字符串或者正则表达式。 只有 [Git Grep] 的章节中与提到此命令。 8. 补丁 Git 中的一些命令是以引入的变更即提交这样的概念为中心的，这样一系列的提交，就是一系列的补丁。 这些命令以这样的方式来管理你的分支。 8.1 git cherry-pick git cherry-pick 命令用来获得在单个提交中引入的变更，然后尝试将作为一个新的提交引入到你当前分支上。 从一个分支单独一个或者两个提交而不是合并整个分支的所有变更是非常有用的。 在 [变基与拣选工作流]一节中描述和演示了 Cherry picking 8.2 git rebase git rebase 命令基本是是一个自动化的 cherry-pick 命令。 它计算出一系列的提交，然后再以它们在其他地方以同样的顺序一个一个的 cherry-picks 出它们。 在 [变基]一章中详细提到了此命令，包括与已经公开的分支的变基所涉及的协作问题。 在 [替换]中我们在一个分离历史记录到两个单独的仓库的示例中实践了此命令，同时使用了 --onto 选项。 在 [Rerere]一节中，我们研究了在变基时遇到的合并冲突的问题。 在 [修改多个提交信息]一节中，我们也结合 -i 选项将其用于交互式的脚本模式。 8.3 git revert git revert 命令本质上就是一个逆向的 git cherry-pick 操作。 它将你提交中的变更的以完全相反的方式的应用到一个新创建的提交中，本质上就是撤销或者倒转。 我们在 [还原提交]一节中使用此命令来撤销一个合并提交。 9. 邮件 很多 Git 项目，包括 Git 本身，基本是通过邮件列表来维护的。 从方便地生成邮件补丁到从一个邮箱中应用这些补丁,Git 都有工具来让这些操作变得简单。 9.1 git apply git apply 命令应用一个通过 git diff 或者甚至使用 GNU diff 命令创建的补丁。 它跟补丁命令做了差不多的工作，但还是有一些小小的差别。 我们在 [应用来自邮件的补丁]一节中演示了它的使用及什么环境下你可能会用到它。 9.2 git am git am 命令用来应用来自邮箱的补丁。特别是那些被 mbox 格式化过的。 这对于通过邮件接受补丁并将他们轻松地应用到你的项目中很有用。 我们在 [使用 am 命令应用补丁] 命令中提到了它的用法及工作流，包括使用 --resolved、-i 及 -3 选项。 我们在 [电子邮件工作流钩子] 也提到了几条 hooks，你可以用来辅助与 git am 相关工作流。 在 [邮件通知]一节中我们也将用此命令来应用 格式化的 GitHub 的推送请求的变更。 9.3 git format-patch git format-patch 命令用来以 mbox 的格式来生成一系列的补丁以便你可以发送到一个邮件列表中。 我们在 [通过邮件的公开项目] 一节中研究了一个使用 git format-patch 工具为一个项目做贡献的示例。 9.4 git imap-send git imap-send 将一个由 git format-patch 生成的邮箱上传至 IMAP 草稿文件夹。 我们在 [通过邮件的公开项目]一节中见过一个通过使用 git imap-send 工具向一个项目发送补丁进行贡献的例子。 9.5 git send-email git send-mail 命令用来通过邮件发送那些使用 git format-patch 生成的补丁。 我们在 [通过邮件的公开项目] 一节中研究了一个使用 git send-email 工具发送补丁来为一个项目做贡献的示例。 9.6 git request-pull git request-pull 命令只是简单的用来生成一个可通过邮件发送给某个人的示例信息体。 如果你在公共服务器上有一个分支，并且想让别人知道如何集成这些变更，而不用通过邮件发送补丁，你就可以执行此命令的输出发送给这个你想拉取变更的人。 我们在 [派生的公开项目] 一节中演示了如何使用 git request-pull 来生成一个推送消息。 10. 外部系统 Git 有一些可以与其他的版本控制系统集成的命令。 10.1 git svn git svn 可以使 Git 作为一个客户端来与 Subversion 版本控制系统通信。 这意味着你可以使用 Git 来检出内容，或者提交到 Subversion 服务器。 [Git 与 Subversion] 一章深入讲解了此命令。 10.2 git fast-import 对于其他版本控制系统或者从其他任何的格式导入，你可以使用 git fast-import 快速地将其他格式映射到 Git 可以轻松记录的格式。 在 [一个自定义的导入器]一节中深入讲解了此命令。 11. 管理 如果你正在管理一个 Git 仓库，或者需要通过一个复杂的方法来修复某些东西，Git 提供了一些管理命令来帮助你。 11.1 git gc git gc 命令在你的仓库中执行 “garbage collection”，删除数据库中不需要的文件和将其他文件打包成一种更有效的格式。 此命令一般在背后为你工作，虽然你可以手动执行它-如果你想的话。 我们在[维护] 一节中研究此命令的几个示例。 11.1 git fsck git fsck 命令用来检查内部数据库的问题或者不一致性。 我们只在 [数据恢复] 这一节中快速使用了一次此命令来搜索所有的悬空对象（dangling object）。 11.2 git reflog git reflog 命令分析你所有分支的头指针的日志来查找出你在重写历史上可能丢失的提交。 我们主要在 [引用日志] 一节中提到了此命令，并在展示了一般用法，及如何使用 git log -g 来通过 git log 的输出来查看同样的信息。 我们同样在 [数据恢复]一节中研究了一个恢复丢失的分支的实例。 11.3 git filter-branch git filter-branch 命令用来根据某些规则来重写大量的提交记录，例如从任何地方删除文件，或者通过过滤一个仓库中的一个单独的子目录以提取出一个项目。 在 [从每一个提交移除一个文件] 一节中，我们解释了此命令，并探究了其他几个选项，例如 --commit-filter，--subdirectory-filter 及 --tree-filter 。 在 [Git-p4] 和 [TFS]的章节中我们使用它来修复已经导入的外部仓库。 12. 底层命令 在本书中我们也遇到了不少底层的命令。 我们遇到的第一个底层命令是在 [合并请求引用] 中的 ls-remote 命令。我们用它来查看服务端的原始引用。 我们在 [手动文件再合并] [Rerere](及 [索引]章节中使用 ls-files 来查看暂存区的更原始的样子。 我们同样在 [分支引用]一节中提到了 rev-parse 命令，它可以接受任意字符串，并将其转成一个对象的 SHA-1 值。 我们在 [Git 内部原理] 一章中对大部分的底层命令进行了介绍，这差不多正是这一章的重点所在。 我们尽量避免了在本书的其他部分使用这些命令。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"DataBase/":{"url":"DataBase/","title":"数据库基础","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 关系型数据库 2. 标准SQL 3. 非关系型数据库 4. NoSQL 与关系型数据库的区别 4.1 存储方式 4.2 存储结构 4.3 存储规范 4.4 扩展方式 4.4 查询方式 4.5 规范化 4.6 事务性 4.7 读写性能 4.8 授权方式 5. 分布式数据库 数据库基础 ​ 数据库是存放数据的仓库。它的存储空间很大，可以存放百万条、千万条、上亿条数据。但是数据库并不是随意地将数据进行存放，是有一定的规则的，否则查询的效率会很低。当今世界是一个充满着数据的互联网世界，充斥着大量的数据。即这个互联网世界就是数据世界。数据的来源有很多，比如出行记录、消费记录、浏览的网页、发送的消息等等。除了文本类型的数据，图像、音乐、声音都是数据。 ​ 在数据库的发展历史上，数据库先后经历了层次数据库、网状数据库和关系数据库等各个阶段的发展，数据库技术在各个方面的快速的发展。特别是关系型数据库已经成为目前数据库产品中最重要的一员，80年代以来， 几乎所有的数据库厂商新出的数据库产品都支持关系型数据库，即使一些非关系数据库产品也几乎都有支持关系数据库的接口。这主要是传统的关系型数据库可以比较好的解决管理和存储关系型数据的问题。随着云计算的发展和大数据时代的到来，关系型数据库越来越无法满足需要，这主要是由于越来越多的半关系型和非关系型数据需要用数据库进行存储管理，以此同时，分布式技术等新技术的出现也对数据库的技术提出了新的要求，于是越来越多的非关系型数据库就开始出现，这类数据库与传统的关系型数据库在设计和数据结构有了很大的不同， 它们更强调数据库数据的高并发读写和存储大数据，这类数据库一般被称为NoSQL（Not only SQL）数据库。 而传统的关系型数据库在一些传统领域依然保持了强大的生命力。 1. 关系型数据库 ​ 关系型数据库，存储的格式可以直观地反映实体间的关系。关系型数据库和常见的表格比较相似，关系型数据库中表与表之间是有很多复杂的关联关系的。 常见的关系型数据库有Mysql，SqlServer等。在轻量或者小型的应用中，使用不同的关系型数据库对系统的性能影响不大，但是在构建大型应用时，则需要根据应用的业务需求和性能需求，选择合适的关系型数据库。 ​ 关系型数据库对于结构化数据的处理更合适，如学生成绩、地址等，这样的数据一般情况下需要使用结构化的查询，例如join，这样的情况下，关系型数据库就会比NoSQL数据库性能更优，而且精确度更高。由于结构化数据的规模不算太大，数据规模的增长通常也是可预期的，所以针对结构化数据使用关系型数据库更好。关系型数据库十分注意数据操作的事务性、一致性，如果对这方面的要求关系型数据库无疑可以很好的满足。 ​ RDBMS 即关系数据库管理系统(Relational Database Management System)的特点： 1.数据以表格的形式出现 2.每行为各种记录名称 3.每列为记录名称所对应的数据域 4.许多的行和列组成一张表单 5.若干的表单组成database RDBMS 术语 数据库: 数据库是一些关联表的集合。 数据表: 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。 列: 一列(数据元素) 包含了相同类型的数据, 例如邮政编码的数据。 行：一行（=元组，或记录）是一组相关的数据，例如一条用户订阅的数据。 冗余：存储两倍数据，冗余降低了性能，但提高了数据的安全性。 主键：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。 外键：外键用于关联两个表。 复合键：复合键（组合键）将多个列作为一个索引键，一般用于复合索引。 索引：使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。 参照完整性: 参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。 2. 标准SQL ​ 虽然关系型数据库有很多，但是大多数都遵循SQL（结构化查询语言，Structured Query Language）标准。 常见的操作有查询，新增，更新，删除，求和，排序等。 查询语句：SELECT param FROM table WHERE condition 该语句可以理解为从 table 中查询出满足 condition 条件的字段 param。 新增语句：INSERT INTO table （param1，param2，param3） VALUES （value1，value2，value3） 该语句可以理解为向table中的param1，param2，param3字段中分别插入value1，value2，value3。 更新语句：UPDATE table SET param=new_value WHERE condition 该语句可以理解为将满足condition条件的字段param更新为 new_value 值。 删除语句：DELETE FROM table WHERE condition 该语句可以理解为将满足condition条件的数据全部删除。 去重查询：SELECT DISTINCT param FROM table WHERE condition 该语句可以理解为从表table中查询出满足条件condition的字段param，但是param中重复的值只能出现一次。 排序查询：SELECT param FROM table WHERE condition ORDER BY param1该语句可以理解为从表table 中查询出满足condition条件的param，并且要按照param1升序的顺序进行排序。 总体来说， 数据库的SELECT，INSERT，UPDATE，DELETE对应了我们常用的增删改查四种操作。 3. 非关系型数据库 ​ 随着近些年技术方向的不断拓展，大量的NoSql数据库如MongoDB、Redis、Memcache出于简化数据库结构、避免冗余、影响性能的表连接、摒弃复杂分布式的目的被设计。 ​ 指的是分布式的、非关系型的、不保证遵循ACID原则的数据存储系统。NoSQL数据库技术与CAP理论、一致性哈希算法有密切关系。所谓CAP理论，简单来说就是一个分布式系统不可能满足可用性、一致性与分区容错性这三个要求，一次性满足两种要求是该系统的上限。而一致性哈希算则指的是NoSQL数据库在应用过程中，为满足工作需求而在通常情况下产生的一种数据算法，该算法能有效解决工作方面的诸多问题但也存在弊端，即工作完成质量会随着节点的变化而产生波动，当节点过多时，相关工作结果就无法那么准确。这一问题使整个系统的工作效率受到影响，导致整个数据库系统的数据乱码与出错率大大提高，甚至会出现数据节点的内容迁移，产生错误的代码信息。但尽管如此，NoSQL数据库技术还是具有非常明显的应用优势，如数据库结构相对简单，在大数据量下的读写性能好；能满足随时存储自定义数据格式需求，非常适用于大数据处理工作。 ​ NoSQL数据库适合追求速度和可扩展性、业务多变的应用场景。对于非结构化数据的处理更合适，如文章、评论，这些数据如全文搜索、机器学习通常只用于模糊处理，并不需要像结构化数据一样，进行精确查询，而且这类数据的数据规模往往是海量的，数据规模的增长往往也是不可能预期的，而NoSQL数据库的扩展能力几乎也是无限的，所以NoSQL数据库可以很好的满足这一类数据的存储。NoSQL数据库利用key-value可以大量的获取大量的非结构化数据，并且数据的获取效率很高，但用它查询结构化数据效果就比较差。 ​ 目前NoSQL数据库仍然没有一个统一的标准，它现在有四种大的分类： （1）键值对存储（key-value）：代表软件Redis，它的优点能够进行数据的快速查询，而缺点是需要存储数据之间的关系。 （2）列存储：代表软件Hbase，它的优点是对数据能快速查询，数据存储的扩展性强。而缺点是数据库的功能有局限性。 （3）文档数据库存储：代表软件MongoDB，它的优点是对数据结构要求不特别的严格。而缺点是查询性的性能不好，同时缺少一种统一查询语言。 （4）图形数据库存储：代表软件InfoGrid，它的优点可以方便的利用图结构相关算法进行计算。而缺点是要想得到结果必须进行整个图的计算，而且遇到不适合的数据模型时，图形数据库很难使用。 4. NoSQL 与关系型数据库的区别 4.1 存储方式 ​ 传统的关系型数据库采用表格的储存方式， 数据以行和列的方式进行存储，要读取和查询都十分方便。而非关系型数据不适合这样的表格存储方式，通常以数据集的方式，大量的数据集中存储在一起，类似于键值对、图结构或者文档。 4.2 存储结构 ​ 关系型数据库按照结构化的方法存储数据， 每个数据表都必须对各个字段定义好（也就是先定义好表的结构），再根据表的结构存入数据，这样做的好处就是由于数据的形式和内容在存入数据之前就已经定义好了，所以整个数据表的可靠性和稳定性都比较高，但带来的问题就是一旦存入数据后，如果需要修改数据表的结构就会十分困难。而NoSQL数据库由于面对的是大量非结构化的数据的存储，它采用的是动态结构，对于数据类型和结构的改变非常的适应，可以根据数据存储的需要灵活的改变数据库的结构。 4.3 存储规范 ​ 关系型数据库为了避免重复、规范化数据以及充分利用好存储空间，把数据按照最小关系表的形式进行存储，这样数据管理的就可以变得很清晰、一目了然，当然这主要是一张数据表的情况。如果是多张表情况就不一样了，由于数据涉及到多张数据表，数据表之间存在着复杂的关系，随着数据表数量的增加，数据管理会越来越复杂。而NoSQL数据库的数据存储方式是用平面数据集的方式集中存放，虽然会存在数据被重复存储，从而造成存储空间被浪费的问题（从当前的计算机硬件的发展来看，这样的存储空间浪费的问题微不足道），但是由于基本上单个数据库都是采用单独存放的形式，很少采用分割存放的方式，所以这样数据往往能存成一个整体，这对于数据的读写提供了极大的方便。 4.4 扩展方式 ​ 当前社会和科学飞速发展，要支持日益增长的数据库存储需求当然要求数据库有良好的扩展性能，并且要求数据库支持更多数据并发量，扩展方式是NoSQL数据库与关系型数据库差别最大的地方，由于关系型数据库将数据存储在数据表中，数据操作的瓶颈出现在多张数据表的操作中，而且数据表越多这个问题越严重，如果要缓解这个问题，只能提高处理能力，也就是选择速度更快性能更高的计算机，这样的方法虽然可以一定的拓展空间，但这样的拓展空间一定有非常有限的，也就是关系型数据库只具备纵向扩展能力。而NoSQL数据库由于使用的是数据集的存储方式，它的存储方式一定是分布式的，它可以采用横向的方式来开展数据库，也就是可以添加更多数据库服务器到资源池，然后由这些增加的服务器来负担数据量增加的开销。 4.4 查询方式 ​ 关系型数据库采用结构化查询语言（即SQL）来对数据库进行查询，SQL早已获得了各个数据库厂商的支持，成为数据库行业的标准，它能够支持数据库的CRUD（增加，查询，更新，删除）操作，具有非常强大的功能，SQL可以采用类似索引的方法来加快查询操作。NoSQL数据库使用的是非结构化查询语言（UnQL），它以数据集（像文档）为单位来管理和操作数据，由于它没有一个统一的标准，所以每个数据库厂商提供产品标准是不一样的，NoSQL中的文档Id与关系型表中主键的概念类似，NoSQL数据库采用的数据访问模式相对SQL更简单而精确。 4.5 规范化 ​ 在数据库的设计开发过程中开发人员通常会面对同时需要对一个或者多个数据实体（包括数组、列表和嵌套数据）进行操作，这样在关系型数据库中，一个数据实体一般首先要分割成多个部分，然后再对分割的部分进行规范化，规范化以后再分别存入到多张关系型数据表中，这是一个复杂的过程。好消息是随着软件技术的发展，相当多的软件开发平台都提供一些简单的解决方法，例如，可以利用ORM层（也就是对象关系映射）来将数据库中对象模型映射到基于SQL的关系型数据库中去以及进行不同类型系统的数据之间的转换。对于NoSQL数据库则没有这方面的问题，它不需要规范化数据，它通常是在一个单独的存储单元中存入一个复杂的数据实体。 4.6 事务性 ​ 关系型数据库强调ACID规则（原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）），可以满足对事务性要求较高或者需要进行复杂数据查询的数据操作，而且可以充分满足数据库操作的高性能和操作稳定性的要求。并且关系型数据库十分强调数据的强一致性，对于事务的操作有很好的支持。关系型数据库可以控制事务原子性细粒度，并且一旦操作有误或者有需要，可以马上回滚事务。而NoSQL数据库强调BASE原则（基本可用（Basically Availble）、软状态（Soft-state）、最终一致性（Eventual Consistency）），它减少了对数据的强一致性支持，从而获得了基本一致性和柔性可靠性，并且利用以上的特性达到了高可靠性和高性能，最终达到了数据的最终一致性。NoSQL数据库虽然对于事务操作也可以使用，但由于它是一种基于节点的分布式数据库，对于事务的操作不能很好的支持，也很难满足其全部的需求，所以NoSQL数据库的性能和优点更多的体现在大数据的处理和数据库的扩展方面。 4.7 读写性能 ​ 关系型数据库十分强调数据的一致性，并为此降低读写性能付出了巨大的代价，虽然关系型数据库存储数据和处理数据的可靠性很不错，但一旦面对海量数据的处理的时候效率就会变得很差，特别是遇到高并发读写的时候性能就会下降的非常厉害。而NoSQL数据库相对关系型数据库优势最大的恰恰是应对大数据方面，也就是对于大量的每天都产生非结构化的数据能够高性能的读写，这是因为NoSQL数据库是按key-value类型进行存储的，以数据集的方式存储的，因此无论是扩展还是读写都非常容易，并且NoSQL数据库不需要关系型数据库繁琐的解析，所以NoSQL数据库大数据管理、检索、读写、分析以及可视化方面具有关系型数据库不可比拟的优势。 4.8 授权方式 ​ 关系型数据库常见的有Oracle，SQLServer，DB2，Mysql，除了Mysql大多数的关系型数据库如果要使用都需要支付一笔价格高昂的费用，即使是免费的Mysql性能也受到了诸多的限制。而对于NoSQL数据库，比较主流的有redis，HBase，MongoDb，memcache等产品，通常都采用开源的方式，不需要像关系型数据库那样，需要一笔高昂的花费。 5. 分布式数据库 ​ 所谓的分布式数据库技术，就是结合了数据库技术与分布式技术的一种结合。具体指的是把那些在地理意义上分散开的各个数据库节点，但在计算机系统逻辑上又是属于同一个系统的数据结合起来的一种数据库技术。既有着数据库间的协调性也有着数据的分布性。这个系统并不注重系统的集中控制，而是注重每个数据库节点的自治性，此外为了让程序员能够在编写程序时可以减轻工作量以及系统出错的可能性，一般都是完全不考虑数据的分布情况，这样的结果就使得系统数据的分布情况一直保持着透明性。 ​ 数据独立性概念在分布式数据库管理系统中同样是十分重要的一环，但是不仅如此，分布式数据管理系统还增加了一个叫分布式透明性的新概念。这个新概念的作用是让数据进行转移时使程序正确性不受影响，就像数据并没有在编写程序时被分布一样。 ​ 在分布式数据库里，数据冗杂是一种被需要的特性，这点和一般的集中式数据库系统不一样。第一点是为了提高局部的应用性而要在那些被需要的数据库节点复制数据。第二点是因为如果某个数据库节点出现系统错误，在修复好之前，可以通过操作其他的数据库节点里复制好的数据来让系统能够继续使用，提高系统的有效性。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"DataBase/MySQL/":{"url":"DataBase/MySQL/","title":"MySQL","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 概述 2. 参考内容 MySQL 1. 概述 ​ MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。MySQL 是最流行的关系型数据库管理系统之一，在 WEB 应用方面，MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。 ​ MySQL是一种关系数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。 ​ MySQL所使用的 SQL 语言是用于访问数据库的最常用标准化语言。MySQL 软件采用了双授权政策，分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。 MySQL 是开源的，所以你不需要支付额外的费用。 MySQL 支持大型的数据库。可以处理拥有上千万条记录的大型数据库。 MySQL 使用标准的 SQL 数据语言形式。 MySQL 可以运行于多个系统上，并且支持多种语言。这些编程语言包括 C、C++、Python、Java、Perl、PHP、Eiffel、Ruby 和 Tcl 等。 MySQL 对PHP有很好的支持，PHP 是目前最流行的 Web 开发语言。 MySQL 支持大型数据库，支持 5000 万条记录的数据仓库，32 位系统表文件最大可支持 4GB，64 位系统支持最大的表文件为8TB。 MySQL 是可以定制的，采用了 GPL 协议，你可以修改源码来开发自己的 MySQL 系统。 2. 参考内容 《菜鸟教程/学习Mysql》 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"DataBase/MySQL/Chapter1.html":{"url":"DataBase/MySQL/Chapter1.html","title":"第一章：基础知识","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. MySQL 安装 1.1 Linux/UNIX 上安装 MySQL 1.1.1 安装 MySQL 1.1.2 验证 MySQL 安装 1.1.3 使用 MySQL Client(Mysql客户端) 执行简单的SQL命令 1.1.4 Mysql安装后需要做的 1.2 Windows 上安装 MySQL 1.2.1 下载Mysql 1.2.2 安装MySQL 1.2.3 登录 MySQL 2. MySQL 管理 2.1 启动及关闭 MySQL 服务器 2.1.1 Windows 系统下 2.1.2 Linux 系统下 2.2 MySQL 用户设置 2.3 /etc/my.cnf 文件配置 2.4 管理MySQL的命令 第一章：基础知识 1. MySQL 安装 ​ 所有平台的 MySQL 下载地址为： MySQL 下载 。 挑选你需要的 MySQL Community Server 版本及对应的平台。 注意：安装过程我们需要通过开启管理员权限来安装，否则会由于权限不足导致无法安装。 1.1 Linux/UNIX 上安装 MySQL ​ Linux平台上推荐使用RPM包来安装Mysql,MySQL AB提供了以下RPM包的下载地址： MySQL - MySQL服务器。你需要该选项，除非你只想连接运行在另一台机器上的MySQL服务器。 MySQL-client - MySQL 客户端程序，用于连接并操作Mysql服务器。 MySQL-devel - 库和包含文件，如果你想要编译其它MySQL客户端，例如Perl模块，则需要安装该RPM包。 MySQL-shared - 该软件包包含某些语言和应用程序需要动态装载的共享库(libmysqlclient.so*)，使用MySQL。 MySQL-bench - MySQL数据库服务器的基准和性能测试工具。 ​ 安装前，我们可以检测系统是否自带安装 MySQL: rpm -qa | grep mysql ​ 如果你系统有安装，那可以选择进行卸载: rpm -e mysql　　// 普通删除模式 rpm -e --nodeps mysql　　// 强力删除模式，如果使用上面命令删除时，提示有依赖的其它文件，则用该命令可以对其进行强力删除 1.1.1 安装 MySQL ​ 接下来我们在 Centos7 系统下使用 yum 命令安装 MySQL，需要注意的是 CentOS 7 版本中 MySQL数据库已从默认的程序列表中移除，所以在安装前我们需要先去官网下载 Yum 资源包，下载地址为：https://dev.mysql.com/downloads/repo/yum/ wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm rpm -ivh mysql-community-release-el7-5.noarch.rpm yum update yum install mysql-server ​ 权限设置： chown mysql:mysql -R /var/lib/mysql ​ 初始化 MySQL： mysqld --initialize ​ 启动 MySQL： systemctl start mysqld ​ 查看 MySQL 运行状态： systemctl status mysqld 注意：如果我们是第一次启动 mysql 服务，mysql 服务器首先会进行初始化的配置。 ​ 此外,你也可以使用 MariaDB 代替，MariaDB 数据库管理系统是 MySQL 的一个分支，主要由开源社区在维护，采用 GPL 授权许可。开发这个分支的原因之一是：甲骨文公司收购了 MySQL 后，有将 MySQL 闭源的潜在风险，因此社区采用分支的方式来避开这个风险。 MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。 yum install mariadb-server mariadb mariadb数据库的相关命令是： systemctl start mariadb #启动MariaDB systemctl stop mariadb #停止MariaDB systemctl restart mariadb #重启MariaDB systemctl enable mariadb #设置开机启动 1.1.2 验证 MySQL 安装 ​ 在成功安装 MySQL 后，一些基础表会表初始化，在服务器启动后，你可以通过简单的测试来验证 MySQL 是否工作正常。 ​ 使用 mysqladmin 工具来获取服务器状态： ​ 使用 mysqladmin 命令来检查服务器的版本, 在 linux 上该二进制文件位于 /usr/bin 目录，在 Windows 上该二进制文件位于C:\\mysql\\bin 。 [root@host]# mysqladmin --version ​ linux上该命令将输出以下结果，该结果基于你的系统信息： mysqladmin Ver 8.23 Distrib 5.0.9-0, for redhat-linux-gnu on i386 ​ 如果以上命令执行后未输出任何信息，说明你的Mysql未安装成功。 1.1.3 使用 MySQL Client(Mysql客户端) 执行简单的SQL命令 ​ 你可以在 MySQL Client(Mysql客户端) 使用 mysql 命令连接到 MySQL 服务器上，默认情况下 MySQL 服务器的登录密码为空，所以本实例不需要输入密码。 ​ 命令如下： [root@host]# mysql ​ 以上命令执行后会输出 mysql>提示符，这说明你已经成功连接到Mysql服务器上，你可以在 mysql> 提示符执行SQL命令： mysql> SHOW DATABASES; +----------+ | Database | +----------+ | mysql | | test | +----------+ 2 rows in set (0.13 sec) 1.1.4 Mysql安装后需要做的 Mysql安装成功后，默认的root用户密码为空，你可以使用以下命令来创建root用户的密码： [root@host]# mysqladmin -u root password \"new_password\"; 现在你可以通过以下命令来连接到Mysql服务器： [root@host]# mysql -u root -p Enter password:******* 注意：在输入密码时，密码是不会显示了，你正确输入即可。 1.2 Windows 上安装 MySQL 1.2.1 下载Mysql ​ Windows 上安装 MySQL 相对来说会较为简单，点击链接 https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.11-winx64.zip 下载 zip 包。 ​ 最新版本可以在 MySQL 下载 中下载中查看。 ​ 点击 DownloadNo thanks, just start my download. 1.2.2 安装MySQL ​ 下载完后，我们将 zip 包解压到相应的目录，这里我将解压后的文件夹放在 C:\\web\\mysql-8.0.11 下。 ​ 接下来我们需要配置下 MySQL 的配置文件 ​ 打开刚刚解压的文件夹 C:\\web\\mysql-8.0.11 ，在该文件夹下创建 my.ini 配置文件，编辑 my.ini 配置以下基本信息： [client] # 设置mysql客户端默认字符集 default-character-set=utf8 [mysqld] # 设置3306端口 port = 3306 # 设置mysql的安装目录 basedir=C:\\\\web\\\\mysql-8.0.11 # 设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错 # datadir=C:\\\\web\\\\sqldata # 允许最大连接数 max_connections=20 # 服务端使用的字符集默认为8比特编码的latin1字符集 character-set-server=utf8 # 创建新表时将使用的默认存储引擎 default-storage-engine=INNODB ​ 接下来我们来启动下 MySQL 数据库 ​ 以管理员身份打开 cmd 命令行工具，切换目录： cd C:\\web\\mysql-8.0.11\\bin ​ 初始化数据库： mysqld --initialize --console ​ 执行完成后，会输出 root 用户的初始默认密码，如： ... 2018-04-20T02:35:05.464644Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: APWCY5ws&hjQ ... ​ APWCY5ws&hjQ 就是初始密码，后续登录需要用到，你也可以在登陆后修改密码。 ​ 输入以下安装命令： mysqld install ​ 启动输入以下命令即可： net start mysql 注意: 在 5.7 需要初始化 data 目录： cd C:\\web\\mysql-8.0.11\\bin mysqld --initialize-insecure 初始化后再运行 net start mysql 即可启动 mysql。 1.2.3 登录 MySQL ​ 当 MySQL 服务已经运行时, 我们可以通过 MySQL 自带的客户端工具登录到 MySQL 数据库中, 首先打开命令提示符, 输入以下格式的命名: mysql -h 主机名 -u 用户名 -p ​ 参数说明： -h : 指定客户端所要登录的 MySQL 主机名, 登录本机(localhost 或 127.0.0.1)该参数可以省略; -u : 登录的用户名; -p : 告诉服务器将会使用一个密码来登录, 如果所要登录的用户名密码为空, 可以忽略此选项。 ​ 如果我们要登录本机的 MySQL 数据库，只需要输入以下命令即可： mysql -u root -p ​ 按回车确认, 如果安装正确且 MySQL 正在运行, 会得到以下响应: Enter password: ​ 若密码存在, 输入密码登录, 不存在则直接按回车登录。登录成功后你将会看到 Welcome to the MySQL monitor... 的提示语。 ​ 然后命令提示符会一直以 mysq> 加一个闪烁的光标等待命令的输入, 输入 exit 或 quit 退出登录。 2. MySQL 管理 2.1 启动及关闭 MySQL 服务器 2.1.1 Windows 系统下 ​ 在 Windows 系统下，打开命令窗口(cmd)，进入 MySQL 安装目录的 bin 目录。 ​ 启动： cd c:/mysql/bin mysqld --console ​ 关闭： cd c:/mysql/bin mysqladmin -uroot shutdown 2.1.2 Linux 系统下 ​ 首先，我们需要通过以下命令来检查MySQL服务器是否启动： ps -ef | grep mysqld ​ 如果MySQL已经启动，以上命令将输出mysql进程列表， 如果mysql未启动，你可以使用以下命令来启动mysql服务器: root@host# cd /usr/bin ./mysqld_safe & ​ 如果你想关闭目前运行的 MySQL 服务器, 你可以执行以下命令: root@host# cd /usr/bin ./mysqladmin -u root -p shutdown Enter password: ****** 2.2 MySQL 用户设置 ​ 如果你需要添加 MySQL 用户，你只需要在 mysql 数据库中的 user 表添加新用户即可。 ​ 以下为添加用户的的实例，用户名为guest，密码为guest123，并授权用户可进行 SELECT, INSERT 和 UPDATE操作权限： root@host# mysql -u root -p Enter password:******* mysql> use mysql; Database changed mysql> INSERT INTO user (host, user, password, select_priv, insert_priv, update_priv) VALUES ('localhost', 'guest', PASSWORD('guest123'), 'Y', 'Y', 'Y'); Query OK, 1 row affected (0.20 sec) mysql> FLUSH PRIVILEGES; Query OK, 1 row affected (0.01 sec) mysql> SELECT host, user, password FROM user WHERE user = 'guest'; +-----------+---------+------------------+ | host | user | password | +-----------+---------+------------------+ | localhost | guest | 6f8c114b58f2ce9e | +-----------+---------+------------------+ 1 row in set (0.00 sec) ​ 在添加用户时，请注意使用MySQL提供的 PASSWORD() 函数来对密码进行加密。 你可以在以上实例看到用户密码加密后为： 6f8c114b58f2ce9e. 注意：在 MySQL5.7 中 user 表的 password 已换成了authentication_string。 注意：password() 加密函数已经在 8.0.11 中移除了，可以使用 MD5() 函数代替。 注意：在注意需要执行 FLUSH PRIVILEGES 语句。 这个命令执行后会重新载入授权表。 ​ 如果你不使用该命令，你就无法使用新创建的用户来连接mysql服务器，除非你重启mysql服务器。 ​ 你可以在创建用户时，为用户指定权限，在对应的权限列中，在插入语句中设置为 'Y' 即可，用户权限列表如下： Select_priv Insert_priv Update_priv Delete_priv Create_priv Drop_priv Reload_priv Shutdown_priv Process_priv File_priv Grant_priv References_priv Index_priv Alter_priv ​ 另外一种添加用户的方法为通过SQL的 GRANT 命令，以下命令会给指定数据库TUTORIALS添加用户 zara ，密码为 zara123 。 root@host# mysql -u root -p Enter password:******* mysql> use mysql; Database changed mysql> GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP -> ON TUTORIALS.* -> TO 'zara'@'localhost' -> IDENTIFIED BY 'zara123'; ​ 以上命令会在mysql数据库中的user表创建一条用户信息记录。 注意: MySQL 的SQL语句以分号 (;) 作为结束标识。 2.3 /etc/my.cnf 文件配置 ​ 一般情况下，你不需要修改该配置文件，该文件默认配置如下： [mysqld] datadir=/var/lib/mysql socket=/var/lib/mysql/mysql.sock [mysql.server] user=mysql basedir=/var/lib [safe_mysqld] err-log=/var/log/mysqld.log pid-file=/var/run/mysqld/mysqld.pid ​ 在配置文件中，你可以指定不同的错误日志文件存放的目录，一般你不需要改动这些配置。 2.4 管理MySQL的命令 ​ 以下列出了使用Mysql数据库过程中常用的命令： USE 数据库名 : 选择要操作的MySQL数据库，使用该命令后所有MySQL命令都只针对该数据库。 mysql> use RUNOOB; Database changed SHOW DATABASES: 列出 MySQL 数据库管理系统的数据库列表。 mysql> SHOW DATABASES; +--------------------+ | Database | +--------------------+ | information_schema | | RUNOOB | | cdcol | | mysql | | onethink | | performance_schema | | phpmyadmin | | test | | wecenter | | wordpress | +--------------------+ 10 rows in set (0.02 sec) SHOW TABLES: 显示指定数据库的所有表，使用该命令前需要使用 use 命令来选择要操作的数据库。 mysql> use RUNOOB; Database changed mysql> SHOW TABLES; +------------------+ | Tables_in_runoob | +------------------+ | employee_tbl | | runoob_tbl | | tcount_tbl | +------------------+ 3 rows in set (0.00 sec) SHOW COLUMNS FROM 数据表: 显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。 mysql> SHOW COLUMNS FROM runoob_tbl; +-----------------+--------------+------+-----+---------+-------+ | Field | Type | Null | Key | Default | Extra | +-----------------+--------------+------+-----+---------+-------+ | runoob_id | int(11) | NO | PRI | NULL | | | runoob_title | varchar(255) | YES | | NULL | | | runoob_author | varchar(255) | YES | | NULL | | | submission_date | date | YES | | NULL | | +-----------------+--------------+------+-----+---------+-------+ 4 rows in set (0.01 sec) SHOW INDEX FROM 数据表: 显示数据表的详细索引信息，包括PRIMARY KEY（主键）。 mysql> SHOW INDEX FROM runoob_tbl; +------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+ | Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | +------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+ | runoob_tbl | 0 | PRIMARY | 1 | runoob_id | A | 2 | NULL | NULL | | BTREE | | | +------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+ 1 row in set (0.00 sec) SHOW TABLE STATUS LIKE [FROM db_name] [LIKE 'pattern'] \\G: 该命令将输出Mysql数据库管理系统的性能及统计信息。 mysql> SHOW TABLE STATUS FROM RUNOOB; # 显示数据库 RUNOOB 中所有表的信息 mysql> SHOW TABLE STATUS from RUNOOB LIKE 'runoob%'; # 表名以runoob开头的表的信息 mysql> SHOW TABLE STATUS from RUNOOB LIKE 'runoob%'\\G; # 加上 \\G，查询结果按列打印 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"DataBase/MySQL/Chapter2.html":{"url":"DataBase/MySQL/Chapter2.html","title":"第二章：数据类型","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 第二章：数据类型 1. 数值类型 2. 日期和时间类型 3. 字符串类型 第二章：数据类型 ​ MySQL中定义数据字段的类型对你数据库的优化是非常重要的。 MySQL支持多种类型，大致可以分为三类：数值、日期/时间和字符串(字符)类型。 1. 数值类型 ​ MySQL支持所有标准SQL数值数据类型。 ​ 这些类型包括严格数值数据类型(INTEGER、SMALLINT、DECIMAL和NUMERIC)，以及近似数值数据类型(FLOAT、REAL和DOUBLE PRECISION)。 ​ 关键字INT是INTEGER的同义词，关键字DEC是DECIMAL的同义词。 ​ BIT数据类型保存位字段值，并且支持MyISAM、MEMORY、InnoDB和BDB表。 作为SQL标准的扩展，MySQL也支持整数类型**TINYINT**、**MEDIUMINT**和**BIGINT**。下面的表显示了需要的每个整数类型的存储和范围。 类型 大小 范围（有符号） 范围（无符号） 用途 TINYINT 1 字节 (-128，127) (0，255) 小整数值 SMALLINT 2 字节 (-32 768，32 767) (0，65 535) 大整数值 MEDIUMINT 3 字节 (-8 388 608，8 388 607) (0，16 777 215) 大整数值 INT或INTEGER 4 字节 (-2 147 483 648，2 147 483 647) (0，4 294 967 295) 大整数值 BIGINT 8 字节 (-9,223,372,036,854,775,808，9 223 372 036 854 775 807) (0，18 446 744 073 709 551 615) 极大整数值 FLOAT 4 字节 (-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38) 0，(1.175 494 351 E-38，3.402 823 466 E+38) 单精度 浮点数值 DOUBLE 8 字节 (-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308) 0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308) 双精度 浮点数值 DECIMAL 对DECIMAL(M,D) ，如果M>D，为M+2否则为D+2 依赖于M和D的值 依赖于M和D的值 小数值 2. 日期和时间类型 ​ 表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。 每个时间类型有一个有效值范围和一个\"零\"值，当指定不合法的MySql不能表示的值时使用\"零\"值。 **TIMESTAMP**类型有专有的自动更新特性，将在后面描述。 类型 大小 (字节) 范围 格式 用途 DATE 3 1000-01-01/9999-12-31 YYYY-MM-DD 日期值 TIME 3 '-838:59:59'/'838:59:59' HH:MM:SS 时间值或持续时间 YEAR 1 1901/2155 YYYY 年份值 DATETIME 8 1000-01-01 00:00:00/9999-12-31 23:59:59 YYYY-MM-DD HH:MM:SS 混合日期和时间值 TIMESTAMP 4 1970-01-01 00:00:00/2038 结束时间是第 2147483647 秒，北京时间 2038-1-19 11:14:07，格林尼治时间 2038年1月19日 凌晨 03:14:07 YYYYMMDD HHMMSS 混合日期和时间值，时间戳 3. 字符串类型 字符串类型指**CHAR**、**VARCHAR**、**BINARY**、**VARBINARY**、**BLOB**、**TEXT**、**ENUM**和**SET**。该节描述了这些类型如何工作以及如何在查询中使用这些类型。 类型 大小 用途 CHAR 0-255字节 定长字符串 VARCHAR 0-65535 字节 变长字符串 TINYBLOB 0-255字节 不超过 255 个字符的二进制字符串 TINYTEXT 0-255字节 短文本字符串 BLOB 0-65 535字节 二进制形式的长文本数据 TEXT 0-65 535字节 长文本数据 MEDIUMBLOB 0-16 777 215字节 二进制形式的中等长度文本数据 MEDIUMTEXT 0-16 777 215字节 中等长度文本数据 LONGBLOB 0-4 294 967 295字节 二进制形式的极大文本数据 LONGTEXT 0-4 294 967 295字节 极大文本数据 ​ CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。 **BINARY** 和 **VARBINARY** 类似于 **CHAR** 和 **VARCHAR**，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。 **BLOB** 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 **BLOB** 类型：**TINYBLOB**、**BLOB**、**MEDIUMBLOB** 和 **LONGBLOB**。它们区别在于可容纳存储范围不同。 ​ 有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"DataBase/MySQL/Chapter3.html":{"url":"DataBase/MySQL/Chapter3.html","title":"第三章：数据库操作","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 第三章：数据库操作 1. 创建数据库 1.1 使用 mysqladmin 创建数据库 1.2 使用 PHP脚本 创建数据库 1.3 推荐方法 2. 删除数据库 2.1 drop 命令删除数据库 2.2 使用 mysqladmin 删除数据库 2.3 使用PHP脚本删除数据库 3. 选择数据库 3.1 从命令提示窗口中选择MySQL数据库 3.2 使用PHP脚本选择MySQL数据库 第三章：数据库操作 1. 创建数据库 ​ 我们可以在登陆 MySQL 服务后，使用 create 命令创建数据库，语法如下: CREATE DATABASE 数据库名; 以下命令简单的演示了创建数据库的过程，数据名为 **RUNOOB**: [root@host]# mysql -u root -p Enter password:****** # 登录后进入终端 mysql> create DATABASE RUNOOB; 1.1 使用 mysqladmin 创建数据库 ​ 使用普通用户，你可能需要特定的权限来创建或者删除 MySQL 数据库。 所以我们这边使用root用户登录，root用户拥有最高权限，可以使用 mysql **mysqladmin** 命令来创建数据库。 以下命令简单的演示了创建数据库的过程，数据名为 RUNOOB: [root@host]# mysqladmin -u root -p create RUNOOB Enter password:****** ​ 以上命令执行成功后会创建 MySQL 数据库 RUNOOB。 1.2 使用 PHP脚本 创建数据库 PHP 使用 mysqli_query 函数来创建或者删除 MySQL 数据库。 ​ 该函数有两个参数，在执行成功时返回 TRUE，否则返回 FALSE。 ​ 语法如下： mysqli_query(connection,query,resultmode); 参数如下： 参数 描述 connection 必需。规定要使用的 MySQL 连接。 query 必需，规定查询字符串。 resultmode 可选。一个常量。可以是下列值中的任意一个： MYSQLI_USE_RESULT（如果需要检索大量数据，请使用这个） MYSQLI_STORE_RESULT（默认） 以下实例演示了使用PHP来创建一个数据库： '; $sql = 'CREATE DATABASE RUNOOB'; $retval = mysqli_query($conn,$sql ); if(! $retval ) { die('创建数据库失败: ' . mysqli_error($conn)); } echo \"数据库 RUNOOB 创建成功\\n\"; mysqli_close($conn); ?> ​ 执行成功后，返回如下结果： ​ 如果数据库已存在，执行后，返回如下结果： 1.3 推荐方法 ​ 使用root登录MySQL后，可以使用以下命令 CREATE DATABASE IF NOT EXISTS RUNOOB DEFAULT CHARSET utf8 COLLATE utf8_general_ci; ​ 创建数据库，该命令的作用： 如果数据库不存在则创建，存在则不创建。 创建RUNOOB数据库，并设定编码集为utf8 2. 删除数据库 使用普通用户登陆 MySQL 服务器，你可能需要特定的权限来创建或者删除 MySQL 数据库，所以我们这边使用 root 用户登录，root 用户拥有最高权限。 ​ 在删除数据库过程中，务必要十分谨慎，因为在执行删除命令后，所有数据将会消失。 2.1 drop 命令删除数据库 ​ drop 命令格式： drop database ; ​ 例如删除名为 RUNOOB 的数据库： mysql> drop database RUNOOB; 2.2 使用 mysqladmin 删除数据库 你也可以使用 mysql **mysqladmin** 命令在终端来执行删除命令。 以下实例删除数据库 RUNOOB(该数据库在前一章节已创建)： [root@host]# mysqladmin -u root -p drop RUNOOB Enter password:****** ​ 执行以上删除数据库命令后，会出现一个提示框，来确认是否真的删除数据库： Dropping the database is potentially a very bad thing to do. Any data stored in the database will be destroyed. Do you really want to drop the 'RUNOOB' database [y/N] y Database \"RUNOOB\" dropped 2.3 使用PHP脚本删除数据库 ​ PHP使用 mysqli_query 函数来创建或者删除 MySQL 数据库。 ​ 该函数有两个参数，在执行成功时返回 TRUE，否则返回 FALSE。 ​ 语法如下： mysqli_query(connection,query,resultmode); ​ 参数如下： 参数 描述 connection 必需。规定要使用的 MySQL 连接。 query 必需，规定查询字符串。 resultmode 可选。一个常量。可以是下列值中的任意一个： MYSQLI_USE_RESULT（如果需要检索大量数据，请使用这个） MYSQLI_STORE_RESULT（默认） 以下实例演示了使用PHP mysqli_query函数来删除数据库： '; $sql = 'DROP DATABASE RUNOOB'; $retval = mysqli_query( $conn, $sql ); if(! $retval ) { die('删除数据库失败: ' . mysqli_error($conn)); } echo \"数据库 RUNOOB 删除成功\\n\"; mysqli_close($conn); ?> 执行成功后，数结果为： 注意： 在使用PHP脚本删除数据库时，不会出现确认是否删除信息，会直接删除指定数据库，所以你在删除数据库时要特别小心。 3. 选择数据库 ​ 在你连接到 MySQL 数据库后，可能有多个可以操作的数据库，所以你需要选择你要操作的数据库。 3.1 从命令提示窗口中选择MySQL数据库 ​ 在 mysql> 提示窗口中可以很简单的选择特定的数据库。你可以使用SQL命令来选择指定的数据库。 以下实例选取了数据库 RUNOOB: [root@host]# mysql -u root -p Enter password:****** mysql> use RUNOOB; Database changed mysql> ​ 执行以上命令后，你就已经成功选择了 RUNOOB 数据库，在后续的操作中都会在 RUNOOB 数据库中执行。 注意:所有的数据库名，表名，表字段都是区分大小写的。所以你在使用SQL命令时需要输入正确的名称。 3.2 使用PHP脚本选择MySQL数据库 PHP 提供了函数 mysqli_select_db 来选取一个数据库。函数在执行成功后返回 TRUE ，否则返回 FALSE 。 ​ 语法如下： mysqli_select_db(connection,dbname); 参数如下： 参数 描述 connection 必需。规定要使用的 MySQL 连接。 dbname 必需，规定要使用的默认数据库。 ​ 以下实例展示了如何使用 mysqli_select_db 函数来选取一个数据库： MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"DataBase/MySQL/Chapter4.html":{"url":"DataBase/MySQL/Chapter4.html","title":"第四章：数据表操作","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 第四章：数据表操作 1. 创建数据表 1.1 通过命令提示符创建表 1.2 使用PHP脚本创建数据表 2. 删除数据表 2.1 在命令提示窗口中删除数据表 2.2 使用PHP脚本删除数据表 第四章：数据表操作 1. 创建数据表 ​ 创建MySQL数据表需要以下信息： 表名 表字段名 定义每个表字段 ​ 以下为创建MySQL数据表的SQL通用语法： CREATE TABLE table_name (column_name column_type); ​ 以下例子中我们将在 RUNOOB 数据库中创建数据表runoob_tbl： CREATE TABLE IF NOT EXISTS `runoob_tbl`( `runoob_id` INT UNSIGNED AUTO_INCREMENT, `runoob_title` VARCHAR(100) NOT NULL, `runoob_author` VARCHAR(40) NOT NULL, `submission_date` DATE, PRIMARY KEY ( `runoob_id` ) )ENGINE=InnoDB DEFAULT CHARSET=utf8; ​ 实例解析： 如果你不想字段为 NULL 可以设置字段的属性为 NOT NULL， 在操作数据库时如果输入该字段的数据为NULL ，就会报错。 AUTO_INCREMENT定义列为自增的属性，一般用于主键，数值会自动加1。 PRIMARY KEY关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。 ENGINE 设置存储引擎，CHARSET 设置编码。 1.1 通过命令提示符创建表 ​ 通过 mysql> 命令窗口可以很简单的创建MySQL数据表。你可以使用 SQL 语句 CREATE TABLE 来创建数据表。 ​ 以下为创建数据表 runoob_tbl 实例: root@host# mysql -u root -p Enter password:******* mysql> use RUNOOB; Database changed mysql> CREATE TABLE runoob_tbl( -> runoob_id INT NOT NULL AUTO_INCREMENT, -> runoob_title VARCHAR(100) NOT NULL, -> runoob_author VARCHAR(40) NOT NULL, -> submission_date DATE, -> PRIMARY KEY ( runoob_id ) -> )ENGINE=InnoDB DEFAULT CHARSET=utf8; Query OK, 0 rows affected (0.16 sec) mysql> 注意：MySQL命令终止符为分号 ; 。 注意： -> 是换行符标识，不要复制。 1.2 使用PHP脚本创建数据表 ​ 你可以使用 PHP 的 mysqli_query() 函数来创建已存在数据库的数据表。 ​ 该函数有两个参数，在执行成功时返回 TRUE，否则返回 FALSE。 ​ 语法如下： mysqli_query(connection,query,resultmode); ​ 参数如下： 参数 描述 connection 必需。规定要使用的 MySQL 连接。 query 必需，规定查询字符串。 resultmode 可选。一个常量。可以是下列值中的任意一个：MYSQLI_USE_RESULT（如果需要检索大量数据，请使用这个）MYSQLI_STORE_RESULT（默认） ​ 以下实例使用了PHP脚本来创建数据表： '; $sql = \"CREATE TABLE runoob_tbl( \". \"runoob_id INT NOT NULL AUTO_INCREMENT, \". \"runoob_title VARCHAR(100) NOT NULL, \". \"runoob_author VARCHAR(40) NOT NULL, \". \"submission_date DATE, \". \"PRIMARY KEY ( runoob_id ))ENGINE=InnoDB DEFAULT CHARSET=utf8; \"; mysqli_select_db( $conn, 'RUNOOB' ); $retval = mysqli_query( $conn, $sql ); if(! $retval ) { die('数据表创建失败: ' . mysqli_error($conn)); } echo \"数据表创建成功\\n\"; mysqli_close($conn); ?> 执行成功后，就可以通过命令行查看表结构： 2. 删除数据表 ​ MySQL中删除数据表是非常容易操作的， 但是你再进行删除表操作时要非常小心，因为执行删除命令后所有数据都会消失。 ​ 以下为删除MySQL数据表的通用语法： DROP TABLE table_name ; 2.1 在命令提示窗口中删除数据表 ​ 在mysql>命令提示窗口中删除数据表SQL语句为 DROP TABLE ： ​ 以下实例删除了数据表runoob_tbl: root@host# mysql -u root -p Enter password:******* mysql> use RUNOOB; Database changed mysql> DROP TABLE runoob_tbl Query OK, 0 rows affected (0.8 sec) mysql> 2.2 使用PHP脚本删除数据表 ​ PHP使用 mysqli_query 函数来删除 MySQL 数据表。 ​ 该函数有两个参数，在执行成功时返回 TRUE，否则返回 FALSE。 ​ 语法如下： mysqli_query(connection,query,resultmode); ​ 参数如下： 参数 描述 connection 必需。规定要使用的 MySQL 连接。 query 必需，规定查询字符串。 resultmode 可选。一个常量。可以是下列值中的任意一个：MYSQLI_USE_RESULT（如果需要检索大量数据，请使用这个）MYSQLI_STORE_RESULT（默认） ​ 以下实例使用了PHP脚本删除数据表 runoob_tbl: '; $sql = \"DROP TABLE runoob_tbl\"; mysqli_select_db( $conn, 'RUNOOB' ); $retval = mysqli_query( $conn, $sql ); if(! $retval ) { die('数据表删除失败: ' . mysqli_error($conn)); } echo \"数据表删除成功\\n\"; mysqli_close($conn); ?> ​ 执行成功后，我们使用以下命令，就看不到 runoob_tbl 表了： mysql> show tables; Empty set (0.01 sec) MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"DataBase/MySQL/Chapter5.html":{"url":"DataBase/MySQL/Chapter5.html","title":"第五章：常用语句","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 第五章：常用语句 1. 插入语句(INSERT) 1.1 通过命令提示窗口插入数据 1.2 使用PHP脚本插入数据 2. 查询语句(SELECT) 2.1 通过命令提示符获取数据 2.2 使用PHP脚本来获取数据 3. 条件子句(WHERE) 3.1 从命令提示符中读取数据 3.2 BINARY 关键字 3.3 使用PHP脚本读取数据 4. 更新语句(UPDATE) 4.1 通过命令提示符更新数据 4.2 使用PHP脚本更新数据 5. 删除语句(DELETE) 5.1 从命令行中删除数据 5.2 使用 PHP 脚本删除数据 6.模糊查询子句(LIKE) 6.1 在命令提示符中使用 LIKE 子句 6.2 在PHP脚本中使用 LIKE 子句 7. 联合查询(UNION) 7.1 SQL UNION 实例 7.2 SQL UNION ALL 实例 7.3 带有 WHERE 的 SQL UNION ALL 8. 排序(ORDER BY) 8.1 在命令提示符中使用 ORDER BY 子句 8.2 在 PHP 脚本中使用 ORDER BY 子句 9. 分组(GROUP BY) 9.1 使用 WITH ROLLUP 10. 连接(JOIN) 10.1 在命令提示符中使用 INNER JOIN 10.2 INNER JOIN 10.3 LEFT JOIN 10.4 RIGHT JOIN 10.5 在 PHP 脚本中使用 JOIN 第五章：常用语句 1. 插入语句(INSERT) ​ MySQL 表中使用 INSERT INTO SQL语句来插入数据。 ​ 你可以通过 mysql> 命令提示窗口中向数据表中插入数据，或者通过PHP脚本来插入数据。 ​ 以下为向MySQL数据表插入数据通用的 INSERT INTO SQL语法： INSERT INTO table_name ( field1, field2,...fieldN ) VALUES ( value1, value2,...valueN ); ​ 添加数据的时候可以规定列进行添加。 如果所有的列都要添加数据可以不规定列进行添加数据： mysql> INSERT INTO runoob_tbl -> VALUES -> (0, \"JAVA 教程\", \"RUNOOB.COM\", '2016-05-06'); ​ 如果数据是字符型，必须使用单引号或者双引号，如：\"value\"。 ​ INSERT 插入多条数据 INSERT INTO table_name (field1, field2,...fieldN) VALUES (valueA1,valueA2,...valueAN), (valueB1,valueB2,...valueBN), (valueC1,valueC2,...valueCN)......; 1.1 通过命令提示窗口插入数据 ​ 以下我们将使用 SQL INSERT INTO 语句向 MySQL 数据表 runoob_tbl 插入数据 ​ 以下实例中我们将向 runoob_tbl 表插入三条数据: root@host# mysql -u root -p password; Enter password:******* mysql> use RUNOOB; Database changed mysql> INSERT INTO runoob_tbl -> (runoob_title, runoob_author, submission_date) -> VALUES -> (\"学习 PHP\", \"菜鸟教程\", NOW()); Query OK, 1 rows affected, 1 warnings (0.01 sec) mysql> INSERT INTO runoob_tbl -> (runoob_title, runoob_author, submission_date) -> VALUES -> (\"学习 MySQL\", \"菜鸟教程\", NOW()); Query OK, 1 rows affected, 1 warnings (0.01 sec) mysql> INSERT INTO runoob_tbl -> (runoob_title, runoob_author, submission_date) -> VALUES -> (\"JAVA 教程\", \"RUNOOB.COM\", '2016-05-06'); Query OK, 1 rows affected (0.00 sec) mysql> 注意： 使用箭头标记 -> 不是 SQL 语句的一部分，它仅仅表示一个新行，如果一条SQL语句太长，我们可以通过回车键来创建一个新行来编写 SQL 语句，SQL 语句的命令结束符为分号 ;。 ​ 在以上实例中，我们并没有提供 runoob_id 的数据，因为该字段我们在创建表的时候已经设置它为 AUTO_INCREMENT(自动增加) 属性。 所以，该字段会自动递增而不需要我们去设置。实例中 NOW() 是一个 MySQL 函数，该函数返回日期和时间。 ​ 接下来我们可以通过以下语句查看数据表数据： select * from runoob_tbl; 输出结果： 1.2 使用PHP脚本插入数据 ​ 你可以使用PHP 的 mysqli_query() 函数来执行 SQL INSERT INTO命令来插入数据。 ​ 该函数有两个参数，在执行成功时返回 TRUE，否则返回 FALSE。 ​ 语法如下： mysqli_query(connection,query,resultmode); ​ 参数如下： 参数 描述 connection 必需。规定要使用的 MySQL 连接。 query 必需，规定查询字符串。 resultmode 可选。一个常量。可以是下列值中的任意一个：MYSQLI_USE_RESULT（如果需要检索大量数据，请使用这个）MYSQLI_STORE_RESULT（默认） ​ 以下实例中程序接收用户输入的三个字段数据，并插入数据表中： '; // 设置编码，防止中文乱码 mysqli_query($conn , \"set names utf8\"); $runoob_title = '学习 Python'; $runoob_author = 'RUNOOB.COM'; $submission_date = '2016-03-06'; $sql = \"INSERT INTO runoob_tbl \". \"(runoob_title,runoob_author, submission_date) \". \"VALUES \". \"('$runoob_title','$runoob_author','$submission_date')\"; mysqli_select_db( $conn, 'RUNOOB' ); $retval = mysqli_query( $conn, $sql ); if(! $retval ) { die('无法插入数据: ' . mysqli_error($conn)); } echo \"数据插入成功\\n\"; mysqli_close($conn); ?> ​ 对于含有中文的数据插入，需要添加 mysqli_query($conn , \"set names utf8\"); 语句。 ​ 接下来我们可以通过以下语句查看数据表数据： select * from runoob_tbl; ​ 输出结果： 2. 查询语句(SELECT) ​ MySQL 数据库使用SQL SELECT语句来查询数据。 ​ 你可以通过 mysql> 命令提示窗口中在数据库中查询数据，或者通过PHP脚本来查询数据。 ​ 以下为在MySQL数据库中查询数据通用的 SELECT 语法： SELECT column_name,column_name FROM table_name [WHERE Clause] [LIMIT N][ OFFSET M] 查询语句中你可以使用一个或者多个表，表之间使用逗号(,)分割，并使用WHERE语句来设定查询条件。 SELECT 命令可以读取一条或者多条记录。 你可以使用星号（*）来代替其他字段，SELECT语句会返回表的所有字段数据 你可以使用 WHERE 语句来包含任何条件。 你可以使用 LIMIT 属性来设定返回的记录数。 你可以通过OFFSET指定SELECT语句开始查询的数据偏移量。默认情况下偏移量为0。 2.1 通过命令提示符获取数据 ​ 以下实例我们将通过 SQL SELECT 命令来获取 MySQL 数据表 runoob_tbl 的数据： select * from runoob_tbl; ​ 该实例将返回数据表 runoob_tbl 的所有记录，输出结果： 2.2 使用PHP脚本来获取数据 ​ 使用 PHP 函数的 mysqli_query() 及 SQL SELECT 命令来获取数据。 ​ 该函数用于执行 SQL 命令，然后通过 PHP 函数 mysqli_fetch_array() 来使用或输出所有查询的数据。 ​ mysqli_fetch_array() 函数从结果集中取得一行作为关联数组，或数字数组，或二者兼有 返回根据从结果集取得的行生成的数组，如果没有更多行则返回 false。 ​ 以下实例为从数据表 runoob_tbl 中读取所有记录。 菜鸟教程 mysqli_fetch_array 测试'; echo '教程 ID标题作者提交日期'; while($row = mysqli_fetch_array($retval, MYSQLI_ASSOC)) { echo \" {$row['runoob_id']} \". \"{$row['runoob_title']} \". \"{$row['runoob_author']} \". \"{$row['submission_date']} \". \"\"; } echo ''; mysqli_close($conn); ?> ​ 输出结果如下所示： ​ 以上实例中，读取的每行记录赋值给变量 $row，然后再打印出每个值。 注意：记住如果你需要在字符串中使用变量，请将变量置于花括号。 ​ 在上面的例子中，PHP mysqli_fetch_array() 函数第二个参数为 MYSQLI_ASSOC， 设置该参数查询结果返回关联数组，你可以使用字段名称来作为数组的索引。 ​ PHP 提供了另外一个函数 mysqli_fetch_assoc(), 该函数从结果集中取得一行作为关联数组。 返回根据从结果集取得的行生成的关联数组，如果没有更多行，则返回 false。 尝试以下实例，该实例使用了 mysqli_fetch_assoc() 函数来输出数据表 runoob_tbl 的所有记录： 菜鸟教程 mysqli_fetch_assoc 测试'; echo '教程 ID标题作者提交日期'; while($row = mysqli_fetch_assoc($retval)) { echo \" {$row['runoob_id']} \". \"{$row['runoob_title']} \". \"{$row['runoob_author']} \". \"{$row['submission_date']} \". \"\"; } echo ''; mysqli_close($conn); ?> ​ 输出结果如下所示： ​ 你也可以使用常量 MYSQLI_NUM 作为 PHP mysqli_fetch_array() 函数的第二个参数，返回数字数组。 ​ 以下实例使用 MYSQLI_NUM 参数显示数据表 runoob_tbl 的所有记录: 菜鸟教程 mysqli_fetch_array 测试'; echo '教程 ID标题作者提交日期'; while($row = mysqli_fetch_array($retval, MYSQLI_NUM)) { echo \" {$row[0]} \". \"{$row[1]} \". \"{$row[2]} \". \"{$row[3]} \". \"\"; } echo ''; mysqli_close($conn); ?> ​ 输出结果如下所示： ​ 以上三个实例输出结果都一样。 ​ 在我们执行完 SELECT 语句后，释放游标内存是一个很好的习惯。 ​ 可以通过 PHP 函数 mysqli_free_result() 来实现内存的释放。 ​ 以下实例演示了该函数的使用方法。 菜鸟教程 mysqli_fetch_array 测试'; echo '教程 ID标题作者提交日期'; while($row = mysqli_fetch_array($retval, MYSQLI_NUM)) { echo \" {$row[0]} \". \"{$row[1]} \". \"{$row[2]} \". \"{$row[3]} \". \"\"; } echo ''; // 释放内存 mysqli_free_result($retval); mysqli_close($conn); ?> ​ 输出结果如下所示： 3. 条件子句(WHERE) ​ 我们知道从 MySQL 表中使用 SQL SELECT 语句来读取数据。 ​ 如需有条件地从表中选取数据，可将 WHERE 子句添加到 SELECT 语句中。 ​ 以下是 SQL SELECT 语句使用 WHERE 子句从数据表中读取数据的通用语法： SELECT field1, field2,...fieldN FROM table_name1, table_name2... [WHERE condition1 [AND [OR]] condition2..... 查询语句中你可以使用一个或者多个表，表之间使用逗号, 分割，并使用WHERE语句来设定查询条件。 你可以在 WHERE 子句中指定任何条件。 你可以使用 AND 或者 OR 指定一个或多个条件。 WHERE 子句也可以运用于 SQL 的 DELETE 或者 UPDATE 命令。 WHERE 子句类似于程序语言中的 if 条件，根据 MySQL 表中的字段值来读取指定的数据。 ​ 以下为操作符列表，可用于 WHERE 子句中。 ​ 下表中实例假定 A 为 10, B 为 20 操作符 描述 实例 = 等号，检测两个值是否相等，如果相等返回true (A = B) 返回false。 <>, != 不等于，检测两个值是否相等，如果不相等返回true (A != B) 返回 true。 > 大于号，检测左边的值是否大于右边的值, 如果左边的值大于右边的值返回true (A > B) 返回false。 小于号，检测左边的值是否小于右边的值, 如果左边的值小于右边的值返回true (A >= 大于等于号，检测左边的值是否大于或等于右边的值, 如果左边的值大于或等于右边的值返回true (A >= B) 返回false。 小于等于号，检测左边的值是否小于于或等于右边的值, 如果左边的值小于或等于右边的值返回true (A ​ 如果我们想在 MySQL 数据表中读取指定的数据，WHERE 子句是非常有用的。 ​ 使用主键来作为 WHERE 子句的条件查询是非常快速的。 ​ 如果给定的条件在表中没有任何匹配的记录，那么查询不会返回任何数据。 3.1 从命令提示符中读取数据 ​ 我们将在SQL SELECT语句使用WHERE子句来读取MySQL数据表 runoob_tbl 中的数据： ​ 以下实例将读取 runoob_tbl 表中 runoob_author 字段值为 Sanjay 的所有记录： SELECT * from runoob_tbl WHERE runoob_author='菜鸟教程'; ​ 输出结果： 3.2 BINARY 关键字 ​ MySQL 的 WHERE 子句的字符串比较是不区分大小写的。 你可以使用 BINARY 关键字来设定 WHERE 子句的字符串比较是区分大小写的。 ​ 如下实例: mysql> SELECT * from runoob_tbl WHERE BINARY runoob_author='runoob.com'; Empty set (0.01 sec) mysql> SELECT * from runoob_tbl WHERE BINARY runoob_author='RUNOOB.COM'; +-----------+---------------+---------------+-----------------+ | runoob_id | runoob_title | runoob_author | submission_date | +-----------+---------------+---------------+-----------------+ | 3 | JAVA 教程 | RUNOOB.COM | 2016-05-06 | | 4 | 学习 Python | RUNOOB.COM | 2016-03-06 | +-----------+---------------+---------------+-----------------+ 2 rows in set (0.01 sec) ​ 实例中使用了 BINARY 关键字，是区分大小写的，所以 runoob_author='runoob.com' 的查询条件是没有数据的。 3.3 使用PHP脚本读取数据 ​ 你可以使用 PHP 函数的 mysqli_query() 及相同的 SQL SELECT 带上 WHERE 子句的命令来获取数据。 ​ 该函数用于执行 SQL 命令，然后通过 PHP 函数 mysqli_fetch_array() 来输出所有查询的数据。 ​ 以下实例将从 runoob_tbl 表中返回使用 runoob_author 字段值为 RUNOOB.COM 的记录： 菜鸟教程 MySQL WHERE 子句测试'; echo '教程 ID标题作者提交日期'; while($row = mysqli_fetch_array($retval, MYSQLI_ASSOC)) { echo \" {$row['runoob_id']} \". \"{$row['runoob_title']} \". \"{$row['runoob_author']} \". \"{$row['submission_date']} \". \"\"; } echo ''; // 释放内存 mysqli_free_result($retval); mysqli_close($conn); ?> ​ 输出结果如下所示： 4. 更新语句(UPDATE) ​ 如果我们需要修改或更新 MySQL 中的数据，我们可以使用 SQL UPDATE 命令来操作。 ​ 以下是 UPDATE 命令修改 MySQL 数据表数据的通用 SQL 语法： UPDATE table_name SET field1=new-value1, field2=new-value2 [WHERE Clause] 你可以同时更新一个或多个字段。 你可以在 WHERE 子句中指定任何条件。 你可以在一个单独表中同时更新数据。 ​ 当你需要更新数据表中指定行的数据时 WHERE 子句是非常有用的。 4.1 通过命令提示符更新数据 ​ 以下我们将在 SQL UPDATE 命令使用 WHERE 子句来更新 runoob_tbl 表中指定的数据： mysql> UPDATE runoob_tbl SET runoob_title='学习 C++' WHERE runoob_id=3; Query OK, 1 rows affected (0.01 sec) mysql> SELECT * from runoob_tbl WHERE runoob_id=3; +-----------+--------------+---------------+-----------------+ | runoob_id | runoob_title | runoob_author | submission_date | +-----------+--------------+---------------+-----------------+ | 3 | 学习 C++ | RUNOOB.COM | 2016-05-06 | +-----------+--------------+---------------+-----------------+ 1 rows in set (0.01 sec) ​ 从结果上看，runoob_id 为 3 的 runoob_title 已被修改。 4.2 使用PHP脚本更新数据 ​ PHP 中使用函数 mysqli_query() 来执行 SQL 语句，你可以在 SQL UPDATE 语句中使用或者不使用 WHERE 子句。 注意：不使用 WHERE 子句将数据表的全部数据进行更新，所以要慎重。 ​ 该函数与在 mysql> 命令提示符中执行 SQL 语句的效果是一样的。 ​ 以下实例将更新 runoob_id 为 3 的 runoob_title 字段的数据。 5. 删除语句(DELETE) ​ 你可以使用 SQL 的 DELETE FROM 命令来删除 MySQL 数据表中的记录。 你可以在 `mysql>` 命令提示符或 PHP 脚本中执行该命令。 ​ 以下是 SQL DELETE 语句从 MySQL 数据表中删除数据的通用语法： DELETE FROM table_name [WHERE Clause] 如果没有指定 WHERE 子句，MySQL 表中的所有记录将被删除。 你可以在 WHERE 子句中指定任何条件 您可以在单个表中一次性删除记录。 ​ 当你想删除数据表中指定的记录时 WHERE 子句是非常有用的。 5.1 从命令行中删除数据 ​ 这里我们将在 SQL DELETE 命令中使用 WHERE 子句来删除 MySQL 数据表 runoob_tbl 所选的数据。 ​ 以下实例将删除 runoob_tbl 表中 runoob_id 为3 的记录： mysql> use RUNOOB; Database changed mysql> DELETE FROM runoob_tbl WHERE runoob_id=3; Query OK, 1 row affected (0.23 sec) 5.2 使用 PHP 脚本删除数据 ​ PHP使用 mysqli_query() 函数来执行SQL语句， 你可以在 SQL DELETE 命令中使用或不使用 WHERE 子句。 ​ 该函数与 mysql> 命令符执行SQL命令的效果是一样的。 ​ 以下PHP实例将删除 runoob_tbl 表中 runoob_id 为 3 的记录: 6.模糊查询子句(LIKE) ​ 我们知道在 MySQL 中使用 SQL SELECT 命令来读取数据， 同时我们可以在 SELECT 语句中使用 WHERE 子句来获取指定的记录。 ​ WHERE 子句中可以使用等号 = 来设定获取数据的条件，如 \"runoob_author = 'RUNOOB.COM'\"。 ​ 但是有时候我们需要获取 runoob_author 字段含有 \"COM\" 字符的所有记录，这时我们就需要在 WHERE 子句中使用 SQL LIKE 子句。 ​ SQL LIKE 子句中使用百分号 %字符来表示任意字符，类似于UNIX或正则表达式中的星号 *。 ​ 如果没有使用百分号 %, LIKE 子句与等号 = 的效果是一样的。 ​ 以下是 SQL SELECT 语句使用 LIKE 子句从数据表中读取数据的通用语法： SELECT field1, field2,...fieldN FROM table_name WHERE field1 LIKE condition1 [AND [OR]] filed2 = 'somevalue' 你可以在 WHERE 子句中指定任何条件。 你可以在 WHERE 子句中使用LIKE子句。 你可以使用LIKE子句代替等号 =。 LIKE 通常与 % 一同使用，类似于一个元字符的搜索。 你可以使用 AND 或者 OR 指定一个或多个条件。 你可以在 DELETE 或 UPDATE 命令中使用 WHERE...LIKE 子句来指定条件。 在 where like 的条件查询中，SQL 提供了四种匹配方式。 %：表示任意 0 个或多个字符。可匹配任意类型和长度的字符，有些情况下若是中文，请使用两个百分号（%%）表示。 _：表示任意单个字符。匹配单个任意字符，它常用来限制表达式的字符长度语句。 []：表示括号内所列字符中的一个（类似正则表达式）。指定一个字符、字符串或范围，要求所匹配对象为它们中的任一个。 ：表示不在括号所列之内的单个字符。其取值和 [] 相同，但它要求所匹配对象为指定字符以外的任一个字符。 查询内容包含通配符时,由于通配符的缘故，导致我们查询特殊字符 “%”、“_”、“[” 的语句无法正常实现，而把特殊字符用 “[ ]” 括起便可正常查询。 ​ like 匹配/模糊匹配，会与 % 和 _ 结合使用。 '%a' //以a结尾的数据 'a%' //以a开头的数据 '%a%' //含有a的数据 '_a_' //三位且中间字母是a的 '_a' //两位且结尾字母是a的 'a_' //两位且开头字母是a的 查询以 java 字段开头的信息: SELECT * FROM position WHERE name LIKE 'java%'; ​ 查询包含 java 字段的信息: SELECT * FROM position WHERE name LIKE '%java%'; ​ 查询以 java 字段结尾的信息: SELECT * FROM position WHERE name LIKE '%java'; 6.1 在命令提示符中使用 LIKE 子句 ​ 我们将在 SQL SELECT 命令中使用 WHERE...LIKE 子句来从MySQL数据表 runoob_tbl 中读取数据。 ​ 以下是我们将 runoob_tbl 表中获取 runoob_author 字段中以 COM 为结尾的的所有记录： mysql> use RUNOOB; Database changed mysql> SELECT * from runoob_tbl WHERE runoob_author LIKE '%COM'; +-----------+---------------+---------------+-----------------+ | runoob_id | runoob_title | runoob_author | submission_date | +-----------+---------------+---------------+-----------------+ | 3 | 学习 Java | RUNOOB.COM | 2015-05-01 | | 4 | 学习 Python | RUNOOB.COM | 2016-03-06 | +-----------+---------------+---------------+-----------------+ 2 rows in set (0.01 sec) 6.2 在PHP脚本中使用 LIKE 子句 ​ 你可以使用PHP函数的 mysqli_query() 及相同的 SQL SELECT 带上 WHERE...LIKE 子句的命令来获取数据。 ​ 该函数用于执行 SQL 命令，然后通过 PHP 函数 mysqli_fetch_array() 来输出所有查询的数据。 ​ 但是如果是 DELETE 或者 UPDATE 中使用 WHERE...LIKE 子句的S QL 语句，则无需使用 mysqli_fetch_array() 函数。 ​ 以下是我们使用PHP脚本在 runoob_tbl 表中读取 runoob_author 字段中以 COM 为结尾的的所有记录： 菜鸟教程 mysqli_fetch_array 测试'; echo '教程 ID标题作者提交日期'; while($row = mysqli_fetch_array($retval, MYSQLI_ASSOC)) { echo \" {$row['runoob_id']} \". \"{$row['runoob_title']} \". \"{$row['runoob_author']} \". \"{$row['submission_date']} \". \"\"; } echo ''; mysqli_close($conn); ?> ​ 输出结果如下图所示： 7. 联合查询(UNION) ​ 本教程为大家介绍 MySQL UNION 操作符的语法和实例。 ​ MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。 MySQL UNION 操作符语法格式： SELECT expression1, expression2, ... expression_n FROM tables [WHERE conditions] UNION [ALL | DISTINCT] SELECT expression1, expression2, ... expression_n FROM tables [WHERE conditions]; ​ 参数如下： expression1, expression2, ... expression_n: 要检索的列。 tables: 要检索的数据表。 WHERE conditions: 可选， 检索条件。 DISTINCT: 可选，删除结果集中重复的数据。默认情况下 UNION 操作符已经删除了重复数据，所以 DISTINCT 修饰符对结果没啥影响。 ALL: 可选，返回所有结果集，包含重复数据。 ​ 在本教程中，我们将使用 RUNOOB 样本数据库。 ​ 下面是选自 \"Websites\" 表的数据： mysql> SELECT * FROM Websites; +----+--------------+---------------------------+-------+---------+ | id | name | url | alexa | country | +----+--------------+---------------------------+-------+---------+ | 1 | Google | https://www.google.cm/ | 1 | USA | | 2 | 淘宝 | https://www.taobao.com/ | 13 | CN | | 3 | 菜鸟教程 | http://www.runoob.com/ | 4689 | CN | | 4 | 微博 | http://weibo.com/ | 20 | CN | | 5 | Facebook | https://www.facebook.com/ | 3 | USA | | 7 | stackoverflow | http://stackoverflow.com/ | 0 | IND | +----+---------------+---------------------------+-------+---------+ ​ 下面是 \"apps\" APP 的数据： mysql> SELECT * FROM apps; +----+------------+-------------------------+---------+ | id | app_name | url | country | +----+------------+-------------------------+---------+ | 1 | QQ APP | http://im.qq.com/ | CN | | 2 | 微博 APP | http://weibo.com/ | CN | | 3 | 淘宝 APP | https://www.taobao.com/ | CN | +----+------------+-------------------------+---------+ 3 rows in set (0.00 sec) 7.1 SQL UNION 实例 ​ 下面的 SQL 语句从 \"Websites\" 和 \"apps\" 表中选取所有不同的country（只有不同的值）： SELECT country FROM Websites UNION SELECT country FROM apps ORDER BY country; SELECT country FROM Websites UNION SELECT country FROM apps ORDER BY country; ​ 执行以上 SQL 输出结果如下： 注释：UNION 不能用于列出两个表中所有的country。如果一些网站和APP来自同一个国家，每个国家只会列出一次。UNION 只会选取不同的值。请使用 UNION ALL 来选取重复的值！ 7.2 SQL UNION ALL 实例 ​ 下面的 SQL 语句使用 UNION ALL 从 \"Websites\" 和 \"apps\" 表中选取所有的country（也有重复的值）： SELECT country FROM Websites UNION ALL SELECT country FROM apps ORDER BY country; ​ 执行以上 SQL 输出结果如下： 7.3 带有 WHERE 的 SQL UNION ALL ​ 下面的 SQL 语句使用 UNION ALL 从 \"Websites\" 和 \"apps\" 表中选取所有的中国(CN)的数据（也有重复的值）： SELECT country, name FROM Websites WHERE country='CN' UNION ALL SELECT country, app_name FROM apps WHERE country='CN' ORDER BY country; ​ 执行以上 SQL 输出结果如下： 8. 排序(ORDER BY) ​ 我们知道从 MySQL 表中使用 SQL SELECT 语句来读取数据。 ​ 如果我们需要对读取的数据进行排序，我们就可以使用 MySQL 的 ORDER BY 子句来设定你想按哪个字段哪种方式来进行排序，再返回搜索结果。 ​ 以下是 SQL SELECT 语句使用 ORDER BY 子句将查询数据排序后再返回数据： SELECT field1, field2,...fieldN FROM table_name1, table_name2... ORDER BY field1 [ASC [DESC][默认 ASC]], [field2...] [ASC [DESC][默认 ASC]] 你可以使用任何字段来作为排序的条件，从而返回排序后的查询结果。 你可以设定多个字段来排序。 你可以使用 ASC 或 DESC 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升序排列。 你可以添加 WHERE...LIKE 子句来设置条件。 8.1 在命令提示符中使用 ORDER BY 子句 ​ 以下将在 SQL SELECT 语句中使用 ORDER BY 子句来读取MySQL 数据表 runoob_tbl 中的数据： mysql> use RUNOOB; Database changed mysql> SELECT * from runoob_tbl ORDER BY submission_date ASC; +-----------+---------------+---------------+-----------------+ | runoob_id | runoob_title | runoob_author | submission_date | +-----------+---------------+---------------+-----------------+ | 3 | 学习 Java | RUNOOB.COM | 2015-05-01 | | 4 | 学习 Python | RUNOOB.COM | 2016-03-06 | | 1 | 学习 PHP | 菜鸟教程 | 2017-04-12 | | 2 | 学习 MySQL | 菜鸟教程 | 2017-04-12 | +-----------+---------------+---------------+-----------------+ 4 rows in set (0.01 sec) mysql> SELECT * from runoob_tbl ORDER BY submission_date DESC; +-----------+---------------+---------------+-----------------+ | runoob_id | runoob_title | runoob_author | submission_date | +-----------+---------------+---------------+-----------------+ | 1 | 学习 PHP | 菜鸟教程 | 2017-04-12 | | 2 | 学习 MySQL | 菜鸟教程 | 2017-04-12 | | 4 | 学习 Python | RUNOOB.COM | 2016-03-06 | | 3 | 学习 Java | RUNOOB.COM | 2015-05-01 | +-----------+---------------+---------------+-----------------+ 4 rows in set (0.01 sec) ​ 读取 runoob_tbl 表中所有数据并按 submission_date 字段的升序排列。 MySQL 拼音排序 ​ 如果字符集采用的是 gbk(汉字编码字符集)，直接在查询语句后边添加 ORDER BY： SELECT * FROM runoob_tbl ORDER BY runoob_title; ​ 如果字符集采用的是 utf8(万国码)，需要先对字段进行转码然后排序： SELECT * FROM runoob_tbl ORDER BY CONVERT(runoob_title using gbk); 8.2 在 PHP 脚本中使用 ORDER BY 子句 ​ 你可以使用PHP函数的 mysqli_query() 及相同的 SQL SELECT 带上 ORDER BY 子句的命令来获取数据。 ​ 该函数用于执行 SQL 命令，然后通过 PHP 函数 mysqli_fetch_array() 来输出所有查询的数据。 ​ 尝试以下实例，查询后的数据按 submission_date 字段的降序排列后返回。 菜鸟教程 MySQL ORDER BY 测试'; echo '教程 ID标题作者提交日期'; while($row = mysqli_fetch_array($retval, MYSQL_ASSOC)) { echo \" {$row['runoob_id']} \". \"{$row['runoob_title']} \". \"{$row['runoob_author']} \". \"{$row['submission_date']} \". \"\"; } echo ''; mysqli_close($conn); ?> 输出结果如下图所示： 9. 分组(GROUP BY) ​ GROUP BY 语句根据一个或多个列对结果集进行分组。 ​ 在分组的列上我们可以使用 COUNT, SUM, AVG,等函数。 ​ GROUP BY 语法如下： SELECT column_name, function(column_name) FROM table_name WHERE column_name operator value GROUP BY column_name; ​ 本章节实例使用到了以下表结构及数据，使用前我们可以先将以下数据导入数据库中。 SET NAMES utf8; SET FOREIGN_KEY_CHECKS = 0; -- ---------------------------- -- Table structure for `employee_tbl` -- ---------------------------- DROP TABLE IF EXISTS `employee_tbl`; CREATE TABLE `employee_tbl` ( `id` int(11) NOT NULL, `name` char(10) NOT NULL DEFAULT '', `date` datetime NOT NULL, `singin` tinyint(4) NOT NULL DEFAULT '0' COMMENT '登录次数', PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; -- ---------------------------- -- Records of `employee_tbl` -- ---------------------------- BEGIN; INSERT INTO `employee_tbl` VALUES ('1', '小明', '2016-04-22 15:25:33', '1'), ('2', '小王', '2016-04-20 15:25:47', '3'), ('3', '小丽', '2016-04-19 15:26:02', '2'), ('4', '小王', '2016-04-07 15:26:14', '4'), ('5', '小明', '2016-04-11 15:26:40', '4'), ('6', '小明', '2016-04-04 15:26:54', '2'); COMMIT; SET FOREIGN_KEY_CHECKS = 1; ​ 导入成功后，执行以下 SQL 语句： mysql> set names utf8; mysql> SELECT * FROM employee_tbl; +----+--------+---------------------+--------+ | id | name | date | singin | +----+--------+---------------------+--------+ | 1 | 小明 | 2016-04-22 15:25:33 | 1 | | 2 | 小王 | 2016-04-20 15:25:47 | 3 | | 3 | 小丽 | 2016-04-19 15:26:02 | 2 | | 4 | 小王 | 2016-04-07 15:26:14 | 4 | | 5 | 小明 | 2016-04-11 15:26:40 | 4 | | 6 | 小明 | 2016-04-04 15:26:54 | 2 | +----+--------+---------------------+--------+ 6 rows in set (0.00 sec) ​ 接下来我们使用 GROUP BY 语句 将数据表按名字进行分组，并统计每个人有多少条记录： mysql> SELECT name, COUNT(*) FROM employee_tbl GROUP BY name; +--------+----------+ | name | COUNT(*) | +--------+----------+ | 小丽 | 1 | | 小明 | 3 | | 小王 | 2 | +--------+----------+ 3 rows in set (0.01 sec) 9.1 使用 WITH ROLLUP ​ WITH ROLLUP 可以实现在分组统计数据基础上再进行相同的统计（SUM,AVG,COUNT…）。 ​ 例如我们将以上的数据表按名字进行分组，再统计每个人登录的次数： mysql> SELECT name, SUM(singin) as singin_count FROM employee_tbl GROUP BY name WITH ROLLUP; +--------+--------------+ | name | singin_count | +--------+--------------+ | 小丽 | 2 | | 小明 | 7 | | 小王 | 7 | | NULL | 16 | +--------+--------------+ 4 rows in set (0.00 sec) ​ 其中记录 NULL 表示所有人的登录次数。 ​ 我们可以使用 coalesce 来设置一个可以取代 NUll 的名称，coalesce 语法： select coalesce(a,b,c); ​ 参数说明：如果a==null,则选择b；如果b==null,则选择c；如果a!=null,则选择a；如果a b c 都为null ，则返回为null（没意义）。 ​ 以下实例中如果名字为空我们使用总数代替： mysql> SELECT coalesce(name, '总数'), SUM(singin) as singin_count FROM employee_tbl GROUP BY name WITH ROLLUP; +--------------------------+--------------+ | coalesce(name, '总数') | singin_count | +--------------------------+--------------+ | 小丽 | 2 | | 小明 | 7 | | 小王 | 7 | | 总数 | 16 | +--------------------------+--------------+ 4 rows in set (0.01 sec) 10. 连接(JOIN) ​ 在前几章节中，我们已经学会了如何在一张表中读取数据，这是相对简单的，但是在真正的应用中经常需要从多个数据表中读取数据。 ​ 本章节我们将向大家介绍如何使用 MySQL 的 JOIN 在两个或多个表中查询数据。 ​ 你可以在 SELECT, UPDATE 和 DELETE 语句中使用 Mysql 的 JOIN 来联合多表查询。 ​ JOIN 按照功能大致分为如下三类： INNER JOIN/JOIN（内连接,或等值连接）：获取两个表中字段匹配关系的记录。 LEFT JOIN（左连接）：获取左表所有记录，即使右表没有对应匹配的记录。 RIGHT JOIN（右连接）： 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。 10.1 在命令提示符中使用 INNER JOIN ​ 我们在RUNOOB数据库中有两张表 tcount_tbl 和 runoob_tbl。两张数据表数据如下： ​ 尝试以下实例： mysql> use RUNOOB; Database changed mysql> SELECT * FROM tcount_tbl; +---------------+--------------+ | runoob_author | runoob_count | +---------------+--------------+ | 菜鸟教程 | 10 | | RUNOOB.COM | 20 | | Google | 22 | +---------------+--------------+ 3 rows in set (0.01 sec) mysql> SELECT * from runoob_tbl; +-----------+---------------+---------------+-----------------+ | runoob_id | runoob_title | runoob_author | submission_date | +-----------+---------------+---------------+-----------------+ | 1 | 学习 PHP | 菜鸟教程 | 2017-04-12 | | 2 | 学习 MySQL | 菜鸟教程 | 2017-04-12 | | 3 | 学习 Java | RUNOOB.COM | 2015-05-01 | | 4 | 学习 Python | RUNOOB.COM | 2016-03-06 | | 5 | 学习 C | FK | 2017-04-05 | +-----------+---------------+---------------+-----------------+ 5 rows in set (0.01 sec) ​ 接下来我们就使用MySQL的INNER JOIN(也可以省略 INNER 使用 JOIN，效果一样)来连接以上两张表来读取 runoob_tbl表中所有runoob_author字段在tcount_tbl表对应的runoob_count字段值： 10.2 INNER JOIN mysql> SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a INNER JOIN tcount_tbl b ON a.runoob_author = b.runoob_author; +-------------+-----------------+----------------+ | a.runoob_id | a.runoob_author | b.runoob_count | +-------------+-----------------+----------------+ | 1 | 菜鸟教程 | 10 | | 2 | 菜鸟教程 | 10 | | 3 | RUNOOB.COM | 20 | | 4 | RUNOOB.COM | 20 | +-------------+-----------------+----------------+ 4 rows in set (0.00 sec) 以上 SQL 语句等价于： mysql> SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a, tcount_tbl b WHERE a.runoob_author = b.runoob_author; +-------------+-----------------+----------------+ | a.runoob_id | a.runoob_author | b.runoob_count | +-------------+-----------------+----------------+ | 1 | 菜鸟教程 | 10 | | 2 | 菜鸟教程 | 10 | | 3 | RUNOOB.COM | 20 | | 4 | RUNOOB.COM | 20 | +-------------+-----------------+----------------+ 4 rows in set (0.01 sec) 10.3 LEFT JOIN ​ MySQL left join 与 join 有所不同。 MySQL LEFT JOIN 会读取左边数据表的全部数据，即便右边表无对应数据。 ​ 尝试以下实例，以 runoob_tbl 为左表，tcount_tbl 为右表，理解 MySQL LEFT JOIN 的应用： mysql> SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a LEFT JOIN tcount_tbl b ON a.runoob_author = b.runoob_author; +-------------+-----------------+----------------+ | a.runoob_id | a.runoob_author | b.runoob_count | +-------------+-----------------+----------------+ | 1 | 菜鸟教程 | 10 | | 2 | 菜鸟教程 | 10 | | 3 | RUNOOB.COM | 20 | | 4 | RUNOOB.COM | 20 | | 5 | FK | NULL | +-------------+-----------------+----------------+ 5 rows in set (0.01 sec) ​ 以上实例中使用了 LEFT JOIN，该语句会读取左边的数据表 runoob_tbl 的所有选取的字段数据，即便在右侧表 tcount_tbl中 没有对应的 runoob_author 字段值。 10.4 RIGHT JOIN ​ MySQL RIGHT JOIN 会读取右边数据表的全部数据，即便左边边表无对应数据。 ​ 尝试以下实例，以 runoob_tbl 为左表，tcount_tbl 为右表，理解MySQL RIGHT JOIN的应用： mysql> SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a RIGHT JOIN tcount_tbl b ON a.runoob_author = b.runoob_author; +-------------+-----------------+----------------+ | a.runoob_id | a.runoob_author | b.runoob_count | +-------------+-----------------+----------------+ | 1 | 菜鸟教程 | 10 | | 2 | 菜鸟教程 | 10 | | 3 | RUNOOB.COM | 20 | | 4 | RUNOOB.COM | 20 | | NULL | NULL | 22 | +-------------+-----------------+----------------+ 5 rows in set (0.01 sec) 以上实例中使用了 RIGHT JOIN，该语句会读取右边的数据表 tcount_tbl 的所有选取的字段数据，即便在左侧表 runoob_tbl 中没有对应的runoob_author 字段值。 10.5 在 PHP 脚本中使用 JOIN PHP 中使用 mysqli_query() 函数来执行 SQL 语句，你可以使用以上的相同的 SQL 语句作为 mysqli_query() 函数的参数。 尝试如下实例: 菜鸟教程 MySQL JOIN 测试'; echo '教程 ID作者登陆次数'; while($row = mysqli_fetch_array($retval, MYSQLI_ASSOC)) { echo \" {$row['runoob_id']} \". \"{$row['runoob_author']} \". \"{$row['runoob_count']} \". \"\"; } echo ''; mysqli_close($conn); ?> 输出结果如下图所示： MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"DataBase/SQLite/":{"url":"DataBase/SQLite/","title":"SQLite","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 SQLite 1. 什么是 SQLite？ 2. 为什么要用 SQLite？ 3. 历史 4. SQLite 局限性 5. SQLite 命令 6. DDL - 数据定义语言 7. DML - 数据操作语言 8. DQL - 数据查询语言 9. 参考内容 SQLite ​ SQLite 是一个软件库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。SQLite 是在世界上最广泛部署的 SQL 数据库引擎。SQLite 源代码不受版权限制。 1. 什么是 SQLite？ ​ SQLite是一个进程内的库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。它是一个零配置的数据库，这意味着与其他数据库一样，您不需要在系统中配置。 ​ 就像其他数据库，SQLite 引擎不是一个独立的进程，可以按应用程序需求进行静态或动态连接。SQLite 直接访问其存储文件。 2. 为什么要用 SQLite？ 不需要一个单独的服务器进程或操作的系统（无服务器的）。 SQLite 不需要配置，这意味着不需要安装或管理。 一个完整的 SQLite 数据库是存储在一个单一的跨平台的磁盘文件。 SQLite 是非常小的，是轻量级的，完全配置时小于 400KiB，省略可选功能配置时小于250KiB。 SQLite 是自给自足的，这意味着不需要任何外部的依赖。 SQLite 事务是完全兼容 ACID 的，允许从多个进程或线程安全访问。 SQLite 支持 SQL92（SQL2）标准的大多数查询语言的功能。 SQLite 使用 ANSI-C 编写的，并提供了简单和易于使用的 API。 SQLite 可在 UNIX（Linux, Mac OS-X, Android, iOS）和 Windows（Win32, WinCE, WinRT）中运行。 3. 历史 2000 -- D. Richard Hipp 设计 SQLite 是为了不需要管理即可操作程序。 2000 -- 在八月，SQLite1.0 发布 GNU 数据库管理器（GNU Database Manager）。 2011 -- Hipp 宣布，向 SQLite DB 添加 UNQl 接口，开发 UNQLite（面向文档的数据库）。 4. SQLite 局限性 在 SQLite 中，SQL92 不支持的特性如下所示： 特性 描述 RIGHT OUTER JOIN 只实现了 LEFT OUTER JOIN。 FULL OUTER JOIN 只实现了 LEFT OUTER JOIN。 ALTER TABLE 支持 RENAME TABLE 和 ALTER TABLE 的 ADD COLUMN variants 命令，不支持 DROP COLUMN、ALTER COLUMN、ADD CONSTRAINT。 Trigger 支持 支持 FOR EACH ROW 触发器，但不支持 FOR EACH STATEMENT 触发器。 VIEWs 在 SQLite 中，视图是只读的。您不可以在视图上执行 DELETE、INSERT 或 UPDATE 语句。 GRANT 和 REVOKE 可以应用的唯一的访问权限是底层操作系统的正常文件访问权限。 5. SQLite 命令 ​ 与关系数据库进行交互的标准 SQLite 命令类似于 SQL。命令包括 CREATE、SELECT、INSERT、UPDATE、DELETE 和 DROP。这些命令基于它们的操作性质可分为以下几种： 6. DDL - 数据定义语言 命令 描述 CREATE 创建一个新的表，一个表的视图，或者数据库中的其他对象。 ALTER 修改数据库中的某个已有的数据库对象，比如一个表。 DROP 删除整个表，或者表的视图，或者数据库中的其他对象。 7. DML - 数据操作语言 命令 描述 INSERT 创建一条记录。 UPDATE 修改记录。 DELETE 删除记录。 8. DQL - 数据查询语言 命令 描述 SELECT 从一个或多个表中检索某些记录。 9. 参考内容 《菜鸟教程/学习SQLite》 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"DataBase/SQLite/Chapter1.html":{"url":"DataBase/SQLite/Chapter1.html","title":"第一章：安装","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 第一章：安装 1. 在 Windows 上安装 SQLite 2. 在 Linux 上安装 SQLite 3. 在 Mac OS X 上安装 SQLite 第一章：安装 ​ SQLite 的一个重要的特性是零配置的，这意味着不需要复杂的安装或管理。本章将讲解 Windows、Linux 和 Mac OS X 上的安装设置。 1. 在 Windows 上安装 SQLite 请访问 SQLite 下载页面，从 Windows 区下载预编译的二进制文件。 您需要下载 sqlite-tools-win32-*.zip 和 sqlite-dll-win32-*.zip 压缩文件。 创建文件夹 C:\\sqlite，并在此文件夹下解压上面两个压缩文件，将得到 sqlite3.def、sqlite3.dll 和 sqlite3.exe 文件。 添加 C:\\sqlite 到 PATH 环境变量，最后在命令提示符下，使用 sqlite3 命令，将显示如下结果。 C:\\>sqlite3 SQLite version 3.7.15.2 2013-01-09 11:53:05 Enter \".help\" for instructions Enter SQL statements terminated with a \";\" sqlite> 2. 在 Linux 上安装 SQLite ​ 目前，几乎所有版本的 Linux 操作系统都附带 SQLite。所以，只要使用下面的命令来检查您的机器上是否已经安装了 SQLite。 $ sqlite3 SQLite version 3.7.15.2 2013-01-09 11:53:05 Enter \".help\" for instructions Enter SQL statements terminated with a \";\" sqlite> ​ 如果没有看到上面的结果，那么就意味着没有在 Linux 机器上安装 SQLite。因此，让我们按照下面的步骤安装 SQLite： 请访问 SQLite 下载页面，从源代码区下载 sqlite-autoconf-*.tar.gz。 步骤如下： $ tar xvzf sqlite-autoconf-3071502.tar.gz $ cd sqlite-autoconf-3071502 $ ./configure --prefix=/usr/local $ make $ make install ​ 上述步骤将在 Linux 机器上安装 SQLite，您可以按照上述讲解的进行验证。 3. 在 Mac OS X 上安装 SQLite ​ 最新版本的 Mac OS X 会预安装 SQLite，但是如果没有可用的安装，只需按照如下步骤进行： 请访问 SQLite 下载页面，从源代码区下载 sqlite-autoconf-*.tar.gz。 步骤如下： $ tar xvzf sqlite-autoconf-3071502.tar.gz $ cd sqlite-autoconf-3071502 $ ./configure --prefix=/usr/local $ make $ make install 上述步骤将在 Mac OS X 机器上安装 SQLite，您可以使用下列命令进行验证： $ sqlite3 SQLite version 3.7.15.2 2013-01-09 11:53:05 Enter \".help\" for instructions Enter SQL statements terminated with a \";\" sqlite> 最后，在 SQLite 命令提示符下，使用 SQLite 命令做练习。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"DataBase/SQLite/Chapter2.html":{"url":"DataBase/SQLite/Chapter2.html","title":"第二章：命令","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 第二章：命令 1. 格式化输出 2. sqlite_master 表格 第二章：命令 ​ 本章将向您讲解 SQLite 编程人员所使用的简单却有用的命令。这些命令被称为 SQLite 的点命令，这些命令的不同之处在于它们不以分号 ; 结束。 ​ 让我们在命令提示符下键入一个简单的 sqlite3 命令，在 SQLite 命令提示符下，您可以使用各种 SQLite 命令。 $ sqlite3 SQLite version 3.3.6 Enter \".help\" for instructions sqlite> ​ 如需获取可用的点命令的清单，可以在任何时候输入 \".help\"。例如： sqlite>.help ​ 上面的命令会显示各种重要的 SQLite 点命令的列表，如下所示： 命令 描述 .backup ?DB? FILE 备份 DB 数据库（默认是 \"main\"）到 FILE 文件。 .bail ON\\ OFF 发生错误后停止。默认为 OFF。 .databases 列出数据库的名称及其所依附的文件。 .dump ?TABLE? 以 SQL 文本格式转储数据库。如果指定了 TABLE 表，则只转储匹配 LIKE 模式的 TABLE 表。 .echo ON\\ OFF 开启或关闭 echo 命令。 .exit 退出 SQLite 提示符。 .explain ON\\ OFF 开启或关闭适合于 EXPLAIN 的输出模式。如果没有带参数，则为 EXPLAIN on，及开启 EXPLAIN。 .header(s) ON\\ OFF 开启或关闭头部显示。 .help 显示消息。 .import FILE TABLE 导入来自 FILE 文件的数据到 TABLE 表中。 .indices ?TABLE? 显示所有索引的名称。如果指定了 TABLE 表，则只显示匹配 LIKE 模式的 TABLE 表的索引。 .load FILE ?ENTRY? 加载一个扩展库。 .log FILE\\ off 开启或关闭日志。FILE 文件可以是 stderr（标准错误）/stdout（标准输出）。 .mode MODE 设置输出模式，MODE 可以是下列之一： csv 逗号分隔的值column 左对齐的列html HTML 的 代码insert TABLE 表的 SQL 插入（insert）语句line 每行一个值list 由 .separator 字符串分隔的值tabs 由 Tab 分隔的值tcl TCL 列表元素 .nullvalue STRING 在 NULL 值的地方输出 STRING 字符串。 .output FILENAME 发送输出到 FILENAME 文件。 .output stdout 发送输出到屏幕。 .print STRING... 逐字地输出 STRING 字符串。 .prompt MAIN CONTINUE 替换标准提示符。 .quit 退出 SQLite 提示符。 .read FILENAME 执行 FILENAME 文件中的 SQL。 .schema ?TABLE? 显示 CREATE 语句。如果指定了 TABLE 表，则只显示匹配 LIKE 模式的 TABLE 表。 .separator STRING 改变输出模式和 .import 所使用的分隔符。 .show 显示各种设置的当前值。 .stats ON\\ OFF 开启或关闭统计。 .tables ?PATTERN? 列出匹配 LIKE 模式的表的名称。 .timeout MS 尝试打开锁定的表 MS 毫秒。 .width NUM NUM 为 \"column\" 模式设置列宽度。 .timer ON\\ OFF 开启或关闭 CPU 定时器。 ​ 让我们尝试使用 .show 命令，来查看 SQLite 命令提示符的默认设置。 sqlite>.show echo: off explain: off headers: off mode: column nullvalue: \"\" output: stdout separator: \"|\" width: sqlite> 确保 sqlite> 提示符与点命令之间没有空格，否则将无法正常工作。 1. 格式化输出 ​ 您可以使用下列的点命令来格式化输出为本教程下面所列出的格式： sqlite>.header on sqlite>.mode column sqlite>.timer on sqlite> ​ 上面设置将产生如下格式的输出： ID NAME AGE ADDRESS SALARY ---------- ---------- ---------- ---------- ---------- 1 Paul 32 California 20000.0 2 Allen 25 Texas 15000.0 3 Teddy 23 Norway 20000.0 4 Mark 25 Rich-Mond 65000.0 5 David 27 Texas 85000.0 6 Kim 22 South-Hall 45000.0 7 James 24 Houston 10000.0 CPU Time: user 0.000000 sys 0.000000 2. sqlite_master 表格 ​ 主表中保存数据库表的关键信息，并把它命名为 sqlite_master。如要查看表概要，可按如下操作： sqlite>.schema sqlite_master ​ 这将产生如下结果： CREATE TABLE sqlite_master ( type text, name text, tbl_name text, rootpage integer, sql text ); MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"DataBase/SQLite/Chapter3.html":{"url":"DataBase/SQLite/Chapter3.html","title":"第三章：语法","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 第三章：语法 1. 大小写敏感性 2. 注释 3. SQLite 语句 3.1 ANALYZE： 3.2 AND/OR： 3.3 ALTER TABLE： 3.4 ALTER TABLE （Rename）： 3.5 ATTACH DATABASE ： 3.6 BEGIN TRANSACTION： 3.7 BETWEEN： 3.8 COMMIT： 3.9 CREATE INDEX： 3.10 CREATE UNIQUE INDEX： 3.11 CREATE TABLE： 3.12 CREATE TRIGGER： 3.13 CREATE VIEW ： 3.14 CREATE VIRTUAL TABLE： 3.15 COMMIT TRANSACTION： 3.16 COUNT： 3.17 DELETE： 3.18 DETACH DATABASE： 3.19 DISTINCT： 3.20 DROP INDEX： 3.21 DROP TABLE： 3.22 DROP VIEW： 3.23 DROP TRIGGER： 3.24 EXISTS： 3.25 EXPLAIN： 3.26 GLOB： 3.27 GROUP BY： 3.28 HAVING： 3.29 INSERT INTO： 3.30 IN： 3.31 Like： 3.32 NOT IN： 3.33 ORDER BY： 3.34 PRAGMA： 3.35 RELEASE SAVEPOINT： 3.36 REINDEX： 3.37 ROLLBACK： 3.38 SAVEPOINT： 3.39 SELECT： 3.40 UPDATE： 3.41 VACUUM： 3.42 WHERE： 第三章：语法 ​ SQLite 是遵循一套独特的称为语法的规则和准则。本教程列出了所有基本的 SQLite 语法，向您提供了一个 SQLite 快速入门。 1. 大小写敏感性 ​ 有个重要的点值得注意，SQLite 是不区分大小写的，但也有一些命令是大小写敏感的，比如 GLOB 和 glob 在 SQLite 的语句中有不同的含义。 2. 注释 ​ SQLite 注释是附加的注释，可以在 SQLite 代码中添加注释以增加其可读性，他们可以出现在任何空白处，包括在表达式内和其他 SQL 语句的中间，但它们不能嵌套。 ​ SQL 注释以两个连续的 \"-\" 字符（ASCII 0x2d）开始，并扩展至下一个换行符（ASCII 0x0a）或直到输入结束，以先到者为准。 ​ 您也可以使用 C 风格的注释，以 \"/\" 开始，并扩展至下一个 \"/\" 字符对或直到输入结束，以先到者为准。SQLite的注释可以跨越多行。 sqlite>.help -- 这是一个简单的注释 3. SQLite 语句 所有的 SQLite 语句可以以任何关键字开始，如 SELECT、INSERT、UPDATE、DELETE、ALTER、DROP 等，所有的语句以分号（;）结束。 3.1 ANALYZE： ANALYZE; or ANALYZE database_name; or ANALYZE database_name.table_name; 3.2 AND/OR： SELECT column1, column2....columnN FROM table_name WHERE CONDITION-1 {AND|OR} CONDITION-2; 3.3 ALTER TABLE： ALTER TABLE table_name ADD COLUMN column_def...; 3.4 ALTER TABLE （Rename）： ALTER TABLE table_name RENAME TO new_table_name; 3.5 ATTACH DATABASE ： ATTACH DATABASE 'DatabaseName' As 'Alias-Name'; 3.6 BEGIN TRANSACTION： BEGIN; or BEGIN EXCLUSIVE TRANSACTION; 3.7 BETWEEN： SELECT column1, column2....columnN FROM table_name WHERE column_name BETWEEN val-1 AND val-2; 3.8 COMMIT： COMMIT; 3.9 CREATE INDEX： CREATE INDEX index_name ON table_name ( column_name COLLATE NOCASE ); 3.10 CREATE UNIQUE INDEX： CREATE UNIQUE INDEX index_name ON table_name ( column1, column2,...columnN); 3.11 CREATE TABLE： CREATE TABLE table_name( column1 datatype, column2 datatype, column3 datatype, ..... columnN datatype, PRIMARY KEY( one or more columns ) ); 3.12 CREATE TRIGGER： CREATE TRIGGER database_name.trigger_name BEFORE INSERT ON table_name FOR EACH ROW BEGIN stmt1; stmt2; .... END; 3.13 CREATE VIEW ： CREATE VIEW database_name.view_name AS SELECT statement....; 3.14 CREATE VIRTUAL TABLE： CREATE VIRTUAL TABLE database_name.table_name USING weblog( access.log ); or CREATE VIRTUAL TABLE database_name.table_name USING fts3( ); 3.15 COMMIT TRANSACTION： COMMIT; 3.16 COUNT： SELECT COUNT(column_name) FROM table_name WHERE CONDITION; 3.17 DELETE： DELETE FROM table_name WHERE {CONDITION}; 3.18 DETACH DATABASE： DETACH DATABASE 'Alias-Name'; 3.19 DISTINCT： SELECT DISTINCT column1, column2....columnN FROM table_name; 3.20 DROP INDEX： DROP INDEX database_name.index_name; 3.21 DROP TABLE： DROP TABLE database_name.table_name; 3.22 DROP VIEW： DROP VIEW view_name; 3.23 DROP TRIGGER： DROP TRIGGER trigger_name 3.24 EXISTS： SELECT column1, column2....columnN FROM table_name WHERE column_name EXISTS (SELECT * FROM table_name ); 3.25 EXPLAIN： EXPLAIN INSERT statement...; or EXPLAIN QUERY PLAN SELECT statement...; 3.26 GLOB： SELECT column1, column2....columnN FROM table_name WHERE column_name GLOB { PATTERN }; 3.27 GROUP BY： SELECT SUM(column_name) FROM table_name WHERE CONDITION GROUP BY column_name; 3.28 HAVING： SELECT SUM(column_name) FROM table_name WHERE CONDITION GROUP BY column_name HAVING (arithematic function condition); 3.29 INSERT INTO： INSERT INTO table_name( column1, column2....columnN) VALUES ( value1, value2....valueN); 3.30 IN： SELECT column1, column2....columnN FROM table_name WHERE column_name IN (val-1, val-2,...val-N); 3.31 Like： SELECT column1, column2....columnN FROM table_name WHERE column_name LIKE { PATTERN }; 3.32 NOT IN： SELECT column1, column2....columnN FROM table_name WHERE column_name NOT IN (val-1, val-2,...val-N); 3.33 ORDER BY： SELECT column1, column2....columnN FROM table_name WHERE CONDITION ORDER BY column_name {ASC|DESC}; 3.34 PRAGMA： PRAGMA pragma_name; For example: PRAGMA page_size; PRAGMA cache_size = 1024; PRAGMA table_info(table_name); 3.35 RELEASE SAVEPOINT： RELEASE savepoint_name; 3.36 REINDEX： REINDEX collation_name; REINDEX database_name.index_name; REINDEX database_name.table_name; 3.37 ROLLBACK： ROLLBACK; or ROLLBACK TO SAVEPOINT savepoint_name; 3.38 SAVEPOINT： SAVEPOINT savepoint_name; 3.39 SELECT： SELECT column1, column2....columnN FROM table_name; 3.40 UPDATE： UPDATE table_name SET column1 = value1, column2 = value2....columnN=valueN [ WHERE CONDITION ]; 3.41 VACUUM： VACUUM; 3.42 WHERE： SELECT column1, column2....columnN FROM table_name WHERE CONDITION; MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"DataBase/SQLite/Chapter4.html":{"url":"DataBase/SQLite/Chapter4.html","title":"第四章：数据类型","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 第四章：数据类型 1. SQLite 存储类 2/ SQLite 亲和(Affinity)类型 3. SQLite 亲和类型(Affinity)及类型名称 4. Boolean 数据类型 5. Date 与 Time 数据类型 第四章：数据类型 ​ SQLite 数据类型是一个用来指定任何对象的数据类型的属性。SQLite 中的每一列，每个变量和表达式都有相关的数据类型。 ​ 您可以在创建表的同时使用这些数据类型。SQLite 使用一个更普遍的动态类型系统。在 SQLite 中，值的数据类型与值本身是相关的，而不是与它的容器相关。 1. SQLite 存储类 ​ 每个存储在 SQLite 数据库中的值都具有以下存储类之一： 存储类 描述 NULL 值是一个 NULL 值。 INTEGER 值是一个带符号的整数，根据值的大小存储在 1、2、3、4、6 或 8 字节中。 REAL 值是一个浮点值，存储为 8 字节的 IEEE 浮点数字。 TEXT 值是一个文本字符串，使用数据库编码（UTF-8、UTF-16BE 或 UTF-16LE）存储。 BLOB 值是一个 blob 数据，完全根据它的输入存储。 ​ SQLite 的存储类稍微比数据类型更普遍。INTEGER 存储类，例如，包含 6 种不同的不同长度的整数数据类型。 2/ SQLite 亲和(Affinity)类型 ​ SQLite支持列的亲和类型概念。任何列仍然可以存储任何类型的数据，当数据插入时，该字段的数据将会优先采用亲缘类型作为该值的存储方式。SQLite目前的版本支持以下五种亲缘类型： 亲和类型 描述 TEXT 数值型数据在被插入之前，需要先被转换为文本格式，之后再插入到目标字段中。 NUMERIC 当文本数据被插入到亲缘性为NUMERIC的字段中时，如果转换操作不会导致数据信息丢失以及完全可逆，那么SQLite就会将该文本数据转换为INTEGER或REAL类型的数据，如果转换失败，SQLite仍会以TEXT方式存储该数据。对于NULL或BLOB类型的新数据，SQLite将不做任何转换，直接以NULL或BLOB的方式存储该数据。需要额外说明的是，对于浮点格式的常量文本，如\"30000.0\"，如果该值可以转换为INTEGER同时又不会丢失数值信息，那么SQLite就会将其转换为INTEGER的存储方式。 INTEGER 对于亲缘类型为INTEGER的字段，其规则等同于NUMERIC，唯一差别是在执行CAST表达式时。 REAL 其规则基本等同于NUMERIC，唯一的差别是不会将\"30000.0\"这样的文本数据转换为INTEGER存储方式。 NONE 不做任何的转换，直接以该数据所属的数据类型进行存储。 3. SQLite 亲和类型(Affinity)及类型名称 ​ 下表列出了当创建 SQLite3 表时可使用的各种数据类型名称，同时也显示了相应的亲和类型： 数据类型 亲和类型 INT INTEGER TINYINT SMALLINT MEDIUMINT BIGINT UNSIGNED BIG INT INT2 INT8 INTEGER CHARACTER(20) VARCHAR(255) VARYING CHARACTER(255) NCHAR(55) NATIVE CHARACTER(70) NVARCHAR(100) TEXT CLOB TEXT BLOB no datatype specified NONE REAL DOUBLE DOUBLE PRECISION FLOAT REAL NUMERIC DECIMAL(10,5) BOOLEAN DATE DATETIME NUMERIC 4. Boolean 数据类型 ​ SQLite 没有单独的 Boolean 存储类。相反，布尔值被存储为整数 0（false）和 1（true）。 5. Date 与 Time 数据类型 ​ SQLite 没有一个单独的用于存储日期和/或时间的存储类，但 SQLite 能够把日期和时间存储为 TEXT、REAL 或 INTEGER 值。 存储类 日期格式 TEXT 格式为 \"YYYY-MM-DD HH:MM:SS.SSS\" 的日期。 REAL 从公元前 4714 年 11 月 24 日格林尼治时间的正午开始算起的天数。 INTEGER 从 1970-01-01 00:00:00 UTC 算起的秒数。 ​ 您可以以任何上述格式来存储日期和时间，并且可以使用内置的日期和时间函数来自由转换不同格式。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"DataBase/SQLite/Chapter5.html":{"url":"DataBase/SQLite/Chapter5.html","title":"第五章：常用函数","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 第五章：常用函数 1. SQLite COUNT 函数 2. SQLite MAX 函数 3. SQLite MIN 函数 4. SQLite AVG 函数 5. SQLite SUM 函数 6. SQLite RANDOM 函数 7. SQLite ABS 函数 8. SQLite UPPER 函数 9. SQLite LOWER 函数 10. SQLite LENGTH 函数 11. SQLite sqlite_version 函数 第五章：常用函数 ​ SQLite 有许多内置函数用于处理字符串或数字数据。下面列出了一些有用的 SQLite 内置函数，且所有函数都是大小写不敏感，这意味着您可以使用这些函数的小写形式或大写形式或混合形式。欲了解更多详情，请查看 SQLite 的官方文档： 序号 函数 描述 1 COUNT 聚集函数是用来计算一个数据库表中的行数。 2 MAX 聚合函数允许我们选择某列的最大值。 3 MIN 聚合函数允许我们选择某列的最小值。 4 AVG 聚合函数计算某列的平均值。 5 SUM 聚合函数允许为一个数值列计算总和。 6 RANDOM 函数返回一个介于 -9223372036854775808 和 +9223372036854775807 之间的伪随机整数。 7 ABS 函数返回数值参数的绝对值。 8 UPPER 函数把字符串转换为大写字母。 9 LOWER 函数把字符串转换为小写字母。 10 LENGTH 函数返回字符串的长度。 11 sqlite_version 函数返回 SQLite 库的版本。 ​ 在我们开始讲解这些函数实例之前，先假设 COMPANY 表有以下记录： ID NAME AGE ADDRESS SALARY ---------- ---------- ---------- ---------- ---------- 1 Paul 32 California 20000.0 2 Allen 25 Texas 15000.0 3 Teddy 23 Norway 20000.0 4 Mark 25 Rich-Mond 65000.0 5 David 27 Texas 85000.0 6 Kim 22 South-Hall 45000.0 7 James 24 Houston 10000.0 1. SQLite COUNT 函数 SQLite COUNT 聚集函数是用来计算一个数据库表中的行数。下面是实例： sqlite> SELECT count(*) FROM COMPANY; 上面的 SQLite SQL 语句将产生以下结果： count(*) ---------- 7 2. SQLite MAX 函数 SQLite MAX 聚合函数允许我们选择某列的最大值。下面是实例： sqlite> SELECT max(salary) FROM COMPANY; 上面的 SQLite SQL 语句将产生以下结果： max(salary) ----------- 85000.0 3. SQLite MIN 函数 SQLite MIN 聚合函数允许我们选择某列的最小值。下面是实例： sqlite> SELECT min(salary) FROM COMPANY; 上面的 SQLite SQL 语句将产生以下结果： min(salary) ----------- 10000.0 4. SQLite AVG 函数 SQLite AVG 聚合函数计算某列的平均值。下面是实例： sqlite> SELECT avg(salary) FROM COMPANY; 上面的 SQLite SQL 语句将产生以下结果： avg(salary) ---------------- 37142.8571428572 5. SQLite SUM 函数 SQLite SUM 聚合函数允许为一个数值列计算总和。下面是实例： sqlite> SELECT sum(salary) FROM COMPANY; 上面的 SQLite SQL 语句将产生以下结果： sum(salary) ----------- 260000.0 6. SQLite RANDOM 函数 SQLite RANDOM 函数返回一个介于 -9223372036854775808 和 +9223372036854775807 之间的伪随机整数。下面是实例： sqlite> SELECT random() AS Random; 上面的 SQLite SQL 语句将产生以下结果： Random ------------------- 5876796417670984050 7. SQLite ABS 函数 SQLite ABS 函数返回数值参数的绝对值。下面是实例： sqlite> SELECT abs(5), abs(-15), abs(NULL), abs(0), abs(\"ABC\"); 上面的 SQLite SQL 语句将产生以下结果： abs(5) abs(-15) abs(NULL) abs(0) abs(\"ABC\") ---------- ---------- ---------- ---------- ---------- 5 15 0 0.0 8. SQLite UPPER 函数 SQLite UPPER 函数把字符串转换为大写字母。下面是实例： sqlite> SELECT upper(name) FROM COMPANY; 上面的 SQLite SQL 语句将产生以下结果： upper(name) ----------- PAUL ALLEN TEDDY MARK DAVID KIM JAMES 9. SQLite LOWER 函数 SQLite LOWER 函数把字符串转换为小写字母。下面是实例： sqlite> SELECT lower(name) FROM COMPANY; 上面的 SQLite SQL 语句将产生以下结果： lower(name) ----------- paul allen teddy mark david kim james 10. SQLite LENGTH 函数 SQLite LENGTH 函数返回字符串的长度。下面是实例： sqlite> SELECT name, length(name) FROM COMPANY; 上面的 SQLite SQL 语句将产生以下结果： NAME length(name) ---------- ------------ Paul 4 Allen 5 Teddy 5 Mark 4 David 5 Kim 3 James 5 11. SQLite sqlite_version 函数 SQLite sqlite_version 函数返回 SQLite 库的版本。下面是实例： sqlite> SELECT sqlite_version() AS 'SQLite Version'; 上面的 SQLite SQL 语句将产生以下结果： SQLite Version -------------- 3.6.20 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Python/":{"url":"Python/","title":"Python基础","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 概述 2. 参考内容 Python基础 1. 概述 ​ Python是一种计算机程序设计语言。是一种面向对象的动态类型语言，最初被设计用于编写自动化脚本(shell)，随着版本的不断更新和语言新功能的添加，越来越多被用于独立的、大型项目的开发。 ​ Python目前存在两个版本，即2.X和3.X两个，这里需要说明的是两个版本并不兼容，且2.X会在2020年后停止维护，因此目前建议初学者从3.X学起，本教程也是3.X版本。 ​ Python 是一门简单易学且功能强大的编程语言。它拥有高效的高级数据结构，并且能够用简单而又高效的方式进行面向对象编程。Python 优雅的语法和动态类型，再结合它的解释性，使其在大多数平台的许多领域成为编写脚本或开发应用程序的理想语言。 ​ 你可以自由地从 Python 官方点: http://www.python.org，以源代码或二进制形式获取 Python 解释器及其标准扩展库，并可以自由的分发。此站点同时也提供了大量的第三方 Python 模块、程序和工具，及其附加文档。 ​ 你可以很容易的使用 C 或 C++（其他可以通过 C 调用的语言）为 Python 解释器扩展新函数和数据类型。Python 还可以被用作定制应用程序的一门扩展语言。 2. 参考内容 《菜鸟教程/Python3教程》 《Python基础教程（第三版）》[挪] Magnus Lie Hetland 著 袁国忠 译 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Python/Chapter1.html":{"url":"Python/Chapter1.html","title":"第一章：基础知识","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 一：编码格式 二：python保留字 三：标识符 四：注释 五：行与缩进 六：多行语句 七：空行 八：同一行显示多条语句 九：多个语句构成代码组 十：print输出 1.一般打印 2.原样输出 3.多表达式打印 十一：import 与 from...import 十二：builtins 十三：语句和表达式 十四：获取用户输入 十五：赋值魔法 1. 序列解包 2. 链式赋值 3.增强赋值 十六：运行Python脚本 1. 命令提示符运行Python脚本 2. 作为普通程序运行Python 第一章：基础知识 一：编码格式 ​ 默认情况下，Python 3 源码文件以 UTF-8 编码，所有字符串都是 unicode 字符串。 ​ 当然你也可以为源码文件指定特定的编码： # -*- coding:utf-8 -*- ​ 一般情况下，推荐python文件第一行中指定编码格式 二：python保留字 ​ 保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字： Python 3.6.3 (v3.6.3:2c5fed8, Oct 3 2017, 18:11:49) [MSC v.1900 64 bit (AMD64)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> import keyword >>> keyword.kwlist ['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] 三：标识符 第一个字符必须是字母表中字母或下划线 _ 。 标识符的其他的部分由字母、数字和下划线组成。 标识符对大小写敏感。 四：注释 ​ Python中单行注释以 # 开头，实例如下： #!/usr/bin/python3 # 第一个注释 print (\"Hello, Python!\") # 第二个注释 ''' 这是多行注释，用三个单引号 这是多行注释，用三个单引号 这是多行注释，用三个单引号 ''' \"\"\" 这是多行注释，用三个双引号 这是多行注释，用三个双引号 这是多行注释，用三个双引号 \"\"\" 特殊注释： 指定编码格式 # -*- coding:utf-8 -*- 指定python版本 #!/usr/bin/python3 五：行与缩进 ​ python最具特色的就是使用缩进来表示代码块，不需要使用大括号 {} 。 ​ 缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。实例如下： if True: print (\"True\") else: print (\"False\") 六：多行语句 ​ Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠()来实现多行语句，例如： total = item_one + \\ item_two + \\ item_three ​ 在 [], {}, 或 () 中的多行语句，不需要使用反斜杠()，例如： total = ['item_one', 'item_two', 'item_three', 'item_four', 'item_five'] 七：空行 ​ 函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。 ​ 空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。 ​ 记住：空行也是程序代码的一部分。 八：同一行显示多条语句 ​ Python可以在同一行中使用多条语句，语句之间使用分号(;)分割，以下是一个简单的实例： #!/usr/bin/python3 import sys; x = 'runoob'; sys.stdout.write(x + '\\n') 九：多个语句构成代码组 ​ 缩进相同的一组语句构成一个代码块，我们称之代码组。 ​ 像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。 ​ 我们将首行及后面的代码组称为一个子句(clause)。 ​ 如下实例： if expression : suite elif expression : suite else : suite 十：print输出 1.一般打印 ​ print 默认输出是换行的，如果要实现不换行可自定义结束字符串，以替换默认的换行符。例如：如果将结束字符串指定为空字符串，以后就可以继续打印当前行，即在变量末尾加上 end=\"\"： #!/usr/bin/python3 x=\"a\" y=\"b\" # 换行输出 print( x ) print( y ) print('---------') # 不换行输出 print( x, end=\" \" ) print( y, end=\" \" ) print() ​ 以上实例执行结果为： a b --------- a b 2.原样输出 ​ Python打印所有字符串时，都会用引号将其括起。这是因为Python在打印值时，会保留其在代码中的样子，而不是你希望用户看到的样子。但如果你使用print时，例子如下： Python 3.6.3 (v3.6.3:2c5fed8, Oct 3 2017, 18:11:49) [MSC v.1900 64 bit (AMD64)] on win32 Type \"copyright\", \"credits\" or \"license()\" for more information. >>> 'hello,world!' 'hello,world!' >>> print('hello,world!') hello,world! >>> 'hello,\\nworld!' 'hello,\\nworld!' >>> print('hello,\\nworld!') hello, world! >>> ​ 你还可以使用函数str（一个类）和repr（一个函数）实现类似的效果，如下所示： Python 3.6.3 (v3.6.3:2c5fed8, Oct 3 2017, 18:11:49) [MSC v.1900 64 bit (AMD64)] on win32 Type \"copyright\", \"credits\" or \"license()\" for more information. >>> s = 'hello,\\nworld!' >>> print(str(s)) hello, world! >>> print(repr(s)) 'hello,\\nworld!' >>> 3.多表达式打印 ​ Python支持打印多个表达式，条件是使用逗号分割他们： >>> print('Age:',24) Age: 24 ​ 如你所在，在参数之间插入一个空格字符。在你要合并文本和变量值，而又不想使用字符串穿功能时，会更方便： >>> name = 'Gumby' >>> salutation = 'Mr.' >>> greeting = 'Hello,' >>> print(greeting, salutation, name) Hello, Mr. Gumby ​ 如果变量greeting中不包含逗号，该怎么添加逗号？ >>> print(greeting， '， ',salutation, name) SyntaxError: invalid character in identifier ​ 显然上述方法是不可行，因为这将在逗号前添加一个空格，以下是一种解决方案： >>> print(greeting + '， ',salutation, name) Hello， Mr. Gumby 十一：import 与 from...import ​ 可将模块视为扩展，通过将其导入以扩充Python功能 ​ 在 python 用 import 或者 from...import 来导入相应的模块。 将整个模块(somemodule)导入，格式为： **import somemodule** 从某个模块中导入某个函数,格式为： **from somemodule import somefunction** 从某个模块中导入多个函数,格式为： **from somemodule import firstfunc, secondfunc, thirdfunc** 将某个模块中的全部函数导入，格式为： **from somemodule import \\*** 1. 导入 sys 模块 import sys print('================Python import mode=========================='); print ('命令行参数为:') for i in sys.argv: print (i) print ('\\n python 路径为',sys.path) 2. 导入 sys 模块的 argv,path 成员 from sys import argv,path # 导入特定的成员 print('================python from import===================================') print('path:',path) # 因为已经导入path成员，所以此处引用时不需要加sys.path ​ 如果有两个模块，它们都包含一个函数open，可在导入两模块后通过模块名加点加open即以下格式调用： module1.open(...) module2.open(...) ​ 还有另一种方法，在导入语句末尾添加as子句并指定别名，例子如下： >>> import math as foobar >>> foobar.sqrt(4) 2.0 ​ 又或者这样： >>> from math import sqrt as foobar >>> foobar(4) 2.0 十二：builtins ​ 内建命名空间，不需要引入，其中小写字母开头的是BIF(built-in functions)内置函数 Python 3.6.3 (v3.6.3:2c5fed8, Oct 3 2017, 18:11:49) [MSC v.1900 64 bit (AMD64)] on win32 Type \"copyright\", \"credits\" or \"license()\" for more information. >>> dir(__builtins__) ['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning', 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError', 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FileExistsError', 'FileNotFoundError', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError', 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'ModuleNotFoundError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError', 'RecursionError', 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning', 'StopAsyncIteration', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'WindowsError', 'ZeroDivisionError', '__build_class__', '__debug__', '__doc__', '__import__', '__loader__', '__name__', '__package__', '__spec__', 'abs', 'all', 'any', 'ascii', 'bin', 'bool', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip'] 十三：语句和表达式 ​ 表达式作为程序的一部分，结果是一个值。 ​ 语句是让计算机执行特定操作的指示。 ​ 通俗的讲：表达式是一些东西，而语句是做一些事情。所有的语句都有一个根本特征：执行修改操作。比如，赋值语句改变变量，输出语句更改屏幕显示内容，例子如下： x = 1 #赋值语句 y = 2 #赋值语句 z = x + y #表达式 print(z) #输出语句 十四：获取用户输入 ​ 如何获取用户的输入，Python提供了内置函数input来简单实现此功能。例子如下： Python 3.6.3 (v3.6.3:2c5fed8, Oct 3 2017, 18:11:49) [MSC v.1900 64 bit (AMD64)] on win32 Type \"copyright\", \"credits\" or \"license()\" for more information. >>> input('please input : ') please input : 20190902 '20190902' >>> x = input('x : ') x : 12 >>> y = input('y : ') y : 34 >>> print(int(x) * int(y)) 408 >>> 十五：赋值魔法 1. 序列解包 ​ Python可同时（并行）给多个变量赋值 >>> x,y,z = 1,2,3 >>> print(x,' ',y,' ',z) 1 2 3 ​ 使用这种方法还可以交换多个变量的值： >>> x,y = y,x >>> print(x,y,z) 2 1 3 ​ 实际上，这里的操作称为序列解包（或可迭代对象解包）：将一个序列（或任意可迭代对象）解包，并将得到的值存储到一系列变量中： >>> values = 1,2,3 >>> values (1, 2, 3) >>> x,y,z = values >>> print(x,y,z) 1 2 3 2. 链式赋值 ​ 链式赋值是一种快捷方式，用于将多个变量关联到一个值，有点像之前的并行赋值，但只涉及到一个值。 #链式赋值 >>> a=b=2 #等价方式 >>> a=2 >>> a=b #不等价方式 >>> a=2 >>> b=2 3.增强赋值 ​ 可以不编写代码x = x + 1，而将右边表达式中的运算符( + )移到赋值运算符( = )的前面，从而写成x += 1，这样在python中被称为增强赋值，适用于所有标准运算符。 >>> x = 2 >>> x += 1 >>> x *= 4 >>> x /= 2 >>> x 6.0 ​ 增强赋值同样适用于其他数据类型（只要使用的双目运算符可用于这些数据类型） >>> fnord = 'foo' >>> fnord += ' bar' >>> fnord *= 2 >>> fnord 'foo barfoo bar' ​ 通过使用增强赋值，可让代码更紧凑，更简洁，同样在很多情况下可读性更强。 十六：运行Python脚本 1. 命令提示符运行Python脚本 ​ 在Window平台下打开DOS窗口输入如下命令可执行脚本： C:\\>python hello.py ​ 在UNIX下通过打开shell输入如下命令可执行脚本： $ python hello.py ​ 在linux下命令也类似 $ python3 hello.py 2. 作为普通程序运行Python ​ 在UNIX系统中，添加如下代码在Python脚本的第一行即可轻松运行脚本： #！/usr/bin/env python ​ 该语句从#！，后跟python的绝对路径，最后是指定对于脚本进行解释的工具。这样无论Python库在什么地方，这都可以让你能够像运行普通程序一样运行Python脚本。 ​ 要想像普通程序一样运行脚本，还必须将其变为可执行的： $ chmod a+x hello.py ​ 现在，可以像下面这样运行它（当前目录包含在执行路径中）： $ hellp.py ​ 如果以上命令不起作用，那么可以试试这个： $ ./hello.py ​ 当然，您也可以对文件进行重命名并删除扩展名.py,看起来会更像普通程序 ​ 在Windows中，扩展名.py是让Python脚本像普通程序一样运行的关键所在。如果当前计算机正确安装并配置了Python环境，点击hello.py文件会触发一个DOS窗口，如果没有输入项之类的逻辑，窗口会很快一闪而过，这是因为程序结束后窗口会立即关闭，为了防止这种情况，可在代码末尾添加1如下代码阻止关闭窗口： input(\"Press \") MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Python/Chapter2.html":{"url":"Python/Chapter2.html","title":"第二章：数据类型","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 一：python中的变量 二：多个变量赋值 三：标准数据类型 四：Number（数字） 1. 概述 2. 数值运算 3. 数值类型实例 五：String（字符串） 六：List（列表） 七：Tuple（元组） 八：Set（集合） 九：Dictionary（字典） 十：数据类型转换 第二章：数据类型 一：python中的变量 ​ Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。 ​ 在 Python 中，变量就是变量，它没有类型，我们所说的\"类型\"是变量所指的内存中对象的类型。 ​ 在Python中，名称（标识符）只能由字母，数字和下划线(_)组成，且不能以数字开头。 ​ 等号（=）用来给变量赋值。 ​ 等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如： #!/usr/bin/python3 counter = 100 # 整型变量 miles = 1000.0 # 浮点型变量 name = \"runoob\" # 字符串 print (counter) print (miles) print (name) ​ 执行以上程序会输出如下结果： 100 1000.0 runoob 二：多个变量赋值 ​ Python允许你同时为多个变量赋值。例如： a = b = c = 1 ​ 以上实例，创建一个整型对象，值为 1，从后向前赋值，三个变量被赋予相同的数值。 您也可以为多个对象指定多个变量。例如： a, b, c = 1, 2, \"runoob\" 三：标准数据类型 ​ Python3 中有六个标准的数据类型： Number（数字） String（字符串） List（列表） Tuple（元组） Set（集合） Dictionary（字典） ​ Python3 的六个标准数据类型中： 不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）； 可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。 四：Number（数字） 1. 概述 ​ Python3 支持 int、float、bool、complex（复数）。 ​ 在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。 ​ 像大多数语言一样，数值类型的赋值和计算都是很直观的。 ​ 内置的 type() 函数可以用来查询变量所指的对象类型。 >>> a, b, c, d = 20, 5.5, True, 4+3j >>> print(type(a), type(b), type(c), type(d)) ​ 此外还可以用 isinstance 来判断： >>>a = 111 >>> isinstance(a, int) True >>> ​ isinstance 和 type 的区别在于： type()不会认为子类是一种父类类型。 isinstance()会认为子类是一种父类类型。 >>> class A: ... pass ... >>> class B(A): ... pass ... >>> isinstance(A(), A) True >>> type(A()) == A True >>> isinstance(B(), A) True >>> type(B()) == A False 注意：在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。到 Python3 中，把 True 和 False 定义成关键字了，但它们的值还是 1 和 0，它们可以和数字相加。 ​ 当你指定一个值时，Number 对象就会被创建： var1 = 1 var2 = 10 ​ 您也可以使用del语句删除一些对象引用。 ​ del语句的语法是： del var1[,var2[,var3[....,varN]]] ​ 您可以通过使用del语句删除单个或多个对象。例如： del var del var_a, var_b 2. 数值运算 5 + 4 # 加法 9 4.3 - 2 # 减法 2.3 3 * 7 # 乘法 21 2 / 4 # 除法，得到一个浮点数 0.5 2 // 4 # 除法，得到一个整数 0 17 % 3 # 取余 2 2 ** 5 # 乘方 32 注意： 1、Python可以同时为多个变量赋值，如a, b = 1, 2。 2、一个变量可以通过赋值指向不同类型的对象。 3、数值的除法包含两个运算符：/ 返回一个浮点数，// 返回一个整数。 4、在混合计算时，Python会把整型转换成为浮点数。 3. 数值类型实例 int float complex 10 0.0 3.14j 100 15.20 45.j -786 -21.9 9.322e-36j 080 32.3e+18 .876j -0490 -90. -.6545+0J -0x260 -32.54e100 3e+26J 0x69 70.2E-12 4.53e-7j ​ Python还支持复数，复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。 五：String（字符串） ​ Python中的字符串用单引号 ' 或双引号 \" 括起来，同时使用反斜杠 \\ 转义特殊字符。 ​ 字符串的截取的语法格式如下： 变量[头下标:尾下标] #!/usr/bin/python3 str = 'Runoob' print (str) # 输出字符串 print (str[0:-1]) # 输出第一个到倒数第二个的所有字符 print (str[0]) # 输出字符串第一个字符 print (str[2:5]) # 输出从第三个开始到第五个的字符 print (str[2:]) # 输出从第三个开始的后的所有字符 print (str * 2) # 输出字符串两次 print (str + \"TEST\") # 连接字符串 ​ 执行以上程序会输出如下结果： Runoob Runoo R noo noob RunoobRunoob RunoobTEST ​ Python 使用反斜杠()转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 r，表示原始字符串： >>> print('Ru\\noob') Ru oob >>> print(r'Ru\\noob') Ru\\noob >>> 另外，反斜杠(\\)可以作为续行符，表示下一行是上一行的延续。也可以使用 **\"\"\"...\"\"\"** 或者 **'''...'''** 跨越多行。 ​ 注意，Python 没有单独的字符类型，一个字符就是长度为1的字符串。 >>>word = 'Python' >>> print(word[0], word[5]) P n >>> print(word[-1], word[-6]) n P 与 C 字符串不同的是，Python 字符串不能被改变。向一个索引位置赋值，比如word[0] = 'm'会导致错误。 注意： 1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。 2、字符串可以用+运算符连接在一起，用*运算符重复。 3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。 4、Python中的字符串不能改变。 六：List（列表） ​ List（列表） 是 Python 中使用最频繁的数据类型。 ​ 列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。 ​ 列表是写在方括号 [] 之间、用逗号分隔开的元素列表。 ​ 和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。 ​ 列表截取的语法格式如下： 变量[头下标:尾下标] #!/usr/bin/python3 list = [ 'abcd', 786 , 2.23, 'runoob', 70.2 ] tinylist = [123, 'runoob'] print (list) # 输出完整列表 print (list[0]) # 输出列表第一个元素 print (list[1:3]) # 从第二个开始输出到第三个元素 print (list[2:]) # 输出从第三个元素开始的所有元素 print (tinylist * 2) # 输出两次列表 print (list + tinylist) # 连接列表 ​ 以上实例输出结果： ['abcd', 786, 2.23, 'runoob', 70.2] abcd [786, 2.23] [2.23, 'runoob', 70.2] [123, 'runoob', 123, 'runoob'] ['abcd', 786, 2.23, 'runoob', 70.2, 123, 'runoob'] ​ 与Python字符串不一样的是，列表中的元素是可以改变的： a = [1, 2, 3, 4, 5, 6] a[0] = 9 a[2:5] = [13, 14, 15] a [9, 2, 13, 14, 15, 6] a[2:5] = [] # 将对应的元素值设置为 [] a [9, 2, 6] ​ List 内置了有很多方法，例如 append()、pop() 等等，这在后面会讲到。 注意： 1、List写在方括号之间，元素用逗号隔开。 2、和字符串一样，list可以被索引和切片。 3、List可以使用+操作符进行拼接。 4、List中的元素是可以改变的。 ​ Python 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串： ​ 如果第三个参数为负数表示逆向读取，以下实例用于翻转字符串： def reverseWords(input): # 通过空格将字符串分隔符，把各个单词分隔为列表 inputWords = input.split(\" \") # 翻转字符串 # 假设列表 list = [1,2,3,4], # list[0]=1, list[1]=2 ，而 -1 表示最后一个元素 list[-1]=4 ( 与 list[3]=4 一样) # inputWords[-1::-1] 有三个参数 # 第一个参数 -1 表示最后一个元素 # 第二个参数为空，表示移动到列表末尾 # 第三个参数为步长，-1 表示逆向 inputWords=inputWords[-1::-1] # 重新组合字符串 output = ' '.join(inputWords) return output if __name__ == \"__main__\": input = 'I like runoob' rw = reverseWords(input) print(rw) ​ 输出结果为： runoob like I 七：Tuple（元组） ​ 元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。 ​ 元组中的元素类型也可以不相同： #!/usr/bin/python3 tuple = ( 'abcd', 786 , 2.23, 'runoob', 70.2 ) tinytuple = (123, 'runoob') print (tuple) # 输出完整元组 print (tuple[0]) # 输出元组的第一个元素 print (tuple[1:3]) # 输出从第二个元素开始到第三个元素 print (tuple[2:]) # 输出从第三个元素开始的所有元素 print (tinytuple * 2) # 输出两次元组 print (tuple + tinytuple) # 连接元组 ​ 以上实例输出结果： ('abcd', 786, 2.23, 'runoob', 70.2) abcd (786, 2.23) (2.23, 'runoob', 70.2) (123, 'runoob', 123, 'runoob') ('abcd', 786, 2.23, 'runoob', 70.2, 123, 'runoob') ​ 元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。也可以进行截取（看上面，这里不再赘述）。 ​ 其实，可以把字符串看作一种特殊的元组。 >>>tup = (1, 2, 3, 4, 5, 6) >>> print(tup[0]) 1 >>> print(tup[1:5]) (2, 3, 4, 5) >>> tup[0] = 11 # 修改元组元素的操作是非法的 Traceback (most recent call last): File \"\", line 1, in TypeError: 'tuple' object does not support item assignment >>> ​ 虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。 ​ 构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则： tup1 = () # 空元组 tup2 = (20,) # 一个元素，需要在元素后添加逗号 ​ string、list 和 tuple 都属于 sequence（序列）。 注意： 1、与字符串一样，元组的元素不能修改。 2、元组也可以被索引和切片，方法一样。 3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。 4、元组也可以使用+操作符进行拼接。 八：Set（集合） ​ 集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。 ​ 基本功能是进行成员关系测试和删除重复元素。 ​ 可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。 ​ 创建格式： parame = {value01,value02,...} 或者 set(value) #!/usr/bin/python3 student = {'Tom', 'Jim', 'Mary', 'Tom', 'Jack', 'Rose'} print(student) # 输出集合，重复的元素被自动去掉 # 成员测试 if 'Rose' in student : print('Rose 在集合中') else : print('Rose 不在集合中') # set可以进行集合运算 a = set('abracadabra') b = set('alacazam') print(a) print(a - b) # a 和 b 的差集 print(a | b) # a 和 b 的并集 print(a & b) # a 和 b 的交集 print(a ^ b) # a 和 b 中不同时存在的元素 ​ 以上实例输出结果： {'Mary', 'Jim', 'Rose', 'Jack', 'Tom'} Rose 在集合中 {'b', 'a', 'c', 'r', 'd'} {'b', 'd', 'r'} {'l', 'r', 'a', 'c', 'z', 'm', 'b', 'd'} {'a', 'c'} {'l', 'r', 'z', 'm', 'b', 'd'} 九：Dictionary（字典） ​ 字典（dictionary）是Python中另一个非常有用的内置数据类型。 ​ 列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。 ​ 字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。 ​ 键(key)必须使用不可变类型。 ​ 在同一个字典中，键(key)必须是唯一的。 #!/usr/bin/python3 dict = {} dict['one'] = \"1 - 菜鸟教程\" dict[2] = \"2 - 菜鸟工具\" tinydict = {'name': 'runoob','code':1, 'site': 'www.runoob.com'} print (dict['one']) # 输出键为 'one' 的值 print (dict[2]) # 输出键为 2 的值 print (tinydict) # 输出完整的字典 print (tinydict.keys()) # 输出所有键 print (tinydict.values()) # 输出所有值 ​ 以上实例输出结果： 1 - 菜鸟教程 2 - 菜鸟工具 {'name': 'runoob', 'code': 1, 'site': 'www.runoob.com'} dict_keys(['name', 'code', 'site']) dict_values(['runoob', 1, 'www.runoob.com']) ​ 构造函数 dict() 可以直接从键值对序列中构建字典如下： >>>dict([('Runoob', 1), ('Google', 2), ('Taobao', 3)]) {'Taobao': 3, 'Runoob': 1, 'Google': 2} >>> {x: x**2 for x in (2, 4, 6)} {2: 4, 4: 16, 6: 36} >>> dict(Runoob=1, Google=2, Taobao=3) {'Runoob': 1, 'Google': 2, 'Taobao': 3} ​ 另外，字典类型也有一些内置的函数，例如clear()、keys()、values()等。 注意： 1、字典是一种映射类型，它的元素是键值对。 2、字典的关键字必须为不可变类型，且不能重复。 3、创建空字典使用 { }。 十：数据类型转换 ​ 有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。 以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。 函数 描述 int(x [,base]) 将x转换为一个整数 float(x) 将x转换到一个浮点数 complex(real [,imag]) 创建一个复数 str(x) 将对象 x 转换为字符串 repr(x) 将对象 x 转换为表达式字符串 eval(str) 用来计算在字符串中的有效Python表达式,并返回一个对象 tuple(s) 将序列 s 转换为一个元组 list(s) 将序列 s 转换为一个列表 set(s) 转换为可变集合 dict(d) 创建一个字典。d 必须是一个 (key, value)元组序列。 frozenset(s) 转换为不可变集合 chr(x) 将一个整数转换为一个字符 ord(x) 将一个字符转换为它的整数值 hex(x) 将一个整数转换为一个十六进制字符串 oct(x) 将一个整数转换为一个八进制字符串 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Python/Chapter3.html":{"url":"Python/Chapter3.html","title":"第三章：运算符","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 一：什么是运算符？ 二：算术运算符 三：比较运算符 四：赋值运算符 五：位运算符 六：逻辑运算符 七：成员运算符 八：身份运算符 九：运算符优先级 第三章：运算符 一：什么是运算符？ ​ 本章节主要说明Python的运算符。举个简单的例子 4 +5 = 9 。 例子中，4 和 5 被称为操作数，\"+\" 称为运算符。 ​ Python语言支持以下类型的运算符: 算术运算符 比较（关系）运算符 赋值运算符 逻辑运算符 位运算符 成员运算符 身份运算符 运算符优先级 ​ 接下来让我们一个个来学习Python的运算符。 二：算术运算符 以下假设变量a为10，变量b为21： 运算符 描述 实例 + 加 - 两个对象相加 a + b 输出结果 31 - 减 - 得到负数或是一个数减去另一个数 a - b 输出结果 -11 * 乘 - 两个数相乘或是返回一个被重复若干次的字符串 a * b 输出结果 210 / 除 - x 除以 y b / a 输出结果 2.1 % 取模 - 返回除法的余数 b % a 输出结果 1 ** 幂 - 返回x的y次幂 a**b 为10的21次方 // 取整除 - 向下取接近除数的整数 >>> 9//2 4 >>> -9//2 -5 ​ 以下实例演示了Python所有算术运算符的操作： #!/usr/bin/python3 a = 21 b = 10 c = 0 c = a + b print (\"1 - c 的值为：\", c) c = a - b print (\"2 - c 的值为：\", c) c = a * b print (\"3 - c 的值为：\", c) c = a / b print (\"4 - c 的值为：\", c) c = a % b print (\"5 - c 的值为：\", c) # 修改变量 a 、b 、c a = 2 b = 3 c = a**b print (\"6 - c 的值为：\", c) a = 10 b = 5 c = a//b print (\"7 - c 的值为：\", c) ​ 以上实例输出结果： 1 - c 的值为： 31 2 - c 的值为： 11 3 - c 的值为： 210 4 - c 的值为： 2.1 5 - c 的值为： 1 6 - c 的值为： 8 7 - c 的值为： 2 ​ 还有一些特殊例子： >>>10//-3 -4 >>>-10//3 -4 >>>-3**2 -9 ​ 此处可以看出，乘方运算符优先级高于求负运算符。当然，可以使用括号改变其优先级 三：比较运算符 ​ 以下假设变量a为10，变量b为20： 运算符 描述 实例 == 等于 - 比较对象是否相等 (a == b) 返回 False。 != 不等于 - 比较两个对象是否不相等 (a != b) 返回 True。 > 大于 - 返回x是否大于y (a > b) 返回 False。 小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。 (a >= 大于等于 - 返回x是否大于等于y。 (a >= b) 返回 False。 小于等于 - 返回x是否小于等于y。 (a ​ 以下实例演示了Python所有比较运算符的操作： #!/usr/bin/python3 a = 21 b = 10 c = 0 if ( a == b ): print (\"1 - a 等于 b\") else: print (\"1 - a 不等于 b\") if ( a != b ): print (\"2 - a 不等于 b\") else: print (\"2 - a 等于 b\") if ( a b ): print (\"4 - a 大于 b\") else: print (\"4 - a 小于等于 b\") # 修改变量 a 和 b 的值 a = 5; b = 20; if ( a = a ): print (\"6 - b 大于等于 a\") else: print (\"6 - b 小于 a\") ​ 以上实例输出结果： 1 - a 不等于 b 2 - a 不等于 b 3 - a 大于等于 b 4 - a 大于 b 5 - a 小于等于 b 6 - b 大于等于 a 四：赋值运算符 ​ 以下假设变量a为10，变量b为20： 运算符 描述 实例 = 简单的赋值运算符 c = a + b 将 a + b 的运算结果赋值为 c += 加法赋值运算符 c += a 等效于 c = c + a -= 减法赋值运算符 c -= a 等效于 c = c - a *= 乘法赋值运算符 c = a 等效于 c = c a /= 除法赋值运算符 c /= a 等效于 c = c / a %= 取模赋值运算符 c %= a 等效于 c = c % a **= 幂赋值运算符 c = a 等效于 c = c a //= 取整除赋值运算符 c //= a 等效于 c = c // a ​ 以下实例演示了Python所有赋值运算符的操作： #!/usr/bin/python3 a = 21 b = 10 c = 0 c = a + b print (\"1 - c 的值为：\", c) c += a print (\"2 - c 的值为：\", c) c *= a print (\"3 - c 的值为：\", c) c /= a print (\"4 - c 的值为：\", c) c = 2 c %= a print (\"5 - c 的值为：\", c) c **= a print (\"6 - c 的值为：\", c) c //= a print (\"7 - c 的值为：\", c) ​ 以上实例输出结果： 1 - c 的值为： 31 2 - c 的值为： 52 3 - c 的值为： 1092 4 - c 的值为： 52.0 5 - c 的值为： 2 6 - c 的值为： 2097152 7 - c 的值为： 99864 五：位运算符 ​ 按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下： ​ 下表中变量 a 为 60，b 为 13二进制格式如下： a = 0011 1100 b = 0000 1101 ----------------- a&b = 0000 1100 a|b = 0011 1101 a^b = 0011 0001 ~a = 1100 0011 运算符 描述 实例 & 按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0 (a & b) 输出结果 12 ，二进制解释： 0000 1100 注 按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。 a和b按位异或输出结果 61 ，二进制解释： 0011 1101 ^ 按位异或运算符：当两对应的二进位相异时，结果为1 (a ^ b) 输出结果 49 ，二进制解释： 0011 0001 ~ 按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1 (~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。 左移动运算符：运算数的各二进位全部左移若干位，由\" a >> 右移动运算符：把\">>\"左边的运算数的各二进位全部右移若干位，\">>\"右边的数指定移动的位数 a >> 2 输出结果 15 ，二进制解释： 0000 1111 注：上表中的注代表 | ，为避免表格转换异常，不能出现在MarkDown表格中 ​ 以下实例演示了Python所有位运算符的操作： #!/usr/bin/python3 a = 60 # 60 = 0011 1100 b = 13 # 13 = 0000 1101 c = 0 c = a & b; # 12 = 0000 1100 print (\"1 - c 的值为：\", c) c = a | b; # 61 = 0011 1101 print (\"2 - c 的值为：\", c) c = a ^ b; # 49 = 0011 0001 print (\"3 - c 的值为：\", c) c = ~a; # -61 = 1100 0011 print (\"4 - c 的值为：\", c) c = a > 2; # 15 = 0000 1111 print (\"6 - c 的值为：\", c) ​ 以上实例输出结果： 1 - c 的值为： 12 2 - c 的值为： 61 3 - c 的值为： 49 4 - c 的值为： -61 5 - c 的值为： 240 6 - c 的值为： 15 六：逻辑运算符 ​ Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20: 运算符 逻辑表达式 描述 实例 and x and y 布尔\"与\" - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。 (a and b) 返回 20。 or x or y 布尔\"或\" - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。 (a or b) 返回 10。 not not x 布尔\"非\" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。 not(a and b) 返回 False ​ 以上实例输出结果： #!/usr/bin/python3 a = 10 b = 20 if ( a and b ): print (\"1 - 变量 a 和 b 都为 true\") else: print (\"1 - 变量 a 和 b 有一个不为 true\") if ( a or b ): print (\"2 - 变量 a 和 b 都为 true，或其中一个变量为 true\") else: print (\"2 - 变量 a 和 b 都不为 true\") # 修改变量 a 的值 a = 0 if ( a and b ): print (\"3 - 变量 a 和 b 都为 true\") else: print (\"3 - 变量 a 和 b 有一个不为 true\") if ( a or b ): print (\"4 - 变量 a 和 b 都为 true，或其中一个变量为 true\") else: print (\"4 - 变量 a 和 b 都不为 true\") if not( a and b ): print (\"5 - 变量 a 和 b 都为 false，或其中一个变量为 false\") else: print (\"5 - 变量 a 和 b 都为 true\") ​ 以上实例输出结果： 1 - 变量 a 和 b 都为 true 2 - 变量 a 和 b 都为 true，或其中一个变量为 true 3 - 变量 a 和 b 有一个不为 true 4 - 变量 a 和 b 都为 true，或其中一个变量为 true 5 - 变量 a 和 b 都为 false，或其中一个变量为 false 七：成员运算符 ​ 除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。 运算符 描述 实例 in 如果在指定的序列中找到值返回 True，否则返回 False。 x 在 y 序列中 , 如果 x 在 y 序列中返回 True。 not in 如果在指定的序列中没有找到值返回 True，否则返回 False。 x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。 ​ 以下实例演示了Python所有成员运算符的操作： #!/usr/bin/python3 a = 10 b = 20 list = [1, 2, 3, 4, 5 ]; if ( a in list ): print (\"1 - 变量 a 在给定的列表中 list 中\") else: print (\"1 - 变量 a 不在给定的列表中 list 中\") if ( b not in list ): print (\"2 - 变量 b 不在给定的列表中 list 中\") else: print (\"2 - 变量 b 在给定的列表中 list 中\") # 修改变量 a 的值 a = 2 if ( a in list ): print (\"3 - 变量 a 在给定的列表中 list 中\") else: print (\"3 - 变量 a 不在给定的列表中 list 中\") ​ 以上实例输出结果： 1 - 变量 a 不在给定的列表中 list 中 2 - 变量 b 不在给定的列表中 list 中 3 - 变量 a 在给定的列表中 list 中 八：身份运算符 身份运算符用于比较两个对象的存储单元 运算符 描述 实例 is is 是判断两个标识符是不是引用自一个对象 x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False is not is not 是判断两个标识符是不是引用自不同对象 x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。 注： id()函数用于获取对象内存地址。 ​ 以下实例演示了Python所有身份运算符的操作： #!/usr/bin/python3 a = 20 b = 20 if ( a is b ): print (\"1 - a 和 b 有相同的标识\") else: print (\"1 - a 和 b 没有相同的标识\") if ( id(a) == id(b) ): print (\"2 - a 和 b 有相同的标识\") else: print (\"2 - a 和 b 没有相同的标识\") # 修改变量 b 的值 b = 30 if ( a is b ): print (\"3 - a 和 b 有相同的标识\") else: print (\"3 - a 和 b 没有相同的标识\") if ( a is not b ): print (\"4 - a 和 b 没有相同的标识\") else: print (\"4 - a 和 b 有相同的标识\") ​ 以上实例输出结果： 1 - a 和 b 有相同的标识 2 - a 和 b 有相同的标识 3 - a 和 b 没有相同的标识 4 - a 和 b 没有相同的标识 is 与 == 区别： ​ is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。 a = [1, 2, 3] b = a b is a True b == a True b = a[:] b is a False b == a True 九：运算符优先级 ​ 以下表格列出了从最高到最低优先级的所有运算符： 运算符 描述 ** 指数 (最高优先级) ~ + - 按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@) * / % // 乘，除，取模和取整除 + - 加法减法 >> 右移，左移运算符 & 位 'AND' ^ \\ 位运算符 >= 比较运算符 <> == != 等于运算符 = %= /= //= -= += = *= 赋值运算符 is is not 身份运算符 in not in 成员运算符 not and or 逻辑运算符 ​ 以下实例演示了Python所有运算符优先级的操作 #!/usr/bin/python3 a = 20 b = 10 c = 15 d = 5 e = 0 e = (a + b) * c / d #( 30 * 15 ) / 5 print (\"(a + b) * c / d 运算结果为：\", e) e = ((a + b) * c) / d # (30 * 15 ) / 5 print (\"((a + b) * c) / d 运算结果为：\", e) e = (a + b) * (c / d); # (30) * (15/5) print (\"(a + b) * (c / d) 运算结果为：\", e) e = a + (b * c) / d; # 20 + (150/5) print (\"a + (b * c) / d 运算结果为：\", e) ​ 以上实例输出结果： (a + b) * c / d 运算结果为： 90.0 ((a + b) * c) / d 运算结果为： 90.0 (a + b) * (c / d) 运算结果为： 90.0 a + (b * c) / d 运算结果为： 50.0 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Python/Chapter4.html":{"url":"Python/Chapter4.html","title":"第四章：数字","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 概述 2. 数字类型转换 3. 数字运算 4. 数学函数 5. 随机数函数 6. 三角函数 7. 数学常量 8.进制 第四章：数字 1. 概述 ​ Python 数字数据类型用于存储数值。 ​ 数据类型是不允许改变的,这就意味着如果改变数字数据类型的值，将重新分配内存空间。 ​ 以下实例在变量赋值时 Number 对象将被创建： var1 = 1 var2 = 10 ​ 您也可以使用del语句删除一些数字对象的引用。 ​ del语句的语法是： del var1[,var2[,var3[....,varN]]] ​ 您可以通过使用del语句删除单个或多个对象的引用，例如： del var del var_a, var_b ​ Python 支持三种不同的数值类型： 整型(Int) - 通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作 Long 类型使用，所以 Python3 没有 Python2 的 Long 类型。 浮点型(float) - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250） 复数( (complex)) - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。 ​ 我们可以使用十六进制和八进制来代表整数： >>> number = 0xA0F # 十六进制 >>> number 2575 >>> number=0o37 # 八进制 >>> number 31 int float complex 10 0.0 3.14j 100 15.20 45.j -786 -21.9 9.322e-36j 080 32.3e+18 .876j -0490 -90. -.6545+0J -0x260 -32.54e100 3e+26J 0x69 70.2E-12 4.53e-7j ​ Python支持复数，复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。 2. 数字类型转换 ​ 有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。 int(x) 将x转换为一个整数。 float(x) 将x转换到一个浮点数。 complex(x) 将x转换到一个复数，实数部分为 x，虚数部分为 0。 complex(x, y) 将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式。 ​ 以下实例将浮点数变量 a 转换为整数： >>> a = 1.0 >>> int(a) 1 3. 数字运算 ​ Python 解释器可以作为一个简单的计算器，您可以在解释器里输入一个表达式，它将输出表达式的值。 ​ 表达式的语法很直白： +, -, * 和 /, 和其它语言（如Pascal或C）里一样。例如： >>> 2 + 2 4 >>> 50 - 5*6 20 >>> (50 - 5*6) / 4 5.0 >>> 8 / 5 # 总是返回一个浮点数 1.6 注意：在不同的机器上浮点运算的结果可能会不一样。 ​ 在整数除法中，除法 / 总是返回一个浮点数，如果只想得到整数的结果，丢弃可能的分数部分，可以使用运算符 // ： >>> 17 / 3 # 整数除法返回浮点型 5.666666666666667 >>> >>> 17 // 3 # 整数除法返回向下取整后的结果 5 >>> 17 % 3 # ％操作符返回除法的余数 2 >>> 5 * 3 + 2 17 注意：// 得到的并不一定是整数类型的数，它与分母分子的数据类型有关系。 >>> 7//2 3 >>> 7.0//2 3.0 >>> 7//2.0 3.0 >>> ​ 等号 = 用于给变量赋值。赋值之后，除了下一个提示符，解释器不会显示任何结果。 >>> width = 20 >>> height = 5*9 >>> width * height 900 ​ Python 可以使用 ** 操作来进行幂运算： >>> 5 ** 2 # 5 的平方 25 >>> 2 ** 7 # 2的7次方 128 ​ 变量在使用前必须先\"定义\"（即赋予变量一个值），否则会出现错误： >>> n # 尝试访问一个未定义的变量 Traceback (most recent call last): File \"\", line 1, in NameError: name 'n' is not defined ​ 不同类型的数混合运算时会将整数转换为浮点数： >>> 3 * 3.75 / 1.5 7.5 >>> 7.0 / 2 3.5 ​ 在交互模式中，最后被输出的表达式结果被赋值给变量 _ 。例如： >>> tax = 12.5 / 100 >>> price = 100.50 >>> price * tax 12.5625 >>> price + _ 113.0625 >>> round(_, 2) 113.06 ​ 此处， _ 变量应被用户视为只读变量。 4. 数学函数 函数 返回值 ( 描述 ) abs(x) 返回数字的绝对值，如abs(-10) 返回 10 ceil(x) 返回数字的上入整数，如math.ceil(4.1) 返回 5 cmp(x, y) 如果 x y 返回 1。 Python 3 已废弃，使用 (x>y)-(x。 exp(x) 返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045 fabs(x) 返回数字的绝对值，如math.fabs(-10) 返回10.0 floor(x) 返回数字的下舍整数，如math.floor(4.9)返回 4 log(x) 如math.log(math.e)返回1.0,math.log(100,10)返回2.0 log10(x) 返回以10为基数的x的对数，如math.log10(100)返回 2.0 max(x1, x2,...) 返回给定参数的最大值，参数可以为序列。 min(x1, x2,...) 返回给定参数的最小值，参数可以为序列。 modf(x) 返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。 pow(x, y) x**y 运算后的值。 round(x [,n]) 返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。 sqrt(x) 返回数字x的平方根。 5. 随机数函数 ​ 随机数可以用于数学，游戏，安全等领域中，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性。 ​ Python包含以下常用随机数函数： 函数 描述 choice(seq) 从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。 randrange ([start,] stop [,step]) 从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1 random() 随机生成下一个实数，它在[0,1)范围内。 seed([x]) 改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。 shuffle(lst) 将序列的所有元素随机排序 uniform(x, y) 随机生成下一个实数，它在[x,y]范围内。 6. 三角函数 ​ Python包括以下三角函数： 函数 描述 acos(x) 返回x的反余弦弧度值。 asin(x) 返回x的反正弦弧度值。 atan(x) 返回x的反正切弧度值。 atan2(y, x) 返回给定的 X 及 Y 坐标值的反正切值。 cos(x) 返回x的弧度的余弦值。 hypot(x, y) 返回欧几里德范数 sqrt(xx + yy)。 sin(x) 返回的x弧度的正弦值。 tan(x) 返回x弧度的正切值。 degrees(x) 将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0 radians(x) 将角度转换为弧度 7. 数学常量 常量 描述 pi 数学常量 pi（圆周率，一般以π来表示） e 数学常量 e，e即自然常数（自然常数）。 8.进制 ​ Python中进制表示法均已0开头，十六进制，八进制和二进制表示如下所示： Python 3.6.3 (v3.6.3:2c5fed8, Oct 3 2017, 18:11:49) [MSC v.1900 64 bit (AMD64)] on win32 Type \"copyright\", \"credits\" or \"license()\" for more information. >>> 0xAF 175 >>> 0o10 8 >>> 0b1011010010 722 >>> MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Python/Chapter5.html":{"url":"Python/Chapter5.html","title":"第五章：字符串","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 概述 2. 访问字符串中的值 3. 字符串更新 4. 转义字符和原始字符串 5. 字符串运算符 6. 字符串格式化 6.1 格式化概述 6. 2 基本转换 6.3 宽度，精度和千位分隔符 6.4 符号，对齐和用0填充 7. 长字符串 8. Unicode 字符串 9. 字符串内建函数 第五章：字符串 1. 概述 ​ 字符串是 Python 中最常用的数据类型。我们可以使用引号( ' 或 \" )来创建字符串。 ​ 创建字符串很简单，只要为变量分配一个值即可。例如： var1 = 'Hello World!' var2 = \"Runoob\" 2. 访问字符串中的值 ​ Python 不支持单字符类型，单字符在 Python 中也是作为一个字符串使用。 ​ Python 访问子字符串，可以使用方括号来截取字符串，如下实例： #!/usr/bin/python3 var1 = 'Hello World!' var2 = \"Runoob\" print (\"var1[0]: \", var1[0]) print (\"var2[1:5]: \", var2[1:5]) ​ 以上实例执行结果： var1[0]: H var2[1:5]: unoo 3. 字符串更新 ​ 你可以截取字符串的一部分并与其他字段拼接，如下实例： #!/usr/bin/python3 var1 = 'Hello World!' print (\"已更新字符串 : \", var1[:6] + 'Runoob!') ​ 以上实例执行结果 已更新字符串 : Hello Runoob! 4. 转义字符和原始字符串 ​ 在需要在字符中使用特殊字符时，python用反斜杠()转义字符。如下表： 转义字符 描述 (在行尾时) 续行符 \\ 反斜杠符号 \\' 单引号 \\\" 双引号 \\a 响铃 \\b 退格(Backspace) \\000 空 \\n 换行 \\v 纵向制表符 \\t 横向制表符 \\r 回车 \\f 换页 \\oyy 八进制数，yy 代表的字符，例如：\\o12 代表换行，其中 o 是字母，不是数字 0。 \\xyy 十六进制数，yy代表的字符，例如：\\x0a代表换行 \\other 其它的字符以普通格式输出 ​ 如果在字符串前加一个字母r即表示原始字符串，表示遇到转义符不进行转义 str = r'C:/Users' ​ 如你所见，原始字符串用前缀r表示，看起来原始字符串包含任何字符，但仍存在例外，引号仍需要通过转义符转义，而且用于转义的转义符反斜杠因为前缀r的存在，也会显示在最终的字符串中。 >>> print(r'let\\'s go!') let\\'s go! >>> ​ 另外，原始字符串不能以单个反斜杠结尾。换而言之，原始字符串的最后一个字符不能是反斜杠，除非你对其进行转义，（而如果进行转义，用于转义的反斜杠也会出现在最终的字符串中），为了解决此类问题，存在多种办法，但基本技巧都是将反斜杠单独作为一个字符串： >>> print(r'c;\\Users\\Public\\Desktop' '\\\\') c;\\Users\\Public\\Desktop\\ >>> 5. 字符串运算符 ​ 下表实例变量a值为字符串 \"Hello\"，b变量值为 \"Python\"： 操作符 描述 实例 + 字符串连接 a + b 输出结果： HelloPython * 重复输出字符串 a*2 输出结果：HelloHello [] 通过索引获取字符串中字符 a[1] 输出结果 e [ : ] 截取字符串中的一部分，遵循左闭右开原则，str[0,2] 是不包含第 3 个字符的。 a[1:4] 输出结果 ell in 成员运算符 - 如果字符串中包含给定的字符返回 True 'H' in a 输出结果 True not in 成员运算符 - 如果字符串中不包含给定的字符返回 True 'M' not in a 输出结果 True r/R 原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母 r（可以大小写）以外，与普通字符串有着几乎完全相同的语法。 print( r'\\n' ) print( R'\\n' ) % 格式字符串 请看下一节内容。 #!/usr/bin/python3 a = \"Hello\" b = \"Python\" print(\"a + b 输出结果：\", a + b) print(\"a * 2 输出结果：\", a * 2) print(\"a[1] 输出结果：\", a[1]) print(\"a[1:4] 输出结果：\", a[1:4]) if( \"H\" in a) : print(\"H 在变量 a 中\") else : print(\"H 不在变量 a 中\") if( \"M\" not in a) : print(\"M 不在变量 a 中\") else : print(\"M 在变量 a 中\") print (r'\\n') print (R'\\n') ​ 以上实例输出结果为： a + b 输出结果： HelloPython a * 2 输出结果： HelloHello a[1] 输出结果： e a[1:4] 输出结果： ell H 在变量 a 中 M 不在变量 a 中 \\n \\n 6. 字符串格式化 6.1 格式化概述 ​ 如何设置字符串的格式？ ​ Python 支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，但基本方案都是使用字符串格式设置运算符：百分号 通过转换说明符%s,指明要将值插入什么位置，其中s代表将其视为字符串进行格式设置，如果指定的值不是字符串，则可使用str将其转为字符串。 使用模板字符串，这里不做详解。 ​ 在 Python 中，字符串格式化使用与 C 中 sprintf 函数一样的语法。 #!/usr/bin/python3 print (\"我叫 %s 今年 %d 岁!\" % ('小明', 10)) ​ 以上实例输出结果： 我叫 小明 今年 10 岁! ​ 详细例子： Python 3.6.3 (v3.6.3:2c5fed8, Oct 3 2017, 18:11:49) [MSC v.1900 64 bit (AMD64)] on win32 Type \"copyright\", \"credits\" or \"license()\" for more information. >>> format = 'hello, %s. %s enough for ya?' >>> values = ('world','Hot') >>> format % values 'hello, world. Hot enough for ya?' >>> from string import Template #模板字符串 >>> tem1 = Template('Hello, $who! $what enough for ya?') >>> tem1.substitute(who='Mars',what='Dusty') 'Hello, Mars! Dusty enough for ya?' >>> from math import pi >>> \"{name} is approximately {value}.\".format(value=pi,name='Π') 'Π is approximately 3.141592653589793.' >>> \"{name} is approximately {value:2f}.\".format(value=pi,name='Π') 'Π is approximately 3.141593.' >>> \"{name} is approximately {value:.2f}.\".format(value=pi,name='Π') 'Π is approximately 3.14.' >>> from math import e >>> \"Euler's constant is rough {e}.\".format(e=e) \"Euler's constant is rough 2.718281828459045.\" >>> \"{foo} {} {bar} {} \".format(1,2,bar=4,foo=3) '3 1 4 2 ' >>> \"{foo} {1} {bar} {0} \".format(1,2,bar=4,foo=3) #多了一个空格 SyntaxError: unexpected indent >>> \"{foo} {1} {bar} {0} \".format(1,2,bar=4,foo=3) '3 2 4 1 ' >>> ​ python字符串格式化符号: 符 号 描述 %c 格式化字符及其ASCII码 %s 格式化字符串 %d 格式化整数 %u 格式化无符号整型 %o 格式化无符号八进制数 %x 格式化无符号十六进制数 %X 格式化无符号十六进制数（大写） %f 格式化浮点数字，可指定小数点后的精度 %e 用科学计数法格式化浮点数 %E 作用同%e，用科学计数法格式化浮点数 %g %f和%e的简写 %G %f 和 %E 的简写 %p 用十六进制数格式化变量的地址 ​ 格式化操作符辅助指令: 符号 功能 * 定义宽度或者小数点精度 - 用做左对齐 + 在正数前面显示加号( + ) 在正数前面显示空格 # 在八进制数前面显示零('0')，在十六进制前面显示'0x'或者'0X'(取决于用的是'x'还是'X') 0 显示的数字前面填充'0'而不是默认的空格 % '%%'输出一个单一的'%' (var) 映射变量(字典参数) m.n. m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话) ​ Python2.6 开始，新增了一种格式化字符串的函数 str.format()，它增强了字符串格式化的功能。 6. 2 基本转换 ​ 在格式字符串中，重头戏之一是替换字段。替换字段如下部分组成： 字段名：索引或标识符，指出要设置哪个值的格式并使用结果来替换该字段。除指定值外，还可指定值的特定部分，如列表的元素。 转换标志：跟在叹号后边的单个字符。当前支持的字符包括r(表示repr),s(表示str)和a(表示ascii)。如果你指定了转换标志，将不使用对象本身的格式设置机制，而是使用指定的函数将对象转换为字符串，再做进一步的格式设置。 格式说明符：跟在冒号后边的表达式，详细制定最终的格式，包括格式类型（如字符串，浮点数，十六进制数等等），字段宽度，数的精度，如何显示符号和千位分隔符，以及各种对齐和填充方式等等。 ​ 在最简单的情况下，只需向format提供设置其格式的未命名参数，并在格式字符串中使用未命名字段。此时，将按照顺序将字段和参数匹配： >>> '{},{} and {}'.format(\"first\",'second','third') 'first,second and third' ​ 可以通过索引指定要在哪个字段中使用相应的未命名参数，这样可以不按顺序使用未命名参数： >>> '{0},{2} and {1}'.format(\"first\",\"third\",\"second\") 'first,second and third' ​ 指定要在字段中包含的值后，就可添加有关如何设置其格式的指令。首先，需要设置一个转换标志： Python 3.6.3 (v3.6.3:2c5fed8, Oct 3 2017, 18:11:49) [MSC v.1900 64 bit (AMD64)] on win32 Type \"copyright\", \"credits\" or \"license()\" for more information. >>> print(\"{pi!s} {pi!r} {pi!a} \".format(pi='π')) π 'π' '\\u03c0' # str repr ascii >>> num = 42 >>> \"the number is {num}.\".format(num=num) 'the number is 42.' #默认十进制整数 >>> \"the number is {num:f}.\".format(num=num) 'the number is 42.000000.' #浮点数 >>> \"the number is {num:b}.\".format(num=num) 'the number is 101010.' #二进制 ​ 您还可以指定要转换的值是哪种类型，更准确的说，是要将其视为那种类型。例如，你可能要提供一个整数，但要将其作为小数处理，为此可在格式说明后使用字符f表示浮点数，完整的类型说明符如下： 类型 说明 b 将整数表示为二进制数 c 将整数解读为Unicode码点 d 将整数视为十进制数进行处理，这是整数默认使用的说明符 e 使用科学表示法来表示小数（用e来表示整数） E 与e相同，用E来表示指数 f 将小数表示为定点数 F 与f相同，但对于特殊值（nan和inf）,使用大写表示 g 自动在顶点表示法和科学表示法之间做出选择。这是默认用于小数的说明符，但在默认情况下至少由一位小数 G 与g相同，但使用大写来表示指数和特殊值 n 与g相同，但插入随区域而异的数字分隔符 o 将整数表示为八进制数 s 保持字符串的格式不变，这是默认用于字符串的说明符 x 将整数表示为十六进制数并使用小写字母 X 与x相同，但使用大写字母 % 将数表示为百分比值（乘以100，按说明符设置格式，再在后边加%） 6.3 宽度，精度和千位分隔符 ​ 设置浮点数（或其他更具体的小数类型）的格式时，默认在小数点后显示6位小数，并根据要设置字段的宽度，而不进行任何形式的填充。 ​ 宽度是使用整数指定的： >>> \"the number is {num:10}.\".format(num=num) 'the number is 42.' #数字右对齐 >>> \"the name is {name:10}.\".format(name='Bob') 'the name is Bob .' #字符串左对齐 ​ 精度也是使用整数指定的，但需要在它前面加上一个表示小数点的句点. >>> from math import pi #pi常量需导入 >>> 'Pi value is {pi:.7f}.'.format(pi=pi) 'Pi value is 3.1415927.' >>> ​ 实际上，对于其他类型也可以指定精度，一般不常见： >>> '{:.7}'.format(\"I love python!\") 'I love ' >>> ​ 最后，可以使用逗号来指出你要添加的千位分隔符： >>> 'One googol is {:,}.'.format(10**100) 'One googol is 10,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000.' >>> 6.4 符号，对齐和用0填充 ​ 有很多用于设置字符格式的机制，比如便于打印整齐的表格。在大多数情况下，只需指定宽度和精度。但是如果包含负数，原本漂亮的输出就没那么完美了。而且字符串和数字默认的对齐方式不同，如果同时包含字符串和数时，怎么应对这种不同的默认对齐方式。这里介绍一下填充。在指定宽度和精度的数前面，可添加一个标志。这个标志可以是零，加号，减号，空格，其中零即使用0来填充数字： >>> '{:010.2f}'.format(pi) '0000003.14' ​ 要指定对齐方式，可使用左尖括号（）右对齐： >>> print('{0:10.2f}'.format(pi)) 3.14 3.14 3.14 ​ 可以使用填充字符来扩充对齐说明符，可使用指定的字符串而不是默认的空格填充： >>> '{:$^15}'.format(\" WIN BIG \") '$$$ WIN BIG $$$' ​ 还有更具体的说明符＝，可指定填充字符放在符号和数字之间： >>> print('{0:10.2f}\\n{1:10.2f}'.format(pi,-pi)) 3.14 -3.14 >>> print('{0:10.2f}\\n{1:=10.2f}'.format(pi,-pi)) 3.14 - 3.14 ​ 如果要给正数加上符号，可在对齐说明符后添加说明符+。如果将符号说明符指定为空格，会在证书前面加上空格而不是+： >>> print('{0:-.2}\\n{1:-.2}'.format(pi,-pi)) 3.1 -3.1 >>> print('{0:+.2}\\n{1:+.2}'.format(pi,-pi)) +3.1 -3.1 >>> print('{0: .2}\\n{1: .2}'.format(pi,-pi)) 3.1 -3.1 ​ 最后一个要介绍的是井号（#），它可以被放置在说明符和宽度之间(如果存在这两个设置)，该选项会触发另一种转换方式，转换细节随类型而异： >>> '{:b}'.format(42) '101010' >>> '{:#b}'.format(42) '0b101010' >>> '{:g}'.format(42) '42' >>> '{:#g}'.format(42) '42.0000' 7. 长字符串 ​ python三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。实例如下 #!/usr/bin/python3 para_str = \"\"\"这是一个多行字符串的实例 多行字符串可以使用制表符 TAB ( \\t )。 也可以使用换行符 [ \\n ]。 \"\"\" print (para_str) 以上实例执行结果为： 这是一个多行字符串的实例 多行字符串可以使用制表符 TAB ( )。 也可以使用换行符 [ ]。 ​ 三引号让程序员从引号和特殊字符串的泥潭里面解脱出来，自始至终保持一小块字符串的格式是所谓的WYSIWYG（所见即所得）格式的。 ​ 一个典型的用例是，当你需要一块HTML或者SQL时，这时用字符串组合，特殊字符串转义将会非常的繁琐。 errHTML = ''' Friends CGI Demo ERROR %s ''' cursor.execute(''' CREATE TABLE users ( login VARCHAR(8), uid INTEGER, prid INTEGER) ''') Tips:常规字符串也可横跨多行。不过需要在行尾加上反斜杠，反斜杠和换行符会被转义，即忽略，例子如下： #正常的打印 print('hello,\\ word!') #合法表达式 >>> 1+2+\\ 3+4 10 #合法语句 >>> print\\ ('hello,world!') hello,world! >>> 8. Unicode 字符串 ​ 在Python2中，普通字符串是以8位ASCII码进行存储的，而Unicode字符串则存储为16位unicode字符串，这样能够表示更多的字符集。使用的语法是在字符串前面加上前缀 u。 ​ 在Python3中，所有的字符串都是Unicode字符串。 9. 字符串内建函数 ​ Python 的字符串常用内建函数如下： 序号 方法 描述 1 capitalize() 将字符串的第一个字符转换为大写。 2 center(width, fillchar) 返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。 3 count(str, beg= 0,end=len(string)) 返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数。 4 bytes.decode(encoding=\"utf-8\", errors=\"strict\") Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode() 方法来解码给定的 bytes 对象，这个 bytes 对象可以由 str.encode() 来编码返回。 5 encode(encoding='UTF-8',errors='strict') 以 encoding 指定的编码格式编码字符串，如果出错默认报一个ValueError 的异常，除非 errors 指定的是'ignore'或者'replace'。 6 endswith(suffix, beg=0, end=len(string)) 检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False。 7 expandtabs(tabsize=8) 把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8 。 8 find(str, beg=0, end=len(string)) 检测 str 是否包含在字符串中，如果指定范围 beg 和 end ，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1。 9 index(str, beg=0, end=len(string)) 跟find()方法一样，只不过如果str不在字符串中会报一个异常。 10 isalnum() 如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True,否则返回 False。 11 isalpha() 如果字符串至少有一个字符并且所有字符都是字母则返回 True, 否则返回 False。 12 isdigit() 如果字符串只包含数字则返回 True 否则返回 False。 13 islower() 如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False。 14 isnumeric() 如果字符串中只包含数字字符，则返回 True，否则返回 False 15 isspace() 如果字符串中只包含空白，则返回 True，否则返回 False。 16 istitle() 如果字符串是标题化的(见 title())则返回 True，否则返回 False。 17 isupper() 如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False。 18 join(seq) 以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串。 19 len(string) 返回字符串长度 20 ljust(width[, fillchar]) 返回一个原字符串左对齐,并使用 fillchar 填充至长度 width 的新字符串，fillchar 默认为空格。 21 lower() 转换字符串中所有大写字符为小写. 22 lstrip() 截掉字符串左边的空格或指定字符。 23 maketrans() 创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。 24 max(str) 返回字符串 str 中最大的字母。 25 min(str) 返回字符串 str 中最小的字母。 26 replace(old, new [, max]) 把 将字符串中的 str1 替换成 str2,如果 max 指定，则替换不超过 max 次。 27 rfind(str, beg=0,end=len(string)) 类似于 find()函数，不过是从右边开始查找。 28 rindex( str, beg=0, end=len(string)) 类似于 index()，不过是从右边开始。 29 rjust(width,[, fillchar]) 返回一个原字符串右对齐,并使用fillchar(默认空格）填充至长度 width 的新字符串。 30 [rstrip() 删除字符串字符串末尾的空格。 31 split(str=\"\", num=string.count(str)) num=string.count(str)) 以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num+1 个子字符串。 32 splitlines([keepends]) 按照行('\\r', '\\r\\n', \\n')分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。 33 startswith(substr, beg=0,end=len(string)) 检查字符串是否是以指定子字符串 substr 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查。 34 strip([chars]) 在字符串上执行 lstrip()和 rstrip()。 35 swapcase() 将字符串中大写转换为小写，小写转换为大写 返回\"标题化\"的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())。 36 title() 根据 str 给出的表(包含 256 个字符)转换 string 的字符, 要过滤掉的字符放到 deletechars 参数中。 37 translate(table, deletechars=\"\") 38 upper() 转换字符串中的小写字母为大写 39 zfill (width) 返回长度为 width 的字符串，原字符串右对齐，前面填充0 40 isdecimal() 检查字符串是否只包含十进制字符，如果是返回 true，否则返回 false。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Python/Chapter6.html":{"url":"Python/Chapter6.html","title":"第六章：列表","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 概述 2. 访问列表中的值 3. 更新列表 4. 删除列表元素 5. 列表脚本操作符 6. 列表截取与拼接 7. 嵌套列表 8. 加法&乘法 9. 列表函数&方法 第六章：列表 1. 概述 ​ 序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字 - 它的位置，或索引，第一个索引是0，第二个索引是1，依此类推。 Python有6个序列的内置类型，但最常见的是列表和元组。 ​ 序列都可以进行的操作包括索引，切片，加，乘，检查成员。 ​ 此外，Python已经内置确定序列的长度以及确定最大和最小的元素的方法。 ​ 列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现。 ​ 列表的数据项不需要具有相同的类型 ​ 创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示： list1 = ['Google', 'Runoob', 1997, 2000]; list2 = [1, 2, 3, 4, 5 ]; list3 = [\"a\", \"b\", \"c\", \"d\"]; ​ 与字符串的索引一样，列表索引从0开始。列表可以进行截取、组合等。 2. 访问列表中的值 ​ 使用下标索引来访问列表中的值，同样你也可以使用方括号的形式截取字符，如下所示： #!/usr/bin/python3 list1 = ['Google', 'Runoob', 1997, 2000]; list2 = [1, 2, 3, 4, 5, 6, 7 ]; print (\"list1[0]: \", list1[0]) print (\"list2[1:5]: \", list2[1:5]) ​ 以上实例输出结果： list1[0]: Google list2[1:5]: [2, 3, 4, 5] 3. 更新列表 ​ 你可以对列表的数据项进行修改或更新，你也可以使用append()方法来添加列表项，如下所示： #!/usr/bin/python3 list = ['Google', 'Runoob', 1997, 2000] print (\"第三个元素为 : \", list[2]) list[2] = 2001 print (\"更新后的第三个元素为 : \", list[2]) 注意：我们会在接下来的章节讨论append()方法的使用 ​ 以上实例输出结果： 第三个元素为 : 1997 更新后的第三个元素为 : 2001 4. 删除列表元素 ​ 可以使用 del 语句来删除列表的的元素，如下实例： #!/usr/bin/python3 list = ['Google', 'Runoob', 1997, 2000] print (\"原始列表 : \", list) del list[2] print (\"删除第三个元素 : \", list) ​ 以上实例输出结果： 原始列表 : ['Google', 'Runoob', 1997, 2000] 删除第三个元素 : ['Google', 'Runoob', 2000] 注意：我们会在接下来的章节讨论 remove() 方法的使用 5. 列表脚本操作符 ​ 列表对 + 和 的操作符与字符串相似。+ 号用于组合列表， 号用于重复列表。 ​ 如下所示： Python 表达式 结果 描述 len([1, 2, 3]) 3 长度 [1, 2, 3] + [4, 5, 6] [1, 2, 3, 4, 5, 6] 组合 ['Hi!'] * 4 ['Hi!', 'Hi!', 'Hi!', 'Hi!'] 重复 3 in [1, 2, 3] True 元素是否存在于列表中 for x in [1, 2, 3]: print(x, end=\" \") 1 2 3 迭代 6. 列表截取与拼接 ​ Python的列表截取与字符串操作类型，如下所示： L=['Google', 'Runoob', 'Taobao'] ​ 操作： Python 表达式 结果 描述 L[2] 'Taobao' 读取第三个元素 L[-2] 'Runoob' 从右侧开始读取倒数第二个元素: count from the right L[1:] ['Runoob', 'Taobao'] 输出从第二个元素开始后的所有元素 >>L=['Google', 'Runoob', 'Taobao'] >>L[2] 'Taobao' >>L[-2] 'Runoob' >>L[1:] ['Runoob', 'Taobao'] ​ 列表还支持拼接操作： >>squares = [1, 4, 9, 16, 25] >>squares += [36, 49, 64, 81, 100] >>squares [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] ​ 详细的例子： >>> numbers = [1,2,3,4,5,6,7,8,9,10] >>> numbers[3:6] [4, 5, 6] >>> numbers[0:1] [1] >>> numbers[7:10] #这里的索引10指的是第十一个元素，虽然不曾存在第十一个元素，但已读到此位置 [8, 9, 10] >>> numbers[-3:-1] [8, 9] >>> numbers[-3:0] #起止点无交叉（起点索引大于终点索引），得到的切片为空 [] >>> numbers[-3:] [8, 9, 10] >>> numbers[:3] [1, 2, 3] >>> numbers[:] [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] >>> ​ 切片获取域名 url = input('Please input a URL: ') domain = url[11:-4] print('url , domain is ' + domain) ​ 运行结果如下： Please input a URL: http://www.baidu.com url , domain is baidu >>> ​ 关于步长，进行切片时，一般都会显式或隐式的指定起点和终点，还有另一个参数：步长，而一般其默认为1，这意味着从一个元素移动到下一个元素，具体例子如下： Python 3.6.3 (v3.6.3:2c5fed8, Oct 3 2017, 18:11:49) [MSC v.1900 64 bit (AMD64)] on win32 Type \"copyright\", \"credits\" or \"license()\" for more information. >>> numbers = [1,2,3,4,5,6,7,8,9,10] >>> numbers[0:10:2] [1, 3, 5, 7, 9] >>> numbers[::3] [1, 4, 7, 10] >>> numbers[0:10:-1] [] >>> numbers[0:9:-1] [] >>> numbers[10:0:-1] [10, 9, 8, 7, 6, 5, 4, 3, 2] >>> numbers[::-2] [10, 8, 6, 4, 2] >>> numbers[5::-2] [6, 4, 2] >>> numbers[:5:-2] [10, 8] >>> 7. 嵌套列表 ​ 使用嵌套列表即在列表里创建其它列表，例如： >>a = ['a', 'b', 'c'] >>n = [1, 2, 3] >>x = [a, n] x [['a', 'b', 'c'], [1, 2, 3]] >>x[0] ['a', 'b', 'c'] >>x[0][1] 'b' 8. 加法&乘法 ​ 相同类型的序列可以使用加法拼接： Python 3.6.3 (v3.6.3:2c5fed8, Oct 3 2017, 18:11:49) [MSC v.1900 64 bit (AMD64)] on win32 Type \"copyright\", \"credits\" or \"license()\" for more information. >>> a = [1,2,3] >>> b = [4,5,6] >>> a + b [1, 2, 3, 4, 5, 6] >>> c = 'hello' >>> a + c Traceback (most recent call last): File \"\", line 1, in a + c TypeError: can only concatenate list (not \"str\") to list >>> ​ 将序列和数X相乘，将重复这个序列x次来创建一个新的序列： Python 3.6.3 (v3.6.3:2c5fed8, Oct 3 2017, 18:11:49) [MSC v.1900 64 bit (AMD64)] on win32 Type \"copyright\", \"credits\" or \"license()\" for more information. >>> 'python ' * 5 'python python python python python ' >>> [10] * 5 [10, 10, 10, 10, 10] >>> sequence = [None] * 10 #空列表初始化 >>> sequence [None, None, None, None, None, None, None, None, None, None] >>> 9. 列表函数&方法 ​ Python包含以下函数: 序号 函数 1 len(list) 列表元素个数 2 max(list) 返回列表元素最大值 3 min(list) 返回列表元素最小值 4 list(seq) 将元组转换为列表 ​ Python包含以下方法: 序号 方法 1 list.append(obj) 在列表末尾添加新的对象 2 list.count(obj) 统计某个元素在列表中出现的次数 3 list.extend(seq) 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表） 4 list.index(obj) 从列表中找出某个值第一个匹配项的索引位置 5 list.insert(index, obj) 将对象插入列表 6 list.pop([index=-1]) 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值 7 list.remove(obj) 移除列表中某个值的第一个匹配项 8 list.reverse() 反向列表中元素 9 list.sort( key=None, reverse=False) 对原列表进行排序 10 list.clear() 清空列表 11 list.copy() 复制列表 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Python/Chapter7.html":{"url":"Python/Chapter7.html","title":"第七章：元组","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1.概述 2. 访问元组 3. 修改元组 4. 删除元组 5. 元组运算符 6. 元组索引，截取 7. 元组内置函数 第七章：元组 1.概述 ​ Python 的元组与列表类似，不同之处在于元组的元素不能修改。 ​ 元组使用小括号，列表使用方括号。 ​ 元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。 >>>tup1 = ('Google', 'Runoob', 1997, 2000); >>> tup2 = (1, 2, 3, 4, 5 ); >>> tup3 = \"a\", \"b\", \"c\", \"d\"; # 不需要括号也可以 >>> type(tup3) ​ 创建空元组 tup1 = (); ​ 元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用： >>>tup1 = (50) >>> type(tup1) # 不加逗号，类型为整型 >>> tup1 = (50,) >>> type(tup1) # 加上逗号，类型为元组 ​ 元组与字符串类似，下标索引从0开始，可以进行截取，组合等。 2. 访问元组 ​ 元组可以使用下标索引来访问元组中的值，如下实例: #!/usr/bin/python3 tup1 = ('Google', 'Runoob', 1997, 2000) tup2 = (1, 2, 3, 4, 5, 6, 7 ) print (\"tup1[0]: \", tup1[0]) print (\"tup2[1:5]: \", tup2[1:5]) ​ 以上实例输出结果： tup1[0]: Google tup2[1:5]: (2, 3, 4, 5) 3. 修改元组 ​ 元组中的元素值是不允许修改的，但我们可以对元组进行连接组合，如下实例: #!/usr/bin/python3 tup1 = (12, 34.56); tup2 = ('abc', 'xyz') # 以下修改元组元素操作是非法的。 # tup1[0] = 100 # 创建一个新的元组 tup3 = tup1 + tup2; print (tup3) ​ 以上实例输出结果： (12, 34.56, 'abc', 'xyz') 4. 删除元组 ​ 元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组，如下实例: #!/usr/bin/python3 tup = ('Google', 'Runoob', 1997, 2000) print (tup) del tup; print (\"删除后的元组 tup : \") print (tup) ​ 以上实例元组被删除后，输出变量会有异常信息，输出如下所示： 删除后的元组 tup : Traceback (most recent call last): File \"test.py\", line 8, in print (tup) NameError: name 'tup' is not defined 5. 元组运算符 ​ 与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。 Python 表达式 结果 描述 len((1, 2, 3)) 3 计算元素个数 (1, 2, 3) + (4, 5, 6) (1, 2, 3, 4, 5, 6) 连接 ('Hi!',) * 4 ('Hi!', 'Hi!', 'Hi!', 'Hi!') 复制 3 in (1, 2, 3) True 元素是否存在 for x in (1, 2, 3): print (x,) 1 2 3 迭代 6. 元组索引，截取 ​ 因为元组也是一个序列，所以我们可以访问元组中的指定位置的元素，也可以截取索引中的一段元素，如下所示： ​ 元组： L = ('Google', 'Taobao', 'Runoob') Python 表达式 结果 描述 L[2] 'Runoob' 读取第三个元素 L[-2] 'Taobao' 反向读取；读取倒数第二个元素 L[1:] ('Taobao', 'Runoob') 截取元素，从第二个开始后的所有元素。 ​ 运行实例如下： >>> L = ('Google', 'Taobao', 'Runoob') >>> L[2] 'Runoob' >>> L[-2] 'Taobao' >>> L[1:] ('Taobao', 'Runoob') 7. 元组内置函数 ​ Python元组包含了以下内置函数 序号 方法 描述 1 len(tuple) 计算元组元素个数。 2 max(tuple) 返回元组中元素最大值。 3 min(tuple) 返回元组中元素最小值。 4 tuple(seq) 将列表转换为元组。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Python/Chapter8.html":{"url":"Python/Chapter8.html","title":"第八章：字典","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 概述 2. 访问字典里的值 3. 修改字典 4. 删除字典元素 5. 字典键的特性 6. 字典内置函数&方法 7. 字典常用方法 7.1 clear 7.2 copy 7.3 fromkeys 7.4 get 7.5 items 7.6 keys 7.7 pop 7.8 popitem 7.9 setdefault 7.10 update 7.11 values 第八章：字典 1. 概述 ​ 字典是另一种可变容器模型，且可存储任意类型对象，是一种可通过名称来访问其中各个值的数据结构，又被称为映射，字典是Python中唯一的内置映射类型，其中的值不按顺序排列，而是存储在键下。 ​ 字典由键和其对应值组成，一个键值对（K-V对）可称为项。字典的每个键值(key=>value)对用冒号(:)分割，每个对之间用逗号(,)分割，整个字典包括在花括号({})中 ,格式如下所示： d = {key1 : value1, key2 : value2 } ​ 键必须是唯一的，但值则不必。 ​ 值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。 ​ 一个简单的字典实例： dict = {'Alice': '2341', 'Beth': '9102', 'Cecil': '3258'} ​ 也可如此创建字典： dict1 = { 'abc': 456 } dict2 = { 'abc': 123, 98.6: 37 } 2. 访问字典里的值 ​ 把相应的键放入到方括号中，如下实例: #!/usr/bin/python3 dict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'} print (\"dict['Name']: \", dict['Name']) print (\"dict['Age']: \", dict['Age']) ​ 以上实例输出结果： dict['Name']: Runoob dict['Age']: 7 ​ 如果用字典里没有的键访问数据，会输出错误如下： #!/usr/bin/python3 dict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'} print (\"dict['Alice']: \", dict['Alice']) ​ 以上实例输出结果： Traceback (most recent call last): File \"test.py\", line 5, in print (\"dict['Alice']: \", dict['Alice']) KeyError: 'Alice' 3. 修改字典 ​ 向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对如下实例: #!/usr/bin/python3 dict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'} dict['Age'] = 8 # 更新 Age dict['School'] = \"菜鸟教程\" # 添加信息 print (\"dict['Age']: \", dict['Age']) print (\"dict['School']: \", dict['School']) ​ 以上实例输出结果： dict['Age']: 8 dict['School']: 菜鸟教程 4. 删除字典元素 ​ 能删单一的元素也能清空字典，清空只需一项操作。 ​ 显示删除一个字典用del命令，如下实例： #!/usr/bin/python3 dict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'} del dict['Name'] # 删除键 'Name' dict.clear() # 清空字典 del dict # 删除字典 print (\"dict['Age']: \", dict['Age']) print (\"dict['School']: \", dict['School']) ​ 但这会引发一个异常，因为用执行 del 操作后字典不再存在： Traceback (most recent call last): File \"test.py\", line 9, in print (\"dict['Age']: \", dict['Age']) TypeError: 'type' object is not subscriptable 注：del() 方法后面也会讨论。 5. 字典键的特性 ​ 字典值可以是任何的 python 对象，既可以是标准的对象，也可以是用户定义的，但键不行。 ​ 两个重要的点需要记住： 1）不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住，如下实例： #!/usr/bin/python3 dict = {'Name': 'Runoob', 'Age': 7, 'Name': '小菜鸟'} print (\"dict['Name']: \", dict['Name']) ​ 以上实例输出结果： dict['Name']: 小菜鸟 2）键必须不可变，所以可以用数字，字符串或元组充当，而用列表就不行，如下实例： #!/usr/bin/python3 dict = {['Name']: 'Runoob', 'Age': 7} print (\"dict['Name']: \", dict['Name']) ​ 以上实例输出结果： Traceback (most recent call last): File \"test.py\", line 3, in dict = {['Name']: 'Runoob', 'Age': 7} TypeError: unhashable type: 'list' 6. 字典内置函数&方法 ​ Python字典包含了以下内置函数： 序号 函数 描述 1 len(dict) 计算字典元素个数，即键的总数。 2 str(dict) 输出字典，以可打印的字符串表示。 3 type(variable) 返回输入的变量类型，如果变量是字典就返回字典类型。 ​ Python字典包含了以下内置方法： 序号 函数 描述 1 radiansdict.clear() 删除字典内所有元素 2 radiansdict.copy() 返回一个字典的浅复制 3 radiansdict.fromkeys() 创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值 4 radiansdict.get(key, default=None) 返回指定键的值，如果值不在字典中返回default值 5 key in dict 如果键在字典dict里返回true，否则返回false 6 radiansdict.items() 以列表返回可遍历的(键, 值) 元组数组 7 radiansdict.keys() 返回一个迭代器，可以使用 list() 来转换为列表 8 radiansdict.setdefault(key, default=None) 和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default 9 radiansdict.update(dict2) 把字典dict2的键/值对更新到dict里 10 radiansdict.values() 返回一个迭代器，可以使用 list() 来转换为列表 11 pop(key[,default]) 删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。 12 popitem() 随机返回并删除字典中的一对键和值(一般删除末尾对)。 7. 字典常用方法 7.1 clear ​ 删除所有字典项，此操作就地执行，因此无返回值(或者说返回None) Python 3.6.3 (v3.6.3:2c5fed8, Oct 3 2017, 18:11:49) [MSC v.1900 64 bit (AMD64)] on win32 Type \"copyright\", \"credits\" or \"license()\" for more information. >>> d = {} >>> d['name'] = 'Gumby' >>> d['age'] = 42 >>> d {'name': 'Gumby', 'age': 42} >>> f = d #浅拷贝 >>> f {'name': 'Gumby', 'age': 42} >>> f = {} #第一种清空，不影响原字典 >>> f {} >>> d {'name': 'Gumby', 'age': 42} >>> returned_value = d.clear() #第二种清空，原字典被操作 >>> d {} 7.2 copy ​ 返回一个新字典，其中包含的键值对和原来字典完全相同（该方法执行的是浅复制，即值本身还是原件，而非副本），当替换副本中的值时，原件不受影响。 >>> x = {'username':'admin','machines':['foo','bar','baz']} >>> y = x.copy() >>> y {'username': 'admin', 'machines': ['foo', 'bar', 'baz']} >>> y['username'] = 'mxl' >>> y['machines'].remove('baz') >>> y {'username': 'mxl', 'machines': ['foo', 'bar']} ​ 然而，当修改副本中的值时（仅修改值而非替换），原件也会发生变化，因为原件指向的也是被修改的值，为解决此类问题，可使用深复制，即copy模块中的函数deepcopy >>> from copy import deepcopy >>> a = {'username':'admin','machines':['foo','bar','baz']} >>> b = a.copy() >>> c = deepcopy(a) >>> b {'username': 'admin', 'machines': ['foo', 'bar', 'baz']} >>> c {'username': 'admin', 'machines': ['foo', 'bar', 'baz']} >>> a['machines'].remove('baz') >>> b {'username': 'admin', 'machines': ['foo', 'bar']} >>> c {'username': 'admin', 'machines': ['foo', 'bar', 'baz']} 7.3 fromkeys ​ 创建一个新字典，其中包含指定的键，且每个键对应的值都是None： >>> {}.fromkeys(['name','age']) {'name': None, 'age': None} ​ 以上实例是首先创建了一个空字典，再对其调用fromkeys方法创建另一个字典，这是不符合Python精神的，可换成如下方式调用该方法（dict是所有字典所属的类型）： >>> dict.fromkeys(['name','age']) {'name': None, 'age': None} ​ 如果不想使用默认值None，可自定特定值： >>> dict.fromkeys(['name','age'],'(unknown)') {'name': '(unknown)', 'age': '(unknown)'} 7.4 get ​ 用于访问字典中指定的项，即时该项在指定地点中不存在，也不会报错，而是返回None,，当然，你也可以指定特定返回值，而如果字典包含该项，则get方法和普通字典查找相同。 >>> d = {} >>> print(d['name']) Traceback (most recent call last): File \"\", line 1, in print(d['name']) KeyError: 'name' >>> print(d.get('name')) None >>> print(d.get('name','N/A')) N/A >>> d['name'] = 'Bob' >>> d.get('name') 'Bob' 7.5 items ​ 返回一个包含所有字典项的列表，其中每个元素都为（key,value）的形式，字典项在列表中的排列顺序不确定,返回值属于一种字典视图的特殊类型，可用于迭代，还可以确认其长度以及成员资格检查。 >>> x = {'username':'admin','machines':['foo','bar','baz']} >>> it = x.items() >>> it dict_items([('username', 'admin'), ('machines', ['foo', 'bar', 'baz'])]) >>> len(it) 2 >>> ('username','admin') in it True ​ 视图的一个优点是不复制，其始终指向底层字典的反应，即便你修改了底层字典： >>> x = {'username':'admin','machines':['foo','bar','baz']} >>> it = x.items() >>> ('username','root') in it False >>> x['username'] = 'root' >>> ('username','root') in it True 7.6 keys ​ 返回一个字典视图，其中包含指定字典的键。 7.7 pop ​ 可用于获取与指定键相关联的值，并将该键值对从字典中删除 >>> d = {'a':1,'b':'2'} >>> d.pop(b) Traceback (most recent call last): File \"\", line 1, in d.pop(b) TypeError: unhashable type: 'dict' >>> d.pop('b') '2' >>> d {'a': 1} 7.8 popitem ​ 类似于list.pop,但list.pop弹出列表中最后一个元素，而popitem是随机弹出一个字典项。如果你要以高效的方式逐个删除并处理所有字典项，可使用该方法而不需要先获取键列表。 7.9 setdefault ​ 有点像get，因为它也获取与指定键相关联的值，而当字典中不包含该项时，会在字典中添加指定的键值对，如果存在该键值对，则返回该键值对。 >>> d = {} >>> d.setdefault('name','N/A') 'N/A' >>> d {'name': 'N/A'} >>> d.setdefault('name','???') 'N/A' 7.10 update ​ 使用一个字典的项来更新另一个字典 >>> a = {'a':1,'b':2} >>> b= {'b':3} >>> a {'a': 1, 'b': 2} >>> b {'b': 3} >>> a.update(b) >>> a {'a': 1, 'b': 3} 7.11 values ​ 返回一个字典中值组成的字典视图，不同于keys,此方法可能会返回重复值，因为键在字典中是唯一的，而值不是。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Python/Chapter9.html":{"url":"Python/Chapter9.html","title":"第九章：集合","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 概述 ... 2. 基本操作 2.1 添加元素 2.2 移除元素 2.3 脚本模式 2.4 计算集合元素个数 2.5 清空集合 2.6 判断元素是否在集合中存在 3. 集合内置方法完整列表 第九章：集合 1. 概述 ​ 集合（set）是一个无序的不重复元素序列。 ​ 可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。 ​ 创建格式： parame = {value01,value02,...} 或者 set(value) ​ 例子： >>>basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'} >>>print(basket) # 这里演示的是去重功能 {'orange', 'banana', 'pear', 'apple'} >>>'orange' in basket # 快速判断元素是否在集合内 True >>>'crabgrass' in basket False ​ 下面展示两个集合间的运算. # ... a = set('abracadabra') b = set('alacazam') a {'a', 'r', 'b', 'c', 'd'} a - b # 集合a中包含而集合b中不包含的元素 {'r', 'd', 'b'} a | b # 集合a或b中包含的所有元素 {'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'} a & b # 集合a和b中都包含了的元素 {'a', 'c'} a ^ b # 不同时包含于a和b的元素 {'r', 'd', 'b', 'm', 'z', 'l'} ​ 类似列表推导式，同样集合支持集合推导式(Set comprehension): >>>a = {x for x in 'abracadabra' if x not in 'abc'} >>> a {'r', 'd'} 2. 基本操作 2.1 添加元素 语法格式如下： s.add( x ) ​ 将元素 x 添加到集合 s 中，如果元素已存在，则不进行任何操作。 >>>thisset = set((\"Google\", \"Runoob\", \"Taobao\")) >>> thisset.add(\"Facebook\") >>> print(thisset) {'Taobao', 'Facebook', 'Google', 'Runoob'} ​ 还有一个方法，也可以添加元素，且参数可以是列表，元组，字典等，语法格式如下： s.update( x ) ​ x 可以有多个，用逗号分开。 >>>thisset = set((\"Google\", \"Runoob\", \"Taobao\")) >>>thisset.update({1,3}) >>>print(thisset) {1, 3, 'Google', 'Taobao', 'Runoob'} >>>thisset.update([1,4],[5,6]) >>>print(thisset) {1, 3, 4, 5, 6, 'Google', 'Taobao', 'Runoob'} 2.2 移除元素 语法格式如下： s.remove( x ) ​ 将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误。 >>>thisset = set((\"Google\", \"Runoob\", \"Taobao\")) >>>thisset.remove(\"Taobao\") >>>print(thisset) {'Google', 'Runoob'} >>>thisset.remove(\"Facebook\") # 不存在会发生错误 Traceback (most recent call last): File \"\", line 1, in KeyError: 'Facebook' ​ 此外还有一个方法也是移除集合中的元素，且如果元素不存在，不会发生错误。格式如下所示： s.discard( x ) >>>thisset = set((\"Google\", \"Runoob\", \"Taobao\")) >>> thisset.discard(\"Facebook\") # 不存在不会发生错误 >>> print(thisset) {'Taobao', 'Google', 'Runoob'} ​ 我们也可以设置随机删除集合中的一个元素，语法格式如下： s.pop() 2.3 脚本模式 thisset = set((\"Google\", \"Runoob\", \"Taobao\", \"Facebook\")) x = thisset.pop() print(x) ​ 输出结果： $ python3 test.py Runoob ​ 多次执行测试结果都不一样。 ​ 然而在交互模式，pop 是删除集合的第一个元素（排序后的集合的第一个元素）。 >>>thisset = set((\"Google\", \"Runoob\", \"Taobao\", \"Facebook\")) >>> thisset.pop() 'Facebook' >>> print(thisset) {'Google', 'Taobao', 'Runoob'} >>> 2.4 计算集合元素个数 语法格式如下： len(s) ​ 计算集合 s 元素个数。 >>>thisset = set((\"Google\", \"Runoob\", \"Taobao\")) >>> len(thisset) 3 2.5 清空集合 语法格式如下： s.clear() ​ 清空集合 s。 >>>thisset = set((\"Google\", \"Runoob\", \"Taobao\")) >>> thisset.clear() >>> print(thisset) set() 2.6 判断元素是否在集合中存在 语法格式如下： x in s ​ 判断元素 x 是否在集合 s 中，存在返回 True，不存在返回 False。 >>>thisset = set((\"Google\", \"Runoob\", \"Taobao\")) >>> \"Runoob\" in thisset True >>> \"Facebook\" in thisset False >>> 3. 集合内置方法完整列表 方法 描述 add() 为集合添加元素 clear() 移除集合中的所有元素 copy() 拷贝一个集合 difference() 返回多个集合的差集 difference_update() 移除集合中的元素，该元素在指定的集合也存在。 discard() 删除集合中指定的元素 intersection() 返回集合的交集 intersection_update() 返回集合的交集。 isdisjoint() 判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False。 issubset() 判断指定集合是否为该方法参数集合的子集。 issuperset() 判断该方法的参数集合是否为指定集合的子集 pop() 随机移除元素 remove() 移除指定元素 symmetric_difference() 返回两个集合中不重复的元素集合。 symmetric_difference_update() 移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。 union() 返回两个集合的并集 update() 给集合添加元素 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Python/Chapter10.html":{"url":"Python/Chapter10.html","title":"第十章：条件控制","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. if 语句 2. if 嵌套 3. 更复杂的条件 3.1 比较运算符 3.1.1 相等运算符 3.1.2 相同运算符 3.1.3 成员资格运算符 3.1.4 字符串和序列比较 3.2 布尔运算符 4. 断言 第十章：条件控制 ​ 到目前为止，你所编写的程序都是逐条顺序执行的，现在需要更进一步，让程序根据不同条件选择执行特定的语句块，这正是布尔值的用武之地。 ​ Python 条件语句是通过一条或多条语句的执行结果（True 或者 False）来决定执行的代码块。 ​ 用作布尔表达式时，下面所有的值都会被解释器视为False: False None 0 \"\" () [] {} ​ 换而言之，标准值False和None,各种类型（包括浮点数，复数等）的数值为0，空序列（如空字符串，空元组，空列表）以及空映射（如空字典）都被视为False，而其他各种值包括标准值True，都被视为True。这意味着任何Python的值都可以被解释为真值。在有些语言中，标准真值为0（False）和1（True）。实际上，True和False不过是0和1的别名，知识表现形式不同： >>> True True >>> False False >>> True == 1 True >>> False == 1 False >>> False == 0 True >>> True + False + 42 43 1. if 语句 ​ Python中if语句的一般形式如下所示： if condition_1: statement_block_1 elif condition_2: statement_block_2 else: statement_block_3 如果 \"condition_1\" 为 True 将执行 \"statement_block_1\" 块语句 如果 \"condition_1\" 为False，将判断 \"condition_2\" 如果\"condition_2\" 为 True 将执行 \"statement_block_2\" 块语句 如果 \"condition_2\" 为False，将执行\"statement_block_3\"块语句 ​ Python 中用 elif 代替了 else if，所以if语句的关键字为：if – elif – else。 注意： 1、每个条件后面要使用冒号 :，表示接下来是满足条件后要执行的语句块。 2、使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块。 3、在Python中没有switch – case语句。 Gif 演示： ​ 以下是一个简单的 if 实例： name = input(\"What's your name? \") if(name.endswith('Gumby')): print('Hello,Mr.Gumby!') ​ 这就是if语句，让你能够有条件的执行代码。以下实例演示了狗的年龄计算判断： #!/usr/bin/python3 age = int(input(\"请输入你家狗狗的年龄: \")) print(\"\") if age 2: human = 22 + (age -2)*5 print(\"对应人类年龄: \", human) ### 退出提示 input(\"点击 enter 键退出\") ​ 将以上脚本保存在dog.py文件中，并执行该脚本： $ python3 dog.py 请输入你家狗狗的年龄: 1 相当于 14 岁的人。 点击 enter 键退出 ​ high_low.py文件演示了数字的比较运算： #!/usr/bin/python3 # 该实例演示了数字猜谜游戏 number = 7 guess = -1 print(\"数字猜谜游戏!\") while guess != number: guess = int(input(\"请输入你猜的数字：\")) if guess == number: print(\"恭喜，你猜对了！\") elif guess number: print(\"猜的数字大了...\") ​ 执行以上脚本，实例输出结果如下： $ python3 high_low.py 数字猜谜游戏! 请输入你猜的数字：1 猜的数字小了... 请输入你猜的数字：9 猜的数字大了... 请输入你猜的数字：7 恭喜，你猜对了！ 2. if 嵌套 ​ 在嵌套 if 语句中，可以把 if...elif...else 结构放在另外一个 if...elif...else 结构中。 if 表达式1: 语句 if 表达式2: 语句 elif 表达式3: 语句 else: 语句 elif 表达式4: 语句 else: 语句 ​ 实例： # !/usr/bin/python3 num=int(input(\"输入一个数字：\")) if num%2==0: if num%3==0: print (\"你输入的数字可以整除 2 和 3\") else: print (\"你输入的数字可以整除 2，但不能整除 3\") else: if num%3==0: print (\"你输入的数字可以整除 3，但不能整除 2\") else: print (\"你输入的数字不能整除 2 和 3\") ​ 将以上程序保存到 test_if.py 文件中，执行后输出结果为： $ python3 test.py 输入一个数字：6 你输入的数字可以整除 2 和 3 3. 更复杂的条件 ​ 以上时关于if的内容，接下来讲一下条件本身 3.1 比较运算符 ​ 在条件表达式中，最基本的运算符可能时比较运算符，主要用于比较： 表达式 描述 x == y x等于y x x小于y x > y x大于y x >= y x大于等于y x x小于等于y x != y x不等于y x is y x和y是同一个对象 x is not y x和y是不同的对象 x in y x是容器（如序列）y的成员 x not in y x不是容器（如序列）y的成员 ​ 与赋值一样，Python也支持链式比较：可同时使用多个比较运算符，如0 ​ 有些比较运算符需要特别注意，下面来详细介绍： 3.1.1 相等运算符 ​ 要确认两个对象是否相等，可使用比较运算符，用两个等号（==）来表示，对于初学编程语言的人而言，一定要分清单个等号和双等号的区别： 单个等号：一般表示赋值运算符，无返回值 两个等号：一般表示相等运算符，返回布尔值 3.1.2 相同运算符 ​ 这个运算符很有趣，其作用看似和==相同，但事实并非如此： >>> x = y = [1,2,3] >>> z = [1,2,3] >>> x == y True >>> x == z True >>> x is y True >>> x is z False ​ 如果还没看明白，可以看如下实例： >>> x = [1,2,3] >>> y = [2,4] >>> x is not y True >>> del x[2] >>> y[1] = 1 >>> y.reverse >>> y.reverse() >>> x == y True >>> x is y False >>> x [1, 2] >>> y [1, 2] ​ 总之，==是用于检查两个对象是否相等，而is是用来检查两个对象是否相同（即同一个对象）。这里需要注意的是，不要将is用于数和字符串等不可变的基本值，这样做在Python中可能导致不可预测的结果: >>> x = 1 >>> y = 1 >>> x is y True >>> z = 2 >>> x is y True >>> a = '11' >>> b = '11' >>> a is b True >>> c = '22' >>> a is b True 3.1.3 成员资格运算符 ​ 成员资格运算符in,也可以像其他运算符一样，用于条件表达式中。 3.1.4 字符串和序列比较 ​ 字符串是根据字符的字母排序顺序进行比较的。 >>> 'Alice' ​ 虽然基于的是字母排列顺序，但字母都是Unicode字符，它们都是按照码点排列的。而实际上，字符是根据顺序值排列的。要熟悉顺序值，可使用函数ord，这个函数的作用与函数char相反 >>> 'a' >> ord('a') 97 >>> ord('b') 98 3.2 布尔运算符 ​ 至此，你已经见过很多返回真值的表达式，但你可能需要检查多个条件。假设你要编写一个程序，实现读取一个数并判断是否在1-10之间： num = input('Please input a number:') if(num = 1): print(\"Great!\") else: print(\"Wrong!\") else: print('wrong!') ​ 以上方法虽然可行，但有点笨拙，因为出现了重复代码，重复劳动并不是一件好事，以下为一个优化方案： num = input('Please input number:') if(num = 1): print('Great!') else: print(\"Wrong!\") ​ 布尔运算符有个有趣的特征：只做必要的运算。例如，仅当x和y都为真，表达式x and y才为真，而当x为假时，该表达式会直接返回假，而不会关心y的真假。这种行为又被称为短路逻辑（或延迟求值），布尔运算符又常被称为逻辑运算符。 4. 断言 ​ if语句有个很有用的'亲戚'，其工作原理类似于下面的伪代码： if not condition: crash program ​ 编写类似的代码，是因为程序在错误条件出现时立即崩溃胜过以后再崩溃。基本上，你可能要求某些条件满足(如核实函数参数满足要求或为初始测试和调试提供帮助)，为此可在语句中使用关键字assert >>> age = 10 >>> assert 0 >> age = 0 >>> assert 0 \", line 1, in assert 0 ​ 如果知道必须满足某个特定条件，程序才能正确的运行，可在程序中添加assert语句充当检查点，还可以在条件后添加一个字符串，对断言做出说明（注意逗号分隔）： >>> age = -1 >>> assert 0 \", line 1, in assert 0 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Python/Chapter11.html":{"url":"Python/Chapter11.html","title":"第十一章：循环语句","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. while 循环 2. 无限循环 3. while 中使用 else 语句 4. 简单语句组 5. for 语句 6. range()函数 7. 跳出循环 8. 迭代 8.1 迭代字典 8.2 迭代工具 8.2.1 并行迭代 8.2.2 迭代时获取索引 8.2.3 反向迭代和排序后迭代 9. 三人行 9.1 什么都不做 9.2 使用del删除 9.3 使用exec和eval执行字符串及计算其结果 9.3.1 exec 9.3.2 eval 10. 简单推导 第十一章：循环语句 ​ 本章节将为大家介绍Python循环语句的使用。 ​ Python中的循环语句有 for 和 while。 1. while 循环 ​ Python中while语句的一般形式： while 判断条件： 语句 执行 Gif 演示： ​ 同样需要注意冒号和缩进。另外，在 Python 中没有 do..while 循环。 ​ 以下实例使用了 while 来计算 1 到 100 的总和： #!/usr/bin/env python3 n = 100 sum = 0 counter = 1 while counter ​ 执行结果如下： 1 到 100 之和为: 5050 2. 无限循环 ​ 我们可以通过设置条件表达式永远不为 false 来实现无限循环，实例如下： #!/usr/bin/python3 var = 1 while var == 1 : # 表达式永远为 true num = int(input(\"输入一个数字 :\")) print (\"你输入的数字是: \", num) print (\"Good bye!\") ​ 执行以上脚本，输出结果如下： 输入一个数字 :5 你输入的数字是: 5 输入一个数字 : ​ 你可以使用 CTRL+C 来退出当前的无限循环。 ​ 无限循环在服务器上客户端的实时请求非常有用。 3. while 中使用 else 语句 ​ 在 while … else 在条件语句为 false 时执行 else 的语句块： #!/usr/bin/python3 count = 0 while count ​ 执行以上脚本，输出结果如下： 0 小于 5 1 小于 5 2 小于 5 3 小于 5 4 小于 5 5 大于或等于 5 4. 简单语句组 ​ 类似if语句的语法，如果你的while循环体中只有一条语句，你可以将该语句与while写在同一行中， 如下所示： #!/usr/bin/python flag = 1 while (flag): print ('欢迎访问菜鸟教程!') print (\"Good bye!\") 注意：以上的无限循环你可以使用 CTRL+C 来中断循环。 ​ 执行以上脚本，输出结果如下(注意可能造成计算机卡死)： 欢迎访问菜鸟教程! 欢迎访问菜鸟教程! 欢迎访问菜鸟教程! 欢迎访问菜鸟教程! 欢迎访问菜鸟教程! …… 5. for 语句 ​ Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串。 ​ for循环的一般格式如下： for in : else: ​ Python loop循环实例： >>>languages = [\"C\", \"C++\", \"Perl\", \"Python\"] >>> for x in languages: print (x) C C++ Perl Python >>> ​ 以下 for 实例中使用了 break 语句，break 语句用于跳出当前循环体： #!/usr/bin/python3 sites = [\"Baidu\", \"Google\",\"Runoob\",\"Taobao\"] for site in sites: if site == \"Runoob\": print(\"菜鸟教程!\") break print(\"循环数据 \" + site) else: print(\"没有循环数据!\") print(\"完成循环!\") ​ 执行脚本后，在循环到 \"Runoob\"时会跳出循环体： 循环数据 Baidu 循环数据 Google 菜鸟教程! 完成循环! 6. range()函数 ​ 基本上，可迭代对象是可使用for循环进行遍历的对象。而基于迭代（也就是遍历）特定范围内的数是一种常见任务，python提供有一个创建范围的内置函数range。 ​ 如果你需要遍历数字序列，可以使用内置range()函数。它会生成数列，例如: >>>for i in range(5): print(i) 0 1 2 3 4 ​ 你也可以使用range指定区间的值： >>>for i in range(5,9) : print(i) 5 6 7 8 >>> ​ 也可以使range以指定数字开始并指定不同的增量(甚至可以是负数，有时这也叫做'步长'): >>>for i in range(0, 10, 3) : print(i) 0 3 6 9 >>> ​ 负数： >>>for i in range(-10, -100, -30) : print(i) -10 -40 -70 >>> ​ 您可以结合range()和len()函数以遍历一个序列的索引,如下所示: >>>a = ['Google', 'Baidu', 'Runoob', 'Taobao', 'QQ'] >>> for i in range(len(a)): print(i, a[i]) 0 Google 1 Baidu 2 Runoob 3 Taobao 4 QQ >>> ​ 还可以使用range()函数来创建一个列表： >>>list(range(5)) [0, 1, 2, 3, 4] >>> 7. 跳出循环 ​ break 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。 实例如下： #!/usr/bin/python3 for letter in 'Runoob': # 第一个实例 if letter == 'b': break print ('当前字母为 :', letter) var = 10 # 第二个实例 while var > 0: print ('当期变量值为 :', var) var = var -1 if var == 5: break print (\"Good bye!\") ​ 执行以上脚本输出结果为： 当前字母为 : R 当前字母为 : u 当前字母为 : n 当前字母为 : o 当前字母为 : o 当期变量值为 : 10 当期变量值为 : 9 当期变量值为 : 8 当期变量值为 : 7 当期变量值为 : 6 Good bye! ​ continue语句被用来告诉Python跳过当前循环块中的剩余语句，然后继续进行下一轮循环。 #!/usr/bin/python3 for letter in 'Runoob': # 第一个实例 if letter == 'o': # 字母为 o 时跳过输出 continue print ('当前字母 :', letter) var = 10 # 第二个实例 while var > 0: var = var -1 if var == 5: # 变量为 5 时跳过输出 continue print ('当前变量值 :', var) print (\"Good bye!\") ​ 执行以上脚本输出结果为： 当前字母 : R 当前字母 : u 当前字母 : n 当前字母 : b 当前变量值 : 9 当前变量值 : 8 当前变量值 : 7 当前变量值 : 6 当前变量值 : 4 当前变量值 : 3 当前变量值 : 2 当前变量值 : 1 当前变量值 : 0 Good bye! ​ 循环语句可以有 else 子句，它在穷尽列表(以for循环)或条件变为 false (以while循环)导致循环终止时被执行,但循环被break终止时不执行。 ​ 如下实例用于查询质数的循环例子: #!/usr/bin/python3 for n in range(2, 10): for x in range(2, n): if n % x == 0: print(n, '等于', x, '*', n//x) break else: # 循环中没有找到元素 print(n, ' 是质数') ​ 执行以上脚本输出结果为： 2 是质数 3 是质数 4 等于 2 * 2 5 是质数 6 等于 2 * 3 7 是质数 8 等于 2 * 4 9 等于 3 * 3 8. 迭代 8.1 迭代字典 ​ 要遍历字典的所有关键字，可像遍历序列那样使用普通的for语句。 >>> d = {'x':1,'y':2,'z':3} >>> for key in d: print(key,' corresponds to ',d[key]) x corresponds to 1 y corresponds to 2 z corresponds to 3 ​ 也可以使用keys等字典方法来获取所有的键。如果只对值感兴趣，可使用d.values。你可能还记得，d.items以元组的形式返回键值对。for循环的优点之一，是可在其中使用序列解包。 8.2 迭代工具 ​ Python提供了很多可帮助迭代序列（或其他可迭代对象）的函数，这里仅作简单介绍： 8.2.1 并行迭代 ​ 有时候，你可能想同时迭代两个序列。假设有两个列表如下： name = ['anne','beth','george','damon'] ages = [12,45,32,102] ​ 如何打印对应的名称和年龄，目前能做到的方法如下所示： >>> for i in range(len(name)): print(i, name[i], 'is', ages[i], 'years old.') 0 anne is 12 years old. 1 beth is 45 years old. 2 george is 32 years old. 3 damon is 102 years old. ​ 其中i是用于循环索引的变量的标准名称。Python里有一个很有意思的并行迭代工具是内置函数zip，可以将两个序列“缝合”起来，并返回一个由元组组成的序列。返回值是一个适合迭代的对象，如果要查看其内容，可使用list将其转换为列表： >>> list(zip(name,ages)) [('anne', 12), ('beth', 45), ('george', 32), ('damon', 102)] ​ 而缝合之后，可在循环中将元组解包： >>> for name,age in zip(name,ages): print(name, 'is', age, 'years old!') anne is 12 years old! beth is 45 years old! george is 32 years old! damon is 102 years old! ​ 函数zip可以用于“缝合”任意数量的序列。需要注意的是，当序列的长度不一致时，函数会将最短的序列用完后停止“缝合”，即木桶效应。 8.2.2 迭代时获取索引 ​ 有些情况下，你可能需要在迭代对象序列时同时获取当前对象的索引。例如，你可能想替换一个字符串列表里所有包含字串\"XXX\"的字符串： for string in strings: if('XXX' in string): index = strings.index(string) #在字符串列表中查找字符串 strings[index] = '[censored]' ​ 这种方法是可行的，但替换前的搜索好像没有必要。而且，如果没有替换，则搜索返回的索引可能不对，即返回的是该字符串首次出现处的索引，以下有更好的解决办法： index = 0 for string in strings: if('xxx' in string): strings[index] = '[censored]' index += 1 ​ 这种解决方案虽然可以接受，但看起来也有点笨拙，还有一种解决方案是使用内置函数enumerate： for index,string in enumerate(strings): if('xxx' in string): strings[index] = '[censored]' 这个函数让你能够迭代索引-值对，其中索引是自动提供的。 8.2.3 反向迭代和排序后迭代 ​ 这里介绍另外两个很有用的函数：reversed和sorted。它们类似于列表方法reverse和sort，但是可用于任何序列和可迭代的对象，且不立刻修改对象，而是返回反转和排序后的版本。 >>> sorted([4,3,6,8,3]) [3, 3, 4, 6, 8] >>> sorted('Hello,World!') ['!', ',', 'H', 'W', 'd', 'e', 'l', 'l', 'l', 'o', 'o', 'r'] >>> list(reversed('Hello,World!')) ['!', 'd', 'l', 'r', 'o', 'W', ',', 'o', 'l', 'l', 'e', 'H'] >>> '@'.join(reversed('Hello,World!')) '!@d@l@r@o@W@,@o@l@l@e@H' >>> '_'.join(reversed('Hello,World!')) '!_d_l_r_o_W_,_o_l_l_e_H' ​ 请注意，sorted返回一个列表，而reversed则像zip那样返回一个更神秘的可迭代对象。你无需关心这意味着什么，只管在for循环或join等方法中使用它。而不会有任何问题。只是你不能对它进行索引或切片操作，也不能对它调用列表的方法。如果想要执行这些方法，则需要先使用list对返回的对象进行转换。 ​ 要按照字母排序，可先转换为小写。为此，可将sort或sorted的key参数设置为str.lower。例如： >>> sorted('aBc',key = str.lower) ['a', 'B', 'c'] >>> sorted('aBc') ['B', 'a', 'c'] 9. 三人行 ​ 这里大致讲一下另外三条语句：pass，del和exec。 9.1 什么都不做 ​ Python pass是空语句，是为了保持程序结构的完整性（Python中代码块不能为空）。 ​ pass 不做任何事情，一般用做占位语句，如下实例 >>>while True: pass # 等待键盘中断 (Ctrl+C) ​ 最小的类: >>>class MyEmptyClass: pass ​ 以下实例在字母为 o 时 执行 pass 语句块: #!/usr/bin/python3 for letter in 'Runoob': if letter == 'o': pass print ('执行 pass 块') print ('当前字母 :', letter) print (\"Good bye!\") ​ 执行以上脚本输出结果为： 当前字母 : R 当前字母 : u 当前字母 : n 执行 pass 块 当前字母 : o 执行 pass 块 当前字母 : o 当前字母 : b Good bye! 9.2 使用del删除 ​ 对于你不再使用的对象，Python通常会将其删除（因为没有任何变量和1数据结构成员指向它）。 >>> scoundrel = {'age':42,'first name':'Robin','last name':'of Locksley'} >>> robin = scoundrel >>> scoundrel {'age': 42, 'first name': 'Robin', 'last name': 'of Locksley'} >>> robin {'age': 42, 'first name': 'Robin', 'last name': 'of Locksley'} >>> scoundrel = None >>> scoundrel >>> robin {'age': 42, 'first name': 'Robin', 'last name': 'of Locksley'} ​ 最初，两个变量指向同一个字典，因此将None赋值给其中一个变量，依然可以通过另一个变量访问这个字典。但是如果将另一个变量也置为None，则该字典就漂浮在计算机内存中，没有任何名称与之相关联，也再也无法获取或使用它。因此，python会直接将其删除，这又被称为垃圾收集。 ​ 另一种办法使用del语句，这样不仅会删除该对象的引用，还会删除名称本身。这样看似简单，但有时还是难以理解，例如当两个名称指向同一个列表时，使用del删除其中一个却并不会影响另一个，你仅仅时删除了一个访问该列表的名称而已。而实际上，在Python中，根本没有办法删除值，而且你也不需要这么做，因为对于你而言，你不再使用的值，Python解释器会自动将其删除（立刻）。 9.3 使用exec和eval执行字符串及计算其结果 ​ 有时候，你可能想动态的编写Python代码，并将其作为语句进行执行或作为表达式进行计算。 9.3.1 exec 函数exec将字符串作为代码执行 >>> exec('print(\"Hello,World!\")') Hello,World! ​ 然而，调用函数时只给它提供一个参数绝非好事。在大多数情况下，还应向它传递一个命名空间--用于放置变量的的地方，否则代码将可能污染你的命名空间，即修改你的变量。例如，你在代码中使用了名称sqrt，会出现什么样的结果： >>> from math import sqrt >>> sqrt(4) 2.0 >>> exec('sqrt = 1') >>> sqrt(4) Traceback (most recent call last): File \"\", line 1, in sqrt(4) TypeError: 'int' object is not callable ​ 既然如此，为什么还要将字符串作为代码执行呢？函数exec主要用于动态地创建代码字符串。如果这些字符串来自其他地方（比如说用户），就几乎无法确认它将包含什么内容。因此为了安全起见，需要提供一个字典充当命名空间。为此，你添加第二个参数--字典，用作代码字符串的命名空间。 Python 3.6.3 (v3.6.3:2c5fed8, Oct 3 2017, 18:11:49) [MSC v.1900 64 bit (AMD64)] on win32 Type \"copyright\", \"credits\" or \"license()\" for more information. >>> from math import sqrt >>> scope = {} >>> exec('sqrt = 1', scope) >>> sqrt(4) 2.0 >>> scope['sqrt'] 1 ​ 如你所见，可能带来破坏的代码并非覆盖函数sqrt。函数sqrt该怎样还怎样，而通过exec执行赋值语句创建的变量位于scope中。 ​ 请注意，如果你尝试将scope打印出来，将发现它包含很多内容，这是因为自动在其中添加了包含所有内置函数和值的字典 _buildins _ 9.3.2 eval ​ eval是一个类似于exec的内置函数。exec执行一系列Python语句。而eval计算用字符串表示的python表达式的值，并返回结果（exec什么都不返回，因为它本身就是条语句）。例如，你可以使用如下代码创建一个Python计算器： >>> eval(input('Enter an arithmetic expression:')) Enter an arithmetic expression:6 + 18 * 2 42 ​ 与exec一样，eval可以提供一个命名空间，虽然表达式通常不会像语句那样给变量重新赋值 10. 简单推导 ​ 列表推导是一种从其他列表创建列表的方式，类似于数学中的集合推导。列表推导的工作原理非常简单，优点类似于for循环。 Python 3.6.3 (v3.6.3:2c5fed8, Oct 3 2017, 18:11:49) [MSC v.1900 64 bit (AMD64)] on win32 Type \"copyright\", \"credits\" or \"license()\" for more information. >>> [x * x for x in range(10)] [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] ​ 这个列表由range(10)内每个值的平方组成，这看起来很直观易懂。如果想打印哪些能被三整除的平方值，又该怎么办？这里可使用求模运算符：如果y能够被三整除，y%3将返回0（请注意，仅当x能被3整除的时候，x*x才能被三整除）。为实现这种功能，可在列表推导中添加一条if语句。 >>> [x * x for x in range(10) if x%3 == 0] [0, 9, 36, 81] ​ 还可以添加更多的for部分。 >>> [(x,y) for x in range(3) for y in range(3)] [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)] ​ 作为对比，下面的两个for循环创建同样的列表： >>> result = [] >>> for x in range(3): for y in range(3): result.append((x,y)) ​ 与以前一样，使用多个for部分时，也可以添加if语句。 >>> girls = ['alice','bernice','clarice'] >>> boys = ['chris','arnold','bob'] >>> [b + ' + ' + g for b in boys for g in girls if b[0] == g[0]] ['chris + clarice', 'arnold + alice', 'bob + bernice'] ​ 这些代码将名称的首字母相同的男孩和女孩配对，但是实际上效率并不高，因为它要检查每种可能的配对。使用Python解决这类的问题还有很多，下面是Alex Martelli推荐的解决方案： >>> girls = ['alice','bernice','clarice'] >>> boys = ['chris','arnold','bob'] >>> letterGirls = {} >>> for girl in girls: letterGirls.setdefault(girl[0], []).append(girl) >>> print([b + ' + ' + g for b in boys for g in letterGirls[b[0]]]) ['chris + clarice', 'arnold + alice', 'bob + bernice'] ​ 以上代码创建一个名为letterGirls的字典，其中每项的键都是一个字母，而值为以这个字母打头的女孩名称组成的列表。创建这个字典后，列表推导遍历所有的男孩，并查找名称首字母与当前男孩相同的所有女孩。这样，这个列表就无需尝试所有男孩和女孩的组合并检查它们名称的首字母是否相同了。 ​ 使用圆括号代替方括号并不能实现元组推导，而是创建生成器。另外，可使用花括号来执行字典推导。 >>> squares = {i:\"{} squared is {}\".format(i,i**3) for i in range(10)} >>> squares[8] '8 squared is 512' ​ 在列表推导中，for前面只有一个表达式，而在字典推导中，for前面有两个用冒号分割的表达式。这两个表达式分别为键和对应的值。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Python/Chapter12.html":{"url":"Python/Chapter12.html","title":"第十二章：迭代器和生成器","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 迭代器 2. 创建一个迭代器 3. 生成器 第十二章：迭代器和生成器 1. 迭代器 ​ 迭代是Python最强大的功能之一，是访问集合元素的一种方式。 ​ 迭代器是一个可以记住遍历的位置的对象。 ​ 迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。 ​ 迭代器有两个基本的方法：iter() 和 next()。 ​ 字符串，列表或元组对象都可用于创建迭代器： >>> list=[1,2,3,4] >>> it = iter(list) # 创建迭代器对象 >>> print (next(it)) # 输出迭代器的下一个元素 1 >>> print (next(it)) 2 >>> ​ 迭代器对象可以使用常规for语句进行遍历： #!/usr/bin/python3 list=[1,2,3,4] it = iter(list) # 创建迭代器对象 for x in it: print (x, end=\" \") ​ 执行以上程序，输出结果如下： 1 2 3 4 ​ 也可以使用 next() 函数： #!/usr/bin/python3 import sys # 引入 sys 模块 list=[1,2,3,4] it = iter(list) # 创建迭代器对象 while True: try: print (next(it)) except StopIteration: sys.exit() ​ 执行以上程序，输出结果如下： 1 2 3 4 2. 创建一个迭代器 ​ 把一个类作为一个迭代器使用需要在类中实现两个方法 __iter__() 与 __next__() 。 ​ 如果你已经了解的面向对象编程，就知道类都有一个构造函数，Python 的构造函数为 __init__(), 它会在对象初始化的时候执行。 ​ __iter__() 方法返回一个特殊的迭代器对象， 这个迭代器对象实现了 __next__() 方法并通过 StopIteration 异常标识迭代的完成。 ​ __next__() 方法（Python 2 里是 next()）会返回下一个迭代器对象。 ​ 创建一个返回数字的迭代器，初始值为 1，逐步递增 1： class MyNumbers: def __iter__(self): self.a = 1 return self def __next__(self): x = self.a self.a += 1 return x myclass = MyNumbers() myiter = iter(myclass) print(next(myiter)) print(next(myiter)) print(next(myiter)) print(next(myiter)) print(next(myiter)) ​ 执行输出结果为： 1 2 3 4 5 ​ StopIteration 异常用于标识迭代的完成，防止出现无限循环的情况，在 __next__() 方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代。 ​ 在 20 次迭代后停止执行： class MyNumbers: def __iter__(self): self.a = 1 return self def __next__(self): if self.a ​ 执行输出结果为： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 3. 生成器 ​ 在 Python 中，使用了 yield 的函数被称为生成器（generator）。 ​ 跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。 ​ 在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。 ​ 调用一个生成器函数，返回的是一个迭代器对象。 ​ 以下实例使用 yield 实现斐波那契数列： #!/usr/bin/python3 import sys def fibonacci(n): # 生成器函数 - 斐波那契 a, b, counter = 0, 1, 0 while True: if (counter > n): return yield a a, b = b, a + b counter += 1 f = fibonacci(10) # f 是一个迭代器，由生成器返回生成 while True: try: print (next(f), end=\" \") except StopIteration: sys.exit() ​ 执行以上程序，输出结果如下： 0 1 1 2 3 5 8 13 21 34 55 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Python/Chapter13.html":{"url":"Python/Chapter13.html","title":"第十三章：抽象和函数","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 懒惰是一种美德 2. 自定义函数 3. 函数调用 3. 参数传递 3.1 可更改(mutable)与不可更改(immutable)对象 3.1.1 不可变对象实例 3.1.2 可变对象实例 4. 参数 4.1 必需参数 4.2 关键字参数 4.3 默认参数 4.4 不定长参数 5. 匿名函数 6. return语句 7.作用域 8. 变量作用域 7.1 全局变量和局部变量 7.2 global 和 nonlocal关键字 9. 递归 9.1 阶乘和幂 9.2 二分查找 第十三章：抽象和函数 ​ 本章节将介绍如何将语句组成函数，这让你能够告诉计算机如何完成任务，且只需要说一次，无需反复向计算机传达详细指令。 1. 懒惰是一种美德 ​ 前面编写的程序都很小，但如果编写大型程序，你很快就会遇到麻烦。例如：计算斐波那契数列 >>> fibs = [0,1] >>> for i in range(8): fibs.append(fibs[-2] + fibs[-1]) >>> fibs [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] ​ 如果你仅想计算前十个斐波那契额数列，则上述代码正好可以满足该需求，你甚至可以微调代码用来控制其处理数据的范围，即让用户指定最终要得到的序列的长度： >>> fibs = [0,1] >>> num = int(input(\"How many Fibonacci numbers do you want?\")) How many Fibonacci numbers do you want?12 >>> num 12 >>> for i in range(num-2): fibs.append(fibs[-2] + fibs[-1]) >>> fibs [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] ​ 然而真正的程序员并不会这样做。真正的程序员很懒，这里的懒并不是一个贬义词，而是指不做无谓的工作。那么真正的程序员会怎样做？让程序更抽象： num = int(input(\"How many Fibonacci numbers do you want?\")) print(fibs(num)) ​ 其中fibs就是一个函数，函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。 ​ 函数能提高应用的模块性，和代码的重复利用率。你已经知道Python提供了许多内建函数，比如print()。但你也可以自己创建函数，这被叫做用户自定义函数。 2. 自定义函数 ​ 抽象可以节省人力，但实际上还有更重要的优点：抽象时程序能够被人理解的关键所在。无论是编写程序还是阅读程序来说，这都至关重要。计算机通常喜欢具体而明确的指令而人通常不会是这样。 ​ 组织计算机程序时，你也可以采取类似的方式。程序应该非常的抽象，如下载网页，计算使用频率，打印每个单词的使用频率。下面将前述简单描述转换为一个Python程序： page = download_page() freqs = compute_frequencies(page) for word,freq in freqs: print(word,freq) ​ 看到这些代码，任何人都知道这个程序是做什么的。然而，至于具体该如何做，你未置一词。至于具体的操作细节，可以在其他地方（独立的函数定义）中给出。 ​ 函数执行特定的一系列操作并返回一个值，你可以通过函数名和若干参数（也可能美哟u参数）调用它。一般而言，要判断某个对象是否可被调用，可以使用内置函数callable。 >>> import math >>> x = 1 >>> y = math.sqrt >>> callable(x) False >>> callable(y) True ​ 函数是结构化编的核心，你可以定义一个由自己想要功能的函数，以下是简单的规则： 函数代码块以 def 关键词开头，后接函数标识符名称和圆括号 ()。 任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。 函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。 函数内容以冒号起始，并且缩进。 return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。 ​ Python 定义函数使用 def 关键字，一般格式如下： def 函数名（参数列表）: 函数体 ​ 默认情况下，参数值和参数名称是按函数声明中定义的顺序匹配起来的。让我们使用函数来输出\"Hello World！\"： >>>def hello() : print(\"Hello World!\") >>> hello() Hello World! >>> ​ 更复杂点的应用，函数中带上参数变量: #!/usr/bin/python3 # 计算面积函数 def area(width, height): return width * height def print_welcome(name): print(\"Welcome\", name) print_welcome(\"Runoob\") w = 4 h = 5 print(\"width =\", w, \" height =\", h, \" area =\", area(w, h)) ​ 以上实例输出结果： Welcome Runoob width = 4 height = 5 area = 20 3. 函数调用 ​ 定义一个函数：给了函数一个名称，指定了函数里包含的参数，和代码块结构。 ​ 这个函数的基本结构完成以后，你可以通过另一个函数调用执行，也可以直接从 Python 命令提示符执行。 ​ 如下实例调用了 printme() 函数： #!/usr/bin/python3 # 定义函数 def printme( str ): # 打印任何传入的字符串 print (str) return # 调用函数 printme(\"我要调用用户自定义函数!\") printme(\"再次调用同一函数\") ​ 以上实例输出结果： 我要调用用户自定义函数! 再次调用同一函数 ​ 为了在协作开发中让他人更方便的调用函数，我们要给函数编写文档，已确保他人能够理解。可添加单行注释（即以#开头的内容），也可以添加独立字符串（即使用引号括起来的内容，包括单引号，双引号和三引号）。 ​ 在有些地方，如def语句之后，以及模块和类的开头等等，添加这样的字符串很有用。放在函数开头的字符串被称为文档字符串，将作为函数的一部分存储起来，可以通过函数的__ doc __属性或者特殊的内置函数help来获取有关函数的信息。 >>> form math import sqrt >>> sqrt.__doc__ 'sqrt(x)\\n\\nReturn the square root of x.' >>> help(sqrt) Help on built-in function sqrt in module math: sqrt(...) sqrt(x) Return the square root of x. 3. 参数传递 ​ 在 python 中，类型属于对象，变量是没有类型的： a=[1,2,3] a=\"Runoob\" ​ 以上代码中，[1,2,3] 是 List 类型，\"Runoob\" 是 String 类型，而变量 a 是没有类型，她仅仅是一个对象的引用（一个指针），可以是指向 List 类型对象，也可以是指向 String 类型对象。 3.1 可更改(mutable)与不可更改(immutable)对象 ​ 在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。 不可变类型：变量赋值 a=5 后再赋值 a=10，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变a的值，相当于新生成了a。 可变类型：变量赋值 la=[1,2,3,4] 后再赋值 la[2]=5 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。 python 函数的参数传递： 不可变类型：类似 c++ 的值传递，如 整数、字符串、元组。如fun（a），传递的只是a的值，没有影响a对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。 可变类型：类似 c++ 的引用传递，如 列表，字典。如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响 ​ python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。 3.1.1 不可变对象实例 #!/usr/bin/python3 def ChangeInt( a ): a = 10 b = 2 ChangeInt(b) print( b ) # 结果是 2 ​ 实例中有 int 对象 2，指向它的变量是 b，在传递给 ChangeInt 函数时，按传值的方式复制了变量 b，a 和 b 都指向了同一个 Int 对象，在 a=10 时，则新生成一个 int 值对象 10，并让 a 指向它。 3.1.2 可变对象实例 ​ 可变对象在函数里修改了参数，那么在调用这个函数的函数里，原始的参数也被改变了。例如： #!/usr/bin/python3 # 可写函数说明 def changeme( mylist ): \"修改传入的列表\" mylist.append([1,2,3,4]) print (\"函数内取值: \", mylist) return # 调用changeme函数 mylist = [10,20,30] changeme( mylist ) print (\"函数外取值: \", mylist) ​ 传入函数的和在末尾添加新内容的对象用的是同一个引用。故输出结果如下： 函数内取值: [10, 20, 30, [1, 2, 3, 4]] 函数外取值: [10, 20, 30, [1, 2, 3, 4]] 4. 参数 ​ 以下是调用函数时可使用的正式参数类型： 必需参数 关键字参数 默认参数 不定长参数 4.1 必需参数 ​ 必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。 ​ 调用 printme() 函数，你必须传入一个参数，不然会出现语法错误： #!/usr/bin/python3 #可写函数说明 def printme( str ): \"打印任何传入的字符串\" print (str) return # 调用 printme 函数，不加参数会报错 printme() ​ 以上实例输出结果： Traceback (most recent call last): File \"test.py\", line 10, in printme() TypeError: printme() missing 1 required positional argument: 'str' 4.2 关键字参数 ​ 关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值有助于在调用参数时澄清各个参数的作用，虽然输入量更多了，但表达更明确更易阅读。 ​ 使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。 ​ 以下实例在函数 printme() 调用时使用参数名： #!/usr/bin/python3 #可写函数说明 def printme( str ): \"打印任何传入的字符串\" print (str) return #调用printme函数 printme( str = \"菜鸟教程\") ​ 以上实例输出结果： 菜鸟教程 ​ 以下实例中演示了函数参数的使用不需要使用指定顺序： #!/usr/bin/python3 #可写函数说明 def printinfo( name, age ): \"打印任何传入的字符串\" print (\"名字: \", name) print (\"年龄: \", age) return #调用printinfo函数 printinfo( age=50, name=\"runoob\" ) ​ 以上实例输出结果： 名字: runoob 年龄: 50 ​ 更厉害的是，你可以结合位置参数和关键字参数，但必须先指定所有的位置参数，否则解释器可能无法知道它们究竟是哪个参数（即不知道参数对应对应什么位置，所以一般不建议同时使用位置参数和关键字参数）。 4.3 默认参数 ​ 调用函数时，如果没有传递参数，则会使用默认参数。以下实例中如果没有传入 age 参数，则使用默认值： #!/usr/bin/python3 #可写函数说明 def printinfo( name, age = 35 ): \"打印任何传入的字符串\" print (\"名字: \", name) print (\"年龄: \", age) return #调用printinfo函数 printinfo( age=50, name=\"runoob\" ) print (\"------------------------\") printinfo( name=\"runoob\" ) ​ 以上实例输出结果： 名字: runoob 年龄: 50 ------------------------ 名字: runoob 年龄: 35 4.4 不定长参数 ​ 你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述 2 种参数不同，声明时不会命名。基本语法如下： def functionname([formal_args,] *var_args_tuple ): \"函数_文档字符串\" function_suite return [expression] ​ 加了星号 * 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。 #!/usr/bin/python3 # 可写函数说明 def printinfo( arg1, *vartuple ): \"打印任何传入的参数\" print (\"输出: \") print (arg1) print (vartuple) # 调用printinfo 函数 printinfo( 70, 60, 50 ) ​ 以上实例输出结果： 输出: 70 (60, 50) ​ 如果在函数调用时没有指定参数，它就是一个空元组。我们也可以不向函数传递未命名的变量。如下实例： #!/usr/bin/python3 # 可写函数说明 def printinfo( arg1, *vartuple ): \"打印任何传入的参数\" print (\"输出: \") print (arg1) for var in vartuple: print (var) return # 调用printinfo 函数 printinfo( 10 ) printinfo( 70, 60, 50 ) ​ 以上实例输出结果： 输出: 10 输出: 70 60 50 ​ 还有一种就是参数带两个星号 **基本语法如下： def functionname([formal_args,] **var_args_dict ): \"函数_文档字符串\" function_suite return [expression] ​ 加了两个星号 ** 的参数会以字典的形式导入。 #!/usr/bin/python3 # 可写函数说明 def printinfo( arg1, **vardict ): \"打印任何传入的参数\" print (\"输出: \") print (arg1) print (vardict) # 调用printinfo 函数 printinfo(1, a=2,b=3) ​ 以上实例输出结果： 输出: 1 {'a': 2, 'b': 3} ​ 声明函数时，参数中星号 *可以单独出现，例如: def f(a,b,*,c): return a+b+c ​ 如果单独出现星号 * 后的参数必须用关键字传入。 >>> def f(a,b,*,c): ... return a+b+c ... >>> f(1,2,3) # 报错 Traceback (most recent call last): File \"\", line 1, in TypeError: f() takes 2 positional arguments but 3 were given >>> f(1,2,c=3) # 正常 6 >>> 5. 匿名函数 ​ python 使用 lambda 来创建匿名函数。 ​ 所谓匿名，意即不再使用 def 语句这样标准的形式定义一个函数。 lambda 只是一个表达式，函数体比 def 简单很多。 lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。 lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。 虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。 ​ lambda 函数的语法只包含一个语句，如下： lambda [arg1 [,arg2,.....argn]]:expression ​ 如下实例： #!/usr/bin/python3 # 可写函数说明 sum = lambda arg1, arg2: arg1 + arg2 # 调用sum函数 print (\"相加后的值为 : \", sum( 10, 20 )) print (\"相加后的值为 : \", sum( 20, 20 )) ​ 以上实例输出结果： 相加后的值为 : 30 相加后的值为 : 40 6. return语句 ​ return [表达式] 语句用于退出函数，选择性地向调用方返回一个表达式。不带参数值的return语句返回None。之前的例子都没有示范如何返回数值，以下实例演示了 return 语句的用法： #!/usr/bin/python3 # 可写函数说明 def sum( arg1, arg2 ): # 返回2个参数的和.\" total = arg1 + arg2 print (\"函数内 : \", total) return total # 调用sum函数 total = sum( 10, 20 ) print (\"函数外 : \", total) ​ 以上实例输出结果： 函数内 : 30 函数外 : 30 7.作用域 ​ 变量究竟是什么，可将其视为指向值的名称。因此，当执行赋值语句x=1之后，名称x指向值1.这看起来几乎和字典中的键值对完全一样，而之所以你无法察觉，只是你使用的是“看不见”的字典。实际上，这种解释已经离真相不再遥远了。Python中有一个名为vars的内置函数，它返回这个不可见字典： Python 3.6.3 (v3.6.3:2c5fed8, Oct 3 2017, 18:11:49) [MSC v.1900 64 bit (AMD64)] on win32 Type \"copyright\", \"credits\" or \"license()\" for more information. >>> x = 1 >>> scope = vars() >>> scope['x'] 1 ​ 一般而言，不应该修改vars返回的字典，因为根据Python官方文档的说法，这样做的结果是不确定的。这种不确定的字典被称为命名空间或者作用域，除全局作用域外，每个函数调用都会创建一个作用域： >>> def foo(): x = 42 >>> x 1 >>> foo() >>> x 1 ​ 以上例子中，函数foo重新定义了x的值，但当你再次查看时，它的值并没有发生改变。这是因为你在调用foo函数时，新的命名空间已经创建这个字典中值仅供当前foo函数使用，赋值语句在这个内部作用域（即局部变量）中执行是不会影响外部（全局作用域）的x。 ​ 那个既然两个同名变量互不影响，那么如何区分你调用了哪一个？这里推荐命名最好不要相同。怎样在函数中访问全局变量呢？如果名称不同，读取全局变量通常不会有问题，但还是存在出问题的可能性，比如之前的同名问题，因此，务必慎用全局变量。 8. 变量作用域 ​ Python 中，程序的变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的。 ​ 变量的作用域决定了在哪一部分程序可以访问哪个特定的变量名称。Python的作用域一共有4种，分别是： L （Local） 局部作用域 E （Enclosing） 闭包函数外的函数中 G （Global） 全局作用域 B （Built-in） 内置作用域（内置函数所在模块的范围） ​ 以 L –> E –> G –>B 的规则查找，即：在局部找不到，便会去局部外的局部找（例如闭包），再找不到就会去全局找，再者去内置中找。 g_count = 0 # 全局作用域 def outer(): o_count = 1 # 闭包函数外的函数中 def inner(): i_count = 2 # 局部作用域 ​ 内置作用域是通过一个名为 builtin 的标准模块来实现的，但是这个变量名自身并没有放入内置作用域内，所以必须导入这个文件才能够使用它。在Python3.0中，可以使用以下的代码来查看到底预定义了哪些变量: >>> import builtins >>> dir(builtins) ​ Python 中只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域，其它的代码块（如 if/elif/else/、try/except、for/while等）是不会引入新的作用域的，也就是说这些语句内定义的变量，外部也可以访问，如下代码： >>> if True: ... msg = 'I am from Runoob' ... >>> msg 'I am from Runoob' >>> ​ 实例中 msg 变量定义在 if 语句块中，但外部还是可以访问的。 ​ 如果将 msg 定义在函数中，则它就是局部变量，外部不能访问： >>> def test(): ... msg_inner = 'I am from Runoob' ... >>> msg_inner Traceback (most recent call last): File \"\", line 1, in NameError: name 'msg_inner' is not defined >>> ​ 从报错的信息上看，说明了 msg_inner 未定义，无法使用，因为它是局部变量，只有在函数内可以使用。 7.1 全局变量和局部变量 ​ 定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域。 ​ 局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。调用函数时，所有在函数内声明的变量名称都将被加入到作用域中。如下实例： #!/usr/bin/python3 total = 0 # 这是一个全局变量 # 可写函数说明 def sum( arg1, arg2 ): #返回2个参数的和.\" total = arg1 + arg2 # total在这里是局部变量. print (\"函数内是局部变量 : \", total) return total #调用sum函数 sum( 10, 20 ) print (\"函数外是全局变量 : \", total) ​ 以上实例输出结果： 函数内是局部变量 : 30 函数外是全局变量 : 0 7.2 global 和 nonlocal关键字 ​ 当内部作用域想修改外部作用域的变量时，就要用到global和nonlocal关键字了。 ​ 以下实例修改全局变量 num： #!/usr/bin/python3 num = 1 def fun1(): global num # 需要使用 global 关键字声明 print(num) num = 123 print(num) fun1() print(num) ​ 以上实例输出结果： 1 123 123 ​ 如果要修改嵌套作用域（enclosing 作用域，外层非全局作用域）中的变量则需要 nonlocal 关键字了，如下实例： #!/usr/bin/python3 def outer(): num = 10 def inner(): nonlocal num # nonlocal关键字声明 num = 100 print(num) inner() print(num) outer() ​ 以上实例输出结果： 100 100 ​ 另外有一种特殊情况，假设下面这段代码被运行： #!/usr/bin/python3 a = 10 def test(): a = a + 1 print(a) test() ​ 以上程序执行，报错信息如下： Traceback (most recent call last): File \"test.py\", line 7, in test() File \"test.py\", line 5, in test a = a + 1 UnboundLocalError: local variable 'a' referenced before assignment ​ 错误信息为局部作用域引用错误，因为 test 函数中的 a 使用的是局部，未定义，无法修改。 ​ 修改 a 为全局变量，通过函数参数传递，可以正常执行输出结果为： #!/usr/bin/python3 a = 10 def test(a): a = a + 1 print(a) test(a) ​ 执行输出结果为： 11 9. 递归 ​ 前面主要介绍了如何创建和调用函数。我们知道，函数可以调用另一个函数，然而实际上，函数还可以调用自己。如果你以前没有遇到这种情况，可能会迷惑递归是什么意思？简单而言，递归意味着引用（这里指调用）自身。以下是一个递归式函数的定义： def recursion(): pass return recursion() ​ 这个定义显然，什么都没有做，只是不停的调用自身，就像一个死循环一样，你将发现运行一段时间后，这个程序可能会崩溃（引发异常）。每次调用函数，都会消耗一些内存当函数的调用到达一定次数，将消耗所有可用的额内存空间，导致程序被终止并显示错误消息“超过最大递归深度”。 ​ 这个函数中的递归又被称之为无穷递归，因为它理论上说永远不会结束。程序员想要的是有用的递归函数（不是空耗内存），这样的递归函数通常包含以下两部分： 基线条件（针对最小的问题）：满足某种条件时函数会直接返回一个值。 递归条件：包含一个或多个调用，这些调用旨在解决问题的一部分。 ​ 递归解决问题的关键是将问题分解成较小的部分。 9.1 阶乘和幂 ​ 本节讨论两个经典的递归函数。首先，假设你要计算数字n的阶乘，比如你要计算将n个人排成一队共有多少种方式，可使用循环来实现： def factorial(n): result = n for i in range(1,n): result *= i return reault ​ 这种实现方式无疑是可行的，而且直截了当。大致而言，程序的流程是这样的： 先将result的值设置为n; 再将result依次乘以1到n-1之间的每一个数字； 最后返回result。 ​ 在数学方面，阶乘的定义可表述如下： 1的阶乘等于1 对于大于1的数字n，其阶乘为n-1的阶乘再乘以n ​ 那么，我们可以定义如下的函数： def factorial(n): if(n == 1): return 1 else: return factorial(n-1) * n print(factorial(5)) ​ 再来看一个实例，假设你要计算幂，就像内置函数pow和运算符**所作的那样定义一个power： def power(x,n): if(n = 0): return 1 else: result = 1 for i in range(n): result *= x return result ​ 这是一个非常简单的小型函数，但依然可以将其改为递归式的 对于任何数字x,power（x,1）都为1 当n>0时，power(x,n)为power(x,n-1)与x的乘积 def power(x,n): if(n = 0): return 1 else: return power(x,n-1) * x ​ 那么使用递归有什么意义呢？同样的效果使用循环也可以实现。而且在大多数情况下，使用循环的效率可能更高。但是，在很多时候，使用递归的可阅读性更高，在你理解函数的递归式定义尤其如此。另外，虽然你完全可以避免使用递归机型编程，但作为程序员必须能够读懂他人编写的递归算法和函数。 9.2 二分查找 首先分解以下二分查找的实现： 如果查找上限和下限相同，则其均指向查找元素，直接返回该元素 如果上下限并不一致，则取上下限平均值的中间值，再确认查找元素时在上半部分还是下半部分，然后再继续在新的范围内查找 对于数字的二分查找，需要先排序，以下为一个二分查找数字的简单例子： def search(squence, number, lower, upper): if(lower == upper): assert number = squence[upper] return upper else: middle = (lower + upper)/2 if(number > middle): return search(squence, number, middle, upper) else: return search(squence, number, lower, middle) 实际上，python中bisect模块提供了标准的二分查找实现。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Python/Chapter14.html":{"url":"Python/Chapter14.html","title":"第十四章：抽象和对象","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 面向对象技术简介 2. 多态 3.封装 4.继承 5. 多继承 6. 类 7. 类的方法 8. 方法重写 9. 类属性与方法 9.1 类的私有属性 9.2 类的方法 9.3 类的私有方法 9.4 类的专有方法 10. 运算符重载 第十四章：抽象和对象 ​ Python从设计之初就已经是一门面向对象的语言，正因为如此，在Python中创建一个类和对象是很容易的。本章节我们将详细介绍Python的面向对象编程，以及如何创建自定义对象。 ​ 如果你以前没有接触过面向对象的编程语言，那你可能需要先了解一些面向对象语言的一些基本特征，在头脑里头形成一个基本的面向对象的概念，这样有助于你更容易的学习Python的面向对象编程。 1. 面向对象技术简介 ​ 在面向对象编程中，对象大致意味着一系列数据（属性）以及一套访问和操作这些数据的方法。 类(Class): 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。 方法：类中定义的函数。 类变量：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。 数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据。 方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。 局部变量：定义在方法中的变量，只作用于当前实例的类。 实例变量：在类的声明中，属性是用变量来表示的。这种变量就称为实例变量，是在类声明的内部但是在类的其他成员方法之外声明的。 继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟\"是一个（is-a）\"关系（例图，Dog是一个Animal）。 实例化：创建一个类的实例，类的具体对象。 对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。 和其它编程语言相比，Python 在尽可能不增加新的语法和语义的情况下加入了类机制。 ​ Python中的类提供了面向对象编程的所有基本功能：类的继承机制允许多个基类，派生类可以覆盖基类中的任何方法，方法中可以调用基类中的同名方法。 ​ 对象可以包含任意数量和类型的数据。 ​ 使用对象而非全局变量和函数的原因有多个，下面列出了使用对象最重要的好处： 多态：可对不同类型的对象执行相同的操作，而这些操作就像“被施了魔法”一样能够正常运行。 封装：对外界隐藏有关对象工作原理的细节 继承：可基于通用类创建出专用类 ​ 在很多介绍面向对象编程的资料中，都以不同于这里的顺序介绍上述概念。一般先介绍封装和继承，再使用这些概念来模拟现实世界的对象。这没什么不好，但是在我看来，多态才是面向对象编程最有趣的事情。而一般而言，这也是让大多数人感到迷惑的特性。 2. 多态 ​ 多态源自于希腊语，意思是“有多种形态”。这大致意味着你即使不知道变量指向的是那种对象，也能对齐执行操作，且操作的行为将随对象所属的具体类型（类）而异。 ​ 一个简单的查询价格可能根据不同的查询方式和实现方法而重新设计实现，这样可能会开发多次，甚至推翻之前已有的代码。如何避免这样的问题？在面向对象编程中，我们使用多态来解决，即让对象自己处理对应的操作。无论有多少种新对象，都能够正确的获取并计算其价格返回，而用户只需要向它查询价格即可，这正是多态的用武之地。 ​ 你收到一个对象，却根本不知道它是如何实现的-- --他可能是众多“形态”中的任何一种。如果你知道它可以查询价格，这就够了，像这样与对象属性相关联的函数又被称为方法。 ​ 下面来做一个实验。标准库模块random中包含一个choice的函数，它从序列中随机选择一个元素： Python 3.6.3 (v3.6.3:2c5fed8, Oct 3 2017, 18:11:49) [MSC v.1900 64 bit (AMD64)] on win32 Type \"copyright\", \"credits\" or \"license()\" for more information. >>> from random import choice >>> arr = ['hello,world!',[1,2,'e','e','e']] >>> choice(arr).count('e') 3 >>> choice(arr).count('e') 1 >>> ​ 以上例子表明，你无需关心随机选取的是一个什么类型的数据，你可以只关心它之中到底有几个‘e’即可，为了这一目的，你可以调count，即可得到你要的答案。 ​ 当你无需知道对象是什么样的就能对其执行操作，就是多态在起作用。这不仅适用于方法，我们还通过内置运算符和函数大量使用了多态。例如： >>> 1 + 1 2 >>> 'a ' + 'b' 'a b' ​ 以上代码表明，加法运算符既可用于数，也可用于字符串，以及其他类型的序列。加法运算符两边的值可以是任何支持加法的对象。如果要编写一个函数，通过打印一条消息来指定对象长度，你可以这么做： >>> def length_message(x): print(\"The length of \" + repr(x),' is ',len(x)) ​ 如你所见，这个函数还使用了repr。repr是Python中多态的集大成者之一，可以用于任对象，下面就来看看： >>> length_message(\"Fnord\") The length of 'Fnord' is 5 >>> length_message([1,2,3]) The length of [1, 2, 3] is 3 ​ 这里讨论的多态形式是Python编程方式的核心，有时也被称为鸭子模型，这个术语源自于如下说法：“如果走起来像鸭子，叫起来像鸭子，那么它就是鸭子。” 3.封装 ​ 封装（encapsulation）指的是向外部隐藏不必要的细节。这听起来很像多态（无需知道对象内部的细节就可以使用它）。这两个对象很像，因为它们都是抽象的原则。它们都像函数一样，可以帮助你处理程序的组成部分，让你无需关心不必要的细节。 ​ 但封装不同于多态。多态让你无需知道对象所属的类（对象的类型）就能调用其方法，而封装让你无需知道对象的构造就能使用它。如果还是不明白，还是来一个例子吧，假设你有一个名为OpenObject的类： >>>o = OpenObject() #对象就是这么建立的 >>>o.set_name(\"Sir Lacelot\") >>>o.get_name() 'Sir Lacelot' ​ 你（通过像调用对象一样调用类）创建一个对象，并将其关联到变量o,然后就可以使用方法set_name和get_name了（假设OpenObject中支持这些方法）。一切都看起来完美无缺。然而，如果将其名称存储在全局变量global_name中呢？ >>> global_name \"Sir Lacelot\" ​ 这意味着使用OpenObject类的实例（对象）时，你需要考虑global_name的内容，事实上，必须确保无人能修改它。 >>>global_name = 'Sir Gumby' >>>o.get_name() 'Sir Gumby' ​ 如果尝试创建多个OpenObject对象，将会出现问题，因为它们会公用一个变量： >>>o1 = OpenObject() >>>o2 = OpenObjcet() >>>o1.set_name('Robin Hood') >>>o2.get_name() 'Robin Hood' ​ 如你所见，修改一个对象的名称时，将自动设置另一个对象的名称。这可能并不是你想要的结果。基本上，你希望对象是抽象的：当调用方法时，无需操心其他的事情，如避免干扰全局变量。如何将名称“封装”在对象中？没问题，将其作为一个属性即可。 ​ 属性是归属于对象的变量，就像方法一样。实际上，方法差不多就是与函数相关联的属性。如果你使用属性而非全局变量重新编写前面的类，并将其命名为CloseObject，就可以像下面这样使用它： >>> c = CloseObject() >>> c.set_name('Sir Lancelot') >>> c.get_name() 'Sir Lancelot' ​ 到目前为止一切顺利，但这并不能证明名称不是存储在全局变量中的。下面再来创建一个对象： >>> r = CloseObject() >>> r.set_name('Sir Robin') >>> r.get_name() 'Sir Robin' ​ 从中可知正确的设置了新对象的名称（这可能会在你意料之中），但第一个对象现在会怎么呢？ >>>c.get_name() 'Sir Lancelot' ​ 其名称还在，因为这个对象有自己的状态。对象的状态由属性（如名称）描述。对象的方法可能修改这些属性，因此将一系列函数（方法）组合起来，并赋予他们访问一些变量（属性）的权限，而属性可用于两次函数调用之间存储值。 4.继承 ​ Python 同样支持类的继承，如果一种语言不支持继承，类就没有什么意义。 ​ 继承另一种偷懒的方式（褒义）。程序员总是想避免多次输入同样的代码。本书前面通过创建函数来达成这个目标，但是现在要解决一个更微妙的问题。如果你已经有一个类，并且要创建一个与之很像的类（例如只是新增了几个方法），该怎么办？创建这个新类时，你不想复制旧类的代码再粘贴到新类中。 ​ 例如，你可能已经有了一个名为Shape的类，它知道如何将自己绘制到屏幕。现在你想创建一个名为Rectangle的类，但他不仅知道如何将自己绘制到屏幕上，而且还知道如何计算其面积。你不想重新编辑绘制方法draw，因为Shape中已经有一个这样的方法了，而且效果很好。那么能怎么办？让Rectangle继承Shape的方法，使得对Rectangle调用方法draw时，将会自动调用Shape父类中的对应方法。 ​ 派生类的定义如下所示: class DerivedClassName(BaseClassName1): . . . ​ 需要注意圆括号中基类的顺序，若是基类中有相同的方法名，而在子类使用时未指定，python从左至右搜索 即方法在子类中未找到时，从左到右查找基类中是否包含方法。 ​ BaseClassName（示例中的基类名）必须与派生类定义在一个作用域内。除了类，还可以用表达式，基类定义在另一个模块中时这一点非常有用: class DerivedClassName(modname.BaseClassName): #!/usr/bin/python3 #类定义 class people: #定义基本属性 name = '' age = 0 #定义私有属性,私有属性在类外部无法直接进行访问 __weight = 0 #定义构造方法 def __init__(self,n,a,w): self.name = n self.age = a self.__weight = w def speak(self): print(\"%s 说: 我 %d 岁。\" %(self.name,self.age)) #单继承示例 class student(people): grade = '' def __init__(self,n,a,w,g): #调用父类的构函 people.__init__(self,n,a,w) self.grade = g #覆写父类的方法 def speak(self): print(\"%s 说: 我 %d 岁了，我在读 %d 年级\"%(self.name,self.age,self.grade)) s = student('ken',10,60,3) s.speak() ​ 执行以上程序输出结果为： ken 说: 我 10 岁了，我在读 3 年级 ​ 要确认一个类是否是另一个类的子类，可使用内置方法issubcclass。 ​ 如果你有一个类，并想知道它的基类，可访问其特殊属性__bases__。 ​ 同样，要确认对象是否是某特定类的实例，可使用insinstance。 ​ 如果你要获悉对象属于哪个类，可使用属性__class__。 5. 多继承 ​ Python同样有限的支持多继承形式。多重继承是一个功能强大的工具，然而，不到万不得已，都应避免使用多继承，因为在有些情况下，他可能会带来意外的“并发症”。使用多继承时，有一点务必要注意：如果多个超类以不同的方式实现了同一方法（即有多个同名方法），必须在class语句中小心排列这些超类，因为位于前面的类的方法将覆盖位于后面的类的方法。多继承的类定义形如下例: class DerivedClassName(Base1, Base2, Base3): . . . ​ 需要注意圆括号中父类的顺序，若是父类中有相同的方法名，而在子类使用时未指定，python从左至右搜索 即方法在子类中未找到时，从左到右查找父类中是否包含方法。 #!/usr/bin/python3 #类定义 class people: #定义基本属性 name = '' age = 0 #定义私有属性,私有属性在类外部无法直接进行访问 __weight = 0 #定义构造方法 def __init__(self,n,a,w): self.name = n self.age = a self.__weight = w def speak(self): print(\"%s 说: 我 %d 岁。\" %(self.name,self.age)) #单继承示例 class student(people): grade = '' def __init__(self,n,a,w,g): #调用父类的构函 people.__init__(self,n,a,w) self.grade = g #覆写父类的方法 def speak(self): print(\"%s 说: 我 %d 岁了，我在读 %d 年级\"%(self.name,self.age,self.grade)) #另一个类，多重继承之前的准备 class speaker(): topic = '' name = '' def __init__(self,n,t): self.name = n self.topic = t def speak(self): print(\"我叫 %s，我是一个演说家，我演讲的主题是 %s\"%(self.name,self.topic)) #多重继承 class sample(speaker,student): a ='' def __init__(self,n,a,w,g,t): student.__init__(self,n,a,w,g) speaker.__init__(self,n,t) test = sample(\"Tim\",25,80,4,\"Python\") test.speak() #方法名同，默认调用的是在括号中排前地父类的方法 ​ 执行以上程序输出结果为： 我叫 Tim，我是一个演说家，我演讲的主题是 Python 6. 类 ​ 至此，你对类是什么应该有了大体的感觉，还可能有点急不可耐，希望我马上介绍如何创建类。至此之前，我们先了解以下什么是类？ ​ 本书前面反复提到了类，并将其做类型的同义词。从很多方面来说，这就是类的定义--一个对象。每个对象都属于特定的类，并被称为该类的实例。 ​ 例如，你在窗外看到一只鸟，这只鸟就是“鸟类”的一个实例。鸟类是一个非常通用（抽象）的类，他有很多子类：你看到的那只鸟可能属于子类“云雀”。你可将“鸟类”视为由所有鸟组成的集合，而“云雀”是其中的一个子集。一个类的对象为另一个对象的子集时，前者就是后者的子类。因此，“云雀”是“鸟类”的子集，而“鸟类”是“云雀”的超类。 注意：在英语日常交谈中，是用复数来表示类，如birds(鸟类)和larks(云雀)。在Python中，约定使用单数形式且首字母大写，如Bird和Lark。 ​ 通过这样的描述，子类和超类就很容易理解。但在所有面向对象编程中，子类关系意味深长，因为类是由其支持的方法来定义的。类的所有实例都拥有该类的所有方法，因此所有的子类实例都拥有超类的所有方法。有鉴于此，要定义子类，只需定义多出来的方法和重写一些既有的方法。 ​ 例如，Bird类可以提供方法fly，而Penguin（Bird的一个子类）可能会新增方法eat_fish。创建Penguin类时，你还可能想想重写超类的方法，即方法fly。鉴于企鹅不能飞，因此在Penguin的实例中，方法fly应什么都不做或引发异常。 语法格式如下： class ClassName: . . . ​ 类实例化后，可以使用其属性，实际上，创建一个类之后，可以通过类名访问其属性。 ​ 类对象支持两种操作：属性引用和实例化。 ​ 属性引用使用和 Python 中所有的属性引用一样的标准语法：obj.name。 ​ 类对象创建后，类命名空间中所有的命名都是有效属性名。所以如果类定义是这样: #!/usr/bin/python3 class MyClass: \"\"\"一个简单的类实例\"\"\" i = 12345 def f(self): return 'hello world' # 实例化类 x = MyClass() # 访问类的属性和方法 print(\"MyClass 类的属性 i 为：\", x.i) print(\"MyClass 类的方法 f 输出为：\", x.f()) ​ 以上创建了一个新的类实例并将该对象赋给局部变量 x，x 为空的对象。其中MyClass是类的名称。class创建独立的命名空间，用于在其中定义函数。一切看起来都挺好，但你可能会疑虑，参数self是什么。它指向对象本身。如果没有这个self，则所有方法都无法访问对象本身--要操作属性所属的对象。 ​ 执行以上程序输出结果为： MyClass 类的属性 i 为： 12345 MyClass 类的方法 f 输出为： hello world ​ 类有一个名为 __init__() 的特殊方法（构造方法），该方法在类实例化时会自动调用，像下面这样： def __init__(self): self.data = [] ​ 类定义了 __init__() 方法，类的实例化操作会自动调用 __init__() 方法。如下实例化类 MyClass，对应的 __init__() 方法就会被调用: x = MyClass() ​ 当然， __init__() 方法可以有参数，参数通过 __init__() 传递到类的实例化操作上。例如: #!/usr/bin/python3 class Complex: def __init__(self, realpart, imagpart): self.r = realpart self.i = imagpart x = Complex(3.0, -4.5) print(x.r, x.i) # 输出结果：3.0 -4.5 self代表类的实例，而非类 ​ 类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称, 按照惯例它的名称是 self。 class Test: def prt(self): print(self) print(self.__class__) t = Test() t.prt() ​ 以上实例执行结果为： __main__.Test ​ 从执行结果可以很明显的看出，self 代表的是类的实例，代表当前对象的地址，而 self.class 则指向类。 ​ self 不是 python 关键字，我们把他换成 runoob 也是可以正常执行的: class Test: def prt(runoob): print(runoob) print(runoob.__class__) t = Test() t.prt() ​ 以上实例执行结果为： __main__.Test 7. 类的方法 ​ 在类的内部，使用 def 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 self, 且为第一个参数，self 代表的是类的实例。 #!/usr/bin/python3 #类定义 class people: #定义基本属性 name = '' age = 0 #定义私有属性,私有属性在类外部无法直接进行访问 __weight = 0 #定义构造方法 def __init__(self,n,a,w): self.name = n self.age = a self.__weight = w def speak(self): print(\"%s 说: 我 %d 岁。\" %(self.name,self.age)) # 实例化类 p = people('runoob',10,30) p.speak() ​ 执行以上程序输出结果为： runoob 说: 我 10 岁。 ​ 默认情况下，可从外部访问对象的属性。有些程序员认为这没问题，但有些程序员则认为这违反了封装原则。它们认为应该对外部完全隐藏对象的状态（即不能从外部访问它们）。你可能会问，为何它们的立场如此极端呢？由每个对象管理自己的属性还不够吗？为何还要向外部隐藏属性？毕竟，如果能直接访问CloseObject（对象c所属的类）对象的属性name，就不需要创建方法setName和getName了。 ​ 关键在于其他的程序员可能（也不该知道）对象内部发生的情况。况且，CloseObject可能在对象修改其名称时向管理员发送电子邮件。这种功能可能包含在方法set_name中。但如果直接设置c.name，那这个逻辑可能不会触发，并不会发送电子邮件。为避免这类问题，可将属性设置为私有。私有属性不能从对象外部直接访问，而只能通过存储器（set，get）方法来访问。 ​ Python没有为私有属性提供直接的支持，而是要求程序员知道在什么情况下从外部修改属性是安全的。毕竟，你必须知道如何使用对象之后才能使用它。然而，通过某些小花招，可获得类似于私有属性的效果。 ​ 要让方或属性成为私有的（即不能从外部直接访问），只需要让其名称以两个下划线打头即可。 class Secretive: def __inaccessible(self): print(\"Bet you can't see me...\") def accessible(self): print(\"The secret message is : \") self.__inaccessible() s = Secretive() s.accessible() #可执行 s.inaccessible() #报错 ​ 以上代码运行结果如下： The secret message is : Bet you can't see me... Traceback (most recent call last): File \"D:/System Lib/Documents/2019-09-06/Secretive.py\", line 12, in s.inaccessible() AttributeError: 'Secretive' object has no attribute 'inaccessible' 8. 方法重写 ​ 如果你的父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法，实例如下： #!/usr/bin/python3 class Parent: # 定义父类 def myMethod(self): print ('调用父类方法') class Child(Parent): # 定义子类 def myMethod(self): print ('调用子类方法') c = Child() # 子类实例 c.myMethod() # 子类调用重写方法 super(Child,c).myMethod() #用子类对象调用父类已被覆盖的方法 ​ super() 函数是用于调用父类(超类)的一个方法。 ​ 执行以上程序输出结果为： 调用子类方法 调用父类方法 9. 类属性与方法 9.1 类的私有属性 ​ __private_attrs：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 self.__private_attrs。 9.2 类的方法 ​ 在类的内部，使用 def 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 self，且为第一个参数，self 代表的是类的实例。 ​ self 的名字并不是规定死的，也可以使用 this，但是最好还是按照约定是用 self。 9.3 类的私有方法 ​ __private_method：两个下划线开头，声明该方法为私有方法，只能在类的内部调用 ，不能在类的外部调用。self.__private_methods。 ​ 类的私有属性实例如下： #!/usr/bin/python3 class JustCounter: __secretCount = 0 # 私有变量 publicCount = 0 # 公开变量 def count(self): self.__secretCount += 1 self.publicCount += 1 print (self.__secretCount) counter = JustCounter() counter.count() counter.count() print (counter.publicCount) print (counter.__secretCount) # 报错，实例不能访问私有变量 ​ 执行以上程序输出结果为： 1 2 2 Traceback (most recent call last): File \"test.py\", line 16, in print (counter.__secretCount) # 报错，实例不能访问私有变量 AttributeError: 'JustCounter' object has no attribute '__secretCount' ​ 类的私有方法实例如下： #!/usr/bin/python3 class Site: def __init__(self, name, url): self.name = name # public self.__url = url # private def who(self): print('name : ', self.name) print('url : ', self.__url) def __foo(self): # 私有方法 print('这是私有方法') def foo(self): # 公共方法 print('这是公共方法') self.__foo() x = Site('菜鸟教程', 'www.runoob.com') x.who() # 正常输出 x.foo() # 正常输出 x.__foo() # 报错 ​ 以上实例执行结果： 9.4 类的专有方法 __init__ : 构造函数，在生成对象时调用 __del__ : 析构函数，释放对象时使用 __repr__ : 打印，转换 __setitem__ : 按照索引赋值 __getitem__: 按照索引获取值 __len__: 获得长度 __cmp__: 比较运算 __call__: 函数调用 __add__: 加运算 __sub__: 减运算 __mul__: 乘运算 __truediv__: 除运算 __mod__: 求余运算 __pow__: 乘方 10. 运算符重载 ​ Python同样支持运算符重载，我们可以对类的专有方法进行重载，实例如下： #!/usr/bin/python3 class Vector: def __init__(self, a, b): self.a = a self.b = b def __str__(self): return 'Vector (%d, %d)' % (self.a, self.b) def __add__(self,other): return Vector(self.a + other.a, self.b + other.b) v1 = Vector(2,10) v2 = Vector(5,-2) print (v1 + v2) ​ 以上代码执行结果如下所示: Vector(7,8) MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Python/Chapter15.html":{"url":"Python/Chapter15.html","title":"第十五章：异常","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 语法错误 2. 异常 3. 让事情沿着你指定的轨道出错 3.1 raise语句 3.2 自定义的异常类 4.捕获异常 4.1 不提供参数 4.2 多个except语句 4.3 一箭双雕 4.4 捕获对象 4.5 一网打尽 4.6 万事大吉时 4.7 最后 5. 异常处理 6. 抛出异常 7. 定义清理行为 8. 预定义的清理行为 9. 异常和函数 10. 不那么异常的情况 第十五章：异常 ​ 作为 Python 初学者，在刚学习 Python 编程时，经常会看到一些报错信息，在前面我们没有提及，这章节我们会专门介绍。Python 有两种错误很容易辨认：语法错误和异常。 1. 语法错误 ​ Python 的语法错误或者称之为解析错，是初学者经常碰到的，如下实例 >>>while True print('Hello world') File \"\", line 1, in ? while True print('Hello world') ^ SyntaxError: invalid syntax ​ 这个例子中，函数 print() 被检查到有错误，是它前面缺少了一个冒号（:）。 ​ 语法分析器指出了出错的一行，并且在最先找到的错误的位置标记了一个小小的箭头。 2. 异常 ​ 即便Python程序的语法是正确的，在运行它的时候，也有可能发生错误。运行期检测到的错误被称为异常。异常可能是错误（如视图除以零），也可能是通常不会发生的事。 ​ Python使用异常对象来表示异常对象，并且在遇到错误时引发异常。大多数的异常都不会被程序处理，都以错误信息的形式展现在这里: >>>10 * (1/0) Traceback (most recent call last): File \"\", line 1, in ? ZeroDivisionError: division by zero >>> 4 + spam*3 Traceback (most recent call last): File \"\", line 1, in ? NameError: name 'spam' is not defined >>> '2' + 2 Traceback (most recent call last): File \"\", line 1, in ? TypeError: Can't convert 'int' object to str implicitly ​ 异常以不同的类型出现，这些类型都作为信息的一部分打印出来: 例子中的类型有 ZeroDivisionError，NameError 和TypeError。 ​ 错误信息的前面部分显示了异常发生的上下文，并以调用栈的形式显示具体信息。 如果异常只用来显示错误信息，就没太大意思。但实际上，每个异常都是某个类的实例。你能以各种方式引发和捕获这些实例，从而逮住错误并采取措施，而不是放任整个程序失败。 3. 让事情沿着你指定的轨道出错 ​ 正如你所见，出现问题时，将自动引发异常。先来看看如何自主引发异常，还有如何创建异常，然后再学习如何处理这些异常。 3.1 raise语句 ​ 要引发异常，要使用raise语句，并将一个类（必须是Exception的子类）或实例作为参数，将类作为参数时，将会自动创建一个实例。 >>> raise Exception Traceback (most recent call last): File \"\", line 1, in raise Exception Exception >>> raise Exception('hyperdriver overload') Traceback (most recent call last): File \"\", line 1, in raise Exception('hyperdriver overload') Exception: hyperdriver overload ​ 以上例子中，第一个引发的是通用异常，没有指出出现了什么错误。而在第二个示例中，添加了错误消息。Python中有很多内置的异常类，下表中将介绍最重要的几个： 类名 描述 Exception 几乎所有的异常类都是从它派生出来的 AttributeError 引用属性或给它赋值失败时引发 OSError 操作系统不能执行指定的任务（如打开文件）时引发，有多个子类 IndexError 使用序列中不存在的索引时引发，为LookError的子类 KeyError 使用映射中不存在的键时引发，为LookError的子类 NameError 找不到名称（变量）时引发 SyntaxError 代码不正确时引发 TypeError 将内置操作或函数用于类型不正确的对象时引发 ValueError 将内置操作或函数用于这样的对象（其类型正确但包含的值不合适）时引发 ZeroDivisionError 在除法或求模运算中第二个参数为0时触发 3.2 自定义的异常类 ​ 虽然内置异常涉及的范围很广，能够满足很多需求，但有时候你可能想自己创建异常类。你可以通过创建一个新的异常类来拥有自己的异常。异常类继承自 Exception 类，可以直接继承，或者间接继承，例如: >>>class MyError(Exception): def __init__(self, value): self.value = value def __str__(self): return repr(self.value) >>> try: raise MyError(2*2) except MyError as e: print('My exception occurred, value:', e.value) My exception occurred, value: 4 >>> raise MyError('oops!') Traceback (most recent call last): File \"\", line 1, in ? __main__.MyError: 'oops!' ​ 在这个例子中，类 Exception 默认的 __init__() 被覆盖。 ​ 当创建一个模块有可能抛出多种不同的异常时，一种通常的做法是为这个包建立一个基础异常类，然后基于这个基础类为不同的错误情况创建不同的子类: class Error(Exception): \"\"\"Base class for exceptions in this module.\"\"\" pass class InputError(Error): \"\"\"Exception raised for errors in the input. Attributes: expression -- input expression in which the error occurred message -- explanation of the error \"\"\" def __init__(self, expression, message): self.expression = expression self.message = message class TransitionError(Error): \"\"\"Raised when an operation attempts a state transition that's not allowed. Attributes: previous -- state at beginning of transition next -- attempted new state message -- explanation of why the specific transition is not allowed \"\"\" def __init__(self, previous, next, message): self.previous = previous self.next = next self.message = message ​ 大多数的异常的名字都以\"Error\"结尾，就跟标准的异常命名一样。 4.捕获异常 ​ 前面说过，异常比较有趣的地方是可对其进行处理，通常称之为捕获异常。为此，可使用try/catch语句。假设你创建了一个简单程序：让用户输入两个数，再让它们相除。 >>> x = int(input('Enter the first number: ')) Enter the first number: 12 >>> y = int(input('Enter the second number: ')) Enter the second number: 13 >>> print(x/y) 0.9230769230769231 ​ 这个程序可以在用户输入合法输入时正常运行，但是，显然，当用户第二个参数输入0的时候，会引发异常，为了捕获这种异常并对错误进行处理（这里只是打印一条对用户更友好的错误消息），可如下重新编写程序： try: x = int(input('x = ')) y = int(input('y = ')) print(x/y) except ZeroDivisionError: print('The Second number can not be zero!') ​ 就本例而言，可能使用if语句来检查y的值好像更简单些。然而，如果使用这个程序执行的除法运算更多，怎每一个除法运算都需要一条if语句，二而使用try/catch的话，只需要一条错误处理程序，当然，这只是其中一条好处罢了。 ​ 异常从函数向外传播到调用函数的地方。如果此处也没有被捕获异常，则异常会向顶层传播。这意味着你可以使用try/catch来捕获他人所编写函数引发的异常。 4.1 不提供参数 ​ 捕获异常后，如果要重新引发它（即继续向上传播），可调用raise且不提供任何参数（当然也可以显示的额提供捕获到的异常）。 ​ 为说明这很有用，来看一条能抑制ZeroDivisionError的计算器类。如果启用了这种功能，计算器将打印一条错误消息，而不继续让异常传播。在与用户交互的会话中使用这个计算器时，抑制异常很有用，而在程序内部使用时，引发异常是更佳的选择。 class MuffledCalculator: muffled = False def calc(self,expr): try: return eval(expr) except ZeroDivisionError: if(self.muffled): print('Division by zero is illegal') else: raise 注意：发生零整除行为时，如果启用了“抑制”功能，犯法calc会隐式的返回None。换而言之，如果启用了抑制功能，就不应该依赖返回值。 ​ 下面将演示这个类的用法（包括启用和关闭了抑制功能的情形）： >>> calculator = MuffledCalculator() >>> calculator.calc('10/2') 5.0 >>> calculator.calc('10/0') Traceback (most recent call last): File \"\", line 1, in calculator.calc('10/0') File \"\", line 5, in calc return eval(expr) File \"\", line 1, in ZeroDivisionError: division by zero >>> calculator.muffled = True >>> calculator.calc('10/0') Division by zero is illegal ​ 如你所见，关闭抑制功能时，捕获了异常ZeroDivisionError，但继续向上传播它。 ​ 如无法处理异常，在except子句中使用不带参数的raise通常是不错的选择，但有时你可能引发别的异常。在这种情况下，导致进入except的语句将作为异常上下文存储起来，并出现在最终的错误消息中，如下所示： >>> try: 1/0 except ZeroDivisionError: raise ValueError Traceback (most recent call last): File \"\", line 2, in 1/0 ZeroDivisionError: division by zero During handling of the above exception, another exception occurred: Traceback (most recent call last): File \"\", line 4, in raise Valu ​ 在处理上述异常时，引发了一个新的异常，你可以使用raise...from000语句来提供自己的异常上下文，也可以使用None来禁用上下文。 >>> try: 1/0 except ZeroDivisionError: raise ValueError from None Traceback (most recent call last): File \"\", line 4, in raise ValueError from None ValueError 4.2 多个except语句 ​ 如果你运行前一节的程序，并在提示时输入一个非数字值，将引发另一种异常TypeError。 ​ 由于之前的程序except子句只捕获ZeroDivisionError，所以TypeError异常就成了漏网之鱼，从而导致程序终止。为同时捕获这种异常，可在try/catch语句中再添加一个except子语句： try: x = int(input('x = ')) y = int(input('y = ')) print(x/y) except ZeroDivisionError: print('The Second number can not be zero!') except TypeError: print('That is not a number,was it? ') ​ 现在想使用if语句来处理会更加困难。如何检查一个值是否能用于除法运算？方法有很多，而最佳的方法就是尝试将两个数相除，看看是否可行。 ​ 另外，注意到异常处理并不会导致代码混乱，而添加大量if语句用来检查各种可能的错误状态会导致代码可读性极差。 4.3 一箭双雕 ​ 如果要使用一个except子句捕获多种异常，可在一个元组指定这些异常，如下所示： try: x = int(input('x = ')) y = int(input('y = ')) print(x/y) except (ZeroDivisionError,TypeError,NameError): print('Your number were bogus!') ​ 在上述语句中，无论是用户输入字符串，或其他非数字，或输入的第二个数为0，都会打印同样的错误提示消息而不是报错。当然，打印出错误消息本身帮助并不大。另一种解决方案是不断的要求用户重新输入数字，直至能够执行除法运算为止。 ​ 在except语句中，异常两边的圆括号很重要。一种常见的错误是省略这些括号，这可能导致你不想看到的结果。 4.4 捕获对象 ​ 要在except语句中访问异常对象本身，可使用两个而不是一个参数。（请注意，即便是在你捕获多个异常时，也只向except提供一个参数--一个元组）需要让程序继续运行并记录错误（可能只是向用户显示）时，这很有用。以下是一个简单例子： try: x = int(input('x = ')) y = int(input('y = ')) print(x/y) except (ZeroDivisionError,TypeError,NameError) as e: print(e) ​ 在这个小程序中，except捕获多种异常，但是由于你同时显式地捕获了异常对象本身，因此可以将异常对象打印出来，让用户知道发生了什么情况。 4.5 一网打尽 ​ 即使程序处理了好几种异常，还是可能有一些漏网之鱼。例如，对于前面执行除法运算的程序如果用户在提示时不输入任何内容就按回车键，将会出现一条错误消息，还有一些相关问题出现在什么地方的信息（栈跟踪），如下所示： Trace (most recent call last): ... ValueError:invalid literal for int() with base 10:'' ​ 这种异常未被try/except语句捕获，这理所当然，因为你没有预测到这种问题，也没有采取相应的措施。在这些情况下，与其他使用并非要捕获这些异常的try/except语句将它们隐藏起来，还不如让程序马上崩溃，因为这样你就知道什么地方出错了。 ​ 然而，如果你就是要使用一段代码捕获所有的异常，只需要在except语句中不指定任何异常类即可。 try: x = int(input('x = ')) y = int(input('y = ')) print(x/y) except: print('something wrong happened...') ​ 现在，用户想怎么做都可以。然而像这种捕获所有的异常很危险，因为这不仅会隐藏你有心理准备的错误，还会隐藏你没有考虑过的错误。这还将捕获用户时使用Ctrl+C终止执行的企图，调用函数sys.exit来终止执行的企图等。在大多数情况下，更好的选择是使用except Exception as e并对异常对象进行检查。这样做将让不是从Exception派生而来的为数不多的异常成为漏网之鱼，其中包括SystemExit和KeyboardInterrupt，因为它们是从BaseException（Exception的超类）派生而来的。 4.6 万事大吉时 ​ 在有些情况下，有没有出现异常时执行一个代码块很有用。为此，可像条件语句和循环一样，给try/except语句添加一个else语句： try: print('A simple task') except: print('What?Something went wrong?') else: print('Ah ... It went as planned.') ​ 如果你运行这些代码，输出将如下： A Simple task Ah ... It went as planned ​ 通过使用else语句，可以实现循环输入： while True: try: x = int(input('x = ')) y = int(input('y = ')) print(x/y) except: print('Invalid input,Please try again!') else: break ​ 以上代码仅在没有引发异常的情况下才会跳出循环（通过由else子语句中的break语句实现）。换而言之，只要出现错误，程序就会要求用户重新输入。 ​ 前面说过，一种更佳的替代方案是使用空的except子句来捕获所有属于类Exception（或其子类）的异常。你不能完全确认这将捕获所有异常，因为try/except语句中的代码可能使用旧式的字符串异常或引发并非从Exception派生出来的的异常。然而，如果使用except Exception as e，则可以实现如下功能： while True: try: x = int(input('x = ')) y = int(input('y = ')) value = x / y print('x/y is ',value) except Exception as e: print('Invalid input:',e) print('Please try again!') else: break 4.7 最后 ​ 最后，还有finally子句，可用于在发生异常时执行清理工作。这个子句是与try子句配套的。 x = None try: x = 1/0 finally: print('cleaning up ...') del x ​ 在上述实例中，不管try子句中发生什么异常，都将会执行finally子句。为何在try子句之前初始化x呢？因为不这样做，ZeroDivisionError将导致根本没有机会给它赋值，进而导致finally子句中对其执行del时引发未捕获的异常。 ​ 如果运行以上错误，它将在执行清理工作后崩溃。虽然使用del来删除变量是相当愚蠢的清理措施，但finally子句非常适合用于确保文件或网络套接字等得以关闭。以下是一个完整例子： try: 1/0 except NameError: print('Unknown variable') else: print('That went well!') finally: print('Cleaning up') 5. 异常处理 ​ 以下例子中，让用户输入一个合法的整数，但是允许用户中断这个程序（使用 Control-C或者操作系统提供的方法）。用户中断的信息会引发一个 KeyboardInterrupt 异常。 >>>while True: try: x = int(input(\"Please enter a number: \")) break except ValueError: print(\"Oops! That was no valid number. Try again \") ​ try语句按照如下方式工作； 首先，执行try子句（在关键字try和关键字except之间的语句） 如果没有异常发生，忽略except子句，try子句执行后结束。 如果在执行try子句的过程中发生了异常，那么try子句余下的部分将被忽略。如果异常的类型和 except 之后的名称相符，那么对应的except子句将被执行。最后执行 try 语句之后的代码。 如果一个异常没有与任何的except匹配，那么这个异常将会传递给上层的try中。 ​ 一个 try 语句可能包含多个except子句，分别来处理不同的特定的异常。最多只有一个分支会被执行。 ​ 处理程序将只针对对应的try子句中的异常进行处理，而不是其他的 try 的处理程序中的异常。 ​ 一个except子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组，例如: except (RuntimeError, TypeError, NameError): pass ​ 最后一个except子句可以忽略异常的名称，它将被当作通配符使用。你可以使用这种方法打印一个错误信息，然后再次把异常抛出。 import sys try: f = open('myfile.txt') s = f.readline() i = int(s.strip()) except OSError as err: print(\"OS error: {0}\".format(err)) except ValueError: print(\"Could not convert data to an integer.\") except: print(\"Unexpected error:\", sys.exc_info()[0]) raise ​ try except 语句还有一个可选的else子句，如果使用这个子句，那么必须放在所有的except子句之后。这个子句将在try子句没有发生任何异常的时候执行。例如: for arg in sys.argv[1:]: try: f = open(arg, 'r') except IOError: print('cannot open', arg) else: print(arg, 'has', len(f.readlines()), 'lines') f.close() ​ 使用 else 子句比把所有的语句都放在 try 子句里面要好，这样可以避免一些意想不到的、而except又没有捕获的异常。 异 常处理并不仅仅处理那些直接发生在try子句中的异常，而且还能处理子句中调用的函数（甚至间接调用的函数）里抛出的异常。例如: >>>def this_fails(): x = 1/0 >>> try: this_fails() except ZeroDivisionError as err: print('Handling run-time error:', err) Handling run-time error: int division or modulo by zero 6. 抛出异常 ​ Python 使用 raise 语句抛出一个指定的异常。例如: >>>raise NameError('HiThere') Traceback (most recent call last): File \"\", line 1, in ? NameError: HiThere ​ raise 唯一的一个参数指定了要被抛出的异常。它必须是一个异常的实例或者是异常的类（也就是 Exception 的子类）。 ​ 如果你只想知道这是否抛出了一个异常，并不想去处理它，那么一个简单的 raise 语句就可以再次把它抛出。 >>>try: raise NameError('HiThere') except NameError: print('An exception flew by!') raise An exception flew by! Traceback (most recent call last): File \"\", line 2, in ? NameError: HiThere 7. 定义清理行为 ​ try 语句还有另外一个可选的子句，它定义了无论在任何情况下都会执行的清理行为。 例如: >>>try: ... raise KeyboardInterrupt ... finally: ... print('Goodbye, world!') ... Goodbye, world! Traceback (most recent call last): File \"\", line 2, in KeyboardInterrupt ​ 以上例子不管 try 子句里面有没有发生异常，finally 子句都会执行。 ​ 如果一个异常在 try 子句里（或者在 except 和 else 子句里）被抛出，而又没有任何的 except 把它截住，那么这个异常会在 finally 子句执行后被抛出。 ​ 下面是一个更加复杂的例子（在同一个 try 语句里包含 except 和 finally 子句）: >>>def divide(x, y): try: result = x / y except ZeroDivisionError: print(\"division by zero!\") else: print(\"result is\", result) finally: print(\"executing finally clause\") >>> divide(2, 1) result is 2.0 executing finally clause >>> divide(2, 0) division by zero! executing finally clause >>> divide(\"2\", \"1\") executing finally clause Traceback (most recent call last): File \"\", line 1, in ? File \"\", line 3, in divide TypeError: unsupported operand type(s) for /: 'str' and 'str' 8. 预定义的清理行为 ​ 一些对象定义了标准的清理行为，无论系统是否成功的使用了它，一旦不需要它了，那么这个标准的清理行为就会执行。 ​ 这面这个例子展示了尝试打开一个文件，然后把内容打印到屏幕上: for line in open(\"myfile.txt\"): print(line, end=\"\") ​ 以上这段代码的问题是，当执行完毕后，文件会保持打开状态，并没有被关闭。 ​ 关键词 with 语句就可以保证诸如文件之类的对象在使用完之后一定会正确的执行他的清理方法: with open(\"myfile.txt\") as f: for line in f: print(line, end=\"\") ​ 以上这段代码执行完毕后，就算在处理过程中出问题了，文件 f 总是会关闭。 9. 异常和函数 ​ 异常和函数有着天然的联系。如果不处理函数中引发的异常。它将向上传播到调用函数的地方。如果此处还未得到处理，异常将会继续传播，直至到达主程序（全局作用域）。如果主程序中也没有异常处理程序，程序将终止并显示栈跟踪消息。 >>> def faulty(): raise Exception('Something is wrong!') >>> def ignore_exception(): faulty() >>> def handle_exception(): try: faulty() except: print('Exception handled!') >>> ingore_exception() Traceback(most recent call last): File '', line 1, in ? File '', line 2, in ignore_exception File '', line 2, in faulty Exception:Something is wrong >>> handle_exception() Exception handled ​ 如你所见，faulty中引发的异常依次从faulty和ignore_exception向外传播，最终导致显示一条栈跟踪消息。调用handle_exception时，异常最终传播到handle_exception，并被这里的try/except语句处理。 10. 不那么异常的情况 ​ 如果你只想发出警告，指出情况偏离了正规，可使用模块warnings中的warn。 >>> from warnings import warn >>> warn(\"I've got a bad feeling about this.\") Warning (from warnings module): File \"D:/System Lib/Documents/2019-09-06/MuffledCalculator.py\", line 1 class MuffledCalculator: UserWarning: I've got a bad feeling about this. ​ 警告只显示一次。如果再次运行最后一行代码，什么事都不会发生。 ​ 如果其他代码在使用你的模块，可使用模块warnings中的函数filterwarnings来抑制你发出的警告（或特定类型的警告），并指出要采取的措施，如“error”或“ignore”。 >>> from warnings import filterwarnings >>> filterwarnings(\"ignore\") >>> warn('Anyone out there?') >>> filterwarnings(\"error\") >>> warn(\"Something is very wrong!\") Traceback (most recent call last): File \"\", line 1, in warn(\"Something is very wrong!\") ​ 如你所见，引发的异常为UserWarning。发出警告时，可指定要引发的异常（即警告类别），但必须是Warning的子类。如果将警告转换为错误，将使用你指定的异常。另外，还可根据错误来过滤特定类型的警告。 >>> filterwarnings('error') >>> warn(\"This function is really old...\", DeprecationWarning) Traceback (most recent call last): File \"\", line 1, in warn(\"This function is really old...\", DeprecationWarning) DeprecationWarning: This function is really old... >>> filterwarnings('ignore', category=DeprecationWarning) >>> warn(\"Another deprecation warning\",DeprecationWarning) >>> warn('Something else.') Traceback (most recent call last): File \"\", line 1, in warn('Something else.') UserWarning: Something else. ​ 除以上基本用途外，模块warnings还提供一些高级功能。如果你对此感兴趣，请参阅参考手册。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"Python/Chapter16.html":{"url":"Python/Chapter16.html","title":"第十六章：开箱即用","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 1. 模块 1.1 模块就是程序 1.2 为何只导入一次 1.3 模块是用来下定义的 1.3.1 在模块中定义函数 1.3.2 在模块中添加测试代码 1.3.3 让模块可用 1.3.3.1 将模块放在正确的位置 1.3.3.2 告诉解释器去哪里查找 1.3.4 包 2. 探索模块 2.1 模块包含什么 2.1.1 使用dir 2.1.2 变量all 2.2 使用help获取帮助 2.3 文档 2.4 使用源代码 3.标准库：一些深受欢迎的模块 3.1 sys 3.2 os 3.3 fileinput 第十六章：开箱即用 ​ Python不仅语言核心十分强大，还提供了其他工具以供使用。标准安装包含一组称为标注库（standard library）的模块，你见过其中的一些（如math和cmath），但还有其他很多。 1. 模块 ​ 你已经知道如何创建和执行程序（或脚本），还知道如何使用import将函数从外部模块导入到程序中。 >>> import math >>> math.sin(0) 0.0 ​ 下面来看看如何编写自己的模块 1.1 模块就是程序 ​ 任何Python程序都可作为模块导入。假设你编写了一个简单的helloworld程序，并将其保存在文件hello.py中，这个文件的名称（不包含扩展名.py）将成为模块的名称。 #hello.py print(\"Hello,World!\") ​ 文件的存储位置也很重要。这里假设这个文件存储在目录C:\\python(Windows)~/python(UNIX/macOS)中。要告诉解释器去哪里查找这个模块，可执行如下命令（以Windows目录为例）： >>> import sys >>> sys.path.append('C:/python') 提示：在UNIX中，不能直接将字符串'~/python'附加到sys.path末尾，而必须使用完成的路径（如’/home/yourusername/python‘）。如果你要自动创建完整的路径，可使用sys.path.expanduser('~/python')。 ​ 这告诉解释器，除了通常将查找的位置外，还应到目录C:\\python中查找这个模块。这样做后，就可以导入这个模块（它存储在文件C:\\python\\hello.py）。 >>> import hello Hello,World! 注意：当你导入模块时，可能会发现其所在目录中除源代码文件外，还新建了一个名为 pycache 的子目录（在旧版本的Python中，是扩展名为.pyc的文件）。这个目录包含处理过后的文件，Python能够更高效地处理它们。以后再导入这个模块时，如果.py文件未发生变化，Python将导入处理后的文件，否则将重新生成处理后的文件。删除目录 pacache _不会有任何坏处，因为必要时会重新创建它。 ​ 如你所示，导入这个模块时，执行了其中的代码。但是如果再次导入它，什么事情都不会发生。为何没有再执行其中的代码呢？因为模块并不是用来执行操作（如打印文本）的，而是用于定义变量，函数，类等。鉴于定义只需要做一次，因此导入模块多次和导入一次的效果相同。 1.2 为何只导入一次 ​ 在大多数情况下，只导入一次是重要的优化，且在下述特殊情况下显得尤为专业：两个模块彼此导入对方。 ​ 在很多情况下，你可能编写两个这样的模块：需要彼此访问对方的函数和类才能正确的发挥作用。例如，你可能创建了两个模块clientdb和billing，分别包含客户数据库和记账系统的代码。客户数据库可能包含对记账系统的调用（如每月自动向客户发送账单），而记账系统可能需要访问客户数据库的功能才能正确的完成记账。 ​ 在这里，如果每个模块都可导入多次，就会出现问题。模块clientdb导入binding，而binding又导入clientdb，结果可想而知：最终将形成无穷的导入循环（还记得无穷递归么？）。然而，由于第二次导入什么都不会发生，这种循环被打破。 ​ 而如果一定要重新加载模块，可使用模块importlib中的函数reload，它接受一个此参数（要重新加载的模块），并返回重新加载的模块。如果在程序运行时修改了模块，并希望这种修改反映到程序中，这将很有用。要重新加载前述简单的模块hello，可像下面这样做： >>> import importlib >>> hello = importlib.reload(hello) Hello,world! ​ 这里假设hello已导入（一次）。通过将函数reload的结果赋给hello，用重新加载的版本替换了以前的版本。由于打印出了问候语，说明这里确实是导入了这个模块。 ​ 通过实例化模块bar中的类Foo创建对象x后，如果重新加载模块bar，并不会重新重新创建x指向的对象，即x依然是（来自旧版bar的）旧版Foo的对象。要让x指向基于重新加载的模块中的Foo创建的对象，需要重新创建它。 1.3 模块是用来下定义的 ​ 模块是首次导入程序时执行。这看似有点用，但是用处不大。让模块值得被创建的原因在于它们像类一样，有自己的作用域。这意味着模块中定义的类和函数以及对其进行赋值的变量都将成为模块的属性。 1.3.1 在模块中定义函数 ​ 假设你编写了一个简单的模块，并将其存储在文件hello2.py中。另外，假设你将这个文件放在Python解释器能够找到的地方。模块代码如下： #hello2.py def hello(): print('Hello,World!') ​ 现在可以像下面这样导入它： >>>import hello2 ​ 这将会执行这个模块，也就是说这个模块的作用域内定义函数hello，因此可以像下面这样访问这个函数： >>>hello2.hello() Hello,World! ​ 在模块的全局作用域内定义的名称都可像上面这样访问。为何要这样做呢？为何不在主程序中定义一切呢？主要还是为了代码重用。通过将代码放到模块中，就可在多个程序中使用它们。这意味着如果你编写了一个出色的客户端数据库，并将其放在模块clientdb中，就可在记账时以及任何需要访问客户数据的程序中使用它。如果没有放在独立的模块中，就需要每个这样的程序中重新编写它。因此，要让代码是可重用的，务必将其模块化，这也与抽象密切相关。 1.3.2 在模块中添加测试代码 ​ 模块用于定义函数和类等，但是有些情况下（实际上是经常），添加一些测试代码来检查情况是否符合预期且很有用。例如，如果要确认函数hello管用，你可能将模块hello2重写为代码： #hello3.py def hello(): print('Hello,World!') # 测试 hello() ​ 这看似合理：如果将这个模块作为普通程序运行，将发现它运行正常。然而，如果在另一个程序中将其作为模块导入，以便能够使用函数hello，也将默认执行该测试代码，就像第一个hello模块一样。 >>>import hello3 Hello,World! >>>hello3.hello() Hello,World! ​ 这样的效果一般不是预期的结果。要避免这种行为，关键在于检查模块是作为程序运行还是被导入另一个程序。为此，需要使用变量__name__。 >>> __name__ '__main__' >>>hello3.__name__ 'hello3' ​ 如你所见，在主程序中（包括解释器的交互式提示符），变量__name__的值是__main __，而在导入的模块中，这个变量被设置为该模块的名称。因此，要让模块中的测试代码的行为更合理，可将其放在一条if语句中，一个包含有条件地执行地测试代码的模块如下所示： # hello4.py def hello(): print('Hello,World!') def test(): hello() if __name__ == '__main__': test() ​ 如果将这个模块作为程序运行，将执行函数hello；如果导入它，，其行为将更像普通模块一样。 >>>import hello4 >>>hello4.hello() Hello,World! ​ 如你所见，我将测试代码放在了test中。原本可以将这些代码直接放在if语句中但通过将其放在一个独立的测试函数中，可在程序中导入模块并对其进行测试。 >>>hello4.test() Hello,World! ​ 如果要编写更详尽的测试代码，将其放在一个独立的程序可能是个不错的主意。 1.3.3 让模块可用 ​ 在前面的示例中，我修改了sys.path。sys.path包含了一个目录（表示为字符串）列表，解释器将在这些目录中查找模块。然而，通常你不想这样做。最理想的情况是sys.path一开始就包含正确的目录（你的模块所在的目录）。为此有两种办法：1，将模块放在正确的位置；2，告诉编译器到哪里去查找。接下来的两节将分别讨论这两种解决方案。如果要让别人能够轻松使用你的模块，那就是另外一码事了。Python打包技术一度日益复杂，各自为政，尽管现已被Python Packaging Authority控制并简化，但需要学习的还是有很多。这里不深入介绍这个棘手的主题，建议参阅“Python打包用户指南”：packaging.python.org。 1.3.3.1 将模块放在正确的位置 ​ 将模块放在正确的位置很容易，只需要找出Python解释器到哪里去查找模块，再将文件放在这些地方即可。在你使用的计算机中，如果Python解释器是管理员安装的，而你没有管理员权限，就可能无法将模块保存在Python使用的目录中，则需要使用方法二。 ​ 你可能还记得，可在模块sys的变量python中找到目录列表（即搜索路径）。 >>> import sys,pprint >>> pprint.pprint(sys.path) ['', 'C:\\\\Users\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36\\\\Lib\\\\idlelib', 'C:\\\\Users\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36\\\\python36.zip', 'C:\\\\Users\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36\\\\DLLs', 'C:\\\\Users\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36\\\\lib', 'C:\\\\Users\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36', 'C:\\\\Users\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36\\\\lib\\\\site-packages'] 提示：如果要打印的数据结构太大，一行容不下，可使用模块pprint中的函数pprint（而不是普通的print语句）。pprint是一个卓越的打印函数，能够更妥善的打印输出。 ​ 当然，你得到的打印结果可能与这里显示的不完全相同。这里的要点是，每个字符串都表示一个位置，如果要让解释器找到这些模块，可将其放在任何一个位置中。虽然放在这里显示的任何一个位置都行，但目录site-packages是最佳的选择，因为它就是用来放置模块的。请在计算机中查看sys.path，找到目录site-packages，并将模块保存在这里。 ​ 只要模块位于类似于site-packages这样的地方，所有程序就都能导入它。 1.3.3.2 告诉解释器去哪里查找 ​ 将模块放在正确的位置可能不是合适的解决方案，其中原因有很多： 不希望Python解释器的目录中充斥着你编写的模块； 没有必要的权限，无法将文件保存在Python解释器的目录中； 像将模块放在其他地方； ​ 最重要的是，如果将模块放在其他地方，就必须告诉解释器去哪里查找。前面说过，要告诉解释器去哪里去查找模块，办法之一是直接修改sys.path，但这种做法不常见。标准做法是将模块所属的目录包含在环境变量PYTHONPATH中。 ​ 环境变量PYTHONPATH中的内容随操作系统而异，但它基本上类似于sys.path，也是一个目录列表。环境变量并不是Python解释器的一部分，而是操作系统的一部分。大致而言，它们类似于Python变量，但是在Python解释器外面设置的。 ​ 如果你使用的是bash shell（在大多数类UNIX系统，macOS和较新的Windows版本中都有），就可以使用如下命令将'~/python'附加到环境变量PYTHONPATH末尾： export PYTHONPATH=$PYTHONPATH:~/python ​ 如果要对所有启动的shell都执行这个命令，可将其添加到主目录中的.bashrc文件中。 ​ 除使用环境变量PYTHONPATH外，还可以使用路径配置文件，这些文件的扩展名为.pth，位于一些特殊目录中，包含在要添加到sys.path中的目录。 1.3.4 包 ​ 为组织模块，可将其编组为包（package）。包其实就是另一种模块，但有趣的是它们可包含其他的模块。模块存储在扩展名为.py的文件中，而包则是一个目录。要被Python视为包，目录必须包含文件__init__.py。如果像普通模块一样导入包，文件__init__.py的内容就将是包的内容。例如，如果有一个名为constants的包，而文件constants/__init__.py包含语句PI = 3.14，就可以像下面这样做： import constants print(constants.PI) ​ 要将模块加入包中，只需将模块文件放在包目录中即可。你还可以在包中嵌入其他包。例如，要创建一个名为drawing的包，其中包含模块shapes和colors，需要创建如下所示的文件和目录（UNIX路径）： 文件/目录 描 述 ~/python/ PYTHONPATH中的目录 ~/python/drawing/ 包目录（包drawing） ~/python/drawing/ init .py 包代码（模块drawing） ~/python/drawing/colors.py 模块colors ~/python/drawing/shapes.py 模块shapes ​ 完成以上这些准备工作后，下面的语句都是合法的： import drawing #（1）导入drawing包 import drawing.colors #（2）导入drawing包中的模块colors from drawing import shapes #（3）导入模块shapes ​ 执行第一条语句后，便可以使用目录drawing中文件__init__.py的内容，但是不能使用模块shapes和colors的内容。执行第二条语句后便可以使用模块colors，但只能通过全限定名drawing.colors来使用。执行第三条语句，便可以使用简化名（即shapes）来使用模块shapes。 ​ 请注意，这些语句只是实例，并不用像这里做的那样，先导入包再导入其中的模块，换而言之，完全可以只是单独使用第二条或第三条语句。 2. 探索模块 ​ 介绍一些标准库模块之前，先说说如何探索这些模块，这是一个很有用的技能，因为在你的Python程序员职业生涯中，将遇到很多很有用的模块，而这里无法一一介绍。当前的标准库很大，足以编写专著来论述（市场上也的确有这样的专著），而且还在不断增大。 ​ 每个新Python版本都新增了模块，通常还会对一些既有模块进行细微的修改和改进。另外，你在网上肯定会找到一些有用的模块。如果能快速而轻松地理解它们，编程工作将有趣的多。 2.1 模块包含什么 ​ 要探索模块，最直接地方法就是使用Python解释器进行研究。为此，首先需要将模块导入。假设你听说有一个名为copy的标准模块。 >>>import copy ​ 没有引发异常，说明的确有这样的模块。但这个模块是做什么用的？它都包含些什么？ 2.1.1 使用dir ​ 要查明模块包含哪些东西，可使用函数dir，它列出对象的所有属性（对于模块，它列出所有的函数，类，变量等）。如果将dir(copy)的结果打印出来，将是一个很长的名称列表。而在这些名称中，有几个以下划线打头。根据约定，这意味着它们并非供外部使用。有鉴于此，我们使用一个简单的列表推导将这些名称过滤掉。 >>> import copy >>> dir(copy) ['Error', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_copy_dispatch', '_copy_immutable', '_deepcopy_atomic', '_deepcopy_dict', '_deepcopy_dispatch', '_deepcopy_list', '_deepcopy_method', '_deepcopy_tuple', '_keep_alive', '_reconstruct', 'copy', 'deepcopy', 'dispatch_table', 'error'] >>> [n for n in dir(copy) if not n.startswith('_')] ['Error', 'copy', 'deepcopy', 'dispatch_table', 'error'] ​ 如上所示，结果包含dir（copy）返回的不以下划线打头的名称，这笔完整清单要好懂的多。 2.1.2 变量__all__ ​ 在前一节中，使用了简单的列表推导来猜测可在模块copy中看到哪些内容，然而可直接查询这个模块来获得正确的答案。你可能注意到了，在dir(copy)返回的完整清单中，包含名称__all__。这个变量包含一个列表，它与前面使用列表推导创建的列表类似，但是在模块内部设置的。下面看看这个列表包含的内容： >>> copy.__all__ ['Error', 'copy', 'deepcopy'] ​ 前面的猜测不算太离谱，只是多了几个并非供用户使用的名称。这个__all__列表是怎么来的呢？为何要提供他呢？第一个问题很容易解决：它是在模块copy中像下面这样设置的（以下代码是直接从copy.py复制而来的）。 __all__ = ['Error', 'copy', 'deepcopy'] ​ 为何要提供它呢？旨在定义模块的共有接口。具体来说，它告诉解释器从这个模块导入所有的名称意味着什么。因此，如果你使用如下代码： from copy import * ​ 将只能得到变量__all__列出的3个函数。要导入PyStringMap，必须显式地：导入copy并使用copy.PyStringMap；或者使用from copy import PyStringMap。 ​ 编写模块时，像这样设置__all__ 很有用。因为模块可能包含大量其他程序不需要地变量，函数和类，比较周全地做法是把它们过滤掉。如果不设置 __all__，则会在以import *方式导入时，导入所有不以下划线打头的全局名称。 2.2 使用help获取帮助 ​ 前面一直巧妙地利用你熟悉的各种Python函数和特殊属性来探索模块copy。对于这种探索来说，交互式解释器是一个强大的工具，因为使用它来探索模块时，探索的深度仅受限于你对Python语言的掌握程度。然而，有一个标准函数可提供你通常需要的所有信息，它就是help。下面来尝试使用它获取有关copy的信息： >>> help(copy.copy) Help on function copy in module copy: copy(x) Shallow copy operation on arbitrary Python objects. See the module's __doc__ string for more info. >>> ​ 上述帮助信息指出，函数copy只接受一个参数x，且执行的是浅复制。在帮助信息中，还提到了模块的__doc__字符串。__doc__ 字符串是什么呢？还记得文档字符串么？文档字符串就是在函数开头编写的字符串，用于对函数进行说明，而函数的属性__doc__可能包含这个字符串。从前面的帮助信息可知，模块也可能有文档字符串（它们位于模块的开头）而类也可能如此，即位于类的开头。 ​ 实际上，前面的帮助信息是从函数copy的文档字符串中提取的： >>> print(copy.copy.__doc__) Shallow copy operation on arbitrary Python objects. See the module's __doc__ string for more info. ​ 相比于直接查看文档字符串，使用help的优点是可以获取到更多信息，如函数的特征标（即它接收的参数）。请尝试对模块copy本身调用help，看看将显示哪些信息。这将打印大量的信息，包括对copy和deepcopy之间差别的详细讨论。 ​ 大致而言，deepcopy(x)创建x的属性的副本并依此类推；而copy(x)只复制x，并将副本的属性关联到x的属性值。 2.3 文档 ​ 显然，文档是有关模块信息的自然来源。之所以到现在才讨论文档，是因为查看模块本身要快得多。例如，你可能还想知道range的参数是什么？在这种情况下，与其在Python图书或标准Python文档中查找对range的描述，不如直接检查这个函数。 >>> print(range.__doc__) range(stop) -> range object range(start, stop[, step]) -> range object Return an object that produces a sequence of integers from start (inclusive) to stop (exclusive) by step. range(i, j) produces i, i+1, i+2, ..., j-1. start defaults to 0, and stop is omitted! range(4) produces 0, 1, 2, 3. These are exactly the valid indices for a list of 4 elements. When step is given, it specifies the increment (or decrement). ​ 这样就获得了函数range的准确描述。另外，由于通常在编程时想了解函数的功能，而且此时Python解释器很可能正在运行，因此获取这些信息只需几秒钟。 ​ 然而，并非所有模块和函数都有详尽的文档字符串（虽然应该如此），且有时需要有关工作原理的更详尽描述。从网上下载的大多数模块都有对应的文档。就学习Python编程而言，最有用的文档是Python库参考手册，它描述了标准库中的所有模块。在需要熟悉一些有关Python的事实时，十有八九都能在这里找到。 ​ 其他标准文档，如“Python入门指南”和“Python语言参考手册”也是如此。所有的文档都可在Python网站（https://docs.python.org）上找到。 2.4 使用源代码 ​ 在大多数情况下，前面讨论的探索技巧都够用了。但要真正理解Python语言，可能需要了解一些不阅读源代码就无法了解的事情。事实上，要学习Python，阅读源代码是除动手编写代码外的最佳方式。 ​ 实际上，阅读源代码应该不成问题，但源代码在哪里呢？假设你要阅读标准模块copy的代码，可以在是什么地方找到呢？一种方法是像解释器那样通过sys.path来查找，但更快捷的方式是查看模块的特性__file__。 >>> print(copy.__file__) C:\\Users\\AppData\\Local\\Programs\\Python\\Python36\\lib\\copy.py ​ 正是如上所示，我们找到了这个.py文件的路径！这样就可以在代码编辑器（如IDLE）中打开copy.py，并开始研究其工作原理。如果列出的文件名以.pyc结尾，可打开以.py结尾的对应文件。 警告：在文本编辑器中打开标准库文件时，存在不小心修改它的风险。这可能会破坏文件。因此关闭文件时，千万不要保存你可能对其所作的修改。 ​ 请注意，有些模块的源代码你完全无法读懂。它们可能时解释器的组成部分（如模块sys），还可能是使用C语言编写的。 3.标准库：一些深受欢迎的模块 ​ 在Python中，短语“开箱即用”（batteries included）最初是由Frank Stajano提出的，指的是Python丰富的标准库。安装Python后，你就免费获得了大量很有用的模块。鉴于有很多方式可以获取有关这些模块的详细信息，这里也不打算提供完整的参考手册，而只是描述几个作者喜欢的模块，以激发读者的探索兴趣。 3.1 sys ​ 模块sys让你能够访问与Python解释器紧密相关的变量和函数，下表简单罗列了一些： 函数/变量 描 述 argv 命令行参数，包括脚本名 exit([arg]) 退出当前程序，可通过可选参数指定返回值和错误消息 modules 一个字典，将模块名映射到加载的模块 path 一个列表，包含要在其中查找模块的目录的名称 platform 一个平台标识符，如sunos5和win32 stdin 标准输入流----一个类似于文件的对象 stdout 标准输出流----一个类似于文件的对象 stderr 标准错误流----一个类似于文件的对象 ​ 变量sys.argv包含传递给Python解释器的参数，其中包括脚本名。 ​ 函数sys.exit退出当前程序，你还可以向它提供一个整数，指出程序是否成功，这是一种UNIX约定。在大多数情况下，使用该参数的默认值0，即成功。也可以向它提供一个字符串，这个字符串将成为错误消息，对用户找出程序终止的原因很有帮助。在这种情况下，程序退出时显示指定的错误消息以及一个表示失败的编码。 ​ 映射sys.modules将模块名映射到模块（仅限于当前已导入模块）。 ​ 变量sys.path在本章前面讨论过，它是一个字符串列表，其中都得每个字符串都是一个目录名，执行import语句时将在这些目录中查找模块。 ​ 变量sys.platform（一个字符串）是运行解释器的“平台”名称。这可能是表示操作系统的名称，也可能表示其他平台类型的名称（如Java虚拟机 java1.4.0，如果你运行的是Jython）。 ​ 变量sys.stdin, sys.stdout, sys.stderr是类似于文件的流对象，表示标准的UNIX概念：标准输入，标准输出和标注错误。简单的来说，Python从sys.stdin获取输入（例如用于input中），并将输出打印到sys.stdout。 ​ 举个例子，来看看按相反顺序打印参数的问题。从命令行调用Python脚本时，你可能指定一些参数，也就是所谓的命令行参数。这些参数将放在列表sys.argv中，其中sys.argv[0]为Python脚本名。按相反的顺序打印这些参数非常容易，如下所示： #reverseargs.py import sys args = sys.argv[1:] args.reverse() print(\" \".join(args)) ​ 如你所见，我们创建了一个sys.argv的副本。也可修改sys.argv，但一般而言，不这样做更安全，因为程序的其他部分可能依赖于包含原始参数的sys.argv。另外，注意到我跳过了sys.argv的第一个元素，即脚本的名称。我是用args.reverse()反转这个列表，但不能打印这个操作的返回值，因为它就地修改列表并返回None。以下是另一种解决方案： print(' '.join(reversed(sys.argv[1:]))) ​ 最后，为美化输出，这里使用了字符串的方法join。下面尝试运行这个程序（假设为bash shell）： $ python reverseargs.py this is a test test a is this 3.2 os ​ 模块os让你能够访问多个操作系统服务。它包含的内容很多，以下会列出几个最有用的函数和变量： 函数/变量 描 述 environ 包含环境变量的映射 system(command) 在子shell中执行操作系统命令 sep 路径中使用的分隔符 pathsep 分割不同路径的分隔符 linesep 行分隔符（’\\n‘,'\\r','\\r\\n'） urandom(n) 返回n个字节的强加密随机数据 ​ 除此之外，os及其子模块os.path还包含多个查看，创建和删除目录及文件的函数，以及一些操作路径函数（例如，os.path.split和os.path.join让你在大多数情况下都可忽略os.pathsep）。有关这个模块的信息，可参阅标准库文档。在标准库文档中，还可以找到有关模块pathlib的描述，它提供了一个面向对象的路径操作接口。 ​ 映射os.environ包含本章前面所介绍的环境变量。例如，要访问环境变量PYTHONPATH，可使用表达式os.environ('PYTHONPATH')。这个映射也可用于修改环境变量，但并非所有的平台都支持这样做。 ​ 函数os.system用于运行外部程序。还有其他用于执行外部程序的函数，如execv和popen。前者退出Python解释器，并将控制权交给被执行的程序，而后者创建一个到程序的连接（这个连接类似于文件）。而模块subprocess则融合了模块os.system以及函数execv和popen功能，详情请参阅标准库文档。 ​ 变量os.sep是用于路径名的分隔符。在UNIX（或者macOS的命令行Python版本中），标准分隔符为/。在windows中，标准分隔符为\\\\ (双反斜杠在Python语法中表示单个反斜杠)。在旧式macOS中，标准分隔符为：。在某些平台中，os.altsep包含代替路径分隔符，如Windows中的/。 ​ 可使用os.pathsep来组合多条路径，就像PYTHONPATH中那样。pathsep用于分割不同的路径名： UNIX/macOS中为： Windows中为; ​ 变量os.linesep是用于文本文件中的行分隔符：在UNIX/OS X中为单个换行符（\\n），在Windows中为回车和换行符（\\r\\n）。 ​ 函数urandom使用随系统而异的“真正”（至少是强加密）随机源。如果平台没有提供这样的随机源，将会引发NotImplementedError异常。 ​ 例如，看看启动Web浏览器的问题。命令system可用于执行任何外部程序，这在UNIX等环境中很有用，因为你可从命令行执行程序或命令来列出目录的内容，发送电子右键等等，它还可以启动图形用户界面程序，如Web浏览器。 ​ 在UNIX中，假设/usr/bin/firefox处有浏览器，可像下面这样做： os.system('/usr/bin/firefox') ​ 在Windows中，可以像这样做： os.system(r'C:\\\"Program Files(x86)\"\\\"Mozilla Firefox\"\\firefox.exe') ​ 请注意，这里用引号将Program Files(x86)和Mozilla Firefox括起来。如果这里不这样做，底层shell将受阻于空白处（对于PYTHONPATH的路径，也必须这样做）。另外，这里必须使用反斜杠，因为Windows shell无法识别反斜杠。 ​ 如果你执行这个命令，将发现浏览器试图打开名为Files“/Mozilla”（空白后面的命令部分）的网站。另外，如果你在IDLE视图执行这个命令，将出现一个DOS窗口，待这个窗口关闭浏览器会随后启动。这样的流程看起来并不是那么理想。 ​ 显然，另一个函数更适合完成这项任务，它就是Windows特有的函数os.startfile。 os.startfile(r'C:\\Program Files(x86)\\Mozilla Firefox\\firefox.exe') ​ 如你所见，os.startfile接收一个普通路径，即便该路径包含空白也没关系（无需像os.system示例那样用引号括起来）。请注意，在Windows中，使用os.system或os.startfile启动外部程序后，当前Python程序将继续运行；而在UNIX中，当前Python程序将等待命令os.system结束。 ​ 函数os.system可用于完成很多任务，但就启动Web浏览器这项任务而言，有一种更佳的解决方案：使用模块webbrowser。这个模块包含一个名为open的函数，让你能够启动Web浏览器并打开指定的URL。例如，要让程序在Web浏览器中打开Python官网，可以这样做： >>> import webbrowser >>> webbrowser.open(\"https://www.python.org\") True 3.3 fileinput ​ 模块fileinput让你能够轻松地迭代一系列文本文件中地所有行。使用UNIX命令行，你可以这样调用脚本： $ python some_script.py file1.txt file2.txt file3.txt ​ 就能够依次迭代文件file1.txt到file3.txt中的行。你还可以在UNIX管道中对使用UNIX标准命令cat提供标准输入（sys.stdin）的行进行迭代。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "},"GLOSSARY.html":{"url":"GLOSSARY.html","keywords":"","body":"TreeviewCopyright © all right reserved, powered by aleen42 Git GitBook GitLab GitHub Markdown Typora Java Python SQL Glossary Git ​ Git(读音为/gɪt/。)，是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。Git 是Linus Torvalds为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。 GitBook ​ GitBook是一个基于 Node.js的命令行工具，可使用Github/Git和 Markdown来制作精美的电子书，GitBook 并非关于 Git 的教程。 GitLab ​ GitLab是由GitLabInc.开发，使用MIT许可证的基于网络的Git仓库管理工具，且具有wiki和issue跟踪功能。使用[Git]作为代码管理工具，并在此基础上搭建起来的web服务。 GitHub ​ GitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名GitHub。 Markdown ​ Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 Typora ​ Typora是一款轻便简洁的Markdown编辑器，支持即时渲染技术，这也是与其他Markdown编辑器最显著的区别。即时渲染使得你写Markdown就想是写Word文档一样流畅自如，不像其他编辑器的有编辑栏和显示栏。 Java ​ Java由Sun Microsystems公司于1995年5月推出的高级程序设计语言，被特意设计用于互联网的分布式环境。Java具有类似于[C++]语言的“形式和感觉”，但它要比[C++语言]更易于使用，而且在编程时彻底采用了一种“以对象为导向”的方式。使用Java编写的应用程序，既可以在一台单独的电脑上运行，也可以被分布在一个网络的服务器端和客户端运行。 Python ​ Python是一种跨平台、解释型、面向对象、动态数据类型的高级程序设计语言。是一种面向对象的动态类型语言，最初被设计用于编写自动化脚本(shell)，随着版本的不断更新和语言新功能的添加，越来越多被用于独立的、大型项目的开发。由 Guido van Rossum 于 1989 年底发明，第一个公开发行版发行于 1991 年。 SQL ​ SQL即结构化查询语言(Structured Query Language)简称，是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统)。 MU_zjm®Designer, Developer & overall web enthusiastCopyright © MU_zjm all right reserved, powered by MU_zjm!created by MU_zjm 2019-08-28 12:00:00 "}}